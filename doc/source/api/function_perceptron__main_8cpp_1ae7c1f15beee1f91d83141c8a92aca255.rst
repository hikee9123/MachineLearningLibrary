.. _exhale_function_perceptron__main_8cpp_1ae7c1f15beee1f91d83141c8a92aca255:

Function BINDING_EXAMPLE("The training data given with the "+PRINT_PARAM_STRING("training")+" option may have class labels as its last dimension (so, if the training " "data is in CSV format, labels should be the last column)., " "the "+PRINT_PARAM_STRING("labels")+" parameter may be used to specify " "a separate matrix of labels." "\" "All these options make it easy to train a, and then re-use that" " perceptron for later classification. The invocation below trains a " "perceptron on "+PRINT_DATASET("training_data")+" with labels "+PRINT_DATASET("training_labels")+", and saves the model to "+PRINT_MODEL("perceptron_model")+"." "\"+PRINT_CALL("perceptron", "training", "training_data", "labels", "training_labels", "output_model", "perceptron_model")+"\" ", this model can be re-used for classification on the test data "+PRINT_DATASET("test_data")+". The example below does precisely, " "saving the predicted classes to "+PRINT_DATASET("predictions")+"." "\"+PRINT_CALL("perceptron", "input_model", "perceptron_model", "test", "test_data", "predictions", "predictions")+"\" "Note that all of the options may be specified at once:predictions may be " "calculated right after training a, and model training can occur even" " if an existing perceptron model is passed with the "+PRINT_PARAM_STRING("input_model")+" parameter., note that the " "number of classes and the dimensionality of all data must match. So you " "cannot pass a perceptron model trained on 2 classes and then re-train with" " a 4-class dataset., attempting classification on a " "3-dimensional dataset with a perceptron that has been trained on 8 " "dimensions will cause an error.")


- Defined in :ref:`file__home_aakash_mlpack_src_mlpack_methods_perceptron_perceptron_main.cpp`


Function Documentation
----------------------


.. doxygenfunction:: BINDING_EXAMPLE("The training data given with the "+PRINT_PARAM_STRING("training")+" option may have class labels as its last dimension (so, if the training " "data is in CSV format, labels should be the last column)., " "the "+PRINT_PARAM_STRING("labels")+" parameter may be used to specify " "a separate matrix of labels." "\" "All these options make it easy to train a, and then re-use that" " perceptron for later classification. The invocation below trains a " "perceptron on "+PRINT_DATASET("training_data")+" with labels "+PRINT_DATASET("training_labels")+", and saves the model to "+PRINT_MODEL("perceptron_model")+"." "\"+PRINT_CALL("perceptron", "training", "training_data", "labels", "training_labels", "output_model", "perceptron_model")+"\" ", this model can be re-used for classification on the test data "+PRINT_DATASET("test_data")+". The example below does precisely, " "saving the predicted classes to "+PRINT_DATASET("predictions")+"." "\"+PRINT_CALL("perceptron", "input_model", "perceptron_model", "test", "test_data", "predictions", "predictions")+"\" "Note that all of the options may be specified at once:predictions may be " "calculated right after training a, and model training can occur even" " if an existing perceptron model is passed with the "+PRINT_PARAM_STRING("input_model")+" parameter., note that the " "number of classes and the dimensionality of all data must match. So you " "cannot pass a perceptron model trained on 2 classes and then re-train with" " a 4-class dataset., attempting classification on a " "3-dimensional dataset with a perceptron that has been trained on 8 " "dimensions will cause an error.")
