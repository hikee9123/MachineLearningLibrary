.. _exhale_function_kde__main_8cpp_1a03f2646b4542f61abadeba911b25d170:

Function BINDING_LONG_DESC("This program performs a Kernel Density Estimation. KDE is a " "non-parametric way of estimating probability density function. " "For each query point the program will estimate its probability density " "by applying a kernel function to each reference point. The computational " "complexity of this is O(N^2) where there are N query points and N " "reference, but this implementation will typically see better " "performance as it uses an approximate dual or single tree algorithm for " "acceleration." "\" "Dual or single tree optimization avoids many barely relevant " ", so it is " "an approximate computation. You can specify the maximum relative error " "tolerance for each query value with "+PRINT_PARAM_STRING("rel_error")+" as well as the maximum absolute error tolerance with the parameter "+PRINT_PARAM_STRING("abs_error")+". This program runs using an Euclidean " "metric. Kernel function can be selected using the "+PRINT_PARAM_STRING("kernel")+" option. You can also choose what which " "type of tree to use for the dual-tree algorithm with "+PRINT_PARAM_STRING("tree")+". It is also possible to select whether to " "use dual-tree algorithm or single-tree algorithm using the "+PRINT_PARAM_STRING("algorithm")+" option." "\" "Monte Carlo estimations can be used to accelerate the KDE estimate when " "the Gaussian Kernel is used. This provides a probabilistic guarantee on " "the the error of the resulting KDE instead of an absolute guarantee." "To enable Monte Carlo, the "+PRINT_PARAM_STRING("monte_carlo")+" flag can be, and success " "probability can be set with the "+PRINT_PARAM_STRING("mc_probability")+" option. It is possible to set the initial sample size for the Monte " "Carlo estimation using "+PRINT_PARAM_STRING("initial_sample_size")+". This implementation will only consider a, as a candidate for the " "Monte Carlo, if its number of descendant nodes is bigger than " "the initial sample size. This can be controlled using a coefficient that " "will multiply the initial sample size and can be set using "+PRINT_PARAM_STRING("mc_entry_coef")+". To avoid using the same amount of " "computations an exact approach would, this program recurses the tree " "whenever a fraction of the amount of the node 's descendant points have " "already been computed. This fraction is set using "+PRINT_PARAM_STRING("mc_break_coef")+".")


- Defined in :ref:`file__home_aakash_mlpack_src_mlpack_methods_kde_kde_main.cpp`


Function Documentation
----------------------


.. doxygenfunction:: BINDING_LONG_DESC("This program performs a Kernel Density Estimation. KDE is a " "non-parametric way of estimating probability density function. " "For each query point the program will estimate its probability density " "by applying a kernel function to each reference point. The computational " "complexity of this is O(N^2) where there are N query points and N " "reference, but this implementation will typically see better " "performance as it uses an approximate dual or single tree algorithm for " "acceleration." "\" "Dual or single tree optimization avoids many barely relevant " ", so it is " "an approximate computation. You can specify the maximum relative error " "tolerance for each query value with "+PRINT_PARAM_STRING("rel_error")+" as well as the maximum absolute error tolerance with the parameter "+PRINT_PARAM_STRING("abs_error")+". This program runs using an Euclidean " "metric. Kernel function can be selected using the "+PRINT_PARAM_STRING("kernel")+" option. You can also choose what which " "type of tree to use for the dual-tree algorithm with "+PRINT_PARAM_STRING("tree")+". It is also possible to select whether to " "use dual-tree algorithm or single-tree algorithm using the "+PRINT_PARAM_STRING("algorithm")+" option." "\" "Monte Carlo estimations can be used to accelerate the KDE estimate when " "the Gaussian Kernel is used. This provides a probabilistic guarantee on " "the the error of the resulting KDE instead of an absolute guarantee." "To enable Monte Carlo, the "+PRINT_PARAM_STRING("monte_carlo")+" flag can be, and success " "probability can be set with the "+PRINT_PARAM_STRING("mc_probability")+" option. It is possible to set the initial sample size for the Monte " "Carlo estimation using "+PRINT_PARAM_STRING("initial_sample_size")+". This implementation will only consider a, as a candidate for the " "Monte Carlo, if its number of descendant nodes is bigger than " "the initial sample size. This can be controlled using a coefficient that " "will multiply the initial sample size and can be set using "+PRINT_PARAM_STRING("mc_entry_coef")+". To avoid using the same amount of " "computations an exact approach would, this program recurses the tree " "whenever a fraction of the amount of the node 's descendant points have " "already been computed. This fraction is set using "+PRINT_PARAM_STRING("mc_break_coef")+".")
