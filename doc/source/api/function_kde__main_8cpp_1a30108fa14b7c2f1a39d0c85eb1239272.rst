.. _exhale_function_kde__main_8cpp_1a30108fa14b7c2f1a39d0c85eb1239272:

Function BINDING_EXAMPLE("For, the following will run KDE using the data in "+PRINT_DATASET("ref_data")+" for training and the data in "+PRINT_DATASET("qu_data")+" as query data. It will apply an Epanechnikov " "kernel with a 0.2 bandwidth to each reference point and use a KD-Tree for " "the dual-tree optimization. The returned predictions will be within 5% of " "the real KDE value for each query point." "\"+PRINT_CALL("kde", "reference", "ref_data", "query", "qu_data", "bandwidth", 0.2, "kernel", "epanechnikov", "tree", "kd-tree", "rel_error", 0.05, "predictions", "out_data")+"\" "the predicted density estimations will be stored in "+PRINT_DATASET("out_data")+"." "\ "If no "+PRINT_PARAM_STRING("query")+" is, then KDE will be " "computed on the "+PRINT_PARAM_STRING("reference")+" dataset." "\" "It is possible to select either a reference dataset or an input model " "but not both at the same time. If an input model is selected and " "parameter values are not set(e.g. "+PRINT_PARAM_STRING("bandwidth")+") then default parameter values will be used." "\\" "In addition to the last program, it is also possible to activate " "Monte Carlo estimations if a Gaussian kernel is used. This can provide " "faster, but the KDE will only have a probabilistic guarantee of " "meeting the desired error bound(instead of an absolute guarantee). The " "following example will run KDE using a Monte Carlo estimation when " "possible. The results will be within a 5% of the real KDE value with a " "95% probability. Initial sample size for the Monte Carlo estimation will " "be 200 points and a node will be a candidate for the estimation only when " "it contains 700(i.e. 3.5 \*200) points. If a node contains 700 points and " "420(i.e. 0.6 \*700) have already been, then the algorithm will " "recurse instead of keep sampling." "\\"+)


- Defined in :ref:`file__home_aakash_mlpack_src_mlpack_methods_kde_kde_main.cpp`


Function Documentation
----------------------


.. doxygenfunction:: BINDING_EXAMPLE("For, the following will run KDE using the data in "+PRINT_DATASET("ref_data")+" for training and the data in "+PRINT_DATASET("qu_data")+" as query data. It will apply an Epanechnikov " "kernel with a 0.2 bandwidth to each reference point and use a KD-Tree for " "the dual-tree optimization. The returned predictions will be within 5% of " "the real KDE value for each query point." "\"+PRINT_CALL("kde", "reference", "ref_data", "query", "qu_data", "bandwidth", 0.2, "kernel", "epanechnikov", "tree", "kd-tree", "rel_error", 0.05, "predictions", "out_data")+"\" "the predicted density estimations will be stored in "+PRINT_DATASET("out_data")+"." "\ "If no "+PRINT_PARAM_STRING("query")+" is, then KDE will be " "computed on the "+PRINT_PARAM_STRING("reference")+" dataset." "\" "It is possible to select either a reference dataset or an input model " "but not both at the same time. If an input model is selected and " "parameter values are not set(e.g. "+PRINT_PARAM_STRING("bandwidth")+") then default parameter values will be used." "\\" "In addition to the last program, it is also possible to activate " "Monte Carlo estimations if a Gaussian kernel is used. This can provide " "faster, but the KDE will only have a probabilistic guarantee of " "meeting the desired error bound(instead of an absolute guarantee). The " "following example will run KDE using a Monte Carlo estimation when " "possible. The results will be within a 5% of the real KDE value with a " "95% probability. Initial sample size for the Monte Carlo estimation will " "be 200 points and a node will be a candidate for the estimation only when " "it contains 700(i.e. 3.5 *200) points. If a node contains 700 points and " "420(i.e. 0.6 *700) have already been, then the algorithm will " "recurse instead of keep sampling." "\\"+)
