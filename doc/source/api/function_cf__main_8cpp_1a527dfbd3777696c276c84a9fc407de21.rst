.. _exhale_function_cf__main_8cpp_1a527dfbd3777696c276c84a9fc407de21:

Function BINDING_LONG_DESC("This program performs collaborative " "filtering (CF) on the given dataset. Given a list of, item and " ", " "the program will perform a matrix decomposition and then can perform a " "series of actions related to collaborative filtering., the " "program can load an existing saved CF model with the "+PRINT_PARAM_STRING("input_model")+" parameter and then use that model " "to provide recommendations or predict values." "\" "The input matrix should be a 3-dimensional matrix of, where the " "first dimension is the, the second dimension is the, and the " "third dimension is that user 's rating of that item. Both the users and " "items should be numeric, not names. The indices are assumed to " "start from 0." "\" "A set of query users for which recommendations can be generated may be " "specified with the "+PRINT_PARAM_STRING("query")+" parameter;" ", recommendations may be generated for every user in the " "dataset by specifying the "+PRINT_PARAM_STRING("all_user_recommendations")+" parameter. In " ", the number of recommendations per user to generate can be " "specified with the "+PRINT_PARAM_STRING("recommendations")+" " ", and the number of similar users(the size of the neighborhood) " "to be considered when generating recommendations can be specified with " "the "+PRINT_PARAM_STRING("neighborhood")+" parameter." "\" "For performing the matrix, the following optimization " "algorithms can be specified via the "+PRINT_PARAM_STRING("algorithm")+" parameter:" "\ " - 'RegSVD' -- Regularized SVD using a SGD optimizer\" - 'NMF' -- Non-negative matrix factorization with alternating least " "squares update rules\" " - 'BatchSVD' -- SVD batch learning\" " - 'SVDIncompleteIncremental' -- SVD incomplete incremental learning\" " - 'SVDCompleteIncremental' -- SVD complete incremental learning\" " - 'BiasSVD' -- Bias SVD using a SGD optimizer\" " - 'SVDPP' -- SVD++using a SGD optimizer\" "\\" "The following neighbor search algorithms can be specified via"+" the "+PRINT_PARAM_STRING("neighbor_search")+" parameter:" "\" " - 'cosine' -- Cosine Search Algorithm\" " - 'euclidean' -- Euclidean Search Algorithm\" " - 'pearson' -- Pearson Search Algorithm\" "\\" "The following weight interpolation algorithms can be specified via"+" the "+PRINT_PARAM_STRING("interpolation")+" parameter:" "\" " - 'average' -- Average Interpolation Algorithm\" " - 'regression' -- Regression Interpolation Algorithm\" " - 'similarity' -- Similarity Interpolation Algorithm\" "\\" "The following ranking normalization algorithms can be specified via"+" the "+PRINT_PARAM_STRING("normalization")+" parameter:" "\" " - 'none' -- No Normalization\" " - 'item_mean' -- Item Mean Normalization\" " - 'overall_mean' -- Overall Mean Normalization\" " - 'user_mean' -- User Mean Normalization\" " - 'z_score' -- Z-Score Normalization\" "\" "A trained model may be saved to with the "+PRINT_PARAM_STRING("output_model")+" output parameter.")


- Defined in :ref:`file__home_aakash_mlpack_src_mlpack_methods_cf_cf_main.cpp`


Function Documentation
----------------------


.. doxygenfunction:: BINDING_LONG_DESC("This program performs collaborative " "filtering (CF) on the given dataset. Given a list of, item and " ", " "the program will perform a matrix decomposition and then can perform a " "series of actions related to collaborative filtering., the " "program can load an existing saved CF model with the "+PRINT_PARAM_STRING("input_model")+" parameter and then use that model " "to provide recommendations or predict values." "\" "The input matrix should be a 3-dimensional matrix of, where the " "first dimension is the, the second dimension is the, and the " "third dimension is that user 's rating of that item. Both the users and " "items should be numeric, not names. The indices are assumed to " "start from 0." "\" "A set of query users for which recommendations can be generated may be " "specified with the "+PRINT_PARAM_STRING("query")+" parameter;" ", recommendations may be generated for every user in the " "dataset by specifying the "+PRINT_PARAM_STRING("all_user_recommendations")+" parameter. In " ", the number of recommendations per user to generate can be " "specified with the "+PRINT_PARAM_STRING("recommendations")+" " ", and the number of similar users(the size of the neighborhood) " "to be considered when generating recommendations can be specified with " "the "+PRINT_PARAM_STRING("neighborhood")+" parameter." "\" "For performing the matrix, the following optimization " "algorithms can be specified via the "+PRINT_PARAM_STRING("algorithm")+" parameter:" "\ " - 'RegSVD' -- Regularized SVD using a SGD optimizer\" - 'NMF' -- Non-negative matrix factorization with alternating least " "squares update rules\" " - 'BatchSVD' -- SVD batch learning\" " - 'SVDIncompleteIncremental' -- SVD incomplete incremental learning\" " - 'SVDCompleteIncremental' -- SVD complete incremental learning\" " - 'BiasSVD' -- Bias SVD using a SGD optimizer\" " - 'SVDPP' -- SVD++using a SGD optimizer\" "\\" "The following neighbor search algorithms can be specified via"+" the "+PRINT_PARAM_STRING("neighbor_search")+" parameter:" "\" " - 'cosine' -- Cosine Search Algorithm\" " - 'euclidean' -- Euclidean Search Algorithm\" " - 'pearson' -- Pearson Search Algorithm\" "\\" "The following weight interpolation algorithms can be specified via"+" the "+PRINT_PARAM_STRING("interpolation")+" parameter:" "\" " - 'average' -- Average Interpolation Algorithm\" " - 'regression' -- Regression Interpolation Algorithm\" " - 'similarity' -- Similarity Interpolation Algorithm\" "\\" "The following ranking normalization algorithms can be specified via"+" the "+PRINT_PARAM_STRING("normalization")+" parameter:" "\" " - 'none' -- No Normalization\" " - 'item_mean' -- Item Mean Normalization\" " - 'overall_mean' -- Overall Mean Normalization\" " - 'user_mean' -- User Mean Normalization\" " - 'z_score' -- Z-Score Normalization\" "\" "A trained model may be saved to with the "+PRINT_PARAM_STRING("output_model")+" output parameter.")
