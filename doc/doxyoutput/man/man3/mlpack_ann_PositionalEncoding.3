.TH "PositionalEncoding< InputDataType, OutputDataType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PositionalEncoding< InputDataType, OutputDataType > \- Positional Encoding injects some information about the relative or absolute position of the tokens in the sequence\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPositionalEncoding\fP ()"
.br
.RI "Create \fBPositionalEncoding\fP object\&. "
.ti -1c
.RI "\fBPositionalEncoding\fP (const size_t embedDim, const size_t maxSequenceLength)"
.br
.RI "Create the \fBPositionalEncoding\fP layer object using the specified parameters\&. "
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &, const arma::Mat< eT > &gy, arma::Mat< eT > &g)"
.br
.RI "Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards trough f\&. "
.ti -1c
.RI "OutputDataType const  & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "InputDataType const  & \fBEncoding\fP () const"
.br
.RI "Get the positional encoding vector\&. "
.ti -1c
.RI "template<typename eT > void \fBForward\fP (const arma::Mat< eT > &input, arma::Mat< eT > &output)"
.br
.RI "Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. "
.ti -1c
.RI "InputDataType const  & \fBInputParameter\fP () const"
.br
.RI "Get the input parameter\&. "
.ti -1c
.RI "InputDataType & \fBInputParameter\fP ()"
.br
.RI "Modify the input parameter\&. "
.ti -1c
.RI "size_t \fBInputShape\fP () const"
.br
.ti -1c
.RI "OutputDataType const  & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::PositionalEncoding< InputDataType, OutputDataType >"
Positional Encoding injects some information about the relative or absolute position of the tokens in the sequence\&. 

The input and the output have the same shape: \fC(embedDim * maxSequenceLength, batchSize)\fP\&. The embeddings are stored consequently\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 37 of file positional_encoding\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBPositionalEncoding\fP ()"

.PP
Create \fBPositionalEncoding\fP object\&. 
.SS "\fBPositionalEncoding\fP (const size_t embedDim, const size_t maxSequenceLength)"

.PP
Create the \fBPositionalEncoding\fP layer object using the specified parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIembedDim\fP The length of the embedding vector\&. 
.br
\fImaxSequenceLength\fP Number of tokens in each sequence\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Backward (const arma::Mat< eT > &, const arma::Mat< eT > & gy, arma::Mat< eT > & g)"

.PP
Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards trough f\&. Using the results from the feed forward pass\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (input) The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "OutputDataType const& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 89 of file positional_encoding\&.hpp\&.
.SS "OutputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 91 of file positional_encoding\&.hpp\&.
.SS "InputDataType const& Encoding () const\fC [inline]\fP"

.PP
Get the positional encoding vector\&. 
.PP
Definition at line 94 of file positional_encoding\&.hpp\&.
.SS "void Forward (const arma::Mat< eT > & input, arma::Mat< eT > & output)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "InputDataType const& InputParameter () const\fC [inline]\fP"

.PP
Get the input parameter\&. 
.PP
Definition at line 79 of file positional_encoding\&.hpp\&.
.SS "InputDataType& InputParameter ()\fC [inline]\fP"

.PP
Modify the input parameter\&. 
.PP
Definition at line 81 of file positional_encoding\&.hpp\&.
.SS "size_t InputShape () const\fC [inline]\fP"

.PP
Definition at line 96 of file positional_encoding\&.hpp\&.
.PP
References PositionalEncoding< InputDataType, OutputDataType >::serialize()\&.
.SS "OutputDataType const& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 84 of file positional_encoding\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 86 of file positional_encoding\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by PositionalEncoding< InputDataType, OutputDataType >::InputShape()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
