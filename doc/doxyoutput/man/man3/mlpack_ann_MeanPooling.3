.TH "MeanPooling< InputDataType, OutputDataType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MeanPooling< InputDataType, OutputDataType > \- Implementation of the \fBMeanPooling\fP\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMeanPooling\fP ()"
.br
.RI "Create the \fBMeanPooling\fP object\&. "
.ti -1c
.RI "\fBMeanPooling\fP (const size_t kernelWidth, const size_t kernelHeight, const size_t strideWidth=1, const size_t strideHeight=1, const bool floor=true)"
.br
.RI "Create the \fBMeanPooling\fP object using the specified number of units\&. "
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &, const arma::Mat< eT > &gy, arma::Mat< eT > &g)"
.br
.RI "Ordinary feed backward pass of a neural network, using 3rd-order tensors as input, calculating the function f(x) by propagating x backwards through f\&. "
.ti -1c
.RI "OutputDataType const  & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "bool \fBDeterministic\fP () const"
.br
.RI "Get the value of the deterministic parameter\&. "
.ti -1c
.RI "bool & \fBDeterministic\fP ()"
.br
.RI "Modify the value of the deterministic parameter\&. "
.ti -1c
.RI "bool const  & \fBFloor\fP () const"
.br
.RI "Get the value of the rounding operation\&. "
.ti -1c
.RI "bool & \fBFloor\fP ()"
.br
.RI "Modify the value of the rounding operation\&. "
.ti -1c
.RI "template<typename eT > void \fBForward\fP (const arma::Mat< eT > &input, arma::Mat< eT > &output)"
.br
.RI "Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. "
.ti -1c
.RI "size_t const  & \fBInputHeight\fP () const"
.br
.RI "Get the input height\&. "
.ti -1c
.RI "size_t & \fBInputHeight\fP ()"
.br
.RI "Modify the input height\&. "
.ti -1c
.RI "size_t \fBInputSize\fP () const"
.br
.RI "Get the input size\&. "
.ti -1c
.RI "size_t const  & \fBInputWidth\fP () const"
.br
.RI "Get the intput width\&. "
.ti -1c
.RI "size_t & \fBInputWidth\fP ()"
.br
.RI "Modify the input width\&. "
.ti -1c
.RI "size_t \fBKernelHeight\fP () const"
.br
.RI "Get the kernel height\&. "
.ti -1c
.RI "size_t & \fBKernelHeight\fP ()"
.br
.RI "Modify the kernel height\&. "
.ti -1c
.RI "size_t \fBKernelWidth\fP () const"
.br
.RI "Get the kernel width\&. "
.ti -1c
.RI "size_t & \fBKernelWidth\fP ()"
.br
.RI "Modify the kernel width\&. "
.ti -1c
.RI "size_t const  & \fBOutputHeight\fP () const"
.br
.RI "Get the output height\&. "
.ti -1c
.RI "size_t & \fBOutputHeight\fP ()"
.br
.RI "Modify the output height\&. "
.ti -1c
.RI "OutputDataType const  & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "size_t \fBOutputSize\fP () const"
.br
.RI "Get the output size\&. "
.ti -1c
.RI "size_t const  & \fBOutputWidth\fP () const"
.br
.RI "Get the output width\&. "
.ti -1c
.RI "size_t & \fBOutputWidth\fP ()"
.br
.RI "Modify the output width\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.ti -1c
.RI "size_t \fBStrideHeight\fP () const"
.br
.RI "Get the stride height\&. "
.ti -1c
.RI "size_t & \fBStrideHeight\fP ()"
.br
.RI "Modify the stride height\&. "
.ti -1c
.RI "size_t \fBStrideWidth\fP () const"
.br
.RI "Get the stride width\&. "
.ti -1c
.RI "size_t & \fBStrideWidth\fP ()"
.br
.RI "Modify the stride width\&. "
.ti -1c
.RI "size_t \fBWeightSize\fP () const"
.br
.RI "Get the size of the weights\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::MeanPooling< InputDataType, OutputDataType >"
Implementation of the \fBMeanPooling\fP\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 33 of file mean_pooling\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBMeanPooling\fP ()"

.PP
Create the \fBMeanPooling\fP object\&. 
.SS "\fBMeanPooling\fP (const size_t kernelWidth, const size_t kernelHeight, const size_t strideWidth = \fC1\fP, const size_t strideHeight = \fC1\fP, const bool floor = \fCtrue\fP)"

.PP
Create the \fBMeanPooling\fP object using the specified number of units\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkernelWidth\fP Width of the pooling window\&. 
.br
\fIkernelHeight\fP Height of the pooling window\&. 
.br
\fIstrideWidth\fP Width of the stride operation\&. 
.br
\fIstrideHeight\fP Width of the stride operation\&. 
.br
\fIfloor\fP Set to true to use floor method\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Backward (const arma::Mat< eT > &, const arma::Mat< eT > & gy, arma::Mat< eT > & g)"

.PP
Ordinary feed backward pass of a neural network, using 3rd-order tensors as input, calculating the function f(x) by propagating x backwards through f\&. Using the results from the feed forward pass\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (input) The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "OutputDataType const& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 84 of file mean_pooling\&.hpp\&.
.SS "OutputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 86 of file mean_pooling\&.hpp\&.
.SS "bool Deterministic () const\fC [inline]\fP"

.PP
Get the value of the deterministic parameter\&. 
.PP
Definition at line 140 of file mean_pooling\&.hpp\&.
.SS "bool& Deterministic ()\fC [inline]\fP"

.PP
Modify the value of the deterministic parameter\&. 
.PP
Definition at line 142 of file mean_pooling\&.hpp\&.
.SS "bool const& Floor () const\fC [inline]\fP"

.PP
Get the value of the rounding operation\&. 
.PP
Definition at line 135 of file mean_pooling\&.hpp\&.
.SS "bool& Floor ()\fC [inline]\fP"

.PP
Modify the value of the rounding operation\&. 
.PP
Definition at line 137 of file mean_pooling\&.hpp\&.
.SS "void Forward (const arma::Mat< eT > & input, arma::Mat< eT > & output)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "size_t const& InputHeight () const\fC [inline]\fP"

.PP
Get the input height\&. 
.PP
Definition at line 94 of file mean_pooling\&.hpp\&.
.SS "size_t& InputHeight ()\fC [inline]\fP"

.PP
Modify the input height\&. 
.PP
Definition at line 96 of file mean_pooling\&.hpp\&.
.SS "size_t InputSize () const\fC [inline]\fP"

.PP
Get the input size\&. 
.PP
Definition at line 109 of file mean_pooling\&.hpp\&.
.SS "size_t const& InputWidth () const\fC [inline]\fP"

.PP
Get the intput width\&. 
.PP
Definition at line 89 of file mean_pooling\&.hpp\&.
.SS "size_t& InputWidth ()\fC [inline]\fP"

.PP
Modify the input width\&. 
.PP
Definition at line 91 of file mean_pooling\&.hpp\&.
.SS "size_t KernelHeight () const\fC [inline]\fP"

.PP
Get the kernel height\&. 
.PP
Definition at line 120 of file mean_pooling\&.hpp\&.
.SS "size_t& KernelHeight ()\fC [inline]\fP"

.PP
Modify the kernel height\&. 
.PP
Definition at line 122 of file mean_pooling\&.hpp\&.
.SS "size_t KernelWidth () const\fC [inline]\fP"

.PP
Get the kernel width\&. 
.PP
Definition at line 115 of file mean_pooling\&.hpp\&.
.SS "size_t& KernelWidth ()\fC [inline]\fP"

.PP
Modify the kernel width\&. 
.PP
Definition at line 117 of file mean_pooling\&.hpp\&.
.SS "size_t const& OutputHeight () const\fC [inline]\fP"

.PP
Get the output height\&. 
.PP
Definition at line 104 of file mean_pooling\&.hpp\&.
.SS "size_t& OutputHeight ()\fC [inline]\fP"

.PP
Modify the output height\&. 
.PP
Definition at line 106 of file mean_pooling\&.hpp\&.
.SS "OutputDataType const& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 79 of file mean_pooling\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 81 of file mean_pooling\&.hpp\&.
.SS "size_t OutputSize () const\fC [inline]\fP"

.PP
Get the output size\&. 
.PP
Definition at line 112 of file mean_pooling\&.hpp\&.
.SS "size_t const& OutputWidth () const\fC [inline]\fP"

.PP
Get the output width\&. 
.PP
Definition at line 99 of file mean_pooling\&.hpp\&.
.SS "size_t& OutputWidth ()\fC [inline]\fP"

.PP
Modify the output width\&. 
.PP
Definition at line 101 of file mean_pooling\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by MeanPooling< InputDataType, OutputDataType >::WeightSize()\&.
.SS "size_t StrideHeight () const\fC [inline]\fP"

.PP
Get the stride height\&. 
.PP
Definition at line 130 of file mean_pooling\&.hpp\&.
.SS "size_t& StrideHeight ()\fC [inline]\fP"

.PP
Modify the stride height\&. 
.PP
Definition at line 132 of file mean_pooling\&.hpp\&.
.SS "size_t StrideWidth () const\fC [inline]\fP"

.PP
Get the stride width\&. 
.PP
Definition at line 125 of file mean_pooling\&.hpp\&.
.SS "size_t& StrideWidth ()\fC [inline]\fP"

.PP
Modify the stride width\&. 
.PP
Definition at line 127 of file mean_pooling\&.hpp\&.
.SS "size_t WeightSize () const\fC [inline]\fP"

.PP
Get the size of the weights\&. 
.PP
Definition at line 145 of file mean_pooling\&.hpp\&.
.PP
References MeanPooling< InputDataType, OutputDataType >::serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
