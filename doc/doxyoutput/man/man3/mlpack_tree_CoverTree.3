.TH "CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CoverTree< MetricType, StatisticType, MatType, RootPointPolicy > \- A cover tree is a tree specifically designed to speed up nearest-neighbor computation in high-dimensional spaces\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBDualTreeTraverser\fP"
.br
.RI "A dual-tree cover tree traverser; see dual_tree_traverser\&.hpp\&. "
.ti -1c
.RI "class \fBSingleTreeTraverser\fP"
.br
.RI "A single-tree cover tree traverser; see single_tree_traverser\&.hpp for implementation\&. "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "template<typename RuleType > using \fBBreadthFirstDualTreeTraverser\fP = \fBDualTreeTraverser\fP< RuleType >"
.br
.ti -1c
.RI "typedef MatType::elem_type \fBElemType\fP"
.br
.RI "The type held by the matrix type\&. "
.ti -1c
.RI "typedef MatType \fBMat\fP"
.br
.RI "So that other classes can access the matrix type\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCoverTree\fP (const MatType &dataset, const \fBElemType\fP base=2\&.0, MetricType *metric=NULL)"
.br
.RI "Create the cover tree with the given dataset and given base\&. "
.ti -1c
.RI "\fBCoverTree\fP (const MatType &dataset, MetricType &metric, const \fBElemType\fP base=2\&.0)"
.br
.RI "Create the cover tree with the given dataset and the given instantiated metric\&. "
.ti -1c
.RI "\fBCoverTree\fP (MatType &&dataset, const \fBElemType\fP base=2\&.0)"
.br
.RI "Create the cover tree with the given dataset, taking ownership of the dataset\&. "
.ti -1c
.RI "\fBCoverTree\fP (MatType &&dataset, MetricType &metric, const \fBElemType\fP base=2\&.0)"
.br
.RI "Create the cover tree with the given dataset and the given instantiated metric, taking ownership of the dataset\&. "
.ti -1c
.RI "\fBCoverTree\fP (const MatType &dataset, const \fBElemType\fP base, const size_t pointIndex, const int scale, \fBCoverTree\fP *parent, const \fBElemType\fP parentDistance, arma::Col< size_t > &indices, arma::vec &distances, size_t nearSetSize, size_t &farSetSize, size_t &usedSetSize, MetricType &metric=NULL)"
.br
.RI "Construct a child cover tree node\&. "
.ti -1c
.RI "\fBCoverTree\fP (const MatType &dataset, const \fBElemType\fP base, const size_t pointIndex, const int scale, \fBCoverTree\fP *parent, const \fBElemType\fP parentDistance, const \fBElemType\fP furthestDescendantDistance, MetricType *metric=NULL)"
.br
.RI "Manually construct a cover tree node; no tree assembly is done in this constructor, and children must be added manually (use \fBChildren()\fP)\&. "
.ti -1c
.RI "\fBCoverTree\fP (const \fBCoverTree\fP &other)"
.br
.RI "Create a cover tree from another tree\&. "
.ti -1c
.RI "\fBCoverTree\fP (\fBCoverTree\fP &&other)"
.br
.RI "Move constructor for a Cover Tree, possess all the members of the given tree\&. "
.ti -1c
.RI "template<typename Archive > \fBCoverTree\fP (Archive &ar, const typename \fBstd::enable_if_t\fP< \fBcereal::is_loading\fP< Archive >()> *=0)"
.br
.RI "Create a cover tree from a cereal archive\&. "
.ti -1c
.RI "\fB~CoverTree\fP ()"
.br
.RI "Delete this cover tree node and its children\&. "
.ti -1c
.RI "\fBElemType\fP \fBBase\fP () const"
.br
.RI "Get the base\&. "
.ti -1c
.RI "\fBElemType\fP & \fBBase\fP ()"
.br
.RI "Modify the base; don't do this, you'll break everything\&. "
.ti -1c
.RI "void \fBCenter\fP (arma::vec &center) const"
.br
.RI "Get the center of the node and store it in the given vector\&. "
.ti -1c
.RI "const \fBCoverTree\fP & \fBChild\fP (const size_t index) const"
.br
.RI "Get a particular child node\&. "
.ti -1c
.RI "\fBCoverTree\fP & \fBChild\fP (const size_t index)"
.br
.RI "Modify a particular child node\&. "
.ti -1c
.RI "\fBCoverTree\fP *& \fBChildPtr\fP (const size_t index)"
.br
.ti -1c
.RI "const std::vector< \fBCoverTree\fP * > & \fBChildren\fP () const"
.br
.RI "Get the children\&. "
.ti -1c
.RI "std::vector< \fBCoverTree\fP * > & \fBChildren\fP ()"
.br
.RI "Modify the children manually (maybe not a great idea)\&. "
.ti -1c
.RI "const MatType & \fBDataset\fP () const"
.br
.RI "Get a reference to the dataset\&. "
.ti -1c
.RI "size_t \fBDescendant\fP (const size_t index) const"
.br
.RI "Get the index of a particular descendant point\&. "
.ti -1c
.RI "size_t \fBDistanceComps\fP () const"
.br
.ti -1c
.RI "size_t & \fBDistanceComps\fP ()"
.br
.ti -1c
.RI "\fBElemType\fP \fBFurthestDescendantDistance\fP () const"
.br
.RI "Get the distance from the center of the node to the furthest descendant\&. "
.ti -1c
.RI "\fBElemType\fP & \fBFurthestDescendantDistance\fP ()"
.br
.RI "Modify the distance from the center of the node to the furthest descendant\&. "
.ti -1c
.RI "\fBElemType\fP \fBFurthestPointDistance\fP () const"
.br
.RI "Get the distance to the furthest point\&. This is always 0 for cover trees\&. "
.ti -1c
.RI "template<typename VecType > size_t \fBGetFurthestChild\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0)"
.br
.RI "Return the index of the furthest child node to the given query point\&. "
.ti -1c
.RI "size_t \fBGetFurthestChild\fP (const \fBCoverTree\fP &queryNode)"
.br
.RI "Return the index of the furthest child node to the given query node\&. "
.ti -1c
.RI "template<typename VecType > size_t \fBGetNearestChild\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0)"
.br
.RI "Return the index of the nearest child node to the given query point\&. "
.ti -1c
.RI "size_t \fBGetNearestChild\fP (const \fBCoverTree\fP &queryNode)"
.br
.RI "Return the index of the nearest child node to the given query node\&. "
.ti -1c
.RI "bool \fBIsLeaf\fP () const"
.br
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const \fBCoverTree\fP &other) const"
.br
.RI "Return the maximum distance to another node\&. "
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const \fBCoverTree\fP &other, const \fBElemType\fP distance) const"
.br
.RI "Return the maximum distance to another node given that the point-to-point distance has already been calculated\&. "
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const arma::vec &other) const"
.br
.RI "Return the maximum distance to another point\&. "
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const arma::vec &other, const \fBElemType\fP distance) const"
.br
.RI "Return the maximum distance to another point given that the distance from the center to the point has already been calculated\&. "
.ti -1c
.RI "MetricType & \fBMetric\fP () const"
.br
.RI "Get the instantiated metric\&. "
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const \fBCoverTree\fP &other) const"
.br
.RI "Return the minimum distance to another node\&. "
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const \fBCoverTree\fP &other, const \fBElemType\fP distance) const"
.br
.RI "Return the minimum distance to another node given that the point-to-point distance has already been calculated\&. "
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const arma::vec &other) const"
.br
.RI "Return the minimum distance to another point\&. "
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const arma::vec &other, const \fBElemType\fP distance) const"
.br
.RI "Return the minimum distance to another point given that the distance from the center to the point has already been calculated\&. "
.ti -1c
.RI "\fBElemType\fP \fBMinimumBoundDistance\fP () const"
.br
.RI "Get the minimum distance from the center to any bound edge (this is the same as furthestDescendantDistance)\&. "
.ti -1c
.RI "size_t \fBNumChildren\fP () const"
.br
.RI "Get the number of children\&. "
.ti -1c
.RI "size_t \fBNumDescendants\fP () const"
.br
.RI "Get the number of descendant points\&. "
.ti -1c
.RI "size_t \fBNumPoints\fP () const"
.br
.ti -1c
.RI "\fBCoverTree\fP & \fBoperator=\fP (const \fBCoverTree\fP &other)"
.br
.RI "Copy the given Cover Tree\&. "
.ti -1c
.RI "\fBCoverTree\fP & \fBoperator=\fP (\fBCoverTree\fP &&other)"
.br
.RI "Take ownership of the given Cover Tree\&. "
.ti -1c
.RI "\fBCoverTree\fP * \fBParent\fP () const"
.br
.RI "Get the parent node\&. "
.ti -1c
.RI "\fBCoverTree\fP *& \fBParent\fP ()"
.br
.RI "Modify the parent node\&. "
.ti -1c
.RI "\fBElemType\fP \fBParentDistance\fP () const"
.br
.RI "Get the distance to the parent\&. "
.ti -1c
.RI "\fBElemType\fP & \fBParentDistance\fP ()"
.br
.RI "Modify the distance to the parent\&. "
.ti -1c
.RI "size_t \fBPoint\fP () const"
.br
.RI "Get the index of the point which this node represents\&. "
.ti -1c
.RI "size_t \fBPoint\fP (const size_t) const"
.br
.RI "For compatibility with other trees; the argument is ignored\&. "
.ti -1c
.RI "math::RangeType< \fBElemType\fP > \fBRangeDistance\fP (const \fBCoverTree\fP &other) const"
.br
.RI "Return the minimum and maximum distance to another node\&. "
.ti -1c
.RI "math::RangeType< \fBElemType\fP > \fBRangeDistance\fP (const \fBCoverTree\fP &other, const \fBElemType\fP distance) const"
.br
.RI "Return the minimum and maximum distance to another node given that the point-to-point distance has already been calculated\&. "
.ti -1c
.RI "math::RangeType< \fBElemType\fP > \fBRangeDistance\fP (const arma::vec &other) const"
.br
.RI "Return the minimum and maximum distance to another point\&. "
.ti -1c
.RI "math::RangeType< \fBElemType\fP > \fBRangeDistance\fP (const arma::vec &other, const \fBElemType\fP distance) const"
.br
.RI "Return the minimum and maximum distance to another point given that the point-to-point distance has already been calculated\&. "
.ti -1c
.RI "int \fBScale\fP () const"
.br
.RI "Get the scale of this node\&. "
.ti -1c
.RI "int & \fBScale\fP ()"
.br
.RI "Modify the scale of this node\&. Be careful\&.\&.\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the tree\&. "
.ti -1c
.RI "const StatisticType & \fBStat\fP () const"
.br
.RI "Get the statistic for this node\&. "
.ti -1c
.RI "StatisticType & \fBStat\fP ()"
.br
.RI "Modify the statistic for this node\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBCoverTree\fP ()"
.br
.RI "A default constructor\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType = metric::LMetric<2, true>, typename StatisticType = EmptyStatistic, typename MatType = arma::mat, typename RootPointPolicy = FirstPointIsRoot>
.br
class mlpack::tree::CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >"
A cover tree is a tree specifically designed to speed up nearest-neighbor computation in high-dimensional spaces\&. 

Each non-leaf node references a point and has a nonzero number of children, including a 'self-child' which references the same point\&. A leaf node represents only one point\&.
.PP
The tree can be thought of as a hierarchy with the root node at the top level and the leaf nodes at the bottom level\&. Each level in the tree has an assigned 'scale' i\&. The tree follows these two invariants:
.PP
.IP "\(bu" 2
nesting: the level C_i is a subset of the level C_{i - 1}\&.
.IP "\(bu" 2
covering: all node in level C_{i - 1} have at least one node in the level C_i with distance less than or equal to b^i (exactly one of these is a parent of the point in level C_{i - 1}\&.
.PP
.PP
Note that in the cover tree paper, there is a third invariant (the 'separation invariant'), but that does not apply to our implementation, because we have relaxed the invariant\&.
.PP
The value 'b' refers to the base, which is a parameter of the tree\&. These three properties make the cover tree very good for fast, high-dimensional nearest-neighbor search\&.
.PP
The theoretical structure of the tree contains many 'implicit' nodes which only have a 'self-child' (a child referencing the same point, but at a lower scale level)\&. This practical implementation only constructs explicit nodes -- non-leaf nodes with more than one child\&. A leaf node has no children, and its scale level is INT_MIN\&.
.PP
For more information on cover trees, see
.PP
.PP
.nf
@inproceedings{
  author = {Beygelzimer, Alina and Kakade, Sham and Langford, John},
  title = {Cover trees for nearest neighbor},
  booktitle = {Proceedings of the 23rd International Conference on Machine
    Learning},
  series = {ICML '06},
  year = {2006},
  pages = {97--104]
}
.fi
.PP
.PP
For information on runtime bounds of the nearest-neighbor computation using cover trees, see the following paper, presented at NIPS 2009:
.PP
.PP
.nf
@inproceedings{
  author = {Ram, P\&., and Lee, D\&., and March, W\&.B\&., and Gray, A\&.G\&.},
  title = {Linear-time Algorithms for Pairwise Statistical Problems},
  booktitle = {Advances in Neural Information Processing Systems 22},
  editor = {Y\&. Bengio and D\&. Schuurmans and J\&. Lafferty and C\&.K\&.I\&. Williams
    and A\&. Culotta},
  pages = {1527--1535},
  year = {2009}
}
.fi
.PP
.PP
The \fBCoverTree\fP class offers three template parameters; a custom metric type can be used with MetricType (this class defaults to the L2-squared metric)\&. The root node's point can be chosen with the RootPointPolicy; by default, the \fBFirstPointIsRoot\fP policy is used, meaning the first point in the dataset is used\&. The StatisticType policy allows you to define statistics which can be gathered during the creation of the tree\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMetricType\fP Metric type to use during tree construction\&. 
.br
\fIRootPointPolicy\fP Determines which point to use as the root node\&. 
.br
\fIStatisticType\fP Statistic to be used during tree creation\&. 
.br
\fIMatType\fP Type of matrix to build the tree on (generally mat or sp_mat)\&. 
.RE
.PP

.PP
Definition at line 99 of file cover_tree\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "using \fBBreadthFirstDualTreeTraverser\fP =  \fBDualTreeTraverser\fP<RuleType>"

.PP
Definition at line 280 of file cover_tree\&.hpp\&.
.SS "typedef MatType::elem_type \fBElemType\fP"

.PP
The type held by the matrix type\&. 
.PP
Definition at line 105 of file cover_tree\&.hpp\&.
.SS "typedef MatType \fBMat\fP"

.PP
So that other classes can access the matrix type\&. 
.PP
Definition at line 103 of file cover_tree\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBCoverTree\fP (const MatType & dataset, const \fBElemType\fP base = \fC2\&.0\fP, MetricType * metric = \fCNULL\fP)"

.PP
Create the cover tree with the given dataset and given base\&. The dataset will not be modified during the building procedure (unlike \fBBinarySpaceTree\fP)\&.
.PP
The last argument will be removed in mlpack 1\&.1\&.0 (see #274 and #273)\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset to build a tree on\&. 
.br
\fIbase\fP Base to use during tree building (default 2\&.0)\&. 
.br
\fImetric\fP Metric to use (default NULL)\&. 
.RE
.PP

.SS "\fBCoverTree\fP (const MatType & dataset, MetricType & metric, const \fBElemType\fP base = \fC2\&.0\fP)"

.PP
Create the cover tree with the given dataset and the given instantiated metric\&. Optionally, set the base\&. The dataset will not be modified during the building procedure (unlike \fBBinarySpaceTree\fP)\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset to build a tree on\&. 
.br
\fImetric\fP Instantiated metric to use during tree building\&. 
.br
\fIbase\fP Base to use during tree building (default 2\&.0)\&. 
.RE
.PP

.SS "\fBCoverTree\fP (MatType && dataset, const \fBElemType\fP base = \fC2\&.0\fP)"

.PP
Create the cover tree with the given dataset, taking ownership of the dataset\&. Optionally, set the base\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset to build a tree on\&. 
.br
\fIbase\fP Base to use during tree building (default 2\&.0)\&. 
.RE
.PP

.SS "\fBCoverTree\fP (MatType && dataset, MetricType & metric, const \fBElemType\fP base = \fC2\&.0\fP)"

.PP
Create the cover tree with the given dataset and the given instantiated metric, taking ownership of the dataset\&. Optionally, set the base\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset to build a tree on\&. 
.br
\fImetric\fP Instantiated metric to use during tree building\&. 
.br
\fIbase\fP Base to use during tree building (default 2\&.0)\&. 
.RE
.PP

.SS "\fBCoverTree\fP (const MatType & dataset, const \fBElemType\fP base, const size_t pointIndex, const int scale, \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > * parent, const \fBElemType\fP parentDistance, arma::Col< size_t > & indices, arma::vec & distances, size_t nearSetSize, size_t & farSetSize, size_t & usedSetSize, MetricType & metric = \fCNULL\fP)"

.PP
Construct a child cover tree node\&. This constructor is not meant to be used externally, but it could be used to insert another node into a tree\&. This procedure uses only one vector for the near set, the far set, and the used set (this is to prevent unnecessary memory allocation in recursive calls to this constructor)\&. Therefore, the size of the near set, far set, and used set must be passed in\&. The near set will be entirely used up, and some of the far set may be used\&. The value of usedSetSize will be set to the number of points used in the construction of this node, and the value of farSetSize will be modified to reflect the number of points in the far set \fIafter\fP the construction of this node\&.
.PP
If you are calling this manually, be careful that the given scale is as small as possible, or you may be creating an implicit node in your tree\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset to build a tree on\&. 
.br
\fIbase\fP Base to use during tree building\&. 
.br
\fIpointIndex\fP Index of the point this node references\&. 
.br
\fIscale\fP Scale of this level in the tree\&. 
.br
\fIparent\fP Parent of this node (NULL indicates no parent)\&. 
.br
\fIparentDistance\fP Distance to the parent node\&. 
.br
\fIindices\fP Array of indices, ordered [ nearSet | farSet | usedSet ]; will be modified to [ farSet | usedSet ]\&. 
.br
\fIdistances\fP Array of distances, ordered the same way as the indices\&. These represent the distances between the point specified by pointIndex and each point in the indices array\&. 
.br
\fInearSetSize\fP Size of the near set; if 0, this will be a leaf\&. 
.br
\fIfarSetSize\fP Size of the far set; may be modified (if this node uses any points in the far set)\&. 
.br
\fIusedSetSize\fP The number of points used will be added to this number\&. 
.br
\fImetric\fP Metric to use (default NULL)\&. 
.RE
.PP

.SS "\fBCoverTree\fP (const MatType & dataset, const \fBElemType\fP base, const size_t pointIndex, const int scale, \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > * parent, const \fBElemType\fP parentDistance, const \fBElemType\fP furthestDescendantDistance, MetricType * metric = \fCNULL\fP)"

.PP
Manually construct a cover tree node; no tree assembly is done in this constructor, and children must be added manually (use \fBChildren()\fP)\&. This constructor is useful when the tree is being 'imported' into the \fBCoverTree\fP class after being created in some other manner\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Reference to the dataset this node is a part of\&. 
.br
\fIbase\fP Base that was used for tree building\&. 
.br
\fIpointIndex\fP Index of the point in the dataset which this node refers to\&. 
.br
\fIscale\fP Scale of this node's level in the tree\&. 
.br
\fIparent\fP Parent node (NULL indicates no parent)\&. 
.br
\fIparentDistance\fP Distance to parent node point\&. 
.br
\fIfurthestDescendantDistance\fP Distance to furthest descendant point\&. 
.br
\fImetric\fP Instantiated metric (optional)\&. 
.RE
.PP

.SS "\fBCoverTree\fP (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other)"

.PP
Create a cover tree from another tree\&. Be careful! This may use a lot of memory and take a lot of time\&. This will also make a copy of the dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Cover tree to copy from\&. 
.RE
.PP

.SS "\fBCoverTree\fP (\fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > && other)"

.PP
Move constructor for a Cover Tree, possess all the members of the given tree\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Cover Tree to move\&. 
.RE
.PP

.SS "\fBCoverTree\fP (Archive & ar, const typename \fBstd::enable_if_t\fP< \fBcereal::is_loading\fP< Archive >()> * = \fC0\fP)"

.PP
Create a cover tree from a cereal archive\&. 
.SS "~\fBCoverTree\fP ()"

.PP
Delete this cover tree node and its children\&. 
.SS "\fBCoverTree\fP ()\fC [protected]\fP"

.PP
A default constructor\&. This is meant to only be used with cereal, which is allowed with the friend declaration below\&. This does not return a valid tree! This method must be protected, so that the serialization shim can work with the default constructor\&. 
.PP
Referenced by CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Metric()\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBElemType\fP Base () const\fC [inline]\fP"

.PP
Get the base\&. 
.PP
Definition at line 320 of file cover_tree\&.hpp\&.
.SS "\fBElemType\fP& Base ()\fC [inline]\fP"

.PP
Modify the base; don't do this, you'll break everything\&. 
.PP
Definition at line 322 of file cover_tree\&.hpp\&.
.SS "void Center (arma::vec & center) const\fC [inline]\fP"

.PP
Get the center of the node and store it in the given vector\&. 
.PP
Definition at line 428 of file cover_tree\&.hpp\&.
.SS "const \fBCoverTree\fP& Child (const size_t index) const\fC [inline]\fP"

.PP
Get a particular child node\&. 
.PP
Definition at line 294 of file cover_tree\&.hpp\&.
.SS "\fBCoverTree\fP& Child (const size_t index)\fC [inline]\fP"

.PP
Modify a particular child node\&. 
.PP
Definition at line 296 of file cover_tree\&.hpp\&.
.SS "\fBCoverTree\fP*& ChildPtr (const size_t index)\fC [inline]\fP"

.PP
Definition at line 298 of file cover_tree\&.hpp\&.
.SS "const std::vector<\fBCoverTree\fP*>& Children () const\fC [inline]\fP"

.PP
Get the children\&. 
.PP
Definition at line 304 of file cover_tree\&.hpp\&.
.SS "std::vector<\fBCoverTree\fP*>& Children ()\fC [inline]\fP"

.PP
Modify the children manually (maybe not a great idea)\&. 
.PP
Definition at line 306 of file cover_tree\&.hpp\&.
.PP
References CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Descendant(), and CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::NumDescendants()\&.
.SS "const MatType& Dataset () const\fC [inline]\fP"

.PP
Get a reference to the dataset\&. 
.PP
Definition at line 283 of file cover_tree\&.hpp\&.
.SS "size_t Descendant (const size_t index) const"

.PP
Get the index of a particular descendant point\&. 
.PP
Referenced by CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Children()\&.
.SS "size_t DistanceComps () const\fC [inline]\fP"

.PP
Definition at line 571 of file cover_tree\&.hpp\&.
.SS "size_t& DistanceComps ()\fC [inline]\fP"

.PP
Definition at line 572 of file cover_tree\&.hpp\&.
.SS "\fBElemType\fP FurthestDescendantDistance () const\fC [inline]\fP"

.PP
Get the distance from the center of the node to the furthest descendant\&. 
.PP
Definition at line 417 of file cover_tree\&.hpp\&.
.SS "\fBElemType\fP& FurthestDescendantDistance ()\fC [inline]\fP"

.PP
Modify the distance from the center of the node to the furthest descendant\&. 
.PP
Definition at line 421 of file cover_tree\&.hpp\&.
.SS "\fBElemType\fP FurthestPointDistance () const\fC [inline]\fP"

.PP
Get the distance to the furthest point\&. This is always 0 for cover trees\&. 
.PP
Definition at line 414 of file cover_tree\&.hpp\&.
.SS "size_t GetFurthestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP)"

.PP
Return the index of the furthest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.
.SS "size_t GetFurthestChild (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & queryNode)"

.PP
Return the index of the furthest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "size_t GetNearestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP)"

.PP
Return the index of the nearest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.
.SS "size_t GetNearestChild (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & queryNode)"

.PP
Return the index of the nearest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "bool IsLeaf () const\fC [inline]\fP"

.PP
Definition at line 290 of file cover_tree\&.hpp\&.
.SS "\fBElemType\fP MaxDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other) const"

.PP
Return the maximum distance to another node\&. 
.PP
Referenced by CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.
.SS "\fBElemType\fP MaxDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other, const \fBElemType\fP distance) const"

.PP
Return the maximum distance to another node given that the point-to-point distance has already been calculated\&. 
.SS "\fBElemType\fP MaxDistance (const arma::vec & other) const"

.PP
Return the maximum distance to another point\&. 
.SS "\fBElemType\fP MaxDistance (const arma::vec & other, const \fBElemType\fP distance) const"

.PP
Return the maximum distance to another point given that the distance from the center to the point has already been calculated\&. 
.SS "MetricType& Metric () const\fC [inline]\fP"

.PP
Get the instantiated metric\&. 
.PP
Definition at line 434 of file cover_tree\&.hpp\&.
.PP
References CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::CoverTree()\&.
.SS "\fBElemType\fP MinDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other) const"

.PP
Return the minimum distance to another node\&. 
.PP
Referenced by CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.
.SS "\fBElemType\fP MinDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other, const \fBElemType\fP distance) const"

.PP
Return the minimum distance to another node given that the point-to-point distance has already been calculated\&. 
.SS "\fBElemType\fP MinDistance (const arma::vec & other) const"

.PP
Return the minimum distance to another point\&. 
.SS "\fBElemType\fP MinDistance (const arma::vec & other, const \fBElemType\fP distance) const"

.PP
Return the minimum distance to another point given that the distance from the center to the point has already been calculated\&. 
.SS "\fBElemType\fP MinimumBoundDistance () const\fC [inline]\fP"

.PP
Get the minimum distance from the center to any bound edge (this is the same as furthestDescendantDistance)\&. 
.PP
Definition at line 425 of file cover_tree\&.hpp\&.
.SS "size_t NumChildren () const\fC [inline]\fP"

.PP
Get the number of children\&. 
.PP
Definition at line 301 of file cover_tree\&.hpp\&.
.SS "size_t NumDescendants () const"

.PP
Get the number of descendant points\&. 
.PP
Referenced by CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Children()\&.
.SS "size_t NumPoints () const\fC [inline]\fP"

.PP
Definition at line 291 of file cover_tree\&.hpp\&.
.SS "\fBCoverTree\fP& operator= (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other)"

.PP
Copy the given Cover Tree\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The tree to be copied\&. 
.RE
.PP

.SS "\fBCoverTree\fP& operator= (\fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > && other)"

.PP
Take ownership of the given Cover Tree\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The tree to take ownership of\&. 
.RE
.PP

.SS "\fBCoverTree\fP* Parent () const\fC [inline]\fP"

.PP
Get the parent node\&. 
.PP
Definition at line 404 of file cover_tree\&.hpp\&.
.SS "\fBCoverTree\fP*& Parent ()\fC [inline]\fP"

.PP
Modify the parent node\&. 
.PP
Definition at line 406 of file cover_tree\&.hpp\&.
.SS "\fBElemType\fP ParentDistance () const\fC [inline]\fP"

.PP
Get the distance to the parent\&. 
.PP
Definition at line 409 of file cover_tree\&.hpp\&.
.SS "\fBElemType\fP& ParentDistance ()\fC [inline]\fP"

.PP
Modify the distance to the parent\&. 
.PP
Definition at line 411 of file cover_tree\&.hpp\&.
.SS "size_t Point () const\fC [inline]\fP"

.PP
Get the index of the point which this node represents\&. 
.PP
Definition at line 286 of file cover_tree\&.hpp\&.
.SS "size_t Point (const size_t) const\fC [inline]\fP"

.PP
For compatibility with other trees; the argument is ignored\&. 
.PP
Definition at line 288 of file cover_tree\&.hpp\&.
.SS "math::RangeType<\fBElemType\fP> RangeDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other) const"

.PP
Return the minimum and maximum distance to another node\&. 
.PP
Referenced by CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::Stat()\&.
.SS "math::RangeType<\fBElemType\fP> RangeDistance (const \fBCoverTree\fP< MetricType, StatisticType, MatType, RootPointPolicy > & other, const \fBElemType\fP distance) const"

.PP
Return the minimum and maximum distance to another node given that the point-to-point distance has already been calculated\&. 
.SS "math::RangeType<\fBElemType\fP> RangeDistance (const arma::vec & other) const"

.PP
Return the minimum and maximum distance to another point\&. 
.SS "math::RangeType<\fBElemType\fP> RangeDistance (const arma::vec & other, const \fBElemType\fP distance) const"

.PP
Return the minimum and maximum distance to another point given that the point-to-point distance has already been calculated\&. 
.SS "int Scale () const\fC [inline]\fP"

.PP
Get the scale of this node\&. 
.PP
Definition at line 315 of file cover_tree\&.hpp\&.
.SS "int& Scale ()\fC [inline]\fP"

.PP
Modify the scale of this node\&. Be careful\&.\&.\&. 
.PP
Definition at line 317 of file cover_tree\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the tree\&. 
.SS "const StatisticType& Stat () const\fC [inline]\fP"

.PP
Get the statistic for this node\&. 
.PP
Definition at line 325 of file cover_tree\&.hpp\&.
.SS "StatisticType& Stat ()\fC [inline]\fP"

.PP
Modify the statistic for this node\&. 
.PP
Definition at line 327 of file cover_tree\&.hpp\&.
.PP
References CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::GetFurthestChild(), CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::GetNearestChild(), CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::MaxDistance(), CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::MinDistance(), and CoverTree< MetricType, StatisticType, MatType, RootPointPolicy >::RangeDistance()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
