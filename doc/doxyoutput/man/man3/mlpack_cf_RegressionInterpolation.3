.TH "RegressionInterpolation" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RegressionInterpolation \- Implementation of regression-based interpolation method\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRegressionInterpolation\fP ()"
.br
.RI "Empty Constructor\&. "
.ti -1c
.RI "\fBRegressionInterpolation\fP (const arma::sp_mat &cleanedData)"
.br
.RI "Use cleanedData to perform necessary preprocessing\&. "
.ti -1c
.RI "template<typename VectorType , typename DecompositionPolicy > void \fBGetWeights\fP (VectorType &&weights, const DecompositionPolicy &decomposition, const size_t queryUser, const arma::Col< size_t > &neighbors, const arma::vec &, const arma::sp_mat &cleanedData)"
.br
.RI "The regression-based interpolation problem can be solved by a linear system of equations\&. "
.in -1c
.SH "Detailed Description"
.PP 
Implementation of regression-based interpolation method\&. 

Predicting a user's rating $ r_{iu} $ by it's neighbors' ratings can be regarded as solving linear regression of $ r_{iu} $ on $ r_{iv} $, where v are u's neighbors\&.
.PP
An example of how to use \fBRegressionInterpolation\fP in CF is shown below:
.PP
.PP
.nf
extern arma::mat data; // data is a (user, item, rating) table\&.
// Users for whom recommendations are generated\&.
extern arma::Col<size_t> users;
arma::Mat<size_t> recommendations; // Resulting recommendations\&.

CFType<> cf(data);

// Generate 10 recommendations for all users\&.
cf\&.template GetRecommendations<
    EuclideanSearch,
    RegressionInterpolation>(10, recommendations);
.fi
.PP
.PP
For more information, see the following paper\&.
.PP
.PP
.nf
@inproceedings{bell2007improved,
 title={Improved neighborhood-based collaborative filtering},
 author={Bell, Robert M and Koren, Yehuda},
 booktitle={KDD cup and workshop at the 13th ACM SIGKDD international
     conference on knowledge discovery and data mining},
 pages={7--14},
 year={2007},
 organization={Citeseer}
}
.fi
.PP
 
.PP
Definition at line 56 of file regression_interpolation\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBRegressionInterpolation\fP ()\fC [inline]\fP"

.PP
Empty Constructor\&. 
.PP
Definition at line 62 of file regression_interpolation\&.hpp\&.
.SS "\fBRegressionInterpolation\fP (const arma::sp_mat & cleanedData)\fC [inline]\fP"

.PP
Use cleanedData to perform necessary preprocessing\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcleanedData\fP Sparse rating matrix\&. 
.RE
.PP

.PP
Definition at line 69 of file regression_interpolation\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void GetWeights (VectorType && weights, const DecompositionPolicy & decomposition, const size_t queryUser, const arma::Col< size_t > & neighbors, const arma::vec &, const arma::sp_mat & cleanedData)\fC [inline]\fP"

.PP
The regression-based interpolation problem can be solved by a linear system of equations\&. This method first calculates the coefficients and constant terms for the equations and then solve the equations\&. The solution of the linear system of equations is the resulting interpolation weights (the first parameter)\&. After getting the weights, CF algorithm multiplies each neighbor's rating by its corresponding weight and sums them to get predicted rating\&.
.PP
\fBParameters:\fP
.RS 4
\fIweights\fP Resulting interpolation weights\&. The size of weights should be set to the number of neighbors before calling \fBGetWeights()\fP\&. 
.br
\fIdecomposition\fP Decomposition object\&. 
.br
\fIqueryUser\fP Queried user\&. 
.br
\fIneighbors\fP Neighbors of queried user\&. 
.br
\fI*\fP (similarities) Similarities between query user and neighbors\&. 
.br
\fIcleanedData\fP Sparse rating matrix\&. 
.RE
.PP

.PP
Definition at line 95 of file regression_interpolation\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
