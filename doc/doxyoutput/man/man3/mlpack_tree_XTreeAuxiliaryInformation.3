.TH "XTreeAuxiliaryInformation< TreeType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
XTreeAuxiliaryInformation< TreeType > \- The \fBXTreeAuxiliaryInformation\fP class provides information specific to X trees for each node in a \fBRectangleTree\fP\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBSplitHistoryStruct\fP"
.br
.RI "The X tree requires that the tree records it's 'split history'\&. "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef struct \fBmlpack::tree::XTreeAuxiliaryInformation::SplitHistoryStruct\fP \fBSplitHistoryStruct\fP"
.br
.RI "The X tree requires that the tree records it's 'split history'\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBXTreeAuxiliaryInformation\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBXTreeAuxiliaryInformation\fP (const TreeType *node)"
.br
.RI "Construct this with the specified node\&. "
.ti -1c
.RI "\fBXTreeAuxiliaryInformation\fP (const \fBXTreeAuxiliaryInformation\fP &other, TreeType *=NULL, bool=true)"
.br
.RI "Create an auxiliary information object by copying from another object\&. "
.ti -1c
.RI "\fBXTreeAuxiliaryInformation\fP (\fBXTreeAuxiliaryInformation\fP &&other)"
.br
.RI "Create an auxiliary information object by moving from the other node\&. "
.ti -1c
.RI "bool \fBHandleNodeInsertion\fP (TreeType *, TreeType *, bool)"
.br
.RI "Some tree types require to save some properties at the insertion process\&. "
.ti -1c
.RI "bool \fBHandleNodeRemoval\fP (TreeType *, const size_t)"
.br
.RI "Some tree types require to save some properties at the deletion process\&. "
.ti -1c
.RI "bool \fBHandlePointDeletion\fP (TreeType *, const size_t)"
.br
.RI "Some tree types require to save some properties at the deletion process\&. "
.ti -1c
.RI "bool \fBHandlePointInsertion\fP (TreeType *, const size_t)"
.br
.RI "Some tree types require to save some properties at the insertion process\&. "
.ti -1c
.RI "size_t \fBNormalNodeMaxNumChildren\fP () const"
.br
.RI "Return the maximum number of a normal node's children\&. "
.ti -1c
.RI "size_t & \fBNormalNodeMaxNumChildren\fP ()"
.br
.RI "Modify the maximum number of a normal node's children\&. "
.ti -1c
.RI "void \fBNullifyData\fP ()"
.br
.RI "Nullify the auxiliary information in order to prevent an invalid free\&. "
.ti -1c
.RI "\fBXTreeAuxiliaryInformation\fP & \fBoperator=\fP (const \fBXTreeAuxiliaryInformation\fP &other)"
.br
.RI "Copy the auxiliary information object\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the information\&. "
.ti -1c
.RI "const \fBSplitHistoryStruct\fP & \fBSplitHistory\fP () const"
.br
.RI "Return the split history of the node associated with this object\&. "
.ti -1c
.RI "\fBSplitHistoryStruct\fP & \fBSplitHistory\fP ()"
.br
.RI "Modify the split history of the node associated with this object\&. "
.ti -1c
.RI "bool \fBUpdateAuxiliaryInfo\fP (TreeType *)"
.br
.RI "Some tree types require to propagate the information upward\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename TreeType>
.br
class mlpack::tree::XTreeAuxiliaryInformation< TreeType >"
The \fBXTreeAuxiliaryInformation\fP class provides information specific to X trees for each node in a \fBRectangleTree\fP\&. 
.PP
Definition at line 24 of file x_tree_auxiliary_information\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef struct \fBmlpack::tree::XTreeAuxiliaryInformation::SplitHistoryStruct\fP  \fBSplitHistoryStruct\fP"

.PP
The X tree requires that the tree records it's 'split history'\&. To make this easy, we use the following structure\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBXTreeAuxiliaryInformation\fP ()\fC [inline]\fP"

.PP
Default constructor\&. 
.PP
Definition at line 28 of file x_tree_auxiliary_information\&.hpp\&.
.SS "\fBXTreeAuxiliaryInformation\fP (const TreeType * node)\fC [inline]\fP"

.PP
Construct this with the specified node\&. 
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node that stores this auxiliary information\&. 
.RE
.PP

.PP
Definition at line 38 of file x_tree_auxiliary_information\&.hpp\&.
.SS "\fBXTreeAuxiliaryInformation\fP (const \fBXTreeAuxiliaryInformation\fP< TreeType > & other, TreeType * = \fCNULL\fP, bool = \fCtrue\fP)\fC [inline]\fP"

.PP
Create an auxiliary information object by copying from another object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Another auxiliary information object from which the information will be copied\&. 
.br
\fI*\fP (tree) The node that holds the auxiliary information\&. 
.br
\fI*\fP (deepCopy) If false, the new object uses the same memory (not used here)\&. 
.RE
.PP

.PP
Definition at line 54 of file x_tree_auxiliary_information\&.hpp\&.
.SS "\fBXTreeAuxiliaryInformation\fP (\fBXTreeAuxiliaryInformation\fP< TreeType > && other)\fC [inline]\fP"

.PP
Create an auxiliary information object by moving from the other node\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The object from which the information will be moved\&. 
.RE
.PP

.PP
Definition at line 79 of file x_tree_auxiliary_information\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "bool HandleNodeInsertion (TreeType *, TreeType *, bool)\fC [inline]\fP"

.PP
Some tree types require to save some properties at the insertion process\&. This method allows the auxiliary information the option of manipulating the tree in order to perform the insertion process\&. If the auxiliary information does that, then the method should return true; if the method returns false the \fBRectangleTree\fP performs its default behavior\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (node) The node in which the nodeToInsert is being inserted\&. 
.br
\fI*\fP (nodeToInsert) The node being inserted\&. 
.br
\fI*\fP (insertionLevel) The level of the tree at which the nodeToInsert should be inserted\&. 
.RE
.PP

.PP
Definition at line 113 of file x_tree_auxiliary_information\&.hpp\&.
.SS "bool HandleNodeRemoval (TreeType *, const size_t)\fC [inline]\fP"

.PP
Some tree types require to save some properties at the deletion process\&. This method allows the auxiliary information the option of manipulating the tree in order to perform the deletion process\&. If the auxiliary information does that, then the method should return true; if the method returns false the \fBRectangleTree\fP performs its default behavior\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (node) The node from which the node is being deleted\&. 
.br
\fI*\fP (nodeIndex) The local index of the node being deleted\&. 
.RE
.PP

.PP
Definition at line 143 of file x_tree_auxiliary_information\&.hpp\&.
.SS "bool HandlePointDeletion (TreeType *, const size_t)\fC [inline]\fP"

.PP
Some tree types require to save some properties at the deletion process\&. This method allows the auxiliary information the option of manipulating the tree in order to perform the deletion process\&. If the auxiliary information does that, then the method should return true; if the method returns false the \fBRectangleTree\fP performs its default behavior\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (node) The node from which the point is being deleted\&. 
.br
\fI*\fP (localIndex) The local index of the point being deleted\&. 
.RE
.PP

.PP
Definition at line 129 of file x_tree_auxiliary_information\&.hpp\&.
.SS "bool HandlePointInsertion (TreeType *, const size_t)\fC [inline]\fP"

.PP
Some tree types require to save some properties at the insertion process\&. This method allows the auxiliary information the option of manipulating the tree in order to perform the insertion process\&. If the auxiliary information does that, then the method should return true; if the method returns false the \fBRectangleTree\fP performs its default behavior\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (node) The node in which the point is being inserted\&. 
.br
\fI*\fP (point) The global number of the point being inserted\&. 
.RE
.PP

.PP
Definition at line 96 of file x_tree_auxiliary_information\&.hpp\&.
.SS "size_t NormalNodeMaxNumChildren () const\fC [inline]\fP"

.PP
Return the maximum number of a normal node's children\&. 
.PP
Definition at line 215 of file x_tree_auxiliary_information\&.hpp\&.
.PP
Referenced by XTreeAuxiliaryInformation< TreeType >::operator=()\&.
.SS "size_t& NormalNodeMaxNumChildren ()\fC [inline]\fP"

.PP
Modify the maximum number of a normal node's children\&. 
.PP
Definition at line 217 of file x_tree_auxiliary_information\&.hpp\&.
.SS "void NullifyData ()\fC [inline]\fP"

.PP
Nullify the auxiliary information in order to prevent an invalid free\&. 
.PP
Definition at line 162 of file x_tree_auxiliary_information\&.hpp\&.
.SS "\fBXTreeAuxiliaryInformation\fP& operator= (const \fBXTreeAuxiliaryInformation\fP< TreeType > & other)\fC [inline]\fP"

.PP
Copy the auxiliary information object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The node from which the information will be copied\&. 
.RE
.PP

.PP
Definition at line 66 of file x_tree_auxiliary_information\&.hpp\&.
.PP
References XTreeAuxiliaryInformation< TreeType >::NormalNodeMaxNumChildren(), and XTreeAuxiliaryInformation< TreeType >::SplitHistory()\&.
.SS "void serialize (Archive & ar, const uint32_t)\fC [inline]\fP"

.PP
Serialize the information\&. 
.PP
Definition at line 227 of file x_tree_auxiliary_information\&.hpp\&.
.SS "const \fBSplitHistoryStruct\fP& SplitHistory () const\fC [inline]\fP"

.PP
Return the split history of the node associated with this object\&. 
.PP
Definition at line 219 of file x_tree_auxiliary_information\&.hpp\&.
.PP
Referenced by XTreeAuxiliaryInformation< TreeType >::operator=()\&.
.SS "\fBSplitHistoryStruct\fP& SplitHistory ()\fC [inline]\fP"

.PP
Modify the split history of the node associated with this object\&. 
.PP
Definition at line 221 of file x_tree_auxiliary_information\&.hpp\&.
.SS "bool UpdateAuxiliaryInfo (TreeType *)\fC [inline]\fP"

.PP
Some tree types require to propagate the information upward\&. This method should return false if this is not the case\&. If true is returned, the update will be propagated upward\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (node) The node in which the auxiliary information being update\&. 
.RE
.PP

.PP
Definition at line 154 of file x_tree_auxiliary_information\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
