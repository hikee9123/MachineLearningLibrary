.TH "mlpack::tree" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mlpack::tree \- Trees and tree-building procedures\&.  

.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBenumerate\fP"
.br
.ti -1c
.RI " \fBRectangleTree\fP"
.br
.ti -1c
.RI " \fBsplit\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAllCategoricalSplit\fP"
.br
.RI "The \fBAllCategoricalSplit\fP is a splitting function that will split categorical features into many children: one child for each category\&. "
.ti -1c
.RI "class \fBAllDimensionSelect\fP"
.br
.RI "This dimension selection policy allows any dimension to be selected for splitting\&. "
.ti -1c
.RI "class \fBAxisParallelProjVector\fP"
.br
.RI "\fBAxisParallelProjVector\fP defines an axis-parallel projection vector\&. "
.ti -1c
.RI "class \fBBestBinaryNumericSplit\fP"
.br
.RI "The \fBBestBinaryNumericSplit\fP is a splitting function for decision trees that will exhaustively search a numeric dimension for the best binary split\&. "
.ti -1c
.RI "class \fBBinaryNumericSplit\fP"
.br
.RI "The \fBBinaryNumericSplit\fP class implements the numeric feature splitting strategy devised by Gama, Rocha, and Medas in the following paper: "
.ti -1c
.RI "class \fBBinaryNumericSplitInfo\fP"
.br
.ti -1c
.RI "class \fBBinarySpaceTree\fP"
.br
.RI "A binary space partitioning tree, such as a KD-tree or a ball tree\&. "
.ti -1c
.RI "class \fBCategoricalSplitInfo\fP"
.br
.ti -1c
.RI "class \fBCompareCosineNode\fP"
.br
.ti -1c
.RI "class \fBCosineTree\fP"
.br
.ti -1c
.RI "class \fBCoverTree\fP"
.br
.RI "A cover tree is a tree specifically designed to speed up nearest-neighbor computation in high-dimensional spaces\&. "
.ti -1c
.RI "class \fBDecisionTree\fP"
.br
.RI "This class implements a generic decision tree learner\&. "
.ti -1c
.RI "class \fBDecisionTreeRegressor\fP"
.br
.RI "This class implements a generic decision tree learner\&. "
.ti -1c
.RI "class \fBDiscreteHilbertValue\fP"
.br
.RI "The \fBDiscreteHilbertValue\fP class stores Hilbert values for all of the points in a \fBRectangleTree\fP node, and calculates Hilbert values for new points\&. "
.ti -1c
.RI "class \fBEmptyStatistic\fP"
.br
.RI "Empty statistic if you are not interested in storing statistics in your tree\&. "
.ti -1c
.RI "class \fBExampleTree\fP"
.br
.RI "This is not an actual space tree but instead an example tree that exists to show and document all the functions that mlpack trees must implement\&. "
.ti -1c
.RI "class \fBFirstPointIsRoot\fP"
.br
.RI "This class is meant to be used as a choice for the policy class RootPointPolicy of the \fBCoverTree\fP class\&. "
.ti -1c
.RI "class \fBGiniGain\fP"
.br
.RI "The Gini gain, a measure of set purity usable as a fitness function (FitnessFunction) for decision trees\&. "
.ti -1c
.RI "class \fBGiniImpurity\fP"
.br
.ti -1c
.RI "class \fBGreedySingleTreeTraverser\fP"
.br
.ti -1c
.RI "struct \fBHasOptimizedBinarySplitForms\fP"
.br
.ti -1c
.RI "class \fBHilbertRTreeAuxiliaryInformation\fP"
.br
.ti -1c
.RI "class \fBHilbertRTreeDescentHeuristic\fP"
.br
.RI "This class chooses the best child of a node in a Hilbert R tree when inserting a new point\&. "
.ti -1c
.RI "class \fBHilbertRTreeSplit\fP"
.br
.RI "The splitting procedure for the Hilbert R tree\&. "
.ti -1c
.RI "class \fBHoeffdingCategoricalSplit\fP"
.br
.RI "This is the standard Hoeffding-bound categorical feature proposed in the paper below: "
.ti -1c
.RI "class \fBHoeffdingInformationGain\fP"
.br
.ti -1c
.RI "class \fBHoeffdingNumericSplit\fP"
.br
.RI "The \fBHoeffdingNumericSplit\fP class implements the numeric feature splitting strategy alluded to by Domingos and Hulten in the following paper: "
.ti -1c
.RI "class \fBHoeffdingTree\fP"
.br
.RI "The \fBHoeffdingTree\fP object represents all of the necessary information for a Hoeffding-bound-based decision tree\&. "
.ti -1c
.RI "class \fBHoeffdingTreeModel\fP"
.br
.RI "This class is a serializable Hoeffding tree model that can hold four different types of Hoeffding trees\&. "
.ti -1c
.RI "class \fBHyperplaneBase\fP"
.br
.RI "\fBHyperplaneBase\fP defines a splitting hyperplane based on a projection vector and projection value\&. "
.ti -1c
.RI "class \fBInformationGain\fP"
.br
.RI "The standard information gain criterion, used for calculating gain in decision trees\&. "
.ti -1c
.RI "struct \fBIsSpillTree\fP"
.br
.ti -1c
.RI "struct \fBIsSpillTree< tree::SpillTree< MetricType, StatisticType, MatType, HyperplaneType, SplitType > >\fP"
.br
.ti -1c
.RI "class \fBMADGain\fP"
.br
.RI "The MAD (Mean absolute deviation) gain, is a measure of set purity based on the deviation of dependent values present in the node\&. "
.ti -1c
.RI "class \fBMeanSpaceSplit\fP"
.br
.ti -1c
.RI "class \fBMeanSplit\fP"
.br
.RI "A binary space partitioning tree node is split into its left and right child\&. "
.ti -1c
.RI "class \fBMidpointSpaceSplit\fP"
.br
.ti -1c
.RI "class \fBMidpointSplit\fP"
.br
.RI "A binary space partitioning tree node is split into its left and right child\&. "
.ti -1c
.RI "class \fBMinimalCoverageSweep\fP"
.br
.RI "The \fBMinimalCoverageSweep\fP class finds a partition along which we can split a node according to the coverage of two resulting nodes\&. "
.ti -1c
.RI "class \fBMinimalSplitsNumberSweep\fP"
.br
.RI "The \fBMinimalSplitsNumberSweep\fP class finds a partition along which we can split a node according to the number of required splits of the node\&. "
.ti -1c
.RI "class \fBMSEGain\fP"
.br
.RI "The MSE (Mean squared error) gain, is a measure of set purity based on the variance of response values present in the node\&. "
.ti -1c
.RI "class \fBMultipleRandomDimensionSelect\fP"
.br
.RI "This dimension selection policy allows the selection from a few random dimensions\&. "
.ti -1c
.RI "class \fBNoAuxiliaryInformation\fP"
.br
.ti -1c
.RI "class \fBNumericSplitInfo\fP"
.br
.ti -1c
.RI "class \fBOctree\fP"
.br
.ti -1c
.RI "class \fBProjVector\fP"
.br
.RI "\fBProjVector\fP defines a general projection vector (not necessarily axis-parallel)\&. "
.ti -1c
.RI "struct \fBQueueFrame\fP"
.br
.ti -1c
.RI "class \fBRandomBinaryNumericSplit\fP"
.br
.RI "The \fBRandomBinaryNumericSplit\fP is a splitting function for decision trees that will split based on a randomly selected point between the minimum and maximum value of the numerical dimension\&. "
.ti -1c
.RI "class \fBRandomDimensionSelect\fP"
.br
.RI "This dimension selection policy only selects one single random dimension\&. "
.ti -1c
.RI "class \fBRandomForest\fP"
.br
.RI "The \fBRandomForest\fP class provides an implementation of random forests, described in Breiman's seminal paper: "
.ti -1c
.RI "class \fBRPlusPlusTreeAuxiliaryInformation\fP"
.br
.ti -1c
.RI "class \fBRPlusPlusTreeDescentHeuristic\fP"
.br
.ti -1c
.RI "class \fBRPlusPlusTreeSplitPolicy\fP"
.br
.RI "The \fBRPlusPlusTreeSplitPolicy\fP helps to determine the subtree into which we should insert a child of an intermediate node that is being split\&. "
.ti -1c
.RI "class \fBRPlusTreeDescentHeuristic\fP"
.br
.ti -1c
.RI "class \fBRPlusTreeSplit\fP"
.br
.RI "The \fBRPlusTreeSplit\fP class performs the split process of a node on overflow\&. "
.ti -1c
.RI "class \fBRPlusTreeSplitPolicy\fP"
.br
.RI "The \fBRPlusPlusTreeSplitPolicy\fP helps to determine the subtree into which we should insert a child of an intermediate node that is being split\&. "
.ti -1c
.RI "class \fBRPTreeMaxSplit\fP"
.br
.RI "This class splits a node by a random hyperplane\&. "
.ti -1c
.RI "class \fBRPTreeMeanSplit\fP"
.br
.RI "This class splits a binary space tree\&. "
.ti -1c
.RI "class \fBRStarTreeDescentHeuristic\fP"
.br
.RI "When descending a \fBRectangleTree\fP to insert a point, we need to have a way to choose a child node when the point isn't enclosed by any of them\&. "
.ti -1c
.RI "class \fBRStarTreeSplit\fP"
.br
.RI "A Rectangle Tree has new points inserted at the bottom\&. "
.ti -1c
.RI "class \fBRTreeDescentHeuristic\fP"
.br
.RI "When descending a \fBRectangleTree\fP to insert a point, we need to have a way to choose a child node when the point isn't enclosed by any of them\&. "
.ti -1c
.RI "class \fBRTreeSplit\fP"
.br
.RI "A Rectangle Tree has new points inserted at the bottom\&. "
.ti -1c
.RI "class \fBSpaceSplit\fP"
.br
.ti -1c
.RI "class \fBSpillTree\fP"
.br
.RI "A hybrid spill tree is a variant of binary space trees in which the children of a node can 'spill over' each other, and contain shared datapoints\&. "
.ti -1c
.RI "class \fBTraversalInfo\fP"
.br
.RI "The \fBTraversalInfo\fP class holds traversal information which is used in dual-tree (and single-tree) traversals\&. "
.ti -1c
.RI "class \fBTreeTraits\fP"
.br
.RI "The \fBTreeTraits\fP class provides compile-time information on the characteristics of a given tree type\&. "
.ti -1c
.RI "class \fBTreeTraits< BinarySpaceTree< MetricType, StatisticType, MatType, bound::BallBound, SplitType > >\fP"
.br
.RI "This is a specialization of the TreeType class to the BallTree tree type\&. "
.ti -1c
.RI "class \fBTreeTraits< BinarySpaceTree< MetricType, StatisticType, MatType, bound::CellBound, SplitType > >\fP"
.br
.RI "This is a specialization of the TreeType class to the UBTree tree type\&. "
.ti -1c
.RI "class \fBTreeTraits< BinarySpaceTree< MetricType, StatisticType, MatType, bound::HollowBallBound, SplitType > >\fP"
.br
.RI "This is a specialization of the TreeType class to an arbitrary tree with HollowBallBound (currently only the vantage point tree is supported)\&. "
.ti -1c
.RI "class \fBTreeTraits< BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, RPTreeMaxSplit > >\fP"
.br
.RI "This is a specialization of the TreeType class to the max-split random projection tree\&. "
.ti -1c
.RI "class \fBTreeTraits< BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, RPTreeMeanSplit > >\fP"
.br
.RI "This is a specialization of the TreeType class to the mean-split random projection tree\&. "
.ti -1c
.RI "class \fBTreeTraits< BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType > >\fP"
.br
.RI "This is a specialization of the \fBTreeTraits\fP class to the \fBBinarySpaceTree\fP tree type\&. "
.ti -1c
.RI "class \fBTreeTraits< CoverTree< MetricType, StatisticType, MatType, RootPointPolicy > >\fP"
.br
.RI "The specialization of the \fBTreeTraits\fP class for the \fBCoverTree\fP tree type\&. "
.ti -1c
.RI "class \fBTreeTraits< Octree< MetricType, StatisticType, MatType > >\fP"
.br
.RI "This is a specialization of the \fBTreeTraits\fP class to the \fBOctree\fP tree type\&. "
.ti -1c
.RI "class \fBTreeTraits< RectangleTree< MetricType, StatisticType, MatType, RPlusTreeSplit< SplitPolicyType, SweepType >, DescentType, AuxiliaryInformationType > >\fP"
.br
.RI "Since the R+/R++ tree can not have overlapping children, we should define traits for the R+/R++ tree\&. "
.ti -1c
.RI "class \fBTreeTraits< RectangleTree< MetricType, StatisticType, MatType, SplitType, DescentType, AuxiliaryInformationType > >\fP"
.br
.RI "This is a specialization of the TreeType class to the \fBRectangleTree\fP tree type\&. "
.ti -1c
.RI "class \fBTreeTraits< SpillTree< MetricType, StatisticType, MatType, HyperplaneType, SplitType > >\fP"
.br
.RI "This is a specialization of the TreeType class to the \fBSpillTree\fP tree type\&. "
.ti -1c
.RI "class \fBUBTreeSplit\fP"
.br
.RI "Split a node into two parts according to the median address of points contained in the node\&. "
.ti -1c
.RI "class \fBVantagePointSplit\fP"
.br
.RI "The class splits a binary space partitioning tree node according to the median distance to the vantage point\&. "
.ti -1c
.RI "class \fBXTreeAuxiliaryInformation\fP"
.br
.RI "The \fBXTreeAuxiliaryInformation\fP class provides information specific to X trees for each node in a \fBRectangleTree\fP\&. "
.ti -1c
.RI "class \fBXTreeSplit\fP"
.br
.RI "A Rectangle Tree has new points inserted at the bottom\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "template<typename MetricType > using \fBAxisOrthogonalHyperplane\fP = \fBHyperplaneBase\fP< \fBbound::HRectBound\fP< MetricType >, \fBAxisParallelProjVector\fP >"
.br
.RI "AxisOrthogonalHyperplane represents a hyperplane orthogonal to an axis\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBBallTree\fP = \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, \fBbound::BallBound\fP, \fBMidpointSplit\fP >"
.br
.RI "A midpoint-split ball tree\&. "
.ti -1c
.RI "template<typename FitnessFunction > using \fBBinaryDoubleNumericSplit\fP = \fBBinaryNumericSplit\fP< FitnessFunction, double >"
.br
.ti -1c
.RI "typedef boost::heap::priority_queue< \fBCosineTree\fP *, boost::heap::compare< \fBCompareCosineNode\fP > > \fBCosineNodeQueue\fP"
.br
.ti -1c
.RI "template<typename FitnessFunction  = GiniGain, template< typename > class NumericSplitType = BestBinaryNumericSplit, template< typename > class CategoricalSplitType = AllCategoricalSplit, typename DimensionSelectType  = AllDimensionSelect> using \fBDecisionStump\fP = \fBDecisionTree\fP< FitnessFunction, NumericSplitType, CategoricalSplitType, DimensionSelectType, false >"
.br
.RI "Convenience typedef for decision stumps (single level decision trees)\&. "
.ti -1c
.RI "template<typename TreeType > using \fBDiscreteHilbertRTreeAuxiliaryInformation\fP = \fBHilbertRTreeAuxiliaryInformation\fP< TreeType, \fBDiscreteHilbertValue\fP >"
.br
.RI "The Hilbert R-tree, a variant of the R tree with an ordering along the Hilbert curve\&. "
.ti -1c
.RI "template<typename FitnessFunction  = GiniGain, typename DimensionSelectionType  = MultipleRandomDimensionSelect, template< typename > class CategoricalSplitType = AllCategoricalSplit> using \fBExtraTrees\fP = \fBRandomForest\fP< FitnessFunction, DimensionSelectionType, \fBRandomBinaryNumericSplit\fP, CategoricalSplitType, false >"
.br
.RI "Convenience typedef for Extra Trees\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBHilbertRTree\fP = RectangleTree< MetricType, StatisticType, MatType, \fBHilbertRTreeSplit\fP< 2 >, \fBHilbertRTreeDescentHeuristic\fP, \fBDiscreteHilbertRTreeAuxiliaryInformation\fP >"
.br
.ti -1c
.RI "template<typename FitnessFunction > using \fBHoeffdingDoubleNumericSplit\fP = \fBHoeffdingNumericSplit\fP< FitnessFunction, double >"
.br
.RI "Convenience typedef\&. "
.ti -1c
.RI "typedef StreamingDecisionTree< \fBHoeffdingTree\fP<> > \fBHoeffdingTreeType\fP"
.br
.ti -1c
.RI "template<typename MetricType > using \fBHyperplane\fP = \fBHyperplaneBase\fP< \fBbound::BallBound\fP< MetricType >, \fBProjVector\fP >"
.br
.RI "Hyperplane represents a general hyperplane (not necessarily axis-orthogonal)\&. "
.ti -1c
.RI "typedef \fBDecisionTree\fP< \fBInformationGain\fP, \fBBestBinaryNumericSplit\fP, \fBAllCategoricalSplit\fP, \fBAllDimensionSelect\fP, true > \fBID3DecisionStump\fP"
.br
.RI "Convenience typedef for ID3 decision stumps (single level decision trees made with the ID3 algorithm)\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBKDTree\fP = \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, \fBbound::HRectBound\fP, \fBMidpointSplit\fP >"
.br
.RI "The standard midpoint-split kd-tree\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBMaxRPTree\fP = \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, \fBbound::HRectBound\fP, \fBRPTreeMaxSplit\fP >"
.br
.RI "A max-split random projection tree\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBMeanSplitBallTree\fP = \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, \fBbound::BallBound\fP, \fBMeanSplit\fP >"
.br
.RI "A mean-split ball tree\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBMeanSplitKDTree\fP = \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, \fBbound::HRectBound\fP, \fBMeanSplit\fP >"
.br
.RI "A mean-split kd-tree\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBMeanSPTree\fP = \fBSpillTree\fP< MetricType, StatisticType, MatType, \fBAxisOrthogonalHyperplane\fP, \fBMeanSpaceSplit\fP >"
.br
.RI "A mean-split hybrid spill tree\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBNonOrtMeanSPTree\fP = \fBSpillTree\fP< MetricType, StatisticType, MatType, \fBHyperplane\fP, \fBMeanSpaceSplit\fP >"
.br
.RI "A mean-split hybrid spill tree considering general splitting hyperplanes (not necessarily axis-orthogonal)\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBNonOrtSPTree\fP = \fBSpillTree\fP< MetricType, StatisticType, MatType, \fBHyperplane\fP, \fBMidpointSpaceSplit\fP >"
.br
.RI "A hybrid spill tree considering general splitting hyperplanes (not necessarily axis-orthogonal)\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBRPlusPlusTree\fP = RectangleTree< MetricType, StatisticType, MatType, \fBRPlusTreeSplit\fP< \fBRPlusPlusTreeSplitPolicy\fP, \fBMinimalSplitsNumberSweep\fP >, \fBRPlusPlusTreeDescentHeuristic\fP, \fBRPlusPlusTreeAuxiliaryInformation\fP >"
.br
.RI "The R++ tree, a variant of the R+ tree with maximum buonding rectangles\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBRPlusTree\fP = RectangleTree< MetricType, StatisticType, MatType, \fBRPlusTreeSplit\fP< \fBRPlusTreeSplitPolicy\fP, \fBMinimalCoverageSweep\fP >, \fBRPlusTreeDescentHeuristic\fP, \fBNoAuxiliaryInformation\fP >"
.br
.RI "The R+ tree, a variant of the R tree that avoids overlapping rectangles\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBRPTree\fP = \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, \fBbound::HRectBound\fP, \fBRPTreeMeanSplit\fP >"
.br
.RI "A mean-split random projection tree\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBRStarTree\fP = RectangleTree< MetricType, StatisticType, MatType, \fBRStarTreeSplit\fP, \fBRStarTreeDescentHeuristic\fP, \fBNoAuxiliaryInformation\fP >"
.br
.RI "The R*-tree, a more recent variant of the R tree\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBRTree\fP = RectangleTree< MetricType, StatisticType, MatType, \fBRTreeSplit\fP, \fBRTreeDescentHeuristic\fP, \fBNoAuxiliaryInformation\fP >"
.br
.RI "An implementation of the R tree that satisfies the TreeType policy API\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBSPTree\fP = \fBSpillTree\fP< MetricType, StatisticType, MatType, \fBAxisOrthogonalHyperplane\fP, \fBMidpointSpaceSplit\fP >"
.br
.RI "The hybrid spill tree\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBStandardCoverTree\fP = \fBCoverTree\fP< MetricType, StatisticType, MatType, \fBFirstPointIsRoot\fP >"
.br
.RI "The standard cover tree, as detailed in the original cover tree paper: "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBUBTree\fP = \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, \fBbound::CellBound\fP, \fBUBTreeSplit\fP >"
.br
.RI "The Universal B-tree\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBVPTree\fP = \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, \fBbound::HollowBallBound\fP, \fBVPTreeSplit\fP >"
.br
.ti -1c
.RI "template<typename BoundType , typename MatType  = arma::mat> using \fBVPTreeSplit\fP = \fBVantagePointSplit\fP< BoundType, MatType, 100 >"
.br
.RI "The vantage point tree (which is also called the metric tree\&. "
.ti -1c
.RI "template<typename MetricType , typename StatisticType , typename MatType > using \fBXTree\fP = RectangleTree< MetricType, StatisticType, MatType, \fBXTreeSplit\fP, \fBRTreeDescentHeuristic\fP, \fBXTreeAuxiliaryInformation\fP >"
.br
.RI "The X-tree, a variant of the R tree with supernodes\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<bool UseWeights, typename MatType , typename LabelsType , typename WeightsType > void \fBBootstrap\fP (const MatType &dataset, const LabelsType &labels, const WeightsType &weights, MatType &bootstrapDataset, LabelsType &bootstrapLabels, WeightsType &bootstrapWeights)"
.br
.RI "Given a dataset, create another dataset via bootstrap sampling, with labels\&. "
.ti -1c
.RI "template<class TreeType , class Walker > void \fBEnumerateTree\fP (TreeType *tree, Walker &walker)"
.br
.RI "Traverses all nodes of the tree, including the inner ones\&. "
.ti -1c
.RI "\fBHAS_MEM_FUNC\fP (BinaryGains, HasBinaryGains)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const double \fBMAX_OVERLAP\fP = 0\&.2"
.br
.RI "The X-tree paper says that a maximum allowable overlap of 20% works well\&. "
.in -1c
.SH "Detailed Description"
.PP 
Trees and tree-building procedures\&. 


.SH "Typedef Documentation"
.PP 
.SS "using \fBAxisOrthogonalHyperplane\fP =  \fBHyperplaneBase\fP<\fBbound::HRectBound\fP<MetricType>, \fBAxisParallelProjVector\fP>"

.PP
AxisOrthogonalHyperplane represents a hyperplane orthogonal to an axis\&. 
.PP
Definition at line 145 of file hyperplane\&.hpp\&.
.SS "using \fBBallTree\fP =  \fBBinarySpaceTree\fP<MetricType, StatisticType, MatType, \fBbound::BallBound\fP, \fBMidpointSplit\fP>"

.PP
A midpoint-split ball tree\&. This tree holds its points only in the leaves, similar to the KDTree and MeanSplitKDTree\&. However, the bounding shape of each node is a ball, not a hyper-rectangle\&. This can make the ball tree advantageous in some higher-dimensional situations and for some datasets\&. The tree construction algorithm here is the same as Omohundro's 'K-d construction algorithm', except the splitting value is the midpoint, not the median\&. This can result in trees that better reflect the data, although they may be unbalanced\&.
.PP
.PP
.nf
@techreport{omohundro1989five,
  author={S\&.M\&. Omohundro},
  title={Five balltree construction algorithms},
  year={1989},
  institution={University of California, Berkeley International Computer
      Science Institute Technical Reports},
  number={TR-89-063}
}
.fi
.PP
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBBinarySpaceTree\fP, \fBKDTree\fP, \fBMeanSplitBallTree\fP 
.RE
.PP

.PP
Definition at line 112 of file typedef\&.hpp\&.
.SS "using \fBBinaryDoubleNumericSplit\fP =  \fBBinaryNumericSplit\fP<FitnessFunction, double>"

.PP
Definition at line 128 of file binary_numeric_split\&.hpp\&.
.SS "typedef boost::heap::priority_queue<\fBCosineTree\fP*, boost::heap::compare<\fBCompareCosineNode\fP> > \fBCosineNodeQueue\fP"

.PP
Definition at line 23 of file cosine_tree\&.hpp\&.
.SS "using \fBDecisionStump\fP =  \fBDecisionTree\fP<FitnessFunction, NumericSplitType, CategoricalSplitType, DimensionSelectType, false>"

.PP
Convenience typedef for decision stumps (single level decision trees)\&. 
.PP
Definition at line 585 of file decision_tree\&.hpp\&.
.SS "using \fBDiscreteHilbertRTreeAuxiliaryInformation\fP =  \fBHilbertRTreeAuxiliaryInformation\fP<TreeType, \fBDiscreteHilbertValue\fP>"

.PP
The Hilbert R-tree, a variant of the R tree with an ordering along the Hilbert curve\&. This template typedef satisfies the TreeType policy API\&.
.PP
.PP
.nf
@inproceedings{kamel1994r,
  author = {Kamel, Ibrahim and Faloutsos, Christos},
  title = {Hilbert R-tree: An Improved R-tree Using Fractals},
  booktitle = {Proceedings of the 20th International Conference on Very Large Data Bases},
  series = {VLDB '94},
  year = {1994},
  isbn = {1-55860-153-8},
  pages = {500--509},
  numpages = {10},
  url = {http://dl\&.acm\&.org/citation\&.cfm?id=645920\&.673001},
  acmid = {673001},
  publisher = {Morgan Kaufmann Publishers Inc\&.},
  address = {San Francisco, CA, USA}
}
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBRTree\fP, DiscreteHilbertRTree 
.RE
.PP

.PP
Definition at line 128 of file typedef\&.hpp\&.
.SS "using \fBExtraTrees\fP =  \fBRandomForest\fP<FitnessFunction, DimensionSelectionType, \fBRandomBinaryNumericSplit\fP, CategoricalSplitType, false>"

.PP
Convenience typedef for Extra Trees\&. (Extremely Randomized Trees Forest)
.PP
.PP
.nf
@article{10\&.1007/s10994-006-6226-1,
  author = {Geurts, Pierre and Ernst, Damien and Wehenkel, Louis},
  title = {Extremely Randomized Trees},
  year = {2006},
  issue_date = {April 2006},
  publisher = {Kluwer Academic Publishers},
  address = {USA},
  volume = {63},
  number = {1},
  issn = {0885-6125},
  url = {https://doi\&.org/10\&.1007/s10994-006-6226-1},
  doi = {10\&.1007/s10994-006-6226-1},
  journal = {Mach\&. Learn\&.},
  month = apr,
  pages = {3–42},
  numpages = {40},
}
.fi
.PP
 
.PP
Definition at line 443 of file random_forest\&.hpp\&.
.SS "using \fBHilbertRTree\fP =  RectangleTree<MetricType, StatisticType, MatType, \fBHilbertRTreeSplit\fP<2>, \fBHilbertRTreeDescentHeuristic\fP, \fBDiscreteHilbertRTreeAuxiliaryInformation\fP>"

.PP
Definition at line 136 of file typedef\&.hpp\&.
.SS "using \fBHoeffdingDoubleNumericSplit\fP =  \fBHoeffdingNumericSplit\fP<FitnessFunction, double>"

.PP
Convenience typedef\&. 
.PP
Definition at line 148 of file hoeffding_numeric_split\&.hpp\&.
.SS "typedef StreamingDecisionTree<\fBHoeffdingTree\fP<> > \fBHoeffdingTreeType\fP"

.PP
Definition at line 21 of file typedef\&.hpp\&.
.SS "using \fBHyperplane\fP =  \fBHyperplaneBase\fP<\fBbound::BallBound\fP<MetricType>, \fBProjVector\fP>"

.PP
Hyperplane represents a general hyperplane (not necessarily axis-orthogonal)\&. 
.PP
Definition at line 151 of file hyperplane\&.hpp\&.
.SS "typedef \fBDecisionTree\fP<\fBInformationGain\fP, \fBBestBinaryNumericSplit\fP, \fBAllCategoricalSplit\fP, \fBAllDimensionSelect\fP, true> \fBID3DecisionStump\fP"

.PP
Convenience typedef for ID3 decision stumps (single level decision trees made with the ID3 algorithm)\&. 
.PP
Definition at line 595 of file decision_tree\&.hpp\&.
.SS "using \fBKDTree\fP =  \fBBinarySpaceTree\fP<MetricType, StatisticType, MatType, \fBbound::HRectBound\fP, \fBMidpointSplit\fP>"

.PP
The standard midpoint-split kd-tree\&. This is not the original formulation by Bentley but instead the later formulation by Deng and Moore, which only holds points in the leaves of the tree\&. When recursively splitting nodes, the KDTree class select the dimension with maximum variance to split on, and picks the midpoint of the range in that dimension as the value on which to split nodes\&.
.PP
For more information, see the following papers\&.
.PP
.PP
.nf
@article{bentley1975multidimensional,
  title={Multidimensional binary search trees used for associative searching},
  author={Bentley, J\&.L\&.},
  journal={Communications of the ACM},
  volume={18},
  number={9},
  pages={509--517},
  year={1975},
  publisher={ACM}
}

@inproceedings{deng1995multiresolution,
  title={Multiresolution instance-based learning},
  author={Deng, K\&. and Moore, A\&.W\&.},
  booktitle={Proceedings of the 1995 International Joint Conference on AI
      (IJCAI-95)},
  pages={1233--1239},
  year={1995}
}
.fi
.PP
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBBinarySpaceTree\fP, \fBMeanSplitKDTree\fP 
.RE
.PP

.PP
Definition at line 63 of file typedef\&.hpp\&.
.SS "using \fBMaxRPTree\fP =  \fBBinarySpaceTree\fP<MetricType, StatisticType, MatType, \fBbound::HRectBound\fP, \fBRPTreeMaxSplit\fP>"

.PP
A max-split random projection tree\&. When recursively splitting nodes, the MaxSplitRPTree class selects a random hyperplane and splits a node by the hyperplane\&. The tree holds points in leaf nodes\&. In contrast to the k-d tree, children of a MaxSplitRPTree node may overlap\&.
.PP
.PP
.nf
@inproceedings{dasgupta2008,
  author = {Dasgupta, Sanjoy and Freund, Yoav},
  title = {Random Projection Trees and Low Dimensional Manifolds},
  booktitle = {Proceedings of the Fortieth Annual ACM Symposium on Theory of
      Computing},
  series = {STOC '08},
  year = {2008},
  pages = {537--546},
  numpages = {10},
  publisher = {ACM},
  address = {New York, NY, USA},
}
.fi
.PP
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBBinarySpaceTree\fP, \fBBallTree\fP, \fBMeanSplitKDTree\fP 
.RE
.PP

.PP
Definition at line 232 of file typedef\&.hpp\&.
.SS "using \fBMeanSplitBallTree\fP =  \fBBinarySpaceTree\fP<MetricType, StatisticType, MatType, \fBbound::BallBound\fP, \fBMeanSplit\fP>"

.PP
A mean-split ball tree\&. This tree, like the BallTree, holds its points only in the leaves\&. The tree construction algorithm here is the same as Omohundro's 'K-dc onstruction algorithm', except the splitting value is the mean, not the median\&. This can result in trees that better reflect the data, although they may be unbalanced\&.
.PP
.PP
.nf
@techreport{omohundro1989five,
  author={S\&.M\&. Omohundro},
  title={Five balltree construction algorithms},
  year={1989},
  institution={University of California, Berkeley International Computer
      Science Institute Technical Reports},
  number={TR-89-063}
}
.fi
.PP
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBBinarySpaceTree\fP, \fBBallTree\fP, \fBMeanSplitKDTree\fP 
.RE
.PP

.PP
Definition at line 141 of file typedef\&.hpp\&.
.SS "using \fBMeanSplitKDTree\fP =  \fBBinarySpaceTree\fP<MetricType, StatisticType, MatType, \fBbound::HRectBound\fP, \fBMeanSplit\fP>"

.PP
A mean-split kd-tree\&. This is the same as the KDTree, but this particular implementation will use the mean of the data in the split dimension as the value on which to split, instead of the midpoint\&. This can sometimes give better performance, but it is not always clear which type of tree is best\&.
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBBinarySpaceTree\fP, \fBKDTree\fP 
.RE
.PP

.PP
Definition at line 80 of file typedef\&.hpp\&.
.SS "using \fBMeanSPTree\fP =  \fBSpillTree\fP<MetricType, StatisticType, MatType, \fBAxisOrthogonalHyperplane\fP, \fBMeanSpaceSplit\fP>"

.PP
A mean-split hybrid spill tree\&. This is the same as the SPTree, but this particular implementation will use the mean of the data in the split dimension as the value on which to split, instead of the midpoint\&. This can sometimes give better performance, but it is not always clear which type of tree is best\&.
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBSpillTree\fP, \fBSPTree\fP 
.RE
.PP

.PP
Definition at line 80 of file typedef\&.hpp\&.
.SS "using \fBNonOrtMeanSPTree\fP =  \fBSpillTree\fP<MetricType, StatisticType, MatType, \fBHyperplane\fP, \fBMeanSpaceSplit\fP>"

.PP
A mean-split hybrid spill tree considering general splitting hyperplanes (not necessarily axis-orthogonal)\&. This is the same as the NonOrtSPTree, but this particular implementation will use the mean of the data in the split projection as the value on which to split, instead of the midpoint\&. This can sometimes give better performance, but it is not always clear which type of tree is best\&.
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBSpillTree\fP, \fBMeanSPTree\fP, \fBNonOrtSPTree\fP 
.RE
.PP

.PP
Definition at line 119 of file typedef\&.hpp\&.
.SS "using \fBNonOrtSPTree\fP =  \fBSpillTree\fP<MetricType, StatisticType, MatType, \fBHyperplane\fP, \fBMidpointSpaceSplit\fP>"

.PP
A hybrid spill tree considering general splitting hyperplanes (not necessarily axis-orthogonal)\&. This particular implementation will consider the midpoint of the projection of the data in the vector determined by the farthest pair of points\&. This can sometimes give better performance, but generally it doesn't because it takes O(d) to calculate the projection of the query point when deciding which node to traverse, while when using a axis-orthogonal hyperplane, as SPTree does, we can do it in O(1)\&.
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBSpillTree\fP, \fBSPTree\fP 
.RE
.PP

.PP
Definition at line 100 of file typedef\&.hpp\&.
.SS "using \fBRPlusPlusTree\fP =  RectangleTree<MetricType, StatisticType, MatType, \fBRPlusTreeSplit\fP<\fBRPlusPlusTreeSplitPolicy\fP, \fBMinimalSplitsNumberSweep\fP>, \fBRPlusPlusTreeDescentHeuristic\fP, \fBRPlusPlusTreeAuxiliaryInformation\fP>"

.PP
The R++ tree, a variant of the R+ tree with maximum buonding rectangles\&. This template typedef satisfies the TreeType policy API\&.
.PP
.PP
.nf
@inproceedings{sumak2014r,
  author = {{\v{S}}um{\'a}k, Martin and Gursk{\'y}, Peter},
  title = {R++-Tree: An Efficient Spatial Access Method for Highly Redundant
     Point Data},
  booktitle = {New Trends in Databases and Information Systems: 17th East
     European Conference on Advances in Databases and Information Systems},
  year = {2014},
  isbn = {978-3-319-01863-8},
  pages = {37--44},
  publisher = {Springer International Publishing},
}
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBRTree\fP, \fBRTree\fP, \fBRPlusTree\fP, \fBRPlusPlusTree\fP 
.RE
.PP

.PP
Definition at line 197 of file typedef\&.hpp\&.
.SS "using \fBRPlusTree\fP =  RectangleTree<MetricType, StatisticType, MatType, \fBRPlusTreeSplit\fP<\fBRPlusTreeSplitPolicy\fP, \fBMinimalCoverageSweep\fP>, \fBRPlusTreeDescentHeuristic\fP, \fBNoAuxiliaryInformation\fP>"

.PP
The R+ tree, a variant of the R tree that avoids overlapping rectangles\&. The implementation is modified from the original paper implementation\&. This template typedef satisfies the TreeType policy API\&.
.PP
.PP
.nf
@inproceedings{sellis1987r,
  author = {Sellis, Timos K\&. and Roussopoulos, Nick and Faloutsos, Christos},
  title = {The R+-Tree: A Dynamic Index for Multi-Dimensional Objects},
  booktitle = {Proceedings of the 13th International Conference on Very
     Large Data Bases},
  series = {VLDB '87},
  year = {1987},
  isbn = {0-934613-46-X},
  pages = {507--518},
  numpages = {12},
  publisher = {Morgan Kaufmann Publishers Inc\&.},
  address = {San Francisco, CA, USA},
}
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBRTree\fP, \fBRTree\fP, \fBRPlusTree\fP 
.RE
.PP

.PP
Definition at line 168 of file typedef\&.hpp\&.
.SS "using \fBRPTree\fP =  \fBBinarySpaceTree\fP<MetricType, StatisticType, MatType, \fBbound::HRectBound\fP, \fBRPTreeMeanSplit\fP>"

.PP
A mean-split random projection tree\&. When recursively splitting nodes, the RPTree class may perform one of two different kinds of split\&. Depending on the diameter and the average distance between points, the node may be split by a random hyperplane or according to the distance from the mean point\&. The tree holds points in leaf nodes\&. In contrast to the k-d tree, children of a MaxSplitRPTree node may overlap\&.
.PP
.PP
.nf
@inproceedings{dasgupta2008,
  author = {Dasgupta, Sanjoy and Freund, Yoav},
  title = {Random Projection Trees and Low Dimensional Manifolds},
  booktitle = {Proceedings of the Fortieth Annual ACM Symposium on Theory of
      Computing},
  series = {STOC '08},
  year = {2008},
  pages = {537--546},
  numpages = {10},
  publisher = {ACM},
  address = {New York, NY, USA},
}
.fi
.PP
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBBinarySpaceTree\fP, \fBBallTree\fP, \fBMeanSplitKDTree\fP 
.RE
.PP

.PP
Definition at line 266 of file typedef\&.hpp\&.
.SS "using \fBRStarTree\fP =  RectangleTree<MetricType, StatisticType, MatType, \fBRStarTreeSplit\fP, \fBRStarTreeDescentHeuristic\fP, \fBNoAuxiliaryInformation\fP>"

.PP
The R*-tree, a more recent variant of the R tree\&. This template typedef satisfies the TreeType policy API\&.
.PP
.PP
.nf
@inproceedings{beckmann1990r,
  title={The R*-tree: an efficient and robust access method for points and
      rectangles},
  author={Beckmann, N\&. and Kriegel, H\&.-P\&. and Schneider, R\&. and Seeger, B\&.},
  booktitle={Proceedings of the 1990 ACM SIGMOD International Conference on
      Management of Data (SIGMOD '90)},
  volume={19},
  number={2},
  year={1990},
  publisher={ACM}
}
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBRTree\fP 
.RE
.PP

.PP
Definition at line 75 of file typedef\&.hpp\&.
.SS "using \fBRTree\fP =  RectangleTree<MetricType, StatisticType, MatType, \fBRTreeSplit\fP, \fBRTreeDescentHeuristic\fP, \fBNoAuxiliaryInformation\fP>"

.PP
An implementation of the R tree that satisfies the TreeType policy API\&. This is the same R-tree structure as proposed by Guttman:
.PP
.PP
.nf
@inproceedings{guttman1984r,
  title={R-trees: a dynamic index structure for spatial searching},
  author={Guttman, A\&.},
  booktitle={Proceedings of the 1984 ACM SIGMOD International Conference on
      Management of Data (SIGMOD '84)},
  volume={14},
  number={2},
  year={1984},
  publisher={ACM}
}
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBRStarTree\fP 
.RE
.PP

.PP
Definition at line 47 of file typedef\&.hpp\&.
.SS "using \fBSPTree\fP =  \fBSpillTree\fP<MetricType, StatisticType, MatType, \fBAxisOrthogonalHyperplane\fP, \fBMidpointSpaceSplit\fP>"

.PP
The hybrid spill tree\&. It is a variant of metric-trees in which the children of a node can 'spill over' onto each other, and contain shared datapoints\&.
.PP
When recursively splitting nodes, the SPTree class select the dimension with maximum width to split on, and picks the midpoint of the range in that dimension as the value on which to split nodes\&.
.PP
In each case a 'overlapping buffer' is defined, included points at a distance less than tau from the decision boundary defined by the midpoint\&.
.PP
For each node, we first split the points considering the overlapping buffer\&. If either of its children contains more than rho fraction of the total points we undo the overlapping splitting\&. Instead a conventional partition is used\&. In this way, we can ensure that each split reduces the number of points of a node by at least a constant factor\&.
.PP
For more information, see the following paper\&.
.PP
.PP
.nf
@inproceedings{
  author = {Ting Liu, Andrew W\&. Moore, Alexander Gray and Ke Yang},
  title = {An Investigation of Practical Approximate Nearest Neighbor
    Algorithms},
  booktitle = {Advances in Neural Information Processing Systems 17},
  year = {2005},
  pages = {825--832}
}
.fi
.PP
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBSpillTree\fP, \fBMeanSPTree\fP 
.RE
.PP

.PP
Definition at line 62 of file typedef\&.hpp\&.
.SS "using \fBStandardCoverTree\fP =  \fBCoverTree\fP<MetricType, StatisticType, MatType, \fBFirstPointIsRoot\fP>"

.PP
The standard cover tree, as detailed in the original cover tree paper: 
.PP
.nf
@inproceedings{
  author={Beygelzimer, A\&. and Kakade, S\&. and Langford, J\&.},
  title={Cover trees for nearest neighbor},
  booktitle={Proceedings of the 23rd International Conference on Machine
      Learning (ICML 2006)},
  pages={97--104},
  year={2006}
}

.fi
.PP
.PP
This template typedef satisfies the requirements of the TreeType API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBCoverTree\fP 
.RE
.PP

.PP
Definition at line 42 of file typedef\&.hpp\&.
.SS "using \fBUBTree\fP =  \fBBinarySpaceTree\fP<MetricType, StatisticType, MatType, \fBbound::CellBound\fP, \fBUBTreeSplit\fP>"

.PP
The Universal B-tree\&. When recursively splitting nodes, the class calculates addresses of all points and splits each node according to the median address\&. Children may overlap since the implementation of a tighter bound requires a lot of arithmetic operations\&. In order to get a tighter bound increase the CellBound::maxNumBounds constant\&.
.PP
.PP
.nf
@inproceedings{bayer1997,
  author = {Bayer, Rudolf},
  title = {The Universal B-Tree for Multidimensional Indexing: General
      Concepts},
  booktitle = {Proceedings of the International Conference on Worldwide
      Computing and Its Applications},
  series = {WWCA '97},
  year = {1997},
  isbn = {3-540-63343-X},
  pages = {198--209},
  numpages = {12},
  publisher = {Springer-Verlag},
  address = {London, UK, UK},
}
.fi
.PP
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBBinarySpaceTree\fP, \fBBallTree\fP, \fBMeanSplitKDTree\fP 
.RE
.PP

.PP
Definition at line 301 of file typedef\&.hpp\&.
.SS "using \fBVPTree\fP =  \fBBinarySpaceTree\fP<MetricType, StatisticType, MatType, \fBbound::HollowBallBound\fP, \fBVPTreeSplit\fP>"

.PP
Definition at line 199 of file typedef\&.hpp\&.
.SS "using \fBVPTreeSplit\fP =  \fBVantagePointSplit\fP<BoundType, MatType, 100>"

.PP
The vantage point tree (which is also called the metric tree\&. Vantage point trees and metric trees were invented independently by Yianilos an Uhlmann) is a kind of the binary space tree\&. When recursively splitting nodes, the VPTree class selects the vantage point and splits the node according to the distance to this point\&. Thus, points that are closer to the vantage point form the inner subtree\&. Other points form the outer subtree\&. The vantage point is contained in the first (inner) node\&.
.PP
This implementation differs from the original algorithms\&. Namely, vantage points are not contained in intermediate nodes\&. The tree has points only in the leaves of the tree\&.
.PP
For more information, see the following papers\&.
.PP
.PP
.nf
@inproceedings{yianilos1993vptrees,
  author = {Yianilos, Peter N\&.},
  title = {Data Structures and Algorithms for Nearest Neighbor Search in
      General Metric Spaces},
  booktitle = {Proceedings of the Fourth Annual ACM-SIAM Symposium on
      Discrete Algorithms},
  series = {SODA '93},
  year = {1993},
  isbn = {0-89871-313-7},
  pages = {311--321},
  numpages = {11},
  publisher = {Society for Industrial and Applied Mathematics},
  address = {Philadelphia, PA, USA}
}

@article{uhlmann1991metrictrees,
  author = {Jeffrey K\&. Uhlmann},
  title = {Satisfying general proximity / similarity queries with metric
      trees},
  journal = {Information Processing Letters},
  volume = {40},
  number = {4},
  pages = {175 - 179},
  year = {1991},
}
.fi
.PP
.PP
This template typedef satisfies the TreeType policy API\&.
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBBinarySpaceTree\fP, VantagePointTree, \fBVPTree\fP 
.RE
.PP

.PP
Definition at line 192 of file typedef\&.hpp\&.
.SS "using \fBXTree\fP =  RectangleTree<MetricType, StatisticType, MatType, \fBXTreeSplit\fP, \fBRTreeDescentHeuristic\fP, \fBXTreeAuxiliaryInformation\fP>"

.PP
The X-tree, a variant of the R tree with supernodes\&. This template typedef satisfies the TreeType policy API\&.
.PP
.PP
.nf
@inproceedings{berchtold1996r,
  title = {The X-Tree: An Index Structure for High--Dimensional Data},
  author = {Berchtold, Stefan and Keim, Daniel A\&. and Kriegel, Hans-Peter},
  booktitle = {Proc\&. 22th Int\&. Conf\&. on Very Large Databases (VLDB'96), Bombay, India},
  editor = {Vijayaraman, T\&. and Buchmann, Alex and Mohan, C\&. and Sarda, N\&.},
  pages = {28--39},
  year = {1996},
  publisher = {Morgan Kaufmann}
}
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBThe TreeType policy in mlpack\fP, \fBRTree\fP, \fBRStarTree\fP 
.RE
.PP

.PP
Definition at line 101 of file typedef\&.hpp\&.
.SH "Function Documentation"
.PP 
.SS "void mlpack::tree::Bootstrap (const MatType & dataset, const LabelsType & labels, const WeightsType & weights, MatType & bootstrapDataset, LabelsType & bootstrapLabels, WeightsType & bootstrapWeights)"

.PP
Given a dataset, create another dataset via bootstrap sampling, with labels\&. 
.PP
Definition at line 26 of file bootstrap\&.hpp\&.
.SS "void mlpack::tree::EnumerateTree (TreeType * tree, Walker & walker)\fC [inline]\fP"

.PP
Traverses all nodes of the tree, including the inner ones\&. On each node two methods of the \fCenumer\fP are called:
.PP
Enter(TreeType* node, TreeType* parent); Leave(TreeType* node, TreeType* parent);
.PP
\fBParameters:\fP
.RS 4
\fItree\fP The tree to traverse\&. 
.br
\fIwalker\fP An instance of custom class, receiver of the enumeration\&. 
.RE
.PP

.PP
Definition at line 56 of file enumerate_tree\&.hpp\&.
.PP
References mlpack::tree::enumerate::EnumerateTreeImpl()\&.
.SS "mlpack::tree::HAS_MEM_FUNC (BinaryGains, HasBinaryGains)"

.SH "Variable Documentation"
.PP 
.SS "const double MAX_OVERLAP = 0\&.2"

.PP
The X-tree paper says that a maximum allowable overlap of 20% works well\&. This code should eventually be refactored so as to avoid polluting \fBmlpack::tree\fP with this random double\&. 
.PP
Definition at line 29 of file x_tree_split\&.hpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
