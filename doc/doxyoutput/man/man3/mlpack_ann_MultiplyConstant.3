.TH "MultiplyConstant< InputDataType, OutputDataType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MultiplyConstant< InputDataType, OutputDataType > \- Implementation of the multiply constant layer\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMultiplyConstant\fP (const double scalar=1\&.0)"
.br
.RI "Create the \fBMultiplyConstant\fP object\&. "
.ti -1c
.RI "\fBMultiplyConstant\fP (const \fBMultiplyConstant\fP &layer)"
.br
.RI "Copy Constructor\&. "
.ti -1c
.RI "\fBMultiplyConstant\fP (\fBMultiplyConstant\fP &&layer)"
.br
.RI "Move Constructor\&. "
.ti -1c
.RI "template<typename DataType > void \fBBackward\fP (const DataType &, const DataType &gy, DataType &g)"
.br
.RI "Ordinary feed backward pass of a neural network\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "template<typename InputType , typename OutputType > void \fBForward\fP (const InputType &input, OutputType &output)"
.br
.RI "Ordinary feed forward pass of a neural network\&. "
.ti -1c
.RI "\fBMultiplyConstant\fP & \fBoperator=\fP (const \fBMultiplyConstant\fP &layer)"
.br
.RI "Copy assignment operator\&. "
.ti -1c
.RI "\fBMultiplyConstant\fP & \fBoperator=\fP (\fBMultiplyConstant\fP &&layer)"
.br
.RI "Move assignment operator\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "double \fBScalar\fP () const"
.br
.RI "Get the scalar multiplier\&. "
.ti -1c
.RI "double & \fBScalar\fP ()"
.br
.RI "Modify the scalar multiplier\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.ti -1c
.RI "size_t \fBWeightSize\fP () const"
.br
.RI "Get the size of the weights\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::MultiplyConstant< InputDataType, OutputDataType >"
Implementation of the multiply constant layer\&. 

The multiply constant layer multiplies the input by a (non-learnable) constant\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 34 of file multiply_constant\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBMultiplyConstant\fP (const double scalar = \fC1\&.0\fP)"

.PP
Create the \fBMultiplyConstant\fP object\&. 
.SS "\fBMultiplyConstant\fP (const \fBMultiplyConstant\fP< InputDataType, OutputDataType > & layer)"

.PP
Copy Constructor\&. 
.SS "\fBMultiplyConstant\fP (\fBMultiplyConstant\fP< InputDataType, OutputDataType > && layer)"

.PP
Move Constructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void Backward (const DataType &, const DataType & gy, DataType & g)"

.PP
Ordinary feed backward pass of a neural network\&. The backward pass multiplies the error with the specified constant scalar value\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (input) The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "OutputDataType& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 81 of file multiply_constant\&.hpp\&.
.SS "OutputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 83 of file multiply_constant\&.hpp\&.
.SS "void Forward (const InputType & input, OutputType & output)"

.PP
Ordinary feed forward pass of a neural network\&. Multiply the input with the specified constant scalar value\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "\fBMultiplyConstant\fP& operator= (const \fBMultiplyConstant\fP< InputDataType, OutputDataType > & layer)"

.PP
Copy assignment operator\&. 
.SS "\fBMultiplyConstant\fP& operator= (\fBMultiplyConstant\fP< InputDataType, OutputDataType > && layer)"

.PP
Move assignment operator\&. 
.SS "OutputDataType& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 76 of file multiply_constant\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 78 of file multiply_constant\&.hpp\&.
.SS "double Scalar () const\fC [inline]\fP"

.PP
Get the scalar multiplier\&. 
.PP
Definition at line 86 of file multiply_constant\&.hpp\&.
.SS "double& Scalar ()\fC [inline]\fP"

.PP
Modify the scalar multiplier\&. 
.PP
Definition at line 88 of file multiply_constant\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by MultiplyConstant< InputDataType, OutputDataType >::WeightSize()\&.
.SS "size_t WeightSize () const\fC [inline]\fP"

.PP
Get the size of the weights\&. 
.PP
Definition at line 91 of file multiply_constant\&.hpp\&.
.PP
References MultiplyConstant< InputDataType, OutputDataType >::serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
