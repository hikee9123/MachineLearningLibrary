.TH "DuelingDQN< OutputLayerType, InitType, CompleteNetworkType, FeatureNetworkType, AdvantageNetworkType, ValueNetworkType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DuelingDQN< OutputLayerType, InitType, CompleteNetworkType, FeatureNetworkType, AdvantageNetworkType, ValueNetworkType > \- Implementation of the Dueling Deep Q-Learning network\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDuelingDQN\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBDuelingDQN\fP (const int inputDim, const int h1, const int h2, const int outputDim, const bool isNoisy=false, InitType init=InitType(), OutputLayerType outputLayer=OutputLayerType())"
.br
.RI "Construct an instance of \fBDuelingDQN\fP class\&. "
.ti -1c
.RI "\fBDuelingDQN\fP (FeatureNetworkType &featureNetwork, AdvantageNetworkType &advantageNetwork, ValueNetworkType &valueNetwork, const bool isNoisy=false)"
.br
.RI "Construct an instance of \fBDuelingDQN\fP class from a pre-constructed network\&. "
.ti -1c
.RI "\fBDuelingDQN\fP (const \fBDuelingDQN\fP &)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "void \fBBackward\fP (const arma::mat state, arma::mat &target, arma::mat &gradient)"
.br
.RI "Perform the backward pass of the state in real batch mode\&. "
.ti -1c
.RI "void \fBForward\fP (const arma::mat state, arma::mat &actionValue)"
.br
.RI "Perform the forward pass of the states in real batch mode\&. "
.ti -1c
.RI "void \fBoperator=\fP (const \fBDuelingDQN\fP &model)"
.br
.RI "Copy assignment operator\&. "
.ti -1c
.RI "const arma::mat & \fBParameters\fP () const"
.br
.RI "Return the Parameters\&. "
.ti -1c
.RI "arma::mat & \fBParameters\fP ()"
.br
.RI "Modify the Parameters\&. "
.ti -1c
.RI "void \fBPredict\fP (const arma::mat state, arma::mat &actionValue)"
.br
.RI "Predict the responses to a given set of predictors\&. "
.ti -1c
.RI "void \fBResetNoise\fP ()"
.br
.RI "Resets noise of the network, if the network is of type noisy\&. "
.ti -1c
.RI "void \fBResetParameters\fP ()"
.br
.RI "Resets the parameters of the network\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename OutputLayerType = EmptyLoss<>, typename InitType = GaussianInitialization, typename CompleteNetworkType = FFN<OutputLayerType, InitType>, typename FeatureNetworkType = Sequential<>, typename AdvantageNetworkType = Sequential<>, typename ValueNetworkType = Sequential<>>
.br
class mlpack::rl::DuelingDQN< OutputLayerType, InitType, CompleteNetworkType, FeatureNetworkType, AdvantageNetworkType, ValueNetworkType >"
Implementation of the Dueling Deep Q-Learning network\&. 

For more information, see the following\&.
.PP
.PP
.nf
@misc{wang2015dueling,
  author  = {Ziyu Wang, Tom Schaul, Matteo Hessel,Hado van Hasselt,
             Marc Lanctot, Nando de Freitas},
  title   = {Dueling Network Architectures for Deep Reinforcement Learning},
  year    = {2015},
  url     = {https://arxiv\&.org/abs/1511\&.06581}
}
.fi
.PP
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOutputLayerType\fP The output layer type of the network\&. 
.br
\fIInitType\fP The initialization type used for the network\&. 
.br
\fICompleteNetworkType\fP The type of network used for full dueling dqn\&. 
.br
\fIFeatureNetworkType\fP The type of network used for feature network\&. 
.br
\fIAdvantageNetworkType\fP The type of network used for advantage network\&. 
.br
\fIValueNetworkType\fP The type of network used for value network\&. 
.RE
.PP

.PP
Definition at line 56 of file dueling_dqn\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBDuelingDQN\fP ()\fC [inline]\fP"

.PP
Default constructor\&. 
.PP
Definition at line 60 of file dueling_dqn\&.hpp\&.
.PP
References Sequential< InputDataType, OutputDataType, Residual, CustomLayers >::Add()\&.
.SS "\fBDuelingDQN\fP (const int inputDim, const int h1, const int h2, const int outputDim, const bool isNoisy = \fCfalse\fP, InitType init = \fCInitType()\fP, OutputLayerType outputLayer = \fCOutputLayerType()\fP)\fC [inline]\fP"

.PP
Construct an instance of \fBDuelingDQN\fP class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinputDim\fP Number of inputs\&. 
.br
\fIh1\fP Number of neurons in hiddenlayer-1\&. 
.br
\fIh2\fP Number of neurons in hiddenlayer-2\&. 
.br
\fIoutputDim\fP Number of neurons in output layer\&. 
.br
\fIisNoisy\fP Specifies whether the network needs to be of type noisy\&. 
.br
\fIinit\fP Specifies the initialization rule for the network\&. 
.br
\fIoutputLayer\fP Specifies the output layer type for network\&. 
.RE
.PP

.PP
Definition at line 85 of file dueling_dqn\&.hpp\&.
.PP
References Sequential< InputDataType, OutputDataType, Residual, CustomLayers >::Add(), and Concat< InputDataType, OutputDataType, CustomLayers >::Add()\&.
.SS "\fBDuelingDQN\fP (FeatureNetworkType & featureNetwork, AdvantageNetworkType & advantageNetwork, ValueNetworkType & valueNetwork, const bool isNoisy = \fCfalse\fP)\fC [inline]\fP"

.PP
Construct an instance of \fBDuelingDQN\fP class from a pre-constructed network\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfeatureNetwork\fP The feature network to be used by \fBDuelingDQN\fP class\&. 
.br
\fIadvantageNetwork\fP The advantage network to be used by \fBDuelingDQN\fP class\&. 
.br
\fIvalueNetwork\fP The value network to be used by \fBDuelingDQN\fP class\&. 
.br
\fIisNoisy\fP Specifies whether the network needs to be of type noisy\&. 
.RE
.PP

.PP
Definition at line 144 of file dueling_dqn\&.hpp\&.
.PP
References Concat< InputDataType, OutputDataType, CustomLayers >::Add()\&.
.SS "\fBDuelingDQN\fP (const \fBDuelingDQN\fP< OutputLayerType, InitType, CompleteNetworkType, FeatureNetworkType, AdvantageNetworkType, ValueNetworkType > &)\fC [inline]\fP"

.PP
Copy constructor\&. 
.PP
Definition at line 163 of file dueling_dqn\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void Backward (const arma::mat state, arma::mat & target, arma::mat & gradient)\fC [inline]\fP"

.PP
Perform the backward pass of the state in real batch mode\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP The input state\&. 
.br
\fItarget\fP The training target\&. 
.br
\fIgradient\fP The gradient\&. 
.RE
.PP

.PP
Definition at line 221 of file dueling_dqn\&.hpp\&.
.SS "void Forward (const arma::mat state, arma::mat & actionValue)\fC [inline]\fP"

.PP
Perform the forward pass of the states in real batch mode\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP The input state\&. 
.br
\fIactionValue\fP Matrix to put output action values of states input\&. 
.RE
.PP

.PP
Definition at line 203 of file dueling_dqn\&.hpp\&.
.SS "void operator= (const \fBDuelingDQN\fP< OutputLayerType, InitType, CompleteNetworkType, FeatureNetworkType, AdvantageNetworkType, ValueNetworkType > & model)\fC [inline]\fP"

.PP
Copy assignment operator\&. 
.PP
Definition at line 167 of file dueling_dqn\&.hpp\&.
.SS "const arma::mat& Parameters () const\fC [inline]\fP"

.PP
Return the Parameters\&. 
.PP
Definition at line 256 of file dueling_dqn\&.hpp\&.
.SS "arma::mat& Parameters ()\fC [inline]\fP"

.PP
Modify the Parameters\&. 
.PP
Definition at line 258 of file dueling_dqn\&.hpp\&.
.SS "void Predict (const arma::mat state, arma::mat & actionValue)\fC [inline]\fP"

.PP
Predict the responses to a given set of predictors\&. The responses will reflect the output of the given output layer as returned by the output layer function\&.
.PP
If you want to pass in a parameter and discard the original parameter object, be sure to use std::move to avoid unnecessary copy\&.
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP Input state\&. 
.br
\fIactionValue\fP Matrix to put output action values of states input\&. 
.RE
.PP

.PP
Definition at line 187 of file dueling_dqn\&.hpp\&.
.SS "void ResetNoise ()\fC [inline]\fP"

.PP
Resets noise of the network, if the network is of type noisy\&. 
.PP
Definition at line 244 of file dueling_dqn\&.hpp\&.
.SS "void ResetParameters ()\fC [inline]\fP"

.PP
Resets the parameters of the network\&. 
.PP
Definition at line 236 of file dueling_dqn\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
