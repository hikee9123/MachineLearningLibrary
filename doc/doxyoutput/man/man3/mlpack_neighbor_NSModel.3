.TH "NSModel< SortPolicy >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NSModel< SortPolicy > \- The \fBNSModel\fP class provides an easy way to serialize a model, abstracts away the different types of trees, and also reflects the \fBNeighborSearch\fP API\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBTreeTypes\fP { \fBKD_TREE\fP, \fBCOVER_TREE\fP, \fBR_TREE\fP, \fBR_STAR_TREE\fP, \fBBALL_TREE\fP, \fBX_TREE\fP, \fBHILBERT_R_TREE\fP, \fBR_PLUS_TREE\fP, \fBR_PLUS_PLUS_TREE\fP, \fBVP_TREE\fP, \fBRP_TREE\fP, \fBMAX_RP_TREE\fP, \fBSPILL_TREE\fP, \fBUB_TREE\fP, \fBOCTREE\fP }
.RI "Enum type to identify each accepted tree type\&. ""
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNSModel\fP (\fBTreeTypes\fP treeType=TreeTypes::KD_TREE, bool randomBasis=false)"
.br
.RI "Initialize the \fBNSModel\fP with the given type and whether or not a random basis should be used\&. "
.ti -1c
.RI "\fBNSModel\fP (const \fBNSModel\fP &other)"
.br
.RI "Copy the given \fBNSModel\fP\&. "
.ti -1c
.RI "\fBNSModel\fP (\fBNSModel\fP &&other)"
.br
.RI "Take ownership of the given \fBNSModel\fP\&. "
.ti -1c
.RI "\fB~NSModel\fP ()"
.br
.RI "Clean memory, if necessary\&. "
.ti -1c
.RI "void \fBBuildModel\fP (\fButil::Timers\fP &timers, arma::mat &&referenceSet, const \fBNeighborSearchMode\fP searchMode, const double epsilon=0)"
.br
.RI "Build the reference tree\&. "
.ti -1c
.RI "const arma::mat & \fBDataset\fP () const"
.br
.RI "Expose the dataset\&. "
.ti -1c
.RI "double \fBEpsilon\fP () const"
.br
.RI "Expose Epsilon\&. "
.ti -1c
.RI "double & \fBEpsilon\fP ()"
.br
.ti -1c
.RI "void \fBInitializeModel\fP (const \fBNeighborSearchMode\fP searchMode, const double epsilon)"
.br
.RI "Initialize the model type\&. (This does not perform any training\&.) "
.ti -1c
.RI "size_t \fBLeafSize\fP () const"
.br
.RI "Expose LeafSize\&. "
.ti -1c
.RI "size_t & \fBLeafSize\fP ()"
.br
.ti -1c
.RI "\fBNSModel\fP & \fBoperator=\fP (const \fBNSModel\fP &other)"
.br
.RI "Copy the given \fBNSModel\fP\&. "
.ti -1c
.RI "\fBNSModel\fP & \fBoperator=\fP (\fBNSModel\fP &&other)"
.br
.RI "Take ownership of the given \fBNSModel\fP\&. "
.ti -1c
.RI "bool \fBRandomBasis\fP () const"
.br
.RI "Expose randomBasis\&. "
.ti -1c
.RI "bool & \fBRandomBasis\fP ()"
.br
.ti -1c
.RI "double \fBRho\fP () const"
.br
.RI "Expose Rho\&. "
.ti -1c
.RI "double & \fBRho\fP ()"
.br
.ti -1c
.RI "void \fBSearch\fP (\fButil::Timers\fP &timers, arma::mat &&querySet, const size_t k, arma::Mat< size_t > &neighbors, arma::mat &distances)"
.br
.RI "Perform neighbor search\&. The query set will be reordered\&. "
.ti -1c
.RI "void \fBSearch\fP (\fButil::Timers\fP &timers, const size_t k, arma::Mat< size_t > &neighbors, arma::mat &distances)"
.br
.RI "Perform monochromatic neighbor search\&. "
.ti -1c
.RI "\fBNeighborSearchMode\fP \fBSearchMode\fP () const"
.br
.RI "Expose SearchMode\&. "
.ti -1c
.RI "\fBNeighborSearchMode\fP & \fBSearchMode\fP ()"
.br
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the neighbor search model\&. "
.ti -1c
.RI "double \fBTau\fP () const"
.br
.RI "Expose Tau\&. "
.ti -1c
.RI "double & \fBTau\fP ()"
.br
.ti -1c
.RI "std::string \fBTreeName\fP () const"
.br
.RI "Return a string representation of the current tree type\&. "
.ti -1c
.RI "\fBTreeTypes\fP \fBTreeType\fP () const"
.br
.RI "Expose treeType\&. "
.ti -1c
.RI "\fBTreeTypes\fP & \fBTreeType\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename SortPolicy>
.br
class mlpack::neighbor::NSModel< SortPolicy >"
The \fBNSModel\fP class provides an easy way to serialize a model, abstracts away the different types of trees, and also reflects the \fBNeighborSearch\fP API\&. 

This class is meant to be used by the command-line mlpack_knn and mlpack_kfn programs, and thus does not have the same complete functionality and flexibility as the \fBNeighborSearch\fP class\&. So if you are using it outside of mlpack_knn and mlpack_kfn, be aware that it is limited!
.PP
\fBTemplate Parameters:\fP
.RS 4
\fISortPolicy\fP The sort policy for distances; see NearestNeighborSort\&. 
.RE
.PP

.PP
Definition at line 343 of file ns_model\&.hpp\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBTreeTypes\fP"

.PP
Enum type to identify each accepted tree type\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIKD_TREE \fP\fP
.TP
\fB\fICOVER_TREE \fP\fP
.TP
\fB\fIR_TREE \fP\fP
.TP
\fB\fIR_STAR_TREE \fP\fP
.TP
\fB\fIBALL_TREE \fP\fP
.TP
\fB\fIX_TREE \fP\fP
.TP
\fB\fIHILBERT_R_TREE \fP\fP
.TP
\fB\fIR_PLUS_TREE \fP\fP
.TP
\fB\fIR_PLUS_PLUS_TREE \fP\fP
.TP
\fB\fIVP_TREE \fP\fP
.TP
\fB\fIRP_TREE \fP\fP
.TP
\fB\fIMAX_RP_TREE \fP\fP
.TP
\fB\fISPILL_TREE \fP\fP
.TP
\fB\fIUB_TREE \fP\fP
.TP
\fB\fIOCTREE \fP\fP
.PP
Definition at line 347 of file ns_model\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBNSModel\fP (\fBTreeTypes\fP treeType = \fCTreeTypes::KD_TREE\fP, bool randomBasis = \fCfalse\fP)"

.PP
Initialize the \fBNSModel\fP with the given type and whether or not a random basis should be used\&. 
.PP
\fBParameters:\fP
.RS 4
\fItreeType\fP Type of tree to use\&. 
.br
\fIrandomBasis\fP Whether or not to project the points onto a random basis before searching\&. 
.RE
.PP

.SS "\fBNSModel\fP (const \fBNSModel\fP< SortPolicy > & other)"

.PP
Copy the given \fBNSModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Model to copy\&. 
.RE
.PP

.SS "\fBNSModel\fP (\fBNSModel\fP< SortPolicy > && other)"

.PP
Take ownership of the given \fBNSModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Model to take ownership of\&. 
.RE
.PP

.SS "~\fBNSModel\fP ()"

.PP
Clean memory, if necessary\&. 
.SH "Member Function Documentation"
.PP 
.SS "void BuildModel (\fButil::Timers\fP & timers, arma::mat && referenceSet, const \fBNeighborSearchMode\fP searchMode, const double epsilon = \fC0\fP)"

.PP
Build the reference tree\&. 
.SS "const arma::mat& Dataset () const"

.PP
Expose the dataset\&. 
.SS "double Epsilon () const"

.PP
Expose Epsilon\&. 
.SS "double& Epsilon ()"

.SS "void InitializeModel (const \fBNeighborSearchMode\fP searchMode, const double epsilon)"

.PP
Initialize the model type\&. (This does not perform any training\&.) 
.SS "size_t LeafSize () const\fC [inline]\fP"

.PP
Expose LeafSize\&. 
.PP
Definition at line 439 of file ns_model\&.hpp\&.
.SS "size_t& LeafSize ()\fC [inline]\fP"

.PP
Definition at line 440 of file ns_model\&.hpp\&.
.SS "\fBNSModel\fP& operator= (const \fBNSModel\fP< SortPolicy > & other)"

.PP
Copy the given \fBNSModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Model to copy\&. 
.RE
.PP

.SS "\fBNSModel\fP& operator= (\fBNSModel\fP< SortPolicy > && other)"

.PP
Take ownership of the given \fBNSModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Model to take ownership of\&. 
.RE
.PP

.SS "bool RandomBasis () const\fC [inline]\fP"

.PP
Expose randomBasis\&. 
.PP
Definition at line 459 of file ns_model\&.hpp\&.
.SS "bool& RandomBasis ()\fC [inline]\fP"

.PP
Definition at line 460 of file ns_model\&.hpp\&.
.PP
References NSWrapperBase::Search()\&.
.SS "double Rho () const\fC [inline]\fP"

.PP
Expose Rho\&. 
.PP
Definition at line 447 of file ns_model\&.hpp\&.
.SS "double& Rho ()\fC [inline]\fP"

.PP
Definition at line 448 of file ns_model\&.hpp\&.
.PP
References NSWrapperBase::Epsilon()\&.
.SS "void Search (\fButil::Timers\fP & timers, arma::mat && querySet, const size_t k, arma::Mat< size_t > & neighbors, arma::mat & distances)"

.PP
Perform neighbor search\&. The query set will be reordered\&. 
.SS "void Search (\fButil::Timers\fP & timers, const size_t k, arma::Mat< size_t > & neighbors, arma::mat & distances)"

.PP
Perform monochromatic neighbor search\&. 
.SS "\fBNeighborSearchMode\fP SearchMode () const"

.PP
Expose SearchMode\&. 
.SS "\fBNeighborSearchMode\fP& SearchMode ()"

.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the neighbor search model\&. 
.SS "double Tau () const\fC [inline]\fP"

.PP
Expose Tau\&. 
.PP
Definition at line 443 of file ns_model\&.hpp\&.
.SS "double& Tau ()\fC [inline]\fP"

.PP
Definition at line 444 of file ns_model\&.hpp\&.
.SS "std::string TreeName () const"

.PP
Return a string representation of the current tree type\&. 
.SS "\fBTreeTypes\fP TreeType () const\fC [inline]\fP"

.PP
Expose treeType\&. 
.PP
Definition at line 455 of file ns_model\&.hpp\&.
.SS "\fBTreeTypes\fP& TreeType ()\fC [inline]\fP"

.PP
Definition at line 456 of file ns_model\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
