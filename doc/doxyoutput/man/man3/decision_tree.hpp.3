.TH "/home/aakash/mlpack/src/mlpack/methods/decision_tree/decision_tree.hpp" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/aakash/mlpack/src/mlpack/methods/decision_tree/decision_tree.hpp
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBDecisionTree< FitnessFunction, NumericSplitType, CategoricalSplitType, DimensionSelectionType, NoRecursion >\fP"
.br
.RI "This class implements a generic decision tree learner\&. "
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBmlpack\fP"
.br
.RI "Linear algebra utility functions, generally performed on matrices or vectors\&. "
.ti -1c
.RI " \fBmlpack::tree\fP"
.br
.RI "Trees and tree-building procedures\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "template<typename FitnessFunction  = GiniGain, template< typename > class NumericSplitType = BestBinaryNumericSplit, template< typename > class CategoricalSplitType = AllCategoricalSplit, typename DimensionSelectType  = AllDimensionSelect> using \fBDecisionStump\fP = DecisionTree< FitnessFunction, NumericSplitType, CategoricalSplitType, DimensionSelectType, false >"
.br
.RI "Convenience typedef for decision stumps (single level decision trees)\&. "
.ti -1c
.RI "typedef DecisionTree< InformationGain, BestBinaryNumericSplit, AllCategoricalSplit, AllDimensionSelect, true > \fBID3DecisionStump\fP"
.br
.RI "Convenience typedef for ID3 decision stumps (single level decision trees made with the ID3 algorithm)\&. "
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBAuthor:\fP
.RS 4
Ryan Curtin
.RE
.PP
A generic decision tree learner\&. Its behavior can be controlled via template arguments\&.
.PP
mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license\&. You should have received a copy of the 3-clause BSD license along with mlpack\&. If not, see http://www.opensource.org/licenses/BSD-3-Clause for more information\&. 
.PP
Definition in file \fBdecision_tree\&.hpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
