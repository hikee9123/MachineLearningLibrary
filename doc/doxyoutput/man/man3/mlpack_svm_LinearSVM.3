.TH "LinearSVM< MatType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LinearSVM< MatType > \- The \fBLinearSVM\fP class implements an L2-regularized support vector machine model, and supports training with multiple optimizers and classification\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename OptimizerType , typename\&.\&.\&. CallbackTypes> \fBLinearSVM\fP (const MatType &data, const arma::Row< size_t > &labels, const size_t numClasses, const double lambda, const double delta, const bool fitIntercept, OptimizerType optimizer, CallbackTypes &&\&.\&.\&. callbacks)"
.br
.RI "Construct the \fBLinearSVM\fP class with the provided data and labels\&. "
.ti -1c
.RI "template<typename OptimizerType  = ens::L_BFGS> \fBLinearSVM\fP (const MatType &data, const arma::Row< size_t > &labels, const size_t numClasses=2, const double lambda=0\&.0001, const double delta=1\&.0, const bool fitIntercept=false, OptimizerType optimizer=OptimizerType())"
.br
.RI "Construct the \fBLinearSVM\fP class with the provided data and labels\&. "
.ti -1c
.RI "\fBLinearSVM\fP (const size_t inputSize, const size_t numClasses=0, const double lambda=0\&.0001, const double delta=1\&.0, const bool fitIntercept=false)"
.br
.RI "Initialize the Linear SVM without performing training\&. "
.ti -1c
.RI "\fBLinearSVM\fP (const size_t numClasses=0, const double lambda=0\&.0001, const double delta=1\&.0, const bool fitIntercept=false)"
.br
.RI "Initialize the Linear SVM without performing training\&. "
.ti -1c
.RI "void \fBClassify\fP (const MatType &data, arma::Row< size_t > &labels) const"
.br
.RI "Classify the given points, returning the predicted labels for each point\&. "
.ti -1c
.RI "void \fBClassify\fP (const MatType &data, arma::Row< size_t > &labels, arma::mat &scores) const"
.br
.RI "Classify the given points, returning class scores and predicted class label for each point\&. "
.ti -1c
.RI "void \fBClassify\fP (const MatType &data, arma::mat &scores) const"
.br
.RI "Classify the given points, returning class scores for each point\&. "
.ti -1c
.RI "template<typename VecType > size_t \fBClassify\fP (const VecType &point) const"
.br
.RI "Classify the given point\&. "
.ti -1c
.RI "double \fBComputeAccuracy\fP (const MatType &testData, const arma::Row< size_t > &testLabels) const"
.br
.RI "Computes accuracy of the learned model given the feature data and the labels associated with each data point\&. "
.ti -1c
.RI "double & \fBDelta\fP ()"
.br
.RI "Sets the margin between the correct class and all other classes\&. "
.ti -1c
.RI "double \fBDelta\fP () const"
.br
.RI "Gets the margin between the correct class and all other classes\&. "
.ti -1c
.RI "size_t \fBFeatureSize\fP () const"
.br
.RI "Gets the features size of the training data\&. "
.ti -1c
.RI "bool & \fBFitIntercept\fP ()"
.br
.RI "Sets the intercept term flag\&. "
.ti -1c
.RI "double & \fBLambda\fP ()"
.br
.RI "Sets the regularization parameter\&. "
.ti -1c
.RI "double \fBLambda\fP () const"
.br
.RI "Gets the regularization parameter\&. "
.ti -1c
.RI "size_t & \fBNumClasses\fP ()"
.br
.RI "Sets the number of classes\&. "
.ti -1c
.RI "size_t \fBNumClasses\fP () const"
.br
.RI "Gets the number of classes\&. "
.ti -1c
.RI "arma::mat & \fBParameters\fP ()"
.br
.RI "Set the model parameters\&. "
.ti -1c
.RI "const arma::mat & \fBParameters\fP () const"
.br
.RI "Get the model parameters\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the \fBLinearSVM\fP model\&. "
.ti -1c
.RI "template<typename OptimizerType , typename\&.\&.\&. CallbackTypes> double \fBTrain\fP (const MatType &data, const arma::Row< size_t > &labels, const size_t numClasses, OptimizerType optimizer, CallbackTypes &&\&.\&.\&. callbacks)"
.br
.RI "Train the Linear SVM with the given training data\&. "
.ti -1c
.RI "template<typename OptimizerType  = ens::L_BFGS> double \fBTrain\fP (const MatType &data, const arma::Row< size_t > &labels, const size_t numClasses=2, OptimizerType optimizer=OptimizerType())"
.br
.RI "Train the Linear SVM with the given training data\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MatType = arma::mat>
.br
class mlpack::svm::LinearSVM< MatType >"
The \fBLinearSVM\fP class implements an L2-regularized support vector machine model, and supports training with multiple optimizers and classification\&. 

The class supports different observation types via the MatType template parameter; for instance, support vector classification can be performed on sparse datasets by specifying arma::sp_mat as the MatType parameter\&.
.PP
Linear SVM can be used for general classification tasks which will work on multiclass classification\&. More technical details about the model can be found from the following:
.PP
.PP
.nf
@inproceedings{weston1999support,
title        = {Support vector machines for multi-class pattern
                recognition\&.},
author       = {Weston, Jason and Watkins, Chris},
booktitle    = {Proceedings of the 7th European Symposium on Artifical Neural
                Networks (ESANN '99)},
volume       = {99},
pages        = {219--224},
year         = {1999}
}
.fi
.PP
.PP
.PP
.nf
@article{cortes1995support,
title        = {Support-vector networks},
author       = {Cortes, Corinna and Vapnik, Vladimir},
journal      = {Machine Learning},
volume       = {20},
number       = {3},
pages        = {273--297},
year         = {1995},
publisher    = {Springer}
}
.fi
.PP
.PP
An example on how to use the interface is shown below:
.PP
.PP
.nf
arma::mat train_data; // Training data matrix\&.
arma::Row<size_t> labels; // Labels associated with the data\&.
const size_t inputSize = 1000; // Size of input feature vector\&.
const size_t numClasses = 5; // Number of classes\&.

// Train the model using default options\&.
LinearSVM<> lsvm(train_data, labels, inputSize, numClasses, lambda,
    delta, L_BFGS());

arma::mat test_data;
arma::Row<size_t> predictions;
lsvm\&.Classify(test_data, predictions);
.fi
.PP
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMatType\fP Type of data matrix\&. 
.RE
.PP

.PP
Definition at line 80 of file linear_svm\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBLinearSVM\fP (const MatType & data, const arma::Row< size_t > & labels, const size_t numClasses, const double lambda, const double delta, const bool fitIntercept, OptimizerType optimizer, CallbackTypes &&\&.\&.\&. callbacks)"

.PP
Construct the \fBLinearSVM\fP class with the provided data and labels\&. This will train the model\&. Optionally, the parameter 'lambda' can be passed, which controls the amount of L2-regularization in the objective function\&. By default, the model takes a small value\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOptimizerType\fP Desired differentiable separable optimizer 
.br
\fICallbackTypes\fP Types of callback functions\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Input training features\&. Each column associate with one sample 
.br
\fIlabels\fP Labels associated with the feature data\&. 
.br
\fInumClasses\fP Number of classes for classification\&. 
.br
\fIlambda\fP L2-regularization constant\&. 
.br
\fIdelta\fP Margin of difference between correct class and other classes\&. 
.br
\fIfitIntercept\fP add intercept term or not\&. 
.br
\fIoptimizer\fP Desired optimizer\&. 
.br
\fIcallbacks\fP Callback functions\&. See https://www.ensmallen.org/docs.html#callback-documentation\&. 
.RE
.PP

.SS "\fBLinearSVM\fP (const MatType & data, const arma::Row< size_t > & labels, const size_t numClasses = \fC2\fP, const double lambda = \fC0\&.0001\fP, const double delta = \fC1\&.0\fP, const bool fitIntercept = \fCfalse\fP, OptimizerType optimizer = \fCOptimizerType()\fP)"

.PP
Construct the \fBLinearSVM\fP class with the provided data and labels\&. This will train the model\&. Optionally, the parameter 'lambda' can be passed, which controls the amount of L2-regularization in the objective function\&. By default, the model takes a small value\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOptimizerType\fP Desired differentiable separable optimizer 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Input training features\&. Each column associate with one sample 
.br
\fIlabels\fP Labels associated with the feature data\&. 
.br
\fInumClasses\fP Number of classes for classification\&. 
.br
\fIlambda\fP L2-regularization constant\&. 
.br
\fIdelta\fP Margin of difference between correct class and other classes\&. 
.br
\fIfitIntercept\fP add intercept term or not\&. 
.br
\fIoptimizer\fP Desired optimizer\&. 
.RE
.PP

.SS "\fBLinearSVM\fP (const size_t inputSize, const size_t numClasses = \fC0\fP, const double lambda = \fC0\&.0001\fP, const double delta = \fC1\&.0\fP, const bool fitIntercept = \fCfalse\fP)"

.PP
Initialize the Linear SVM without performing training\&. Default value of lambda is 0\&.0001\&. Be sure to use \fBTrain()\fP before calling \fBClassify()\fP or \fBComputeAccuracy()\fP, otherwise the results may be meaningless\&.
.PP
\fBParameters:\fP
.RS 4
\fIinputSize\fP Size of the input feature vector\&. 
.br
\fInumClasses\fP Number of classes for classification\&. 
.br
\fIlambda\fP L2-regularization constant\&. 
.br
\fIdelta\fP Margin of difference between correct class and other classes\&. 
.br
\fIfitIntercept\fP add intercept term or not\&. 
.RE
.PP

.SS "\fBLinearSVM\fP (const size_t numClasses = \fC0\fP, const double lambda = \fC0\&.0001\fP, const double delta = \fC1\&.0\fP, const bool fitIntercept = \fCfalse\fP)"

.PP
Initialize the Linear SVM without performing training\&. Default value of lambda is 0\&.0001\&. Be sure to use \fBTrain()\fP before calling \fBClassify()\fP or \fBComputeAccuracy()\fP, otherwise the results may be meaningless\&.
.PP
\fBParameters:\fP
.RS 4
\fInumClasses\fP Number of classes for classification\&. 
.br
\fIlambda\fP L2-regularization constant\&. 
.br
\fIdelta\fP Margin of difference between correct class and other classes\&. 
.br
\fIfitIntercept\fP add intercept term or not\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Classify (const MatType & data, arma::Row< size_t > & labels) const"

.PP
Classify the given points, returning the predicted labels for each point\&. The function calculates the probabilities for every class, given a data point\&. It then chooses the class which has the highest probability among all\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Set of points to classify\&. 
.br
\fIlabels\fP Predicted labels for each point\&. 
.RE
.PP

.SS "void Classify (const MatType & data, arma::Row< size_t > & labels, arma::mat & scores) const"

.PP
Classify the given points, returning class scores and predicted class label for each point\&. The function calculates the scores for every class, given a data point\&. It then chooses the class which has the highest probability among all\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Matrix of data points to be classified\&. 
.br
\fIlabels\fP Predicted labels for each point\&. 
.br
\fIscores\fP Class probabilities for each point\&. 
.RE
.PP

.SS "void Classify (const MatType & data, arma::mat & scores) const"

.PP
Classify the given points, returning class scores for each point\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Matrix of data points to be classified\&. 
.br
\fIscores\fP Class scores for each point\&. 
.RE
.PP

.SS "size_t Classify (const VecType & point) const"

.PP
Classify the given point\&. The predicted class label is returned\&. The function calculates the scores for every class, given the point\&. It then chooses the class which has the highest probability among all\&.
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to be classified\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Predicted class label of the point\&. 
.RE
.PP

.SS "double ComputeAccuracy (const MatType & testData, const arma::Row< size_t > & testLabels) const"

.PP
Computes accuracy of the learned model given the feature data and the labels associated with each data point\&. Predictions are made using the provided data and are compared with the actual labels\&.
.PP
\fBParameters:\fP
.RS 4
\fItestData\fP Matrix of data points using which predictions are made\&. 
.br
\fItestLabels\fP Vector of labels associated with the data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Accuracy of the model\&. 
.RE
.PP

.SS "double& Delta ()\fC [inline]\fP"

.PP
Sets the margin between the correct class and all other classes\&. 
.PP
Definition at line 273 of file linear_svm\&.hpp\&.
.SS "double Delta () const\fC [inline]\fP"

.PP
Gets the margin between the correct class and all other classes\&. 
.PP
Definition at line 275 of file linear_svm\&.hpp\&.
.SS "size_t FeatureSize () const\fC [inline]\fP"

.PP
Gets the features size of the training data\&. 
.PP
Definition at line 286 of file linear_svm\&.hpp\&.
.SS "bool& FitIntercept ()\fC [inline]\fP"

.PP
Sets the intercept term flag\&. 
.PP
Definition at line 278 of file linear_svm\&.hpp\&.
.SS "double& Lambda ()\fC [inline]\fP"

.PP
Sets the regularization parameter\&. 
.PP
Definition at line 268 of file linear_svm\&.hpp\&.
.SS "double Lambda () const\fC [inline]\fP"

.PP
Gets the regularization parameter\&. 
.PP
Definition at line 270 of file linear_svm\&.hpp\&.
.SS "size_t& NumClasses ()\fC [inline]\fP"

.PP
Sets the number of classes\&. 
.PP
Definition at line 263 of file linear_svm\&.hpp\&.
.SS "size_t NumClasses () const\fC [inline]\fP"

.PP
Gets the number of classes\&. 
.PP
Definition at line 265 of file linear_svm\&.hpp\&.
.SS "arma::mat& Parameters ()\fC [inline]\fP"

.PP
Set the model parameters\&. 
.PP
Definition at line 281 of file linear_svm\&.hpp\&.
.SS "const arma::mat& Parameters () const\fC [inline]\fP"

.PP
Get the model parameters\&. 
.PP
Definition at line 283 of file linear_svm\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)\fC [inline]\fP"

.PP
Serialize the \fBLinearSVM\fP model\&. 
.PP
Definition at line 294 of file linear_svm\&.hpp\&.
.SS "double Train (const MatType & data, const arma::Row< size_t > & labels, const size_t numClasses, OptimizerType optimizer, CallbackTypes &&\&.\&.\&. callbacks)"

.PP
Train the Linear SVM with the given training data\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOptimizerType\fP Desired optimizer\&. 
.br
\fICallbackTypes\fP Types of Callback Functions\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Input training features\&. Each column associate with one sample\&. 
.br
\fIlabels\fP Labels associated with the feature data\&. 
.br
\fInumClasses\fP Number of classes for classification\&. 
.br
\fIoptimizer\fP Desired optimizer\&. 
.br
\fIcallbacks\fP Callback Functions\&. See https://www.ensmallen.org/docs.html#callback-documentation\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Objective value of the final point\&. 
.RE
.PP

.SS "double Train (const MatType & data, const arma::Row< size_t > & labels, const size_t numClasses = \fC2\fP, OptimizerType optimizer = \fCOptimizerType()\fP)"

.PP
Train the Linear SVM with the given training data\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOptimizerType\fP Desired optimizer\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Input training features\&. Each column associate with one sample\&. 
.br
\fIlabels\fP Labels associated with the feature data\&. 
.br
\fInumClasses\fP Number of classes for classification\&. 
.br
\fIoptimizer\fP Desired optimizer\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Objective value of the final point\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
