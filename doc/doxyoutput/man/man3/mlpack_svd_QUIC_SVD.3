.TH "QUIC_SVD" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QUIC_SVD \- QUIC-SVD is a matrix factorization technique, which operates in a subspace such that A's approximation in that subspace has minimum error(A being the data matrix)\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQUIC_SVD\fP (const arma::mat &dataset, arma::mat &u, arma::mat &v, arma::mat &sigma, const double epsilon=0\&.03, const double delta=0\&.1)"
.br
.RI "Constructor which implements the QUIC-SVD algorithm\&. "
.ti -1c
.RI "void \fBExtractSVD\fP (arma::mat &u, arma::mat &v, arma::mat &sigma)"
.br
.RI "This function uses the vector subspace created using a cosine tree to calculate an approximate SVD of the original matrix\&. "
.in -1c
.SH "Detailed Description"
.PP 
QUIC-SVD is a matrix factorization technique, which operates in a subspace such that A's approximation in that subspace has minimum error(A being the data matrix)\&. 

The subspace is constructed using a cosine tree, which ensures minimum representative rank(and thus a fast running time)\&. It follows a splitting policy based on Length-squared(LS) sampling and constructs the child nodes based on the absolute cosines of the remaining points relative to the pivot\&. The centroids of the points in the child nodes are added to the subspace span in each step\&. Each node is then placed into a queue prioritized by its residual error\&. The subspace approximation error of A after each step is calculated using a Monte Carlo estimate\&. If the error is below a certain threshold, the method proceeds to calculate the Singular Value Decomposition in the obtained subspace\&. Otherwise, the same procedure is repeated until we obtain a subspace of sufficiently low error\&. Technical details can be found in the following paper:
.PP
http://www.cc.gatech.edu/~isbell/papers/isbell-quicsvd-nips-2008.pdf
.PP
An example of how to use the interface is shown below:
.PP
.PP
.nf
arma::mat data; // Data matrix\&.

const double epsilon = 0\&.01; // Relative error limit of data in subspace\&.
const double delta = 0\&.1 // Lower error bound for Monte Carlo estimate\&.

arma::mat u, v, sigma; // Matrices for the factors\&. data = u * sigma * v\&.t()

// Get the factorization in the constructor\&.
QUIC_SVD(data, u, v, sigma, epsilon, delta);
.fi
.PP
 
.PP
Definition at line 53 of file quic_svd\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBQUIC_SVD\fP (const arma::mat & dataset, arma::mat & u, arma::mat & v, arma::mat & sigma, const double epsilon = \fC0\&.03\fP, const double delta = \fC0\&.1\fP)"

.PP
Constructor which implements the QUIC-SVD algorithm\&. The function calls the CosineTree constructor to create a subspace basis, where the original matrix's projection has minimum reconstruction error\&. The constructor then uses the \fBExtractSVD()\fP function to calculate the SVD of the original dataset in that subspace\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Matrix for which SVD is calculated\&. 
.br
\fIu\fP First unitary matrix\&. 
.br
\fIv\fP Second unitary matrix\&. 
.br
\fIsigma\fP Diagonal matrix of singular values\&. 
.br
\fIepsilon\fP Error tolerance fraction for calculated subspace\&. 
.br
\fIdelta\fP Cumulative probability for Monte Carlo error lower bound\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void ExtractSVD (arma::mat & u, arma::mat & v, arma::mat & sigma)"

.PP
This function uses the vector subspace created using a cosine tree to calculate an approximate SVD of the original matrix\&. 
.PP
\fBParameters:\fP
.RS 4
\fIu\fP First unitary matrix\&. 
.br
\fIv\fP Second unitary matrix\&. 
.br
\fIsigma\fP Diagonal matrix of singular values\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
