.TH "NoAuxiliaryInformation< TreeType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NoAuxiliaryInformation< TreeType >
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNoAuxiliaryInformation\fP ()"
.br
.RI "Construct the auxiliary information object\&. "
.ti -1c
.RI "\fBNoAuxiliaryInformation\fP (const TreeType *)"
.br
.RI "Construct the auxiliary information object\&. "
.ti -1c
.RI "\fBNoAuxiliaryInformation\fP (const \fBNoAuxiliaryInformation\fP &, TreeType *, bool=true)"
.br
.RI "Construct the auxiliary information object\&. "
.ti -1c
.RI "\fBNoAuxiliaryInformation\fP (\fBNoAuxiliaryInformation\fP &&)"
.br
.RI "Construct the auxiliary information object\&. "
.ti -1c
.RI "bool \fBHandleNodeInsertion\fP (TreeType *, TreeType *, bool)"
.br
.RI "Some tree types require to save some properties at the insertion process\&. "
.ti -1c
.RI "bool \fBHandleNodeRemoval\fP (TreeType *, const size_t)"
.br
.RI "Some tree types require to save some properties at the deletion process\&. "
.ti -1c
.RI "bool \fBHandlePointDeletion\fP (TreeType *, const size_t)"
.br
.RI "Some tree types require to save some properties at the deletion process\&. "
.ti -1c
.RI "bool \fBHandlePointInsertion\fP (TreeType *, const size_t)"
.br
.RI "Some tree types require to save some properties at the insertion process\&. "
.ti -1c
.RI "void \fBNullifyData\fP ()"
.br
.RI "Nullify the auxiliary information in order to prevent an invalid free\&. "
.ti -1c
.RI "\fBNoAuxiliaryInformation\fP & \fBoperator=\fP (const \fBNoAuxiliaryInformation\fP &)"
.br
.RI "Copy the auxiliary information object\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &, const uint32_t)"
.br
.RI "Serialize the information\&. "
.ti -1c
.RI "void \fBSplitAuxiliaryInfo\fP (TreeType *, TreeType *, size_t, typename TreeType::ElemType)"
.br
.RI "The R++ tree requires to split the maximum bounding rectangle of a node that is being split\&. "
.ti -1c
.RI "bool \fBUpdateAuxiliaryInfo\fP (TreeType *)"
.br
.RI "Some tree types require to propagate the information upward\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename TreeType>
.br
class mlpack::tree::NoAuxiliaryInformation< TreeType >"

.PP
Definition at line 20 of file no_auxiliary_information\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBNoAuxiliaryInformation\fP ()\fC [inline]\fP"

.PP
Construct the auxiliary information object\&. 
.PP
Definition at line 24 of file no_auxiliary_information\&.hpp\&.
.SS "\fBNoAuxiliaryInformation\fP (const TreeType *)\fC [inline]\fP"

.PP
Construct the auxiliary information object\&. 
.PP
Definition at line 26 of file no_auxiliary_information\&.hpp\&.
.SS "\fBNoAuxiliaryInformation\fP (const \fBNoAuxiliaryInformation\fP< TreeType > &, TreeType *, bool = \fCtrue\fP)\fC [inline]\fP"

.PP
Construct the auxiliary information object\&. 
.PP
Definition at line 28 of file no_auxiliary_information\&.hpp\&.
.SS "\fBNoAuxiliaryInformation\fP (\fBNoAuxiliaryInformation\fP< TreeType > &&)\fC [inline]\fP"

.PP
Construct the auxiliary information object\&. 
.PP
Definition at line 32 of file no_auxiliary_information\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "bool HandleNodeInsertion (TreeType *, TreeType *, bool)\fC [inline]\fP"

.PP
Some tree types require to save some properties at the insertion process\&. This method allows the auxiliary information the option of manipulating the tree in order to perform the insertion process\&. If the auxiliary information does that, then the method should return true; if the method returns false the \fBRectangleTree\fP performs its default behavior\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (node) The node in which the nodeToInsert is being inserted\&. 
.br
\fI*\fP (nodeToInsert) The node being inserted\&. 
.br
\fI*\fP (insertionLevel) The level of the tree at which the nodeToInsert should be inserted\&. 
.RE
.PP

.PP
Definition at line 67 of file no_auxiliary_information\&.hpp\&.
.SS "bool HandleNodeRemoval (TreeType *, const size_t)\fC [inline]\fP"

.PP
Some tree types require to save some properties at the deletion process\&. This method allows the auxiliary information the option of manipulating the tree in order to perform the deletion process\&. If the auxiliary information does that, then the method should return true; if the method returns false the \fBRectangleTree\fP performs its default behavior\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (node) The node from which the node is being deleted\&. 
.br
\fI*\fP (nodeIndex) The local index of the node being deleted\&. 
.RE
.PP

.PP
Definition at line 99 of file no_auxiliary_information\&.hpp\&.
.SS "bool HandlePointDeletion (TreeType *, const size_t)\fC [inline]\fP"

.PP
Some tree types require to save some properties at the deletion process\&. This method allows the auxiliary information the option of manipulating the tree in order to perform the deletion process\&. If the auxiliary information does that, then the method should return true; if the method returns false the \fBRectangleTree\fP performs its default behavior\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (node) The node from which the point is being deleted\&. 
.br
\fI*\fP (localIndex) The local index of the point being deleted\&. 
.RE
.PP

.PP
Definition at line 84 of file no_auxiliary_information\&.hpp\&.
.SS "bool HandlePointInsertion (TreeType *, const size_t)\fC [inline]\fP"

.PP
Some tree types require to save some properties at the insertion process\&. This method allows the auxiliary information the option of manipulating the tree in order to perform the insertion process\&. If the auxiliary information does that, then the method should return true; if the method returns false the \fBRectangleTree\fP performs its default behavior\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (node) The node in which the point is being inserted\&. 
.br
\fI*\fP (point) The global number of the point being inserted\&. 
.RE
.PP

.PP
Definition at line 50 of file no_auxiliary_information\&.hpp\&.
.SS "void NullifyData ()\fC [inline]\fP"

.PP
Nullify the auxiliary information in order to prevent an invalid free\&. 
.PP
Definition at line 137 of file no_auxiliary_information\&.hpp\&.
.SS "\fBNoAuxiliaryInformation\fP& operator= (const \fBNoAuxiliaryInformation\fP< TreeType > &)\fC [inline]\fP"

.PP
Copy the auxiliary information object\&. 
.PP
Definition at line 35 of file no_auxiliary_information\&.hpp\&.
.SS "void serialize (Archive &, const uint32_t)\fC [inline]\fP"

.PP
Serialize the information\&. 
.PP
Definition at line 144 of file no_auxiliary_information\&.hpp\&.
.SS "void SplitAuxiliaryInfo (TreeType *, TreeType *, size_t, typename TreeType::ElemType)\fC [inline]\fP"

.PP
The R++ tree requires to split the maximum bounding rectangle of a node that is being split\&. This method is intended for that\&. This method is only necessary for an AuxiliaryInformationType that is being used in conjunction with \fBRPlusTreeSplit\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (treeOne) The first subtree\&. 
.br
\fI*\fP (treeTwo) The second subtree\&. 
.br
\fI*\fP (axis) The axis along which the split is performed\&. 
.br
\fI*\fP (cut) The coordinate at which the node is split\&. 
.RE
.PP

.PP
Definition at line 127 of file no_auxiliary_information\&.hpp\&.
.SS "bool UpdateAuxiliaryInfo (TreeType *)\fC [inline]\fP"

.PP
Some tree types require to propagate the information upward\&. This method should return false if this is not the case\&. If true is returned, the update will be propagated upward\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (node) The node in which the auxiliary information being update\&. 
.RE
.PP

.PP
Definition at line 111 of file no_auxiliary_information\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
