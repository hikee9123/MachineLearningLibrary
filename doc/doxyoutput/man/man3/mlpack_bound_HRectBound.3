.TH "HRectBound< MetricType, ElemType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
HRectBound< MetricType, ElemType > \- Hyper-rectangle bound for an L-metric\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHRectBound\fP ()"
.br
.RI "Empty constructor; creates a bound of dimensionality 0\&. "
.ti -1c
.RI "\fBHRectBound\fP (const size_t dimension)"
.br
.RI "Initializes to specified dimensionality with each dimension the empty set\&. "
.ti -1c
.RI "\fBHRectBound\fP (const \fBHRectBound\fP &other)"
.br
.RI "Copy constructor; necessary to prevent memory leaks\&. "
.ti -1c
.RI "\fBHRectBound\fP (\fBHRectBound\fP &&other)"
.br
.RI "Move constructor: take possession of another bound's information\&. "
.ti -1c
.RI "\fB~HRectBound\fP ()"
.br
.RI "Destructor: clean up memory\&. "
.ti -1c
.RI "void \fBCenter\fP (arma::Col< ElemType > &center) const"
.br
.RI "Calculates the center of the range, placing it into the given vector\&. "
.ti -1c
.RI "void \fBClear\fP ()"
.br
.RI "Resets all dimensions to the empty set (so that this bound contains nothing)\&. "
.ti -1c
.RI "template<typename VecType > bool \fBContains\fP (const VecType &point) const"
.br
.RI "Determines if a point is within this bound\&. "
.ti -1c
.RI "bool \fBContains\fP (const \fBHRectBound\fP &bound) const"
.br
.RI "Determines if this bound partially contains a bound\&. "
.ti -1c
.RI "ElemType \fBDiameter\fP () const"
.br
.RI "Returns the diameter of the hyperrectangle (that is, the longest diagonal)\&. "
.ti -1c
.RI "size_t \fBDim\fP () const"
.br
.RI "Gets the dimensionality\&. "
.ti -1c
.RI "template<typename VecType > ElemType \fBMaxDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Calculates maximum bound-to-point squared distance\&. "
.ti -1c
.RI "ElemType \fBMaxDistance\fP (const \fBHRectBound\fP &other) const"
.br
.RI "Computes maximum distance\&. "
.ti -1c
.RI "const MetricType & \fBMetric\fP () const"
.br
.RI "Get the instantiated metric associated with the bound\&. "
.ti -1c
.RI "MetricType & \fBMetric\fP ()"
.br
.RI "Modify the instantiated metric associated with the bound\&. "
.ti -1c
.RI "template<typename VecType > ElemType \fBMinDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Calculates minimum bound-to-point distance\&. "
.ti -1c
.RI "ElemType \fBMinDistance\fP (const \fBHRectBound\fP &other) const"
.br
.RI "Calculates minimum bound-to-bound distance\&. "
.ti -1c
.RI "ElemType \fBMinWidth\fP () const"
.br
.RI "Get the minimum width of the bound\&. "
.ti -1c
.RI "ElemType & \fBMinWidth\fP ()"
.br
.RI "Modify the minimum width of the bound\&. "
.ti -1c
.RI "\fBHRectBound\fP \fBoperator &\fP (const \fBHRectBound\fP &bound) const"
.br
.RI "Returns the intersection of this bound and another\&. "
.ti -1c
.RI "\fBHRectBound\fP & \fBoperator &=\fP (const \fBHRectBound\fP &bound)"
.br
.RI "Intersects this bound with another\&. "
.ti -1c
.RI "\fBHRectBound\fP & \fBoperator=\fP (const \fBHRectBound\fP &other)"
.br
.RI "Same as copy constructor; necessary to prevent memory leaks\&. "
.ti -1c
.RI "\fBHRectBound\fP & \fBoperator=\fP (\fBHRectBound\fP &&other)"
.br
.RI "Move assignment operator\&. "
.ti -1c
.RI "math::RangeType< ElemType > & \fBoperator[]\fP (const size_t i)"
.br
.RI "Get the range for a particular dimension\&. "
.ti -1c
.RI "const math::RangeType< ElemType > & \fBoperator[]\fP (const size_t i) const"
.br
.RI "Modify the range for a particular dimension\&. No bounds checking\&. "
.ti -1c
.RI "template<typename MatType > \fBHRectBound\fP & \fBoperator|=\fP (const MatType &data)"
.br
.RI "Expands this region to include new points\&. "
.ti -1c
.RI "\fBHRectBound\fP & \fBoperator|=\fP (const \fBHRectBound\fP &other)"
.br
.RI "Expands this region to encompass another bound\&. "
.ti -1c
.RI "ElemType \fBOverlap\fP (const \fBHRectBound\fP &bound) const"
.br
.RI "Returns the volume of overlap of this bound and another\&. "
.ti -1c
.RI "math::RangeType< ElemType > \fBRangeDistance\fP (const \fBHRectBound\fP &other) const"
.br
.RI "Calculates minimum and maximum bound-to-bound distance\&. "
.ti -1c
.RI "template<typename VecType > math::RangeType< ElemType > \fBRangeDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Calculates minimum and maximum bound-to-point distance\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t version)"
.br
.RI "Serialize the bound object\&. "
.ti -1c
.RI "ElemType \fBVolume\fP () const"
.br
.RI "Calculate the volume of the hyperrectangle\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType = metric::LMetric<2, true>, typename ElemType = double>
.br
class mlpack::bound::HRectBound< MetricType, ElemType >"
Hyper-rectangle bound for an L-metric\&. 

This should be used in conjunction with the LMetric class\&. Be sure to use the same template parameters for LMetric as you do for \fBHRectBound\fP -- otherwise odd results may occur\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMetricType\fP Type of metric to use; must be of type LMetric\&. 
.br
\fIElemType\fP Element type (double/float/int/etc\&.)\&. 
.RE
.PP

.PP
Definition at line 54 of file hrectbound\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBHRectBound\fP ()"

.PP
Empty constructor; creates a bound of dimensionality 0\&. 
.SS "\fBHRectBound\fP (const size_t dimension)"

.PP
Initializes to specified dimensionality with each dimension the empty set\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdimension\fP Dimensionality of bound\&. 
.RE
.PP

.SS "\fBHRectBound\fP (const \fBHRectBound\fP< MetricType, ElemType > & other)"

.PP
Copy constructor; necessary to prevent memory leaks\&. 
.SS "\fBHRectBound\fP (\fBHRectBound\fP< MetricType, ElemType > && other)"

.PP
Move constructor: take possession of another bound's information\&. 
.SS "~\fBHRectBound\fP ()"

.PP
Destructor: clean up memory\&. 
.SH "Member Function Documentation"
.PP 
.SS "void Center (arma::Col< ElemType > & center) const"

.PP
Calculates the center of the range, placing it into the given vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcenter\fP Vector which the center will be written to\&. 
.RE
.PP

.PP
Referenced by Octree< MetricType, StatisticType, MatType >::Center()\&.
.SS "void Clear ()"

.PP
Resets all dimensions to the empty set (so that this bound contains nothing)\&. 
.SS "bool Contains (const VecType & point) const"

.PP
Determines if a point is within this bound\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to check the condition\&. 
.RE
.PP

.SS "bool Contains (const \fBHRectBound\fP< MetricType, ElemType > & bound) const"

.PP
Determines if this bound partially contains a bound\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbound\fP Bound to check the condition\&. 
.RE
.PP

.SS "ElemType Diameter () const"

.PP
Returns the diameter of the hyperrectangle (that is, the longest diagonal)\&. 
.SS "size_t Dim () const\fC [inline]\fP"

.PP
Gets the dimensionality\&. 
.PP
Definition at line 96 of file hrectbound\&.hpp\&.
.SS "ElemType MaxDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Calculates maximum bound-to-point squared distance\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to which the maximum distance is requested\&. 
.RE
.PP

.SS "ElemType MaxDistance (const \fBHRectBound\fP< MetricType, ElemType > & other) const"

.PP
Computes maximum distance\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Bound to which the maximum distance is requested\&. 
.RE
.PP

.SS "const MetricType& Metric () const\fC [inline]\fP"

.PP
Get the instantiated metric associated with the bound\&. 
.PP
Definition at line 111 of file hrectbound\&.hpp\&.
.SS "MetricType& Metric ()\fC [inline]\fP"

.PP
Modify the instantiated metric associated with the bound\&. 
.PP
Definition at line 113 of file hrectbound\&.hpp\&.
.SS "ElemType MinDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Calculates minimum bound-to-point distance\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to which the minimum distance is requested\&. 
.RE
.PP

.SS "ElemType MinDistance (const \fBHRectBound\fP< MetricType, ElemType > & other) const"

.PP
Calculates minimum bound-to-bound distance\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Bound to which the minimum distance is requested\&. 
.RE
.PP

.SS "ElemType MinWidth () const\fC [inline]\fP"

.PP
Get the minimum width of the bound\&. 
.PP
Definition at line 106 of file hrectbound\&.hpp\&.
.SS "ElemType& MinWidth ()\fC [inline]\fP"

.PP
Modify the minimum width of the bound\&. 
.PP
Definition at line 108 of file hrectbound\&.hpp\&.
.SS "\fBHRectBound\fP operator& (const \fBHRectBound\fP< MetricType, ElemType > & bound) const"

.PP
Returns the intersection of this bound and another\&. 
.SS "\fBHRectBound\fP& operator&= (const \fBHRectBound\fP< MetricType, ElemType > & bound)"

.PP
Intersects this bound with another\&. 
.SS "\fBHRectBound\fP& operator= (const \fBHRectBound\fP< MetricType, ElemType > & other)"

.PP
Same as copy constructor; necessary to prevent memory leaks\&. 
.SS "\fBHRectBound\fP& operator= (\fBHRectBound\fP< MetricType, ElemType > && other)"

.PP
Move assignment operator\&. 
.SS "math::RangeType<ElemType>& operator[] (const size_t i)\fC [inline]\fP"

.PP
Get the range for a particular dimension\&. No bounds checking\&. Be careful: this may make \fBMinWidth()\fP invalid\&. 
.PP
Definition at line 100 of file hrectbound\&.hpp\&.
.SS "const math::RangeType<ElemType>& operator[] (const size_t i) const\fC [inline]\fP"

.PP
Modify the range for a particular dimension\&. No bounds checking\&. 
.PP
Definition at line 102 of file hrectbound\&.hpp\&.
.SS "\fBHRectBound\fP& operator|= (const MatType & data)"

.PP
Expands this region to include new points\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMatType\fP Type of matrix; could be Mat, SpMat, a subview, or just a vector\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Data points to expand this region to include\&. 
.RE
.PP

.SS "\fBHRectBound\fP& operator|= (const \fBHRectBound\fP< MetricType, ElemType > & other)"

.PP
Expands this region to encompass another bound\&. 
.SS "ElemType Overlap (const \fBHRectBound\fP< MetricType, ElemType > & bound) const"

.PP
Returns the volume of overlap of this bound and another\&. 
.SS "math::RangeType<ElemType> RangeDistance (const \fBHRectBound\fP< MetricType, ElemType > & other) const"

.PP
Calculates minimum and maximum bound-to-bound distance\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Bound to which the minimum and maximum distances are requested\&. 
.RE
.PP

.SS "math::RangeType<ElemType> RangeDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Calculates minimum and maximum bound-to-point distance\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to which the minimum and maximum distances are requested\&. 
.RE
.PP

.SS "void serialize (Archive & ar, const uint32_t version)"

.PP
Serialize the bound object\&. 
.SS "ElemType Volume () const"

.PP
Calculate the volume of the hyperrectangle\&. 
.PP
\fBReturns:\fP
.RS 4
Volume of the hyperrectangle\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
