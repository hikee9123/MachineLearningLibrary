.TH "BatchNorm< InputDataType, OutputDataType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BatchNorm< InputDataType, OutputDataType > \- Declaration of the Batch Normalization layer class\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBatchNorm\fP ()"
.br
.RI "Create the \fBBatchNorm\fP object\&. "
.ti -1c
.RI "\fBBatchNorm\fP (const size_t size, const double eps=1e\-8, const bool average=true, const double momentum=0\&.1)"
.br
.RI "Create the \fBBatchNorm\fP layer object for a specified number of input units\&. "
.ti -1c
.RI "bool \fBAverage\fP () const"
.br
.RI "Get the average parameter\&. "
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &input, const arma::Mat< eT > &gy, arma::Mat< eT > &g)"
.br
.RI "Backward pass through the layer\&. "
.ti -1c
.RI "OutputDataType const  & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "bool \fBDeterministic\fP () const"
.br
.RI "Get the value of deterministic parameter\&. "
.ti -1c
.RI "bool & \fBDeterministic\fP ()"
.br
.RI "Modify the value of deterministic parameter\&. "
.ti -1c
.RI "double \fBEpsilon\fP () const"
.br
.RI "Get the epsilon value\&. "
.ti -1c
.RI "template<typename eT > void \fBForward\fP (const arma::Mat< eT > &input, arma::Mat< eT > &output)"
.br
.RI "Forward pass of the Batch Normalization layer\&. "
.ti -1c
.RI "template<typename eT > void \fBGradient\fP (const arma::Mat< eT > &input, const arma::Mat< eT > &error, arma::Mat< eT > &gradient)"
.br
.RI "Calculate the gradient using the output delta and the input activations\&. "
.ti -1c
.RI "OutputDataType const  & \fBGradient\fP () const"
.br
.RI "Get the gradient\&. "
.ti -1c
.RI "OutputDataType & \fBGradient\fP ()"
.br
.RI "Modify the gradient\&. "
.ti -1c
.RI "size_t \fBInputSize\fP () const"
.br
.RI "Get the number of input units / channels\&. "
.ti -1c
.RI "double \fBMomentum\fP () const"
.br
.RI "Get the momentum value\&. "
.ti -1c
.RI "OutputDataType const  & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "OutputDataType const  & \fBParameters\fP () const"
.br
.RI "Get the parameters\&. "
.ti -1c
.RI "OutputDataType & \fBParameters\fP ()"
.br
.RI "Modify the parameters\&. "
.ti -1c
.RI "void \fBReset\fP ()"
.br
.RI "Reset the layer parameters\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.ti -1c
.RI "OutputDataType const  & \fBTrainingMean\fP () const"
.br
.RI "Get the mean over the training data\&. "
.ti -1c
.RI "OutputDataType & \fBTrainingMean\fP ()"
.br
.RI "Modify the mean over the training data\&. "
.ti -1c
.RI "OutputDataType const  & \fBTrainingVariance\fP () const"
.br
.RI "Get the variance over the training data\&. "
.ti -1c
.RI "OutputDataType & \fBTrainingVariance\fP ()"
.br
.RI "Modify the variance over the training data\&. "
.ti -1c
.RI "size_t \fBWeightSize\fP () const"
.br
.RI "Get size of weights\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::BatchNorm< InputDataType, OutputDataType >"
Declaration of the Batch Normalization layer class\&. 

The layer transforms the input data into zero mean and unit variance and then scales and shifts the data by parameters, gamma and beta respectively\&. These parameters are learnt by the network\&.
.PP
If deterministic is false (training), the mean and variance over the batch is calculated and the data is normalized\&. If it is set to true (testing) then the mean and variance accrued over the training set is used\&.
.PP
For more information, refer to the following paper,
.PP
.PP
.nf
@article{Ioffe15,
  author    = {Sergey Ioffe and
               Christian Szegedy},
  title     = {Batch Normalization: Accelerating Deep Network Training by
               Reducing Internal Covariate Shift},
  journal   = {CoRR},
  volume    = {abs/1502\&.03167},
  year      = {2015},
  url       = {http://arxiv\&.org/abs/1502\&.03167},
  eprint    = {1502\&.03167},
}
.fi
.PP
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 56 of file batch_norm\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBBatchNorm\fP ()"

.PP
Create the \fBBatchNorm\fP object\&. 
.SS "\fBBatchNorm\fP (const size_t size, const double eps = \fC1e\-8\fP, const bool average = \fCtrue\fP, const double momentum = \fC0\&.1\fP)"

.PP
Create the \fBBatchNorm\fP layer object for a specified number of input units\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP The number of input units / channels\&. 
.br
\fIeps\fP The epsilon added to variance to ensure numerical stability\&. 
.br
\fIaverage\fP Boolean to determine whether cumulative average is used for updating the parameters or momentum is used\&. 
.br
\fImomentum\fP Parameter used to to update the running mean and variance\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "bool Average () const\fC [inline]\fP"

.PP
Get the average parameter\&. 
.PP
Definition at line 161 of file batch_norm\&.hpp\&.
.SS "void Backward (const arma::Mat< eT > & input, const arma::Mat< eT > & gy, arma::Mat< eT > & g)"

.PP
Backward pass through the layer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The input activations 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "OutputDataType const& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 127 of file batch_norm\&.hpp\&.
.SS "OutputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 129 of file batch_norm\&.hpp\&.
.SS "bool Deterministic () const\fC [inline]\fP"

.PP
Get the value of deterministic parameter\&. 
.PP
Definition at line 137 of file batch_norm\&.hpp\&.
.SS "bool& Deterministic ()\fC [inline]\fP"

.PP
Modify the value of deterministic parameter\&. 
.PP
Definition at line 139 of file batch_norm\&.hpp\&.
.SS "double Epsilon () const\fC [inline]\fP"

.PP
Get the epsilon value\&. 
.PP
Definition at line 155 of file batch_norm\&.hpp\&.
.SS "void Forward (const arma::Mat< eT > & input, arma::Mat< eT > & output)"

.PP
Forward pass of the Batch Normalization layer\&. Transforms the input data into zero mean and unit variance, scales the data by a factor gamma and shifts it by beta\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data for the layer 
.br
\fIoutput\fP Resulting output activations\&. 
.RE
.PP

.SS "void Gradient (const arma::Mat< eT > & input, const arma::Mat< eT > & error, arma::Mat< eT > & gradient)"

.PP
Calculate the gradient using the output delta and the input activations\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The input activations 
.br
\fIerror\fP The calculated error 
.br
\fIgradient\fP The calculated gradient\&. 
.RE
.PP

.SS "OutputDataType const& Gradient () const\fC [inline]\fP"

.PP
Get the gradient\&. 
.PP
Definition at line 132 of file batch_norm\&.hpp\&.
.SS "OutputDataType& Gradient ()\fC [inline]\fP"

.PP
Modify the gradient\&. 
.PP
Definition at line 134 of file batch_norm\&.hpp\&.
.SS "size_t InputSize () const\fC [inline]\fP"

.PP
Get the number of input units / channels\&. 
.PP
Definition at line 152 of file batch_norm\&.hpp\&.
.SS "double Momentum () const\fC [inline]\fP"

.PP
Get the momentum value\&. 
.PP
Definition at line 158 of file batch_norm\&.hpp\&.
.SS "OutputDataType const& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 122 of file batch_norm\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 124 of file batch_norm\&.hpp\&.
.SS "OutputDataType const& Parameters () const\fC [inline]\fP"

.PP
Get the parameters\&. 
.PP
Definition at line 117 of file batch_norm\&.hpp\&.
.SS "OutputDataType& Parameters ()\fC [inline]\fP"

.PP
Modify the parameters\&. 
.PP
Definition at line 119 of file batch_norm\&.hpp\&.
.SS "void Reset ()"

.PP
Reset the layer parameters\&. 
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by BatchNorm< InputDataType, OutputDataType >::WeightSize()\&.
.SS "OutputDataType const& TrainingMean () const\fC [inline]\fP"

.PP
Get the mean over the training data\&. 
.PP
Definition at line 142 of file batch_norm\&.hpp\&.
.SS "OutputDataType& TrainingMean ()\fC [inline]\fP"

.PP
Modify the mean over the training data\&. 
.PP
Definition at line 144 of file batch_norm\&.hpp\&.
.SS "OutputDataType const& TrainingVariance () const\fC [inline]\fP"

.PP
Get the variance over the training data\&. 
.PP
Definition at line 147 of file batch_norm\&.hpp\&.
.SS "OutputDataType& TrainingVariance ()\fC [inline]\fP"

.PP
Modify the variance over the training data\&. 
.PP
Definition at line 149 of file batch_norm\&.hpp\&.
.SS "size_t WeightSize () const\fC [inline]\fP"

.PP
Get size of weights\&. 
.PP
Definition at line 164 of file batch_norm\&.hpp\&.
.PP
References BatchNorm< InputDataType, OutputDataType >::serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
