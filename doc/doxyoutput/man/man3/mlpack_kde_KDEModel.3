.TH "KDEModel" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KDEModel \- The \fBKDEModel\fP provides an abstraction for the \fBKDE\fP class, abstracting away the KernelType and TreeType parameters and allowing those to be specified at runtime\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBKernelTypes\fP { \fBGAUSSIAN_KERNEL\fP, \fBEPANECHNIKOV_KERNEL\fP, \fBLAPLACIAN_KERNEL\fP, \fBSPHERICAL_KERNEL\fP, \fBTRIANGULAR_KERNEL\fP }"
.br
.ti -1c
.RI "enum \fBTreeTypes\fP { \fBKD_TREE\fP, \fBBALL_TREE\fP, \fBCOVER_TREE\fP, \fBOCTREE\fP, \fBR_TREE\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKDEModel\fP (const double bandwidth=1\&.0, const double relError=\fBKDEDefaultParams::relError\fP, const double absError=\fBKDEDefaultParams::absError\fP, const \fBKernelTypes\fP kernelType=KernelTypes::GAUSSIAN_KERNEL, const \fBTreeTypes\fP treeType=TreeTypes::KD_TREE, const bool monteCarlo=\fBKDEDefaultParams::mode\fP, const double mcProb=\fBKDEDefaultParams::mcProb\fP, const size_t initialSampleSize=\fBKDEDefaultParams::initialSampleSize\fP, const double mcEntryCoef=\fBKDEDefaultParams::mcEntryCoef\fP, const double mcBreakCoef=\fBKDEDefaultParams::mcBreakCoef\fP)"
.br
.RI "Initialize \fBKDEModel\fP\&. "
.ti -1c
.RI "\fBKDEModel\fP (const \fBKDEModel\fP &other)"
.br
.RI "Copy constructor of the given model\&. "
.ti -1c
.RI "\fBKDEModel\fP (\fBKDEModel\fP &&other)"
.br
.RI "Move constructor of the given model\&. Takes ownership of the model\&. "
.ti -1c
.RI "\fB~KDEModel\fP ()"
.br
.RI "Destroy the \fBKDEModel\fP object\&. "
.ti -1c
.RI "double \fBAbsoluteError\fP () const"
.br
.RI "Get the absolute error tolerance\&. "
.ti -1c
.RI "void \fBAbsoluteError\fP (const double newAbsError)"
.br
.RI "Modify the absolute error tolerance\&. "
.ti -1c
.RI "double \fBBandwidth\fP () const"
.br
.RI "Get the bandwidth of the kernel\&. "
.ti -1c
.RI "void \fBBandwidth\fP (const double newBandwidth)"
.br
.RI "Modify the bandwidth of the kernel\&. "
.ti -1c
.RI "void \fBBuildModel\fP (\fButil::Timers\fP &timers, arma::mat &&referenceSet)"
.br
.RI "Build the \fBKDE\fP model with the given parameters and then trains it with the given reference data\&. "
.ti -1c
.RI "void \fBEvaluate\fP (\fButil::Timers\fP &timers, arma::mat &&querySet, arma::vec &estimations)"
.br
.RI "Perform kernel density estimation on the given query set\&. "
.ti -1c
.RI "void \fBEvaluate\fP (\fButil::Timers\fP &timers, arma::vec &estimations)"
.br
.RI "Perform kernel density estimation on the reference set\&. "
.ti -1c
.RI "void \fBInitializeModel\fP ()"
.br
.RI "Initialize the \fBKDE\fP model\&. "
.ti -1c
.RI "\fBKernelTypes\fP \fBKernelType\fP () const"
.br
.RI "Get the kernel type of the model\&. "
.ti -1c
.RI "\fBKernelTypes\fP & \fBKernelType\fP ()"
.br
.RI "Modify the kernel type of the model\&. "
.ti -1c
.RI "double \fBMCBreakCoefficient\fP () const"
.br
.RI "Get Monte Carlo break coefficient\&. "
.ti -1c
.RI "void \fBMCBreakCoefficient\fP (const double newBreakCoef)"
.br
.RI "Modify Monte Carlo break coefficient\&. "
.ti -1c
.RI "double \fBMCEntryCoefficient\fP () const"
.br
.RI "Get Monte Carlo entry coefficient\&. "
.ti -1c
.RI "void \fBMCEntryCoefficient\fP (const double newEntryCoef)"
.br
.RI "Modify Monte Carlo entry coefficient\&. "
.ti -1c
.RI "size_t \fBMCInitialSampleSize\fP () const"
.br
.RI "Get the initial sample size for Monte Carlo estimations\&. "
.ti -1c
.RI "void \fBMCInitialSampleSize\fP (const size_t newSampleSize)"
.br
.RI "Modify the initial sample size for Monte Carlo estimations\&. "
.ti -1c
.RI "double \fBMCProbability\fP () const"
.br
.RI "Get Monte Carlo probability of error being bounded by relative error\&. "
.ti -1c
.RI "void \fBMCProbability\fP (const double newMCProb)"
.br
.RI "Modify Monte Carlo probability of error being bounded by relative error\&. "
.ti -1c
.RI "\fBKDEMode\fP \fBMode\fP () const"
.br
.RI "Get the mode of the model\&. "
.ti -1c
.RI "\fBKDEMode\fP & \fBMode\fP ()"
.br
.RI "Modify the mode of the model\&. "
.ti -1c
.RI "bool \fBMonteCarlo\fP () const"
.br
.RI "Get whether the model is using Monte Carlo estimations or not\&. "
.ti -1c
.RI "void \fBMonteCarlo\fP (const bool newMonteCarlo)"
.br
.RI "Modify whether the model is using Monte Carlo estimations or not\&. "
.ti -1c
.RI "\fBKDEModel\fP & \fBoperator=\fP (const \fBKDEModel\fP &other)"
.br
.RI "Copy the given model\&. "
.ti -1c
.RI "\fBKDEModel\fP & \fBoperator=\fP (\fBKDEModel\fP &&other)"
.br
.RI "Take ownership of the contents of the given model\&. "
.ti -1c
.RI "double \fBRelativeError\fP () const"
.br
.RI "Get the relative error tolerance\&. "
.ti -1c
.RI "void \fBRelativeError\fP (const double newRelError)"
.br
.RI "Modify the relative error tolerance\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t version)"
.br
.RI "Serialize the \fBKDE\fP model\&. "
.ti -1c
.RI "\fBTreeTypes\fP \fBTreeType\fP () const"
.br
.RI "Get the tree type of the model\&. "
.ti -1c
.RI "\fBTreeTypes\fP & \fBTreeType\fP ()"
.br
.RI "Modify the tree type of the model\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBKDEModel\fP provides an abstraction for the \fBKDE\fP class, abstracting away the KernelType and TreeType parameters and allowing those to be specified at runtime\&. 

This class is written for the sake of the \fCkde\fP binding, but it is not necessarily restricted to that usage\&. 
.PP
Definition at line 231 of file kde_model\&.hpp\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBKernelTypes\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIGAUSSIAN_KERNEL \fP\fP
.TP
\fB\fIEPANECHNIKOV_KERNEL \fP\fP
.TP
\fB\fILAPLACIAN_KERNEL \fP\fP
.TP
\fB\fISPHERICAL_KERNEL \fP\fP
.TP
\fB\fITRIANGULAR_KERNEL \fP\fP
.PP
Definition at line 243 of file kde_model\&.hpp\&.
.SS "enum \fBTreeTypes\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIKD_TREE \fP\fP
.TP
\fB\fIBALL_TREE \fP\fP
.TP
\fB\fICOVER_TREE \fP\fP
.TP
\fB\fIOCTREE \fP\fP
.TP
\fB\fIR_TREE \fP\fP
.PP
Definition at line 234 of file kde_model\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBKDEModel\fP (const double bandwidth = \fC1\&.0\fP, const double relError = \fC\fBKDEDefaultParams::relError\fP\fP, const double absError = \fC\fBKDEDefaultParams::absError\fP\fP, const \fBKernelTypes\fP kernelType = \fCKernelTypes::GAUSSIAN_KERNEL\fP, const \fBTreeTypes\fP treeType = \fCTreeTypes::KD_TREE\fP, const bool monteCarlo = \fC\fBKDEDefaultParams::mode\fP\fP, const double mcProb = \fC\fBKDEDefaultParams::mcProb\fP\fP, const size_t initialSampleSize = \fC\fBKDEDefaultParams::initialSampleSize\fP\fP, const double mcEntryCoef = \fC\fBKDEDefaultParams::mcEntryCoef\fP\fP, const double mcBreakCoef = \fC\fBKDEDefaultParams::mcBreakCoef\fP\fP)"

.PP
Initialize \fBKDEModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbandwidth\fP Bandwidth to use for the kernel\&. 
.br
\fIrelError\fP Maximum relative error tolerance for each point in the model\&. For example, 0\&.05 means that each value must be within 5% of the true \fBKDE\fP value\&. 
.br
\fIabsError\fP Maximum absolute error tolerance for each point in the model\&. For example, 0\&.1 means that for each point the value can have a maximum error of 0\&.1 units\&. 
.br
\fIkernelType\fP Type of kernel to use\&. 
.br
\fItreeType\fP Type of tree to use\&. 
.br
\fImonteCarlo\fP Whether to use Monte Carlo estimations when possible\&. 
.br
\fImcProb\fP of a Monte Carlo estimation to be bounded by relative error tolerance\&. 
.br
\fIinitialSampleSize\fP Initial sample size for Monte Carlo estimations\&. 
.br
\fImcEntryCoef\fP Coefficient to control how much larger does the amount of node descendants has to be compared to the initial sample size in order for it to be a candidate for Monte Carlo estimations\&. 
.br
\fImcBreakCoef\fP Coefficient to control what fraction of the node's descendants evaluated is the limit before Monte Carlo estimation recurses\&. 
.RE
.PP

.SS "\fBKDEModel\fP (const \fBKDEModel\fP & other)"

.PP
Copy constructor of the given model\&. 
.SS "\fBKDEModel\fP (\fBKDEModel\fP && other)"

.PP
Move constructor of the given model\&. Takes ownership of the model\&. 
.SS "~\fBKDEModel\fP ()"

.PP
Destroy the \fBKDEModel\fP object\&. 
.SH "Member Function Documentation"
.PP 
.SS "double AbsoluteError () const\fC [inline]\fP"

.PP
Get the absolute error tolerance\&. 
.PP
Definition at line 366 of file kde_model\&.hpp\&.
.SS "void AbsoluteError (const double newAbsError)"

.PP
Modify the absolute error tolerance\&. 
.SS "double Bandwidth () const\fC [inline]\fP"

.PP
Get the bandwidth of the kernel\&. 
.PP
Definition at line 354 of file kde_model\&.hpp\&.
.SS "void Bandwidth (const double newBandwidth)"

.PP
Modify the bandwidth of the kernel\&. 
.SS "void BuildModel (\fButil::Timers\fP & timers, arma::mat && referenceSet)"

.PP
Build the \fBKDE\fP model with the given parameters and then trains it with the given reference data\&. Takes possession of the reference set to avoid a copy, so the reference set will not be usable after this\&.
.PP
\fBParameters:\fP
.RS 4
\fItimers\fP Object to hold timing information in\&. 
.br
\fIreferenceSet\fP Set of reference points\&. 
.RE
.PP

.SS "void Evaluate (\fButil::Timers\fP & timers, arma::mat && querySet, arma::vec & estimations)"

.PP
Perform kernel density estimation on the given query set\&. Takes possession of the query set to avoid a copy, so the query set will not be usable after this\&. If possible, it returns normalized estimations\&.
.PP
\fBPrecondition:\fP
.RS 4
The model has to be previously created with BuildModel\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fItimers\fP Object to hold timing information in\&. 
.br
\fIquerySet\fP Set of query points\&. 
.br
\fIestimations\fP Vector where the results will be stored in the same order as the query points\&. 
.RE
.PP

.SS "void Evaluate (\fButil::Timers\fP & timers, arma::vec & estimations)"

.PP
Perform kernel density estimation on the reference set\&. If possible, it returns normalized estimations\&.
.PP
\fBPrecondition:\fP
.RS 4
The model has to be previously created with BuildModel\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fItimers\fP Object to hold timing information in\&. 
.br
\fIestimations\fP Vector where the results will be stored in the same order as the query points\&. 
.RE
.PP

.SS "void InitializeModel ()"

.PP
Initialize the \fBKDE\fP model\&. 
.SS "\fBKernelTypes\fP KernelType () const\fC [inline]\fP"

.PP
Get the kernel type of the model\&. 
.PP
Definition at line 378 of file kde_model\&.hpp\&.
.SS "\fBKernelTypes\fP& KernelType ()\fC [inline]\fP"

.PP
Modify the kernel type of the model\&. 
.PP
Definition at line 381 of file kde_model\&.hpp\&.
.SS "double MCBreakCoefficient () const\fC [inline]\fP"

.PP
Get Monte Carlo break coefficient\&. 
.PP
Definition at line 408 of file kde_model\&.hpp\&.
.SS "void MCBreakCoefficient (const double newBreakCoef)"

.PP
Modify Monte Carlo break coefficient\&. 
.SS "double MCEntryCoefficient () const\fC [inline]\fP"

.PP
Get Monte Carlo entry coefficient\&. 
.PP
Definition at line 402 of file kde_model\&.hpp\&.
.SS "void MCEntryCoefficient (const double newEntryCoef)"

.PP
Modify Monte Carlo entry coefficient\&. 
.SS "size_t MCInitialSampleSize () const\fC [inline]\fP"

.PP
Get the initial sample size for Monte Carlo estimations\&. 
.PP
Definition at line 396 of file kde_model\&.hpp\&.
.SS "void MCInitialSampleSize (const size_t newSampleSize)"

.PP
Modify the initial sample size for Monte Carlo estimations\&. 
.SS "double MCProbability () const\fC [inline]\fP"

.PP
Get Monte Carlo probability of error being bounded by relative error\&. 
.PP
Definition at line 390 of file kde_model\&.hpp\&.
.SS "void MCProbability (const double newMCProb)"

.PP
Modify Monte Carlo probability of error being bounded by relative error\&. 
.SS "\fBKDEMode\fP Mode () const\fC [inline]\fP"

.PP
Get the mode of the model\&. 
.PP
Definition at line 414 of file kde_model\&.hpp\&.
.PP
References KDEWrapperBase::Mode()\&.
.SS "\fBKDEMode\fP& Mode ()\fC [inline]\fP"

.PP
Modify the mode of the model\&. 
.PP
Definition at line 417 of file kde_model\&.hpp\&.
.PP
References KDEWrapperBase::Mode()\&.
.SS "bool MonteCarlo () const\fC [inline]\fP"

.PP
Get whether the model is using Monte Carlo estimations or not\&. 
.PP
Definition at line 384 of file kde_model\&.hpp\&.
.SS "void MonteCarlo (const bool newMonteCarlo)"

.PP
Modify whether the model is using Monte Carlo estimations or not\&. 
.SS "\fBKDEModel\fP& operator= (const \fBKDEModel\fP & other)"

.PP
Copy the given model\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBKDEModel\fP to copy\&. 
.RE
.PP

.SS "\fBKDEModel\fP& operator= (\fBKDEModel\fP && other)"

.PP
Take ownership of the contents of the given model\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBKDEModel\fP to take ownership of\&. 
.RE
.PP

.SS "double RelativeError () const\fC [inline]\fP"

.PP
Get the relative error tolerance\&. 
.PP
Definition at line 360 of file kde_model\&.hpp\&.
.SS "void RelativeError (const double newRelError)"

.PP
Modify the relative error tolerance\&. 
.SS "void serialize (Archive & ar, const uint32_t version)"

.PP
Serialize the \fBKDE\fP model\&. 
.SS "\fBTreeTypes\fP TreeType () const\fC [inline]\fP"

.PP
Get the tree type of the model\&. 
.PP
Definition at line 372 of file kde_model\&.hpp\&.
.SS "\fBTreeTypes\fP& TreeType ()\fC [inline]\fP"

.PP
Modify the tree type of the model\&. 
.PP
Definition at line 375 of file kde_model\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
