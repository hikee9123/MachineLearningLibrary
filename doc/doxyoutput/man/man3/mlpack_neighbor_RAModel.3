.TH "RAModel" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RAModel \- The \fBRAModel\fP class provides an abstraction for the \fBRASearch\fP class, abstracting away the TreeType parameter and allowing it to be specified at runtime in this class\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBTreeTypes\fP { \fBKD_TREE\fP, \fBCOVER_TREE\fP, \fBR_TREE\fP, \fBR_STAR_TREE\fP, \fBX_TREE\fP, \fBHILBERT_R_TREE\fP, \fBR_PLUS_TREE\fP, \fBR_PLUS_PLUS_TREE\fP, \fBUB_TREE\fP, \fBOCTREE\fP }
.RI "The list of tree types we can use with \fBRASearch\fP\&. ""
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRAModel\fP (\fBTreeTypes\fP treeType=TreeTypes::KD_TREE, bool randomBasis=false)"
.br
.RI "Initialize the \fBRAModel\fP with the given type and whether or not a random basis should be used\&. "
.ti -1c
.RI "\fBRAModel\fP (const \fBRAModel\fP &other)"
.br
.RI "Copy the given \fBRAModel\fP\&. "
.ti -1c
.RI "\fBRAModel\fP (\fBRAModel\fP &&other)"
.br
.RI "Take ownership of the given \fBRAModel\fP\&. "
.ti -1c
.RI "\fB~RAModel\fP ()"
.br
.RI "Clean memory, if necessary\&. "
.ti -1c
.RI "double \fBAlpha\fP () const"
.br
.RI "Get the desired success probability\&. "
.ti -1c
.RI "double & \fBAlpha\fP ()"
.br
.RI "Modify the desired success probability\&. "
.ti -1c
.RI "void \fBBuildModel\fP (arma::mat &&referenceSet, const size_t leafSize, const bool naive, const bool singleMode)"
.br
.RI "Build the reference tree\&. "
.ti -1c
.RI "const arma::mat & \fBDataset\fP () const"
.br
.RI "Expose the dataset\&. "
.ti -1c
.RI "bool \fBFirstLeafExact\fP () const"
.br
.RI "Get whether or not we traverse to the first leaf without approximation\&. "
.ti -1c
.RI "bool & \fBFirstLeafExact\fP ()"
.br
.RI "Modify whether or not we traverse to the first leaf without approximation\&. "
.ti -1c
.RI "void \fBInitializeModel\fP (const bool naive, const bool singleMode)"
.br
.RI "Initialize the model's memory\&. "
.ti -1c
.RI "size_t \fBLeafSize\fP () const"
.br
.RI "Get the leaf size (only relevant when the kd-tree is used)\&. "
.ti -1c
.RI "size_t & \fBLeafSize\fP ()"
.br
.RI "Modify the leaf size (only relevant when the kd-tree is used)\&. "
.ti -1c
.RI "bool \fBNaive\fP () const"
.br
.RI "Get whether or not naive search is being used\&. "
.ti -1c
.RI "bool & \fBNaive\fP ()"
.br
.RI "Modify whether or not naive search is being used\&. "
.ti -1c
.RI "\fBRAModel\fP & \fBoperator=\fP (const \fBRAModel\fP &other)"
.br
.RI "Copy the given \fBRAModel\fP\&. "
.ti -1c
.RI "\fBRAModel\fP & \fBoperator=\fP (\fBRAModel\fP &&other)"
.br
.RI "Take ownership of the given \fBRAModel\fP\&. "
.ti -1c
.RI "bool \fBRandomBasis\fP () const"
.br
.RI "Get whether or not a random basis is being used\&. "
.ti -1c
.RI "bool & \fBRandomBasis\fP ()"
.br
.RI "Modify whether or not a random basis is being used\&. "
.ti -1c
.RI "bool \fBSampleAtLeaves\fP () const"
.br
.RI "Get whether or not sampling is done at the leaves\&. "
.ti -1c
.RI "bool & \fBSampleAtLeaves\fP ()"
.br
.RI "Modify whether or not sampling is done at the leaves\&. "
.ti -1c
.RI "void \fBSearch\fP (arma::mat &&querySet, const size_t k, arma::Mat< size_t > &neighbors, arma::mat &distances)"
.br
.RI "Perform rank-approximate neighbor search, taking ownership of the query set\&. "
.ti -1c
.RI "void \fBSearch\fP (const size_t k, arma::Mat< size_t > &neighbors, arma::mat &distances)"
.br
.RI "Perform rank-approximate neighbor search, using the reference set as the query set\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the model\&. "
.ti -1c
.RI "bool \fBSingleMode\fP () const"
.br
.RI "Get whether or not single-tree search is being used\&. "
.ti -1c
.RI "bool & \fBSingleMode\fP ()"
.br
.RI "Modify whether or not single-tree search is being used\&. "
.ti -1c
.RI "size_t \fBSingleSampleLimit\fP () const"
.br
.RI "Get the limit on the size of a node that can be approximated\&. "
.ti -1c
.RI "size_t & \fBSingleSampleLimit\fP ()"
.br
.RI "Modify the limit on the size of a node that can be approximation\&. "
.ti -1c
.RI "double \fBTau\fP () const"
.br
.RI "Get the rank-approximation in percentile of the data\&. "
.ti -1c
.RI "double & \fBTau\fP ()"
.br
.RI "Modify the rank-approximation in percentile of the data\&. "
.ti -1c
.RI "std::string \fBTreeName\fP () const"
.br
.RI "Get the name of the tree type\&. "
.ti -1c
.RI "\fBTreeTypes\fP \fBTreeType\fP () const"
.br
.RI "Get the type of tree being used\&. "
.ti -1c
.RI "\fBTreeTypes\fP & \fBTreeType\fP ()"
.br
.RI "Modify the type of tree being used\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBRAModel\fP class provides an abstraction for the \fBRASearch\fP class, abstracting away the TreeType parameter and allowing it to be specified at runtime in this class\&. 

This class is written for the sake of the 'allkrann' program, but is not necessarily restricted to that use\&. 
.PP
Definition at line 257 of file ra_model\&.hpp\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBTreeTypes\fP"

.PP
The list of tree types we can use with \fBRASearch\fP\&. Does not include ball trees; see #338\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIKD_TREE \fP\fP
.TP
\fB\fICOVER_TREE \fP\fP
.TP
\fB\fIR_TREE \fP\fP
.TP
\fB\fIR_STAR_TREE \fP\fP
.TP
\fB\fIX_TREE \fP\fP
.TP
\fB\fIHILBERT_R_TREE \fP\fP
.TP
\fB\fIR_PLUS_TREE \fP\fP
.TP
\fB\fIR_PLUS_PLUS_TREE \fP\fP
.TP
\fB\fIUB_TREE \fP\fP
.TP
\fB\fIOCTREE \fP\fP
.PP
Definition at line 264 of file ra_model\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBRAModel\fP (\fBTreeTypes\fP treeType = \fCTreeTypes::KD_TREE\fP, bool randomBasis = \fCfalse\fP)"

.PP
Initialize the \fBRAModel\fP with the given type and whether or not a random basis should be used\&. 
.SS "\fBRAModel\fP (const \fBRAModel\fP & other)"

.PP
Copy the given \fBRAModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRAModel\fP to copy\&. 
.RE
.PP

.SS "\fBRAModel\fP (\fBRAModel\fP && other)"

.PP
Take ownership of the given \fBRAModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRAModel\fP to take ownership of\&. 
.RE
.PP

.SS "~\fBRAModel\fP ()"

.PP
Clean memory, if necessary\&. 
.SH "Member Function Documentation"
.PP 
.SS "double Alpha () const\fC [inline]\fP"

.PP
Get the desired success probability\&. 
.PP
Definition at line 353 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::Alpha()\&.
.SS "double& Alpha ()\fC [inline]\fP"

.PP
Modify the desired success probability\&. 
.PP
Definition at line 355 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::Alpha()\&.
.SS "void BuildModel (arma::mat && referenceSet, const size_t leafSize, const bool naive, const bool singleMode)"

.PP
Build the reference tree\&. 
.SS "const arma::mat& Dataset () const\fC [inline]\fP"

.PP
Expose the dataset\&. 
.PP
Definition at line 335 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::Dataset()\&.
.SS "bool FirstLeafExact () const\fC [inline]\fP"

.PP
Get whether or not we traverse to the first leaf without approximation\&. 
.PP
Definition at line 363 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::FirstLeafExact()\&.
.SS "bool& FirstLeafExact ()\fC [inline]\fP"

.PP
Modify whether or not we traverse to the first leaf without approximation\&. 
.PP
Definition at line 365 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::FirstLeafExact()\&.
.SS "void InitializeModel (const bool naive, const bool singleMode)"

.PP
Initialize the model's memory\&. 
.SS "size_t LeafSize () const\fC [inline]\fP"

.PP
Get the leaf size (only relevant when the kd-tree is used)\&. 
.PP
Definition at line 373 of file ra_model\&.hpp\&.
.SS "size_t& LeafSize ()\fC [inline]\fP"

.PP
Modify the leaf size (only relevant when the kd-tree is used)\&. 
.PP
Definition at line 375 of file ra_model\&.hpp\&.
.SS "bool Naive () const\fC [inline]\fP"

.PP
Get whether or not naive search is being used\&. 
.PP
Definition at line 343 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::Naive()\&.
.SS "bool& Naive ()\fC [inline]\fP"

.PP
Modify whether or not naive search is being used\&. 
.PP
Definition at line 345 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::Naive()\&.
.SS "\fBRAModel\fP& operator= (const \fBRAModel\fP & other)"

.PP
Copy the given \fBRAModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRAModel\fP to copy\&. 
.RE
.PP

.SS "\fBRAModel\fP& operator= (\fBRAModel\fP && other)"

.PP
Take ownership of the given \fBRAModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRAModel\fP to take ownership of\&. 
.RE
.PP

.SS "bool RandomBasis () const\fC [inline]\fP"

.PP
Get whether or not a random basis is being used\&. 
.PP
Definition at line 383 of file ra_model\&.hpp\&.
.SS "bool& RandomBasis ()\fC [inline]\fP"

.PP
Modify whether or not a random basis is being used\&. Be sure to rebuild the model using \fBBuildModel()\fP\&. 
.PP
Definition at line 386 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::Search()\&.
.SS "bool SampleAtLeaves () const\fC [inline]\fP"

.PP
Get whether or not sampling is done at the leaves\&. 
.PP
Definition at line 358 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::SampleAtLeaves()\&.
.SS "bool& SampleAtLeaves ()\fC [inline]\fP"

.PP
Modify whether or not sampling is done at the leaves\&. 
.PP
Definition at line 360 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::SampleAtLeaves()\&.
.SS "void Search (arma::mat && querySet, const size_t k, arma::Mat< size_t > & neighbors, arma::mat & distances)"

.PP
Perform rank-approximate neighbor search, taking ownership of the query set\&. 
.SS "void Search (const size_t k, arma::Mat< size_t > & neighbors, arma::mat & distances)"

.PP
Perform rank-approximate neighbor search, using the reference set as the query set\&. 
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the model\&. 
.SS "bool SingleMode () const\fC [inline]\fP"

.PP
Get whether or not single-tree search is being used\&. 
.PP
Definition at line 338 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::SingleMode()\&.
.SS "bool& SingleMode ()\fC [inline]\fP"

.PP
Modify whether or not single-tree search is being used\&. 
.PP
Definition at line 340 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::SingleMode()\&.
.SS "size_t SingleSampleLimit () const\fC [inline]\fP"

.PP
Get the limit on the size of a node that can be approximated\&. 
.PP
Definition at line 368 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::SingleSampleLimit()\&.
.SS "size_t& SingleSampleLimit ()\fC [inline]\fP"

.PP
Modify the limit on the size of a node that can be approximation\&. 
.PP
Definition at line 370 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::SingleSampleLimit()\&.
.SS "double Tau () const\fC [inline]\fP"

.PP
Get the rank-approximation in percentile of the data\&. 
.PP
Definition at line 348 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::Tau()\&.
.SS "double& Tau ()\fC [inline]\fP"

.PP
Modify the rank-approximation in percentile of the data\&. 
.PP
Definition at line 350 of file ra_model\&.hpp\&.
.PP
References RAWrapperBase::Tau()\&.
.SS "std::string TreeName () const"

.PP
Get the name of the tree type\&. 
.SS "\fBTreeTypes\fP TreeType () const\fC [inline]\fP"

.PP
Get the type of tree being used\&. 
.PP
Definition at line 378 of file ra_model\&.hpp\&.
.SS "\fBTreeTypes\fP& TreeType ()\fC [inline]\fP"

.PP
Modify the type of tree being used\&. 
.PP
Definition at line 380 of file ra_model\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
