.TH "NoisyLinear< InputDataType, OutputDataType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NoisyLinear< InputDataType, OutputDataType > \- Implementation of the \fBNoisyLinear\fP layer class\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNoisyLinear\fP ()"
.br
.RI "Create the \fBNoisyLinear\fP object\&. "
.ti -1c
.RI "\fBNoisyLinear\fP (const size_t inSize, const size_t outSize)"
.br
.RI "Create the \fBNoisyLinear\fP layer object using the specified number of units\&. "
.ti -1c
.RI "\fBNoisyLinear\fP (const \fBNoisyLinear\fP &)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBNoisyLinear\fP (\fBNoisyLinear\fP &&)"
.br
.RI "Move constructor\&. "
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &, const arma::Mat< eT > &gy, arma::Mat< eT > &g)"
.br
.RI "Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards trough f\&. "
.ti -1c
.RI "arma::mat & \fBBias\fP ()"
.br
.RI "Modify the bias weights of the layer\&. "
.ti -1c
.RI "OutputDataType const  & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "template<typename eT > void \fBForward\fP (const arma::Mat< eT > &input, arma::Mat< eT > &output)"
.br
.RI "Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. "
.ti -1c
.RI "template<typename eT > void \fBGradient\fP (const arma::Mat< eT > &input, const arma::Mat< eT > &error, arma::Mat< eT > &gradient)"
.br
.ti -1c
.RI "OutputDataType const  & \fBGradient\fP () const"
.br
.RI "Get the gradient\&. "
.ti -1c
.RI "OutputDataType & \fBGradient\fP ()"
.br
.RI "Modify the gradient\&. "
.ti -1c
.RI "InputDataType const  & \fBInputParameter\fP () const"
.br
.RI "Get the input parameter\&. "
.ti -1c
.RI "InputDataType & \fBInputParameter\fP ()"
.br
.RI "Modify the input parameter\&. "
.ti -1c
.RI "size_t \fBInputShape\fP () const"
.br
.RI "Get the shape of the input\&. "
.ti -1c
.RI "size_t \fBInputSize\fP () const"
.br
.RI "Get the input size\&. "
.ti -1c
.RI "\fBNoisyLinear\fP & \fBoperator=\fP (const \fBNoisyLinear\fP &layer)"
.br
.RI "Operator= copy constructor\&. "
.ti -1c
.RI "\fBNoisyLinear\fP & \fBoperator=\fP (\fBNoisyLinear\fP &&layer)"
.br
.RI "Operator= move constructor\&. "
.ti -1c
.RI "OutputDataType const  & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "size_t \fBOutputSize\fP () const"
.br
.RI "Get the output size\&. "
.ti -1c
.RI "OutputDataType const  & \fBParameters\fP () const"
.br
.RI "Get the parameters\&. "
.ti -1c
.RI "OutputDataType & \fBParameters\fP ()"
.br
.RI "Modify the parameters\&. "
.ti -1c
.RI "void \fBReset\fP ()"
.br
.ti -1c
.RI "void \fBResetNoise\fP ()"
.br
.ti -1c
.RI "void \fBResetParameters\fP ()"
.br
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.ti -1c
.RI "size_t \fBWeightSize\fP () const"
.br
.RI "Get size of weights\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::NoisyLinear< InputDataType, OutputDataType >"
Implementation of the \fBNoisyLinear\fP layer class\&. 

It represents a single layer of a neural network, with parametric noise added to its weights\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 103 of file layer_types\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBNoisyLinear\fP ()"

.PP
Create the \fBNoisyLinear\fP object\&. 
.SS "\fBNoisyLinear\fP (const size_t inSize, const size_t outSize)"

.PP
Create the \fBNoisyLinear\fP layer object using the specified number of units\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinSize\fP The number of input units\&. 
.br
\fIoutSize\fP The number of output units\&. 
.RE
.PP

.SS "\fBNoisyLinear\fP (const \fBNoisyLinear\fP< InputDataType, OutputDataType > &)"

.PP
Copy constructor\&. 
.SS "\fBNoisyLinear\fP (\fBNoisyLinear\fP< InputDataType, OutputDataType > &&)"

.PP
Move constructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "void Backward (const arma::Mat< eT > &, const arma::Mat< eT > & gy, arma::Mat< eT > & g)"

.PP
Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards trough f\&. Using the results from the feed forward pass\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (input) The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "arma::mat& Bias ()\fC [inline]\fP"

.PP
Modify the bias weights of the layer\&. 
.PP
Definition at line 149 of file noisylinear\&.hpp\&.
.SS "OutputDataType const& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 127 of file noisylinear\&.hpp\&.
.SS "OutputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 129 of file noisylinear\&.hpp\&.
.SS "void Forward (const arma::Mat< eT > & input, arma::Mat< eT > & output)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "void Gradient (const arma::Mat< eT > & input, const arma::Mat< eT > & error, arma::Mat< eT > & gradient)"

.SS "OutputDataType const& Gradient () const\fC [inline]\fP"

.PP
Get the gradient\&. 
.PP
Definition at line 138 of file noisylinear\&.hpp\&.
.SS "OutputDataType& Gradient ()\fC [inline]\fP"

.PP
Modify the gradient\&. 
.PP
Definition at line 140 of file noisylinear\&.hpp\&.
.SS "InputDataType const& InputParameter () const\fC [inline]\fP"

.PP
Get the input parameter\&. 
.PP
Definition at line 117 of file noisylinear\&.hpp\&.
.SS "InputDataType& InputParameter ()\fC [inline]\fP"

.PP
Modify the input parameter\&. 
.PP
Definition at line 119 of file noisylinear\&.hpp\&.
.SS "size_t InputShape () const\fC [inline]\fP"

.PP
Get the shape of the input\&. 
.PP
Definition at line 143 of file noisylinear\&.hpp\&.
.SS "size_t InputSize () const\fC [inline]\fP"

.PP
Get the input size\&. 
.PP
Definition at line 132 of file noisylinear\&.hpp\&.
.SS "\fBNoisyLinear\fP& operator= (const \fBNoisyLinear\fP< InputDataType, OutputDataType > & layer)"

.PP
Operator= copy constructor\&. 
.SS "\fBNoisyLinear\fP& operator= (\fBNoisyLinear\fP< InputDataType, OutputDataType > && layer)"

.PP
Operator= move constructor\&. 
.SS "OutputDataType const& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 122 of file noisylinear\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 124 of file noisylinear\&.hpp\&.
.SS "size_t OutputSize () const\fC [inline]\fP"

.PP
Get the output size\&. 
.PP
Definition at line 135 of file noisylinear\&.hpp\&.
.SS "OutputDataType const& Parameters () const\fC [inline]\fP"

.PP
Get the parameters\&. 
.PP
Definition at line 112 of file noisylinear\&.hpp\&.
.SS "OutputDataType& Parameters ()\fC [inline]\fP"

.PP
Modify the parameters\&. 
.PP
Definition at line 114 of file noisylinear\&.hpp\&.
.SS "void Reset ()"

.SS "void ResetNoise ()"

.SS "void ResetParameters ()"

.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by NoisyLinear< InputDataType, OutputDataType >::WeightSize()\&.
.SS "size_t WeightSize () const\fC [inline]\fP"

.PP
Get size of weights\&. 
.PP
Definition at line 152 of file noisylinear\&.hpp\&.
.PP
References NoisyLinear< InputDataType, OutputDataType >::serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
