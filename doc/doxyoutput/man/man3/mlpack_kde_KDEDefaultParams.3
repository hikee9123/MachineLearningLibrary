.TH "KDEDefaultParams" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KDEDefaultParams \- \fBKDEDefaultParams\fP contains the default input parameter values for \fBKDE\fP\&.  

.SH SYNOPSIS
.br
.PP
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static constexpr double \fBabsError\fP = 0"
.br
.RI "Absolute error tolerance\&. "
.ti -1c
.RI "static constexpr size_t \fBinitialSampleSize\fP = 100"
.br
.RI "Initial sample size for Monte Carlo estimations\&. "
.ti -1c
.RI "static constexpr double \fBmcBreakCoef\fP = 0\&.4"
.br
.RI "Monte Carlo break coefficient\&. "
.ti -1c
.RI "static constexpr double \fBmcEntryCoef\fP = 3"
.br
.RI "Monte Carlo entry coefficient\&. "
.ti -1c
.RI "static constexpr double \fBmcProb\fP = 0\&.95"
.br
.RI "Probability of a Monte Carlo estimation to be bounded by the relative error tolerance\&. "
.ti -1c
.RI "static constexpr \fBKDEMode\fP \fBmode\fP = KDEMode::DUAL_TREE_MODE"
.br
.RI "\fBKDE\fP algorithm mode\&. "
.ti -1c
.RI "static constexpr bool \fBmonteCarlo\fP = false"
.br
.RI "Whether to use Monte Carlo estimations when possible\&. "
.ti -1c
.RI "static constexpr double \fBrelError\fP = 0\&.05"
.br
.RI "Relative error tolerance\&. "
.in -1c
.SH "Detailed Description"
.PP 
\fBKDEDefaultParams\fP contains the default input parameter values for \fBKDE\fP\&. 
.PP
Definition at line 32 of file kde\&.hpp\&.
.SH "Member Data Documentation"
.PP 
.SS "constexpr double absError = 0\fC [static]\fP"

.PP
Absolute error tolerance\&. 
.PP
Definition at line 38 of file kde\&.hpp\&.
.PP
Referenced by KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::AbsoluteError(), and KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MCBreakCoef()\&.
.SS "constexpr size_t initialSampleSize = 100\fC [static]\fP"

.PP
Initial sample size for Monte Carlo estimations\&. 
.PP
Definition at line 51 of file kde\&.hpp\&.
.PP
Referenced by KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MCBreakCoef(), and KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MCInitialSampleSize()\&.
.SS "constexpr double mcBreakCoef = 0\&.4\fC [static]\fP"

.PP
Monte Carlo break coefficient\&. 
.PP
Definition at line 57 of file kde\&.hpp\&.
.PP
Referenced by KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MCBreakCoef()\&.
.SS "constexpr double mcEntryCoef = 3\fC [static]\fP"

.PP
Monte Carlo entry coefficient\&. 
.PP
Definition at line 54 of file kde\&.hpp\&.
.PP
Referenced by KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MCBreakCoef(), and KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MCEntryCoef()\&.
.SS "constexpr double mcProb = 0\&.95\fC [static]\fP"

.PP
Probability of a Monte Carlo estimation to be bounded by the relative error tolerance\&. 
.PP
Definition at line 48 of file kde\&.hpp\&.
.PP
Referenced by KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MCBreakCoef(), and KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MCProb()\&.
.SS "constexpr \fBKDEMode\fP mode = KDEMode::DUAL_TREE_MODE\fC [static]\fP"

.PP
\fBKDE\fP algorithm mode\&. 
.PP
Definition at line 41 of file kde\&.hpp\&.
.PP
Referenced by KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MCBreakCoef(), and KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::Mode()\&.
.SS "constexpr bool monteCarlo = false\fC [static]\fP"

.PP
Whether to use Monte Carlo estimations when possible\&. 
.PP
Definition at line 44 of file kde\&.hpp\&.
.PP
Referenced by KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MCBreakCoef(), and KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MonteCarlo()\&.
.SS "constexpr double relError = 0\&.05\fC [static]\fP"

.PP
Relative error tolerance\&. 
.PP
Definition at line 35 of file kde\&.hpp\&.
.PP
Referenced by KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::MCBreakCoef(), and KDE< KernelType, metric::EuclideanDistance, arma::mat, TreeType >::RelativeError()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
