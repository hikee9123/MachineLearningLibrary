.TH "OverallMeanNormalization" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
OverallMeanNormalization \- This normalization class performs overall mean normalization on raw ratings\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBOverallMeanNormalization\fP ()"
.br
.ti -1c
.RI "double \fBDenormalize\fP (const size_t, const size_t, const double rating) const"
.br
.RI "Denormalize computed rating by adding mean\&. "
.ti -1c
.RI "void \fBDenormalize\fP (const arma::Mat< size_t > &, arma::vec &predictions) const"
.br
.RI "Denormalize computed rating by adding mean\&. "
.ti -1c
.RI "double \fBMean\fP () const"
.br
.RI "Return mean\&. "
.ti -1c
.RI "void \fBNormalize\fP (arma::mat &data)"
.br
.RI "Normalize the data by subtracting the mean of all existing ratings\&. "
.ti -1c
.RI "void \fBNormalize\fP (arma::sp_mat &cleanedData)"
.br
.RI "Normalize the data by subtracting the mean of all existing ratings\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialization\&. "
.in -1c
.SH "Detailed Description"
.PP 
This normalization class performs overall mean normalization on raw ratings\&. 

An example of how to use \fBOverallMeanNormalization\fP in CF is shown below:
.PP
.PP
.nf
extern arma::mat data; // data is a (user, item, rating) table\&.
// Users for whom recommendations are generated\&.
extern arma::Col<size_t> users;
arma::Mat<size_t> recommendations; // Resulting recommendations\&.

// Use OverallMeanNormalization as normalization method\&.
CFType<NMFPolicy, OverallMeanNormalization> cf(data);

// Generate 10 recommendations for all users\&.
cf\&.GetRecommendations(10, recommendations);
.fi
.PP
 
.PP
Definition at line 39 of file overall_mean_normalization\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBOverallMeanNormalization\fP ()\fC [inline]\fP"

.PP
Definition at line 43 of file overall_mean_normalization\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "double Denormalize (const size_t, const size_t, const double rating) const\fC [inline]\fP"

.PP
Denormalize computed rating by adding mean\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (user) User ID\&. 
.br
\fI*\fP (item) Item ID\&. 
.br
\fIrating\fP Computed rating before denormalization\&. 
.RE
.PP

.PP
Definition at line 103 of file overall_mean_normalization\&.hpp\&.
.SS "void Denormalize (const arma::Mat< size_t > &, arma::vec & predictions) const\fC [inline]\fP"

.PP
Denormalize computed rating by adding mean\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (combinations) User/Item combinations\&. 
.br
\fIpredictions\fP Predicted ratings for each user/item combination\&. 
.RE
.PP

.PP
Definition at line 116 of file overall_mean_normalization\&.hpp\&.
.SS "double Mean () const\fC [inline]\fP"

.PP
Return mean\&. 
.PP
Definition at line 125 of file overall_mean_normalization\&.hpp\&.
.SS "void Normalize (arma::mat & data)\fC [inline]\fP"

.PP
Normalize the data by subtracting the mean of all existing ratings\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Input dataset in the form of coordinate list\&. 
.RE
.PP

.PP
Definition at line 50 of file overall_mean_normalization\&.hpp\&.
.SS "void Normalize (arma::sp_mat & cleanedData)\fC [inline]\fP"

.PP
Normalize the data by subtracting the mean of all existing ratings\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcleanedData\fP Input data as a sparse matrix\&. 
.RE
.PP

.PP
Definition at line 68 of file overall_mean_normalization\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)\fC [inline]\fP"

.PP
Serialization\&. 
.PP
Definition at line 134 of file overall_mean_normalization\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
