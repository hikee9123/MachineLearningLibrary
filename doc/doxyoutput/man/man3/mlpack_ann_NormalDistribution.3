.TH "NormalDistribution< DataType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NormalDistribution< DataType > \- Implementation of the Normal Distribution function\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNormalDistribution\fP ()"
.br
.RI "Default constructor, which creates a Normal distribution with zero dimension\&. "
.ti -1c
.RI "\fBNormalDistribution\fP (const DataType &mean, const DataType &sigma)"
.br
.RI "Create a Normal distribution with the given mean and sigma\&. "
.ti -1c
.RI "size_t \fBDimensionality\fP () const"
.br
.RI "Return the dimensionality of this distribution\&. "
.ti -1c
.RI "DataType \fBLogProbability\fP (const DataType &observation) const"
.br
.RI "Return the log probabilities of the given matrix of observations\&. "
.ti -1c
.RI "void \fBLogProbability\fP (const DataType &x, DataType &probabilities) const"
.br
.RI "Calculates the log of normal probability density function for each data point (column) in the given matrix\&. "
.ti -1c
.RI "const DataType & \fBMean\fP () const"
.br
.RI "Get the mean\&. "
.ti -1c
.RI "DataType & \fBMean\fP ()"
.br
.RI "Modify the mean\&. "
.ti -1c
.RI "DataType \fBProbability\fP (const DataType &observation) const"
.br
.RI "Return the probabilities of the given matrix of observations\&. "
.ti -1c
.RI "void \fBProbability\fP (const DataType &x, DataType &probabilities) const"
.br
.RI "Calculates the normal probability density function for each data point (column) in the given matrix\&. "
.ti -1c
.RI "void \fBProbBackward\fP (const DataType &observation, DataType &dmu, DataType &dsigma) const"
.br
.RI "Stores the gradient of the probabilities of the observations with respect to mean and standard deviation\&. "
.ti -1c
.RI "DataType \fBSample\fP () const"
.br
.RI "Return a randomly generated observation according to the probability distribution defined by this object\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the distribution\&. "
.ti -1c
.RI "const DataType & \fBStandardDeviation\fP () const"
.br
.RI "Get the standard deviation\&. "
.ti -1c
.RI "DataType & \fBStandardDeviation\fP ()"
.br
.RI "Modify the standard deviation\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename DataType = arma::mat>
.br
class mlpack::ann::NormalDistribution< DataType >"
Implementation of the Normal Distribution function\&. 

Normal distribution is a function which accepts a mean and a standard deviation term and creates a probability distribution out of it\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIDataType\fP Type of the input data\&. (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 32 of file normal_distribution\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBNormalDistribution\fP ()"

.PP
Default constructor, which creates a Normal distribution with zero dimension\&. 
.SS "\fBNormalDistribution\fP (const DataType & mean, const DataType & sigma)"

.PP
Create a Normal distribution with the given mean and sigma\&. 
.PP
\fBParameters:\fP
.RS 4
\fImean\fP The mean of the normal distribution\&. 
.br
\fIsigma\fP The standard deviation of the normal distribution\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "size_t Dimensionality () const\fC [inline]\fP"

.PP
Return the dimensionality of this distribution\&. 
.PP
Definition at line 123 of file normal_distribution\&.hpp\&.
.PP
References NormalDistribution< DataType >::serialize()\&.
.SS "DataType LogProbability (const DataType & observation) const"

.PP
Return the log probabilities of the given matrix of observations\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobservation\fP The observation matrix\&. 
.RE
.PP

.PP
Referenced by NormalDistribution< DataType >::LogProbability(), and NormalDistribution< DataType >::Probability()\&.
.SS "void LogProbability (const DataType & x, DataType & probabilities) const\fC [inline]\fP"

.PP
Calculates the log of normal probability density function for each data point (column) in the given matrix\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP The observation matrix\&. 
.br
\fIprobabilities\fP Output log probabilities for each input observation\&. 
.RE
.PP

.PP
Definition at line 97 of file normal_distribution\&.hpp\&.
.PP
References NormalDistribution< DataType >::LogProbability(), and NormalDistribution< DataType >::Sample()\&.
.SS "const DataType& Mean () const\fC [inline]\fP"

.PP
Get the mean\&. 
.PP
Definition at line 111 of file normal_distribution\&.hpp\&.
.SS "DataType& Mean ()\fC [inline]\fP"

.PP
Modify the mean\&. 
.PP
Definition at line 114 of file normal_distribution\&.hpp\&.
.SS "DataType Probability (const DataType & observation) const\fC [inline]\fP"

.PP
Return the probabilities of the given matrix of observations\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobservation\fP The observation matrix\&. 
.RE
.PP

.PP
Definition at line 54 of file normal_distribution\&.hpp\&.
.PP
References NormalDistribution< DataType >::LogProbability(), and NormalDistribution< DataType >::ProbBackward()\&.
.PP
Referenced by NormalDistribution< DataType >::Probability()\&.
.SS "void Probability (const DataType & x, DataType & probabilities) const\fC [inline]\fP"

.PP
Calculates the normal probability density function for each data point (column) in the given matrix\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP The observation matrix\&. 
.br
\fIprobabilities\fP Output probabilities for each input observation\&. 
.RE
.PP

.PP
Definition at line 85 of file normal_distribution\&.hpp\&.
.PP
References NormalDistribution< DataType >::Probability()\&.
.SS "void ProbBackward (const DataType & observation, DataType & dmu, DataType & dsigma) const"

.PP
Stores the gradient of the probabilities of the observations with respect to mean and standard deviation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIobservation\fP The observation matrix\&. 
.br
\fIdmu\fP The gradient with respect to mean\&. 
.br
\fIdsigma\fP The gradient with respect to the standard deviation\&. 
.RE
.PP

.PP
Referenced by NormalDistribution< DataType >::Probability()\&.
.SS "DataType Sample () const"

.PP
Return a randomly generated observation according to the probability distribution defined by this object\&. 
.PP
\fBReturns:\fP
.RS 4
Random observation from this Normal distribution\&. 
.RE
.PP

.PP
Referenced by NormalDistribution< DataType >::LogProbability()\&.
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the distribution\&. 
.PP
Referenced by NormalDistribution< DataType >::Dimensionality()\&.
.SS "const DataType& StandardDeviation () const\fC [inline]\fP"

.PP
Get the standard deviation\&. 
.PP
Definition at line 117 of file normal_distribution\&.hpp\&.
.SS "DataType& StandardDeviation ()\fC [inline]\fP"

.PP
Modify the standard deviation\&. 
.PP
Definition at line 120 of file normal_distribution\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
