.TH "VirtualBatchNorm< InputDataType, OutputDataType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
VirtualBatchNorm< InputDataType, OutputDataType > \- Declaration of the \fBVirtualBatchNorm\fP layer class\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVirtualBatchNorm\fP ()"
.br
.RI "Create the \fBVirtualBatchNorm\fP object\&. "
.ti -1c
.RI "template<typename eT > \fBVirtualBatchNorm\fP (const arma::Mat< eT > &referenceBatch, const size_t size, const double eps=1e\-8)"
.br
.RI "Create the \fBVirtualBatchNorm\fP layer object for a specified number of input units\&. "
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &, const arma::Mat< eT > &gy, arma::Mat< eT > &g)"
.br
.RI "Backward pass through the layer\&. "
.ti -1c
.RI "OutputDataType const  & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "double \fBEpsilon\fP () const"
.br
.RI "Get the epsilon value\&. "
.ti -1c
.RI "template<typename eT > void \fBForward\fP (const arma::Mat< eT > &input, arma::Mat< eT > &output)"
.br
.RI "Forward pass of the Virtual Batch Normalization layer\&. "
.ti -1c
.RI "template<typename eT > void \fBGradient\fP (const arma::Mat< eT > &, const arma::Mat< eT > &error, arma::Mat< eT > &gradient)"
.br
.RI "Calculate the gradient using the output delta and the input activations\&. "
.ti -1c
.RI "OutputDataType const  & \fBGradient\fP () const"
.br
.RI "Get the gradient\&. "
.ti -1c
.RI "OutputDataType & \fBGradient\fP ()"
.br
.RI "Modify the gradient\&. "
.ti -1c
.RI "size_t \fBInSize\fP () const"
.br
.RI "Get the number of input units\&. "
.ti -1c
.RI "OutputDataType const  & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "OutputDataType const  & \fBParameters\fP () const"
.br
.RI "Get the parameters\&. "
.ti -1c
.RI "OutputDataType & \fBParameters\fP ()"
.br
.RI "Modify the parameters\&. "
.ti -1c
.RI "void \fBReset\fP ()"
.br
.RI "Reset the layer parameters\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::VirtualBatchNorm< InputDataType, OutputDataType >"
Declaration of the \fBVirtualBatchNorm\fP layer class\&. 

Instead of using the batch statistics for normalizing on a mini-batch, it uses a reference subset of the data for calculating the normalization statistics\&.
.PP
For more information, refer to the following paper,
.PP
.PP
.nf
@article{Goodfellow2016,
  author  = {Tim Salimans, Ian Goodfellow, Wojciech Zaremba, Vicki Cheung,
             Alec Radford, Xi Chen},
  title   = {Improved Techniques for Training GANs},
  year    = {2016},
  url     = {https://arxiv\&.org/abs/1606\&.03498},
}
.fi
.PP
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 113 of file layer_types\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBVirtualBatchNorm\fP ()"

.PP
Create the \fBVirtualBatchNorm\fP object\&. 
.SS "\fBVirtualBatchNorm\fP (const arma::Mat< eT > & referenceBatch, const size_t size, const double eps = \fC1e\-8\fP)"

.PP
Create the \fBVirtualBatchNorm\fP layer object for a specified number of input units\&. 
.PP
\fBParameters:\fP
.RS 4
\fIreferenceBatch\fP The data from which the normalization statistics are computed\&. 
.br
\fIsize\fP The number of input units / channels\&. 
.br
\fIeps\fP The epsilon added to variance to ensure numerical stability\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Backward (const arma::Mat< eT > &, const arma::Mat< eT > & gy, arma::Mat< eT > & g)"

.PP
Backward pass through the layer\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (input) The input activations\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "OutputDataType const& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 116 of file virtual_batch_norm\&.hpp\&.
.SS "OutputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 118 of file virtual_batch_norm\&.hpp\&.
.SS "double Epsilon () const\fC [inline]\fP"

.PP
Get the epsilon value\&. 
.PP
Definition at line 129 of file virtual_batch_norm\&.hpp\&.
.PP
References VirtualBatchNorm< InputDataType, OutputDataType >::serialize()\&.
.SS "void Forward (const arma::Mat< eT > & input, arma::Mat< eT > & output)"

.PP
Forward pass of the Virtual Batch Normalization layer\&. Transforms the input data into zero mean and unit variance, scales the data by a factor gamma and shifts it by beta\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data for the layer\&. 
.br
\fIoutput\fP Resulting output activations\&. 
.RE
.PP

.SS "void Gradient (const arma::Mat< eT > &, const arma::Mat< eT > & error, arma::Mat< eT > & gradient)"

.PP
Calculate the gradient using the output delta and the input activations\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (input) The input activations\&. 
.br
\fIerror\fP The calculated error\&. 
.br
\fIgradient\fP The calculated gradient\&. 
.RE
.PP

.SS "OutputDataType const& Gradient () const\fC [inline]\fP"

.PP
Get the gradient\&. 
.PP
Definition at line 121 of file virtual_batch_norm\&.hpp\&.
.SS "OutputDataType& Gradient ()\fC [inline]\fP"

.PP
Modify the gradient\&. 
.PP
Definition at line 123 of file virtual_batch_norm\&.hpp\&.
.SS "size_t InSize () const\fC [inline]\fP"

.PP
Get the number of input units\&. 
.PP
Definition at line 126 of file virtual_batch_norm\&.hpp\&.
.SS "OutputDataType const& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 111 of file virtual_batch_norm\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 113 of file virtual_batch_norm\&.hpp\&.
.SS "OutputDataType const& Parameters () const\fC [inline]\fP"

.PP
Get the parameters\&. 
.PP
Definition at line 106 of file virtual_batch_norm\&.hpp\&.
.SS "OutputDataType& Parameters ()\fC [inline]\fP"

.PP
Modify the parameters\&. 
.PP
Definition at line 108 of file virtual_batch_norm\&.hpp\&.
.SS "void Reset ()"

.PP
Reset the layer parameters\&. 
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by VirtualBatchNorm< InputDataType, OutputDataType >::Epsilon()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
