.TH "ReinforceNormal< InputDataType, OutputDataType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ReinforceNormal< InputDataType, OutputDataType > \- Implementation of the reinforce normal layer\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBReinforceNormal\fP (const double stdev=1\&.0)"
.br
.RI "Create the \fBReinforceNormal\fP object\&. "
.ti -1c
.RI "template<typename DataType > void \fBBackward\fP (const DataType &input, const DataType &, DataType &g)"
.br
.RI "Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards through f\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "bool \fBDeterministic\fP () const"
.br
.RI "Get the value of the deterministic parameter\&. "
.ti -1c
.RI "bool & \fBDeterministic\fP ()"
.br
.RI "Modify the value of the deterministic parameter\&. "
.ti -1c
.RI "template<typename eT > void \fBForward\fP (const arma::Mat< eT > &input, arma::Mat< eT > &output)"
.br
.RI "Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "double \fBReward\fP () const"
.br
.RI "Get the value of the reward parameter\&. "
.ti -1c
.RI "double & \fBReward\fP ()"
.br
.RI "Modify the value of the deterministic parameter\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.ti -1c
.RI "double \fBStandardDeviation\fP () const"
.br
.RI "Get the standard deviation used during forward and backward pass\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::ReinforceNormal< InputDataType, OutputDataType >"
Implementation of the reinforce normal layer\&. 

The reinforce normal layer implements the REINFORCE algorithm for the normal distribution\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 34 of file reinforce_normal\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBReinforceNormal\fP (const double stdev = \fC1\&.0\fP)"

.PP
Create the \fBReinforceNormal\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstdev\fP Standard deviation used during the forward and backward pass\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Backward (const DataType & input, const DataType &, DataType & g)"

.PP
Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards through f\&. Using the results from the feed forward pass\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The propagated input activation\&. 
.br
\fI*\fP (gy) The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "OutputDataType& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 72 of file reinforce_normal\&.hpp\&.
.SS "OutputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 74 of file reinforce_normal\&.hpp\&.
.SS "bool Deterministic () const\fC [inline]\fP"

.PP
Get the value of the deterministic parameter\&. 
.PP
Definition at line 77 of file reinforce_normal\&.hpp\&.
.SS "bool& Deterministic ()\fC [inline]\fP"

.PP
Modify the value of the deterministic parameter\&. 
.PP
Definition at line 79 of file reinforce_normal\&.hpp\&.
.SS "void Forward (const arma::Mat< eT > & input, arma::Mat< eT > & output)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "OutputDataType& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 67 of file reinforce_normal\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 69 of file reinforce_normal\&.hpp\&.
.SS "double Reward () const\fC [inline]\fP"

.PP
Get the value of the reward parameter\&. 
.PP
Definition at line 82 of file reinforce_normal\&.hpp\&.
.SS "double& Reward ()\fC [inline]\fP"

.PP
Modify the value of the deterministic parameter\&. 
.PP
Definition at line 84 of file reinforce_normal\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by ReinforceNormal< InputDataType, OutputDataType >::StandardDeviation()\&.
.SS "double StandardDeviation () const\fC [inline]\fP"

.PP
Get the standard deviation used during forward and backward pass\&. 
.PP
Definition at line 87 of file reinforce_normal\&.hpp\&.
.PP
References ReinforceNormal< InputDataType, OutputDataType >::serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
