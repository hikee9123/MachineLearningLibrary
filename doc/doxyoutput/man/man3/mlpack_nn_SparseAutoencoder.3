.TH "SparseAutoencoder" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SparseAutoencoder \- A sparse autoencoder is a neural network whose aim to learn compressed representations of the data, typically for dimensionality reduction, with a constraint on the activity of the neurons in the network\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename OptimizerType  = ens::L_BFGS> \fBSparseAutoencoder\fP (const arma::mat &data, const size_t visibleSize, const size_t hiddenSize, const double lambda=0\&.0001, const double beta=3, const double rho=0\&.01, OptimizerType optimizer=OptimizerType())"
.br
.RI "Construct the sparse autoencoder model with the given training data\&. "
.ti -1c
.RI "template<typename OptimizerType , typename\&.\&.\&. CallbackTypes> \fBSparseAutoencoder\fP (const arma::mat &data, const size_t visibleSize, const size_t hiddenSize, const double lambda, const double beta, const double rho, OptimizerType optimizer, CallbackTypes &&\&.\&.\&. callbacks)"
.br
.RI "Construct the sparse autoencoder model with the given training data\&. "
.ti -1c
.RI "void \fBBeta\fP (const double b)"
.br
.RI "Sets the KL divergence parameter\&. "
.ti -1c
.RI "double \fBBeta\fP () const"
.br
.RI "Gets the KL divergence parameter\&. "
.ti -1c
.RI "void \fBGetNewFeatures\fP (arma::mat &data, arma::mat &features)"
.br
.RI "Transforms the provided data into the representation learned by the sparse autoencoder\&. "
.ti -1c
.RI "void \fBHiddenSize\fP (const size_t hidden)"
.br
.RI "Sets size of the hidden layer\&. "
.ti -1c
.RI "size_t \fBHiddenSize\fP () const"
.br
.RI "Gets the size of the hidden layer\&. "
.ti -1c
.RI "void \fBLambda\fP (const double l)"
.br
.RI "Sets the L2-regularization parameter\&. "
.ti -1c
.RI "double \fBLambda\fP () const"
.br
.RI "Gets the L2-regularization parameter\&. "
.ti -1c
.RI "void \fBRho\fP (const double r)"
.br
.RI "Sets the sparsity parameter\&. "
.ti -1c
.RI "double \fBRho\fP () const"
.br
.RI "Gets the sparsity parameter\&. "
.ti -1c
.RI "void \fBSigmoid\fP (const arma::mat &x, arma::mat &output) const"
.br
.RI "Returns the elementwise sigmoid of the passed matrix, where the sigmoid function of a real number 'x' is [1 / (1 + exp(-x))]\&. "
.ti -1c
.RI "void \fBVisibleSize\fP (const size_t visible)"
.br
.RI "Sets size of the visible layer\&. "
.ti -1c
.RI "size_t \fBVisibleSize\fP () const"
.br
.RI "Gets size of the visible layer\&. "
.in -1c
.SH "Detailed Description"
.PP 
A sparse autoencoder is a neural network whose aim to learn compressed representations of the data, typically for dimensionality reduction, with a constraint on the activity of the neurons in the network\&. 

Sparse autoencoders can be stacked together to learn a hierarchy of features, which provide a better representation of the data for classification\&. This is a method used in the recently developed field of deep learning\&. More technical details about the model can be found on the following webpage:
.PP
http://deeplearning.stanford.edu/wiki/index.php/UFLDL_Tutorial
.PP
An example of how to use the interface is shown below:
.PP
.PP
.nf
arma::mat data; // Data matrix\&.
const size_t vSize = 64; // Size of visible layer, depends on the data\&.
const size_t hSize = 25; // Size of hidden layer, depends on requirements\&.

// Train the model using default options\&.
SparseAutoencoder encoder1(data, vSize, hSize);

const size_t numBasis = 5; // Parameter required for L-BFGS algorithm\&.
const size_t numIterations = 100; // Maximum number of iterations\&.

// Use an instantiated optimizer for the training\&.
SparseAutoencoderFunction saf(data, vSize, hSize);
L_BFGS<SparseAutoencoderFunction> optimizer(saf, numBasis, numIterations);
SparseAutoencoder<L_BFGS> encoder2(optimizer);

arma::mat features1, features2; // Matrices for storing new representations\&.

// Get new representations from the trained models\&.
encoder1\&.GetNewFeatures(data, features1);
encoder2\&.GetNewFeatures(data, features2);
.fi
.PP
.PP
This implementation allows the use of arbitrary mlpack optimizers via the OptimizerType template parameter\&. 
.PP
Definition at line 63 of file sparse_autoencoder\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBSparseAutoencoder\fP (const arma::mat & data, const size_t visibleSize, const size_t hiddenSize, const double lambda = \fC0\&.0001\fP, const double beta = \fC3\fP, const double rho = \fC0\&.01\fP, OptimizerType optimizer = \fCOptimizerType()\fP)"

.PP
Construct the sparse autoencoder model with the given training data\&. This will train the model\&. The parameters 'lambda', 'beta' and 'rho' can be set optionally\&. Changing these parameters will have an effect on regularization and sparsity of the model\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOptimizerType\fP The optimizer to use\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Input data with each column as one example\&. 
.br
\fIvisibleSize\fP Size of input vector expected at the visible layer\&. 
.br
\fIhiddenSize\fP Size of input vector expected at the hidden layer\&. 
.br
\fIlambda\fP L2-regularization parameter\&. 
.br
\fIbeta\fP KL divergence parameter\&. 
.br
\fIrho\fP Sparsity parameter\&. 
.br
\fIoptimizer\fP Desired optimizer\&. 
.RE
.PP

.SS "\fBSparseAutoencoder\fP (const arma::mat & data, const size_t visibleSize, const size_t hiddenSize, const double lambda, const double beta, const double rho, OptimizerType optimizer, CallbackTypes &&\&.\&.\&. callbacks)"

.PP
Construct the sparse autoencoder model with the given training data\&. This will train the model\&. The parameters 'lambda', 'beta' and 'rho' can be set optionally\&. Changing these parameters will have an effect on regularization and sparsity of the model\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOptimizerType\fP The optimizer to use\&. 
.br
\fICallbackTypes\fP Types of Callback Functions\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Input data with each column as one example\&. 
.br
\fIvisibleSize\fP Size of input vector expected at the visible layer\&. 
.br
\fIhiddenSize\fP Size of input vector expected at the hidden layer\&. 
.br
\fIlambda\fP L2-regularization parameter\&. 
.br
\fIbeta\fP KL divergence parameter\&. 
.br
\fIrho\fP Sparsity parameter\&. 
.br
\fIoptimizer\fP Desired optimizer\&. 
.br
\fIcallbacks\fP Callback function for ensmallen optimizer \fCOptimizerType\fP\&. See https://www.ensmallen.org/docs.html#callback-documentation\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Beta (const double b)\fC [inline]\fP"

.PP
Sets the KL divergence parameter\&. 
.PP
Definition at line 177 of file sparse_autoencoder\&.hpp\&.
.SS "double Beta () const\fC [inline]\fP"

.PP
Gets the KL divergence parameter\&. 
.PP
Definition at line 183 of file sparse_autoencoder\&.hpp\&.
.SS "void GetNewFeatures (arma::mat & data, arma::mat & features)"

.PP
Transforms the provided data into the representation learned by the sparse autoencoder\&. The function basically performs a feedforward computation using the learned weights, and returns the hidden layer activations\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Matrix of the provided data\&. 
.br
\fIfeatures\fP The hidden layer representation of the provided data\&. 
.RE
.PP

.SS "void HiddenSize (const size_t hidden)\fC [inline]\fP"

.PP
Sets size of the hidden layer\&. 
.PP
Definition at line 153 of file sparse_autoencoder\&.hpp\&.
.SS "size_t HiddenSize () const\fC [inline]\fP"

.PP
Gets the size of the hidden layer\&. 
.PP
Definition at line 159 of file sparse_autoencoder\&.hpp\&.
.SS "void Lambda (const double l)\fC [inline]\fP"

.PP
Sets the L2-regularization parameter\&. 
.PP
Definition at line 165 of file sparse_autoencoder\&.hpp\&.
.SS "double Lambda () const\fC [inline]\fP"

.PP
Gets the L2-regularization parameter\&. 
.PP
Definition at line 171 of file sparse_autoencoder\&.hpp\&.
.SS "void Rho (const double r)\fC [inline]\fP"

.PP
Sets the sparsity parameter\&. 
.PP
Definition at line 189 of file sparse_autoencoder\&.hpp\&.
.SS "double Rho () const\fC [inline]\fP"

.PP
Gets the sparsity parameter\&. 
.PP
Definition at line 195 of file sparse_autoencoder\&.hpp\&.
.SS "void Sigmoid (const arma::mat & x, arma::mat & output) const\fC [inline]\fP"

.PP
Returns the elementwise sigmoid of the passed matrix, where the sigmoid function of a real number 'x' is [1 / (1 + exp(-x))]\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Matrix of real values for which we require the sigmoid activation\&. 
.br
\fIoutput\fP Output matrix\&. 
.RE
.PP

.PP
Definition at line 135 of file sparse_autoencoder\&.hpp\&.
.SS "void VisibleSize (const size_t visible)\fC [inline]\fP"

.PP
Sets size of the visible layer\&. 
.PP
Definition at line 141 of file sparse_autoencoder\&.hpp\&.
.SS "size_t VisibleSize () const\fC [inline]\fP"

.PP
Gets size of the visible layer\&. 
.PP
Definition at line 147 of file sparse_autoencoder\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
