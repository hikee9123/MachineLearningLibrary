.TH "BallBound< MetricType, VecType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BallBound< MetricType, VecType > \- Ball bound encloses a set of points at a specific distance (radius) from a specific point (center)\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef VecType::elem_type \fBElemType\fP"
.br
.RI "The underlying data type\&. "
.ti -1c
.RI "typedef VecType \fBVec\fP"
.br
.RI "A public version of the vector type\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBallBound\fP ()"
.br
.RI "Empty Constructor\&. "
.ti -1c
.RI "\fBBallBound\fP (const size_t dimension)"
.br
.RI "Create the ball bound with the specified dimensionality\&. "
.ti -1c
.RI "\fBBallBound\fP (const \fBElemType\fP radius, const VecType &center)"
.br
.RI "Create the ball bound with the specified radius and center\&. "
.ti -1c
.RI "\fBBallBound\fP (const \fBBallBound\fP &other)"
.br
.RI "Copy constructor\&. To prevent memory leaks\&. "
.ti -1c
.RI "\fBBallBound\fP (\fBBallBound\fP &&other)"
.br
.RI "Move constructor: take possession of another bound\&. "
.ti -1c
.RI "\fB~BallBound\fP ()"
.br
.RI "Destructor to release allocated memory\&. "
.ti -1c
.RI "const VecType & \fBCenter\fP () const"
.br
.RI "Get the center point of the ball\&. "
.ti -1c
.RI "VecType & \fBCenter\fP ()"
.br
.RI "Modify the center point of the ball\&. "
.ti -1c
.RI "void \fBCenter\fP (VecType &center) const"
.br
.RI "Place the center of \fBBallBound\fP into the given vector\&. "
.ti -1c
.RI "bool \fBContains\fP (const VecType &point) const"
.br
.RI "Determines if a point is within this bound\&. "
.ti -1c
.RI "\fBElemType\fP \fBDiameter\fP () const"
.br
.RI "Returns the diameter of the ballbound\&. "
.ti -1c
.RI "size_t \fBDim\fP () const"
.br
.RI "Get the dimensionality of the ball\&. "
.ti -1c
.RI "template<typename OtherVecType > \fBElemType\fP \fBMaxDistance\fP (const OtherVecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< OtherVecType >::value > *=0) const"
.br
.RI "Computes maximum distance\&. "
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const \fBBallBound\fP &other) const"
.br
.RI "Computes maximum distance\&. "
.ti -1c
.RI "const MetricType & \fBMetric\fP () const"
.br
.RI "Returns the distance metric used in this bound\&. "
.ti -1c
.RI "MetricType & \fBMetric\fP ()"
.br
.RI "Modify the distance metric used in this bound\&. "
.ti -1c
.RI "template<typename OtherVecType > \fBElemType\fP \fBMinDistance\fP (const OtherVecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< OtherVecType >::value > *=0) const"
.br
.RI "Calculates minimum bound-to-point squared distance\&. "
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const \fBBallBound\fP &other) const"
.br
.RI "Calculates minimum bound-to-bound squared distance\&. "
.ti -1c
.RI "\fBElemType\fP \fBMinWidth\fP () const"
.br
.RI "Get the minimum width of the bound (this is same as the diameter)\&. "
.ti -1c
.RI "\fBBallBound\fP & \fBoperator=\fP (const \fBBallBound\fP &other)"
.br
.RI "For the same reason as the copy constructor: to prevent memory leaks\&. "
.ti -1c
.RI "\fBBallBound\fP & \fBoperator=\fP (\fBBallBound\fP &&other)"
.br
.RI "Move assignment operator\&. "
.ti -1c
.RI "math::RangeType< \fBElemType\fP > \fBoperator[]\fP (const size_t i) const"
.br
.RI "Get the range in a certain dimension\&. "
.ti -1c
.RI "const \fBBallBound\fP & \fBoperator|=\fP (const \fBBallBound\fP &other)"
.br
.RI "Expand the bound to include the given node\&. "
.ti -1c
.RI "template<typename MatType > const \fBBallBound\fP & \fBoperator|=\fP (const MatType &data)"
.br
.RI "Expand the bound to include the given point\&. "
.ti -1c
.RI "\fBElemType\fP \fBRadius\fP () const"
.br
.RI "Get the radius of the ball\&. "
.ti -1c
.RI "\fBElemType\fP & \fBRadius\fP ()"
.br
.RI "Modify the radius of the ball\&. "
.ti -1c
.RI "template<typename OtherVecType > math::RangeType< \fBElemType\fP > \fBRangeDistance\fP (const OtherVecType &other, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< OtherVecType >::value > *=0) const"
.br
.RI "Calculates minimum and maximum bound-to-point distance\&. "
.ti -1c
.RI "math::RangeType< \fBElemType\fP > \fBRangeDistance\fP (const \fBBallBound\fP &other) const"
.br
.RI "Calculates minimum and maximum bound-to-bound distance\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t version)"
.br
.RI "Serialize the bound\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType = metric::LMetric<2, true>, typename VecType = arma::vec>
.br
class mlpack::bound::BallBound< MetricType, VecType >"
Ball bound encloses a set of points at a specific distance (radius) from a specific point (center)\&. 

MetricType is the custom metric type that defaults to the Euclidean (L2) distance\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMetricType\fP metric type used in the distance measure\&. 
.br
\fIVecType\fP Type of vector (arma::vec or arma::sp_vec or similar)\&. 
.RE
.PP

.PP
Definition at line 32 of file ballbound\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef VecType::elem_type \fBElemType\fP"

.PP
The underlying data type\&. 
.PP
Definition at line 36 of file ballbound\&.hpp\&.
.SS "typedef VecType \fBVec\fP"

.PP
A public version of the vector type\&. 
.PP
Definition at line 38 of file ballbound\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBBallBound\fP ()"

.PP
Empty Constructor\&. 
.SS "\fBBallBound\fP (const size_t dimension)"

.PP
Create the ball bound with the specified dimensionality\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdimension\fP Dimensionality of ball bound\&. 
.RE
.PP

.SS "\fBBallBound\fP (const \fBElemType\fP radius, const VecType & center)"

.PP
Create the ball bound with the specified radius and center\&. 
.PP
\fBParameters:\fP
.RS 4
\fIradius\fP Radius of ball bound\&. 
.br
\fIcenter\fP Center of ball bound\&. 
.RE
.PP

.SS "\fBBallBound\fP (const \fBBallBound\fP< MetricType, VecType > & other)"

.PP
Copy constructor\&. To prevent memory leaks\&. 
.SS "\fBBallBound\fP (\fBBallBound\fP< MetricType, VecType > && other)"

.PP
Move constructor: take possession of another bound\&. 
.SS "~\fBBallBound\fP ()"

.PP
Destructor to release allocated memory\&. 
.SH "Member Function Documentation"
.PP 
.SS "const VecType& Center () const\fC [inline]\fP"

.PP
Get the center point of the ball\&. 
.PP
Definition at line 96 of file ballbound\&.hpp\&.
.PP
Referenced by ProjVector::Project()\&.
.SS "VecType& Center ()\fC [inline]\fP"

.PP
Modify the center point of the ball\&. 
.PP
Definition at line 98 of file ballbound\&.hpp\&.
.SS "void Center (VecType & center) const\fC [inline]\fP"

.PP
Place the center of \fBBallBound\fP into the given vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcenter\fP Vector which the centroid will be written to\&. 
.RE
.PP

.PP
Definition at line 124 of file ballbound\&.hpp\&.
.PP
References BallBound< MetricType, VecType >::MaxDistance(), BallBound< MetricType, VecType >::MinDistance(), BallBound< MetricType, VecType >::operator|=(), and BallBound< MetricType, VecType >::RangeDistance()\&.
.SS "bool Contains (const VecType & point) const"

.PP
Determines if a point is within this bound\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to check the condition\&. 
.RE
.PP

.PP
Referenced by BallBound< MetricType, VecType >::MinWidth()\&.
.SS "\fBElemType\fP Diameter () const\fC [inline]\fP"

.PP
Returns the diameter of the ballbound\&. 
.PP
Definition at line 200 of file ballbound\&.hpp\&.
.SS "size_t Dim () const\fC [inline]\fP"

.PP
Get the dimensionality of the ball\&. 
.PP
Definition at line 101 of file ballbound\&.hpp\&.
.SS "\fBElemType\fP MaxDistance (const OtherVecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< OtherVecType >::value > * = \fC0\fP) const"

.PP
Computes maximum distance\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to which the maximum distance is requested\&. 
.RE
.PP

.PP
Referenced by BallBound< MetricType, VecType >::Center()\&.
.SS "\fBElemType\fP MaxDistance (const \fBBallBound\fP< MetricType, VecType > & other) const"

.PP
Computes maximum distance\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Bound to which the maximum distance is requested\&. 
.RE
.PP

.SS "const MetricType& Metric () const\fC [inline]\fP"

.PP
Returns the distance metric used in this bound\&. 
.PP
Definition at line 203 of file ballbound\&.hpp\&.
.SS "MetricType& Metric ()\fC [inline]\fP"

.PP
Modify the distance metric used in this bound\&. 
.PP
Definition at line 205 of file ballbound\&.hpp\&.
.PP
References BallBound< MetricType, VecType >::serialize()\&.
.SS "\fBElemType\fP MinDistance (const OtherVecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< OtherVecType >::value > * = \fC0\fP) const"

.PP
Calculates minimum bound-to-point squared distance\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to which the minimum distance is requested\&. 
.RE
.PP

.PP
Referenced by BallBound< MetricType, VecType >::Center()\&.
.SS "\fBElemType\fP MinDistance (const \fBBallBound\fP< MetricType, VecType > & other) const"

.PP
Calculates minimum bound-to-bound squared distance\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Bound to which the minimum distance is requested\&. 
.RE
.PP

.SS "\fBElemType\fP MinWidth () const\fC [inline]\fP"

.PP
Get the minimum width of the bound (this is same as the diameter)\&. For ball bounds, width along all dimensions remain same\&. 
.PP
Definition at line 107 of file ballbound\&.hpp\&.
.PP
References BallBound< MetricType, VecType >::Contains(), and BallBound< MetricType, VecType >::operator[]()\&.
.SS "\fBBallBound\fP& operator= (const \fBBallBound\fP< MetricType, VecType > & other)"

.PP
For the same reason as the copy constructor: to prevent memory leaks\&. 
.SS "\fBBallBound\fP& operator= (\fBBallBound\fP< MetricType, VecType > && other)"

.PP
Move assignment operator\&. 
.SS "math::RangeType<\fBElemType\fP> operator[] (const size_t i) const"

.PP
Get the range in a certain dimension\&. 
.PP
Referenced by BallBound< MetricType, VecType >::MinWidth()\&.
.SS "const \fBBallBound\fP& operator|= (const \fBBallBound\fP< MetricType, VecType > & other)"

.PP
Expand the bound to include the given node\&. 
.PP
Referenced by BallBound< MetricType, VecType >::Center()\&.
.SS "const \fBBallBound\fP& operator|= (const MatType & data)"

.PP
Expand the bound to include the given point\&. The centroid is recalculated to be the center of all of the given points\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMatType\fP Type of matrix; could be arma::mat, arma::spmat, or a vector\&. 
.br
\fIdata\fP Data points to add\&. 
.RE
.PP

.SS "\fBElemType\fP Radius () const\fC [inline]\fP"

.PP
Get the radius of the ball\&. 
.PP
Definition at line 91 of file ballbound\&.hpp\&.
.PP
Referenced by ProjVector::Project()\&.
.SS "\fBElemType\fP& Radius ()\fC [inline]\fP"

.PP
Modify the radius of the ball\&. 
.PP
Definition at line 93 of file ballbound\&.hpp\&.
.SS "math::RangeType<\fBElemType\fP> RangeDistance (const OtherVecType & other, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< OtherVecType >::value > * = \fC0\fP) const"

.PP
Calculates minimum and maximum bound-to-point distance\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Point to which the minimum and maximum distances are requested\&. 
.RE
.PP

.PP
Referenced by BallBound< MetricType, VecType >::Center()\&.
.SS "math::RangeType<\fBElemType\fP> RangeDistance (const \fBBallBound\fP< MetricType, VecType > & other) const"

.PP
Calculates minimum and maximum bound-to-bound distance\&. Example: bound1\&.MinDistanceSq(other) for minimum distance\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Bound to which the minimum and maximum distances are requested\&. 
.RE
.PP

.SS "void serialize (Archive & ar, const uint32_t version)"

.PP
Serialize the bound\&. 
.PP
Referenced by BallBound< MetricType, VecType >::Metric()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
