.TH "LogisticRegressionFunction< MatType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LogisticRegressionFunction< MatType > \- The log-likelihood function for the logistic regression objective function\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLogisticRegressionFunction\fP (const MatType &predictors, const arma::Row< size_t > &responses, const double lambda=0)"
.br
.RI "Creates the \fBLogisticRegressionFunction\fP\&. "
.ti -1c
.RI "double \fBEvaluate\fP (const arma::mat &parameters) const"
.br
.RI "Evaluate the logistic regression log-likelihood function with the given parameters\&. "
.ti -1c
.RI "double \fBEvaluate\fP (const arma::mat &parameters, const size_t begin, const size_t batchSize=1) const"
.br
.RI "Evaluate the logistic regression log-likelihood function with the given parameters using the given batch size from the given point index\&. "
.ti -1c
.RI "template<typename GradType > double \fBEvaluateWithGradient\fP (const arma::mat &parameters, GradType &gradient) const"
.br
.RI "Evaluate the objective function and gradient of the logistic regression log-likelihood function simultaneously with the given parameters\&. "
.ti -1c
.RI "template<typename GradType > double \fBEvaluateWithGradient\fP (const arma::mat &parameters, const size_t begin, GradType &gradient, const size_t batchSize=1) const"
.br
.RI "Evaluate the objective function and gradient of the logistic regression log-likelihood function simultaneously with the given parameters, for the given batch size from a given point in the dataset\&. "
.ti -1c
.RI "void \fBGradient\fP (const arma::mat &parameters, arma::mat &gradient) const"
.br
.RI "Evaluate the gradient of the logistic regression log-likelihood function with the given parameters\&. "
.ti -1c
.RI "template<typename GradType > void \fBGradient\fP (const arma::mat &parameters, const size_t begin, GradType &gradient, const size_t batchSize=1) const"
.br
.RI "Evaluate the gradient of the logistic regression log-likelihood function with the given parameters, for the given batch size from a given point in the dataset\&. "
.ti -1c
.RI "const double & \fBLambda\fP () const"
.br
.RI "Return the regularization parameter (lambda)\&. "
.ti -1c
.RI "double & \fBLambda\fP ()"
.br
.RI "Modify the regularization parameter (lambda)\&. "
.ti -1c
.RI "size_t \fBNumFeatures\fP () const"
.br
.RI "Return the number of features(add 1 for the intercept term)\&. "
.ti -1c
.RI "size_t \fBNumFunctions\fP () const"
.br
.RI "Return the number of separable functions (the number of predictor points)\&. "
.ti -1c
.RI "void \fBPartialGradient\fP (const arma::mat &parameters, const size_t j, arma::sp_mat &gradient) const"
.br
.RI "Evaluate the gradient of the logistic regression log-likelihood function with the given parameters, and with respect to only one feature in the dataset\&. "
.ti -1c
.RI "const MatType & \fBPredictors\fP () const"
.br
.RI "Return the matrix of predictors\&. "
.ti -1c
.RI "const arma::Row< size_t > & \fBResponses\fP () const"
.br
.RI "Return the vector of responses\&. "
.ti -1c
.RI "void \fBShuffle\fP ()"
.br
.RI "Shuffle the order of function visitation\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MatType = arma::mat>
.br
class mlpack::regression::LogisticRegressionFunction< MatType >"
The log-likelihood function for the logistic regression objective function\&. 

This is used by various mlpack optimizers to train a logistic regression model\&. 
.PP
Definition at line 30 of file logistic_regression_function\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBLogisticRegressionFunction\fP (const MatType & predictors, const arma::Row< size_t > & responses, const double lambda = \fC0\fP)"

.PP
Creates the \fBLogisticRegressionFunction\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP The matrix of data points\&. 
.br
\fIresponses\fP The measured data for each point in predictors\&. 
.br
\fIlambda\fP Regularization constant for ridge regression\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "double Evaluate (const arma::mat & parameters) const"

.PP
Evaluate the logistic regression log-likelihood function with the given parameters\&. Note that if a point has 0 probability of being classified directly with the given parameters, then \fBEvaluate()\fP will return nan (this is kind of a corner case and should not happen for reasonable models)\&.
.PP
The optimum (minimum) of this function is 0\&.0, and occurs when each point is classified correctly with very high probability\&.
.PP
\fBParameters:\fP
.RS 4
\fIparameters\fP Vector of logistic regression parameters\&. 
.RE
.PP

.PP
Referenced by LogisticRegressionFunction< MatType >::Responses()\&.
.SS "double Evaluate (const arma::mat & parameters, const size_t begin, const size_t batchSize = \fC1\fP) const"

.PP
Evaluate the logistic regression log-likelihood function with the given parameters using the given batch size from the given point index\&. This is useful for optimizers such as SGD, which require a separable objective function\&. Note that if the points have 0 probability of being classified correctly with the given parameters, then \fBEvaluate()\fP will return nan (this is kind of a corner case and should not happen for reasonable models)\&.
.PP
The optimum (minimum) of this function is 0\&.0, and occurs when the points are classified correctly with very high probability\&.
.PP
\fBParameters:\fP
.RS 4
\fIparameters\fP Vector of logistic regression parameters\&. 
.br
\fIbegin\fP Index of the starting point to use for objective function evaluation\&. 
.br
\fIbatchSize\fP Number of points to be passed at a time to use for objective function evaluation\&. 
.RE
.PP

.SS "double EvaluateWithGradient (const arma::mat & parameters, GradType & gradient) const"

.PP
Evaluate the objective function and gradient of the logistic regression log-likelihood function simultaneously with the given parameters\&. 
.PP
Referenced by LogisticRegressionFunction< MatType >::Responses()\&.
.SS "double EvaluateWithGradient (const arma::mat & parameters, const size_t begin, GradType & gradient, const size_t batchSize = \fC1\fP) const"

.PP
Evaluate the objective function and gradient of the logistic regression log-likelihood function simultaneously with the given parameters, for the given batch size from a given point in the dataset\&. 
.SS "void Gradient (const arma::mat & parameters, arma::mat & gradient) const"

.PP
Evaluate the gradient of the logistic regression log-likelihood function with the given parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparameters\fP Vector of logistic regression parameters\&. 
.br
\fIgradient\fP Vector to output gradient into\&. 
.RE
.PP

.PP
Referenced by LogisticRegressionFunction< MatType >::Responses()\&.
.SS "void Gradient (const arma::mat & parameters, const size_t begin, GradType & gradient, const size_t batchSize = \fC1\fP) const"

.PP
Evaluate the gradient of the logistic regression log-likelihood function with the given parameters, for the given batch size from a given point in the dataset\&. This is useful for optimizers such as SGD, which require a separable objective function\&.
.PP
\fBParameters:\fP
.RS 4
\fIparameters\fP Vector of logistic regression parameters\&. 
.br
\fIbegin\fP Index of the starting point to use for objective function gradient evaluation\&. 
.br
\fIgradient\fP Vector to output gradient into\&. 
.br
\fIbatchSize\fP Number of points to be processed as a batch for objective function gradient evaluation\&. 
.RE
.PP

.SS "const double& Lambda () const\fC [inline]\fP"

.PP
Return the regularization parameter (lambda)\&. 
.PP
Definition at line 45 of file logistic_regression_function\&.hpp\&.
.SS "double& Lambda ()\fC [inline]\fP"

.PP
Modify the regularization parameter (lambda)\&. 
.PP
Definition at line 47 of file logistic_regression_function\&.hpp\&.
.SS "size_t NumFeatures () const\fC [inline]\fP"

.PP
Return the number of features(add 1 for the intercept term)\&. 
.PP
Definition at line 159 of file logistic_regression_function\&.hpp\&.
.SS "size_t NumFunctions () const\fC [inline]\fP"

.PP
Return the number of separable functions (the number of predictor points)\&. 
.PP
Definition at line 156 of file logistic_regression_function\&.hpp\&.
.SS "void PartialGradient (const arma::mat & parameters, const size_t j, arma::sp_mat & gradient) const"

.PP
Evaluate the gradient of the logistic regression log-likelihood function with the given parameters, and with respect to only one feature in the dataset\&. This is useful for optimizers such as SCD, which require partial gradients\&.
.PP
\fBParameters:\fP
.RS 4
\fIparameters\fP Vector of logistic regression parameters\&. 
.br
\fIj\fP Index of the feature with respect to which the gradient is to be computed\&. 
.br
\fIgradient\fP Sparse matrix to output gradient into\&. 
.RE
.PP

.PP
Referenced by LogisticRegressionFunction< MatType >::Responses()\&.
.SS "const MatType& Predictors () const\fC [inline]\fP"

.PP
Return the matrix of predictors\&. 
.PP
Definition at line 50 of file logistic_regression_function\&.hpp\&.
.SS "const arma::Row<size_t>& Responses () const\fC [inline]\fP"

.PP
Return the vector of responses\&. 
.PP
Definition at line 52 of file logistic_regression_function\&.hpp\&.
.PP
References LogisticRegressionFunction< MatType >::Evaluate(), LogisticRegressionFunction< MatType >::EvaluateWithGradient(), LogisticRegressionFunction< MatType >::Gradient(), LogisticRegressionFunction< MatType >::PartialGradient(), and LogisticRegressionFunction< MatType >::Shuffle()\&.
.SS "void Shuffle ()"

.PP
Shuffle the order of function visitation\&. This may be called by the optimizer\&. 
.PP
Referenced by LogisticRegressionFunction< MatType >::Responses()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
