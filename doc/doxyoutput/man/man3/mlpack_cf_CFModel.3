.TH "CFModel" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CFModel \- The model to save to disk\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBDecompositionTypes\fP { \fBNMF\fP, \fBBATCH_SVD\fP, \fBRANDOMIZED_SVD\fP, \fBREG_SVD\fP, \fBSVD_COMPLETE\fP, \fBSVD_INCOMPLETE\fP, \fBBIAS_SVD\fP, \fBSVD_PLUS_PLUS\fP }"
.br
.ti -1c
.RI "enum \fBNormalizationTypes\fP { \fBNO_NORMALIZATION\fP, \fBITEM_MEAN_NORMALIZATION\fP, \fBUSER_MEAN_NORMALIZATION\fP, \fBOVERALL_MEAN_NORMALIZATION\fP, \fBZ_SCORE_NORMALIZATION\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCFModel\fP ()"
.br
.RI "Create an empty CF model\&. "
.ti -1c
.RI "\fBCFModel\fP (const \fBCFModel\fP &other)"
.br
.RI "Create a CF model by copying the given model\&. "
.ti -1c
.RI "\fBCFModel\fP (\fBCFModel\fP &&other)"
.br
.RI "Create a CF model by taking ownership of the data of the other model\&. "
.ti -1c
.RI "\fB~CFModel\fP ()"
.br
.RI "Clean up memory\&. "
.ti -1c
.RI "\fBCFWrapperBase\fP * \fBCF\fP () const"
.br
.RI "Get the \fBCFWrapperBase\fP object\&. (Be careful!) "
.ti -1c
.RI "const \fBDecompositionTypes\fP & \fBDecompositionType\fP () const"
.br
.RI "Get the decomposition type\&. "
.ti -1c
.RI "\fBDecompositionTypes\fP & \fBDecompositionType\fP ()"
.br
.RI "Set the decomposition type\&. "
.ti -1c
.RI "void \fBGetRecommendations\fP (const \fBNeighborSearchTypes\fP nsType, const \fBInterpolationTypes\fP interpolationType, const size_t numRecs, arma::Mat< size_t > &recommendations, const arma::Col< size_t > &users)"
.br
.RI "Compute recommendations for query users\&. "
.ti -1c
.RI "void \fBGetRecommendations\fP (const \fBNeighborSearchTypes\fP nsType, const \fBInterpolationTypes\fP interpolationType, const size_t numRecs, arma::Mat< size_t > &recommendations)"
.br
.RI "Compute recommendations for all users\&. "
.ti -1c
.RI "const \fBNormalizationTypes\fP & \fBNormalizationType\fP () const"
.br
.RI "Get the normalization type\&. "
.ti -1c
.RI "\fBNormalizationTypes\fP & \fBNormalizationType\fP ()"
.br
.RI "Set the normalization type\&. "
.ti -1c
.RI "\fBCFModel\fP & \fBoperator=\fP (const \fBCFModel\fP &other)"
.br
.RI "Make this CF model a copy of the other model\&. "
.ti -1c
.RI "\fBCFModel\fP & \fBoperator=\fP (\fBCFModel\fP &&other)"
.br
.RI "Make this CF model take ownership of the data of the other model\&. "
.ti -1c
.RI "void \fBPredict\fP (const \fBNeighborSearchTypes\fP nsType, const \fBInterpolationTypes\fP interpolationType, const arma::Mat< size_t > &combinations, arma::vec &predictions)"
.br
.RI "Make predictions\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the model\&. "
.ti -1c
.RI "void \fBTrain\fP (const arma::mat &data, const size_t numUsersForSimilarity, const size_t rank, const size_t maxIterations, const double minResidue, const bool mit)"
.br
.RI "Train the model\&. "
.in -1c
.SH "Detailed Description"
.PP 
The model to save to disk\&. 
.PP
Definition at line 162 of file cf_model\&.hpp\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBDecompositionTypes\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINMF \fP\fP
.TP
\fB\fIBATCH_SVD \fP\fP
.TP
\fB\fIRANDOMIZED_SVD \fP\fP
.TP
\fB\fIREG_SVD \fP\fP
.TP
\fB\fISVD_COMPLETE \fP\fP
.TP
\fB\fISVD_INCOMPLETE \fP\fP
.TP
\fB\fIBIAS_SVD \fP\fP
.TP
\fB\fISVD_PLUS_PLUS \fP\fP
.PP
Definition at line 165 of file cf_model\&.hpp\&.
.SS "enum \fBNormalizationTypes\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINO_NORMALIZATION \fP\fP
.TP
\fB\fIITEM_MEAN_NORMALIZATION \fP\fP
.TP
\fB\fIUSER_MEAN_NORMALIZATION \fP\fP
.TP
\fB\fIOVERALL_MEAN_NORMALIZATION \fP\fP
.TP
\fB\fIZ_SCORE_NORMALIZATION \fP\fP
.PP
Definition at line 177 of file cf_model\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBCFModel\fP ()"

.PP
Create an empty CF model\&. 
.SS "\fBCFModel\fP (const \fBCFModel\fP & other)"

.PP
Create a CF model by copying the given model\&. 
.SS "\fBCFModel\fP (\fBCFModel\fP && other)"

.PP
Create a CF model by taking ownership of the data of the other model\&. 
.SS "~\fBCFModel\fP ()"

.PP
Clean up memory\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBCFWrapperBase\fP* CF () const\fC [inline]\fP"

.PP
Get the \fBCFWrapperBase\fP object\&. (Be careful!) 
.PP
Definition at line 219 of file cf_model\&.hpp\&.
.SS "const \fBDecompositionTypes\fP& DecompositionType () const\fC [inline]\fP"

.PP
Get the decomposition type\&. 
.PP
Definition at line 222 of file cf_model\&.hpp\&.
.SS "\fBDecompositionTypes\fP& DecompositionType ()\fC [inline]\fP"

.PP
Set the decomposition type\&. 
.PP
Definition at line 227 of file cf_model\&.hpp\&.
.SS "void GetRecommendations (const \fBNeighborSearchTypes\fP nsType, const \fBInterpolationTypes\fP interpolationType, const size_t numRecs, arma::Mat< size_t > & recommendations, const arma::Col< size_t > & users)"

.PP
Compute recommendations for query users\&. 
.SS "void GetRecommendations (const \fBNeighborSearchTypes\fP nsType, const \fBInterpolationTypes\fP interpolationType, const size_t numRecs, arma::Mat< size_t > & recommendations)"

.PP
Compute recommendations for all users\&. 
.SS "const \fBNormalizationTypes\fP& NormalizationType () const\fC [inline]\fP"

.PP
Get the normalization type\&. 
.PP
Definition at line 233 of file cf_model\&.hpp\&.
.SS "\fBNormalizationTypes\fP& NormalizationType ()\fC [inline]\fP"

.PP
Set the normalization type\&. 
.PP
Definition at line 238 of file cf_model\&.hpp\&.
.PP
References CFWrapperBase::GetRecommendations(), and CFWrapperBase::Predict()\&.
.SS "\fBCFModel\fP& operator= (const \fBCFModel\fP & other)"

.PP
Make this CF model a copy of the other model\&. 
.SS "\fBCFModel\fP& operator= (\fBCFModel\fP && other)"

.PP
Make this CF model take ownership of the data of the other model\&. 
.SS "void Predict (const \fBNeighborSearchTypes\fP nsType, const \fBInterpolationTypes\fP interpolationType, const arma::Mat< size_t > & combinations, arma::vec & predictions)"

.PP
Make predictions\&. 
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the model\&. 
.SS "void Train (const arma::mat & data, const size_t numUsersForSimilarity, const size_t rank, const size_t maxIterations, const double minResidue, const bool mit)"

.PP
Train the model\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
