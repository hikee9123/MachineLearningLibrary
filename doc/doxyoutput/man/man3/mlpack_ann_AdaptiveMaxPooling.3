.TH "AdaptiveMaxPooling< InputDataType, OutputDataType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AdaptiveMaxPooling< InputDataType, OutputDataType > \- Implementation of the \fBAdaptiveMaxPooling\fP layer\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAdaptiveMaxPooling\fP ()"
.br
.RI "Create the \fBAdaptiveMaxPooling\fP object\&. "
.ti -1c
.RI "\fBAdaptiveMaxPooling\fP (const size_t outputWidth, const size_t outputHeight)"
.br
.RI "Create the \fBAdaptiveMaxPooling\fP object\&. "
.ti -1c
.RI "\fBAdaptiveMaxPooling\fP (const std::tuple< size_t, size_t > &outputShape)"
.br
.RI "Create the \fBAdaptiveMaxPooling\fP object\&. "
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &input, const arma::Mat< eT > &gy, arma::Mat< eT > &g)"
.br
.RI "Ordinary feed backward pass of a neural network, using 3rd-order tensors as input, calculating the function f(x) by propagating x backwards through f\&. "
.ti -1c
.RI "const OutputDataType & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "template<typename eT > void \fBForward\fP (const arma::Mat< eT > &input, arma::Mat< eT > &output)"
.br
.RI "Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. "
.ti -1c
.RI "size_t \fBInputHeight\fP () const"
.br
.RI "Get the input height\&. "
.ti -1c
.RI "size_t & \fBInputHeight\fP ()"
.br
.RI "Modify the input height\&. "
.ti -1c
.RI "size_t \fBInputSize\fP () const"
.br
.RI "Get the input size\&. "
.ti -1c
.RI "size_t \fBInputWidth\fP () const"
.br
.RI "Get the input width\&. "
.ti -1c
.RI "size_t & \fBInputWidth\fP ()"
.br
.RI "Modify the input width\&. "
.ti -1c
.RI "size_t \fBOutputHeight\fP () const"
.br
.RI "Get the output height\&. "
.ti -1c
.RI "size_t & \fBOutputHeight\fP ()"
.br
.RI "Modify the output height\&. "
.ti -1c
.RI "const OutputDataType & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "size_t \fBOutputSize\fP () const"
.br
.RI "Get the output size\&. "
.ti -1c
.RI "size_t \fBOutputWidth\fP () const"
.br
.RI "Get the output width\&. "
.ti -1c
.RI "size_t & \fBOutputWidth\fP ()"
.br
.RI "Modify the output width\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t version)"
.br
.RI "Serialize the layer\&. "
.ti -1c
.RI "size_t \fBWeightSize\fP () const"
.br
.RI "Get the size of the weights\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::AdaptiveMaxPooling< InputDataType, OutputDataType >"
Implementation of the \fBAdaptiveMaxPooling\fP layer\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 33 of file adaptive_max_pooling\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBAdaptiveMaxPooling\fP ()"

.PP
Create the \fBAdaptiveMaxPooling\fP object\&. 
.SS "\fBAdaptiveMaxPooling\fP (const size_t outputWidth, const size_t outputHeight)"

.PP
Create the \fBAdaptiveMaxPooling\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIoutputWidth\fP Width of the output\&. 
.br
\fIoutputHeight\fP Height of the output\&. 
.RE
.PP

.SS "\fBAdaptiveMaxPooling\fP (const std::tuple< size_t, size_t > & outputShape)"

.PP
Create the \fBAdaptiveMaxPooling\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIoutputShape\fP A two-value tuple indicating width and height of the output\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Backward (const arma::Mat< eT > & input, const arma::Mat< eT > & gy, arma::Mat< eT > & g)"

.PP
Ordinary feed backward pass of a neural network, using 3rd-order tensors as input, calculating the function f(x) by propagating x backwards through f\&. Using the results from the feed forward pass\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "const OutputDataType& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 87 of file adaptive_max_pooling\&.hpp\&.
.SS "OutputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 89 of file adaptive_max_pooling\&.hpp\&.
.SS "void Forward (const arma::Mat< eT > & input, arma::Mat< eT > & output)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "size_t InputHeight () const\fC [inline]\fP"

.PP
Get the input height\&. 
.PP
Definition at line 97 of file adaptive_max_pooling\&.hpp\&.
.SS "size_t& InputHeight ()\fC [inline]\fP"

.PP
Modify the input height\&. 
.PP
Definition at line 99 of file adaptive_max_pooling\&.hpp\&.
.SS "size_t InputSize () const\fC [inline]\fP"

.PP
Get the input size\&. 
.PP
Definition at line 112 of file adaptive_max_pooling\&.hpp\&.
.SS "size_t InputWidth () const\fC [inline]\fP"

.PP
Get the input width\&. 
.PP
Definition at line 92 of file adaptive_max_pooling\&.hpp\&.
.SS "size_t& InputWidth ()\fC [inline]\fP"

.PP
Modify the input width\&. 
.PP
Definition at line 94 of file adaptive_max_pooling\&.hpp\&.
.SS "size_t OutputHeight () const\fC [inline]\fP"

.PP
Get the output height\&. 
.PP
Definition at line 107 of file adaptive_max_pooling\&.hpp\&.
.SS "size_t& OutputHeight ()\fC [inline]\fP"

.PP
Modify the output height\&. 
.PP
Definition at line 109 of file adaptive_max_pooling\&.hpp\&.
.SS "const OutputDataType& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 80 of file adaptive_max_pooling\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 84 of file adaptive_max_pooling\&.hpp\&.
.SS "size_t OutputSize () const\fC [inline]\fP"

.PP
Get the output size\&. 
.PP
Definition at line 115 of file adaptive_max_pooling\&.hpp\&.
.SS "size_t OutputWidth () const\fC [inline]\fP"

.PP
Get the output width\&. 
.PP
Definition at line 102 of file adaptive_max_pooling\&.hpp\&.
.SS "size_t& OutputWidth ()\fC [inline]\fP"

.PP
Modify the output width\&. 
.PP
Definition at line 104 of file adaptive_max_pooling\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t version)"

.PP
Serialize the layer\&. 
.PP
Referenced by AdaptiveMaxPooling< InputDataType, OutputDataType >::WeightSize()\&.
.SS "size_t WeightSize () const\fC [inline]\fP"

.PP
Get the size of the weights\&. 
.PP
Definition at line 118 of file adaptive_max_pooling\&.hpp\&.
.PP
References AdaptiveMaxPooling< InputDataType, OutputDataType >::serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
