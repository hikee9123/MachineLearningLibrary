.TH "VRClassReward< InputDataType, OutputDataType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
VRClassReward< InputDataType, OutputDataType > \- Implementation of the variance reduced classification reinforcement layer\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBVRClassReward\fP (const double scale=1, const bool sizeAverage=true)"
.br
.RI "Create the \fBVRClassReward\fP object\&. "
.ti -1c
.RI "template<class LayerType , class\&.\&.\&. Args> void \fBAdd\fP (Args\&.\&.\&. args)"
.br
.ti -1c
.RI "void \fBAdd\fP (\fBLayerTypes\fP<> layer)"
.br
.ti -1c
.RI "template<typename InputType , typename TargetType , typename OutputType > void \fBBackward\fP (const InputType &input, const TargetType &target, OutputType &output)"
.br
.RI "Ordinary feed backward pass of a neural network\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "template<typename InputType , typename TargetType > double \fBForward\fP (const InputType &input, const TargetType &target)"
.br
.RI "Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. "
.ti -1c
.RI "std::vector< \fBLayerTypes\fP<> > & \fBModel\fP ()"
.br
.RI "Get the network modules\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "double \fBScale\fP () const"
.br
.RI "Get the value of scale parameter\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.ti -1c
.RI "bool \fBSizeAverage\fP () const"
.br
.RI "Get the value of parameter sizeAverage\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::VRClassReward< InputDataType, OutputDataType >"
Implementation of the variance reduced classification reinforcement layer\&. 

This layer is meant to be used in combination with the reinforce normal layer (ReinforceNormalLayer), which expects that an reward: (1 for success, 0 otherwise)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 82 of file layer_types\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBVRClassReward\fP (const double scale = \fC1\fP, const bool sizeAverage = \fCtrue\fP)"

.PP
Create the \fBVRClassReward\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIscale\fP Parameter used to scale the reward\&. 
.br
\fIsizeAverage\fP Take the average over all batches\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void \fBAdd\fP (Args\&.\&.\&. args)\fC [inline]\fP"

.PP
Definition at line 92 of file vr_class_reward\&.hpp\&.
.SS "void \fBAdd\fP (\fBLayerTypes\fP<> layer)\fC [inline]\fP"

.PP
Definition at line 99 of file vr_class_reward\&.hpp\&.
.SS "void Backward (const InputType & input, const TargetType & target, OutputType & output)"

.PP
Ordinary feed backward pass of a neural network\&. The negative log likelihood layer expectes that the input contains log-probabilities for each class\&. The layer also expects a class index, in the range between 1 and the number of classes, as target when calling the Forward function\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The propagated input activation\&. 
.br
\fItarget\fP The target vector, that contains the class index in the range between 1 and the number of classes\&. 
.br
\fIoutput\fP The calculated error\&. 
.RE
.PP

.SS "OutputDataType& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 82 of file vr_class_reward\&.hpp\&.
.SS "OutputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 84 of file vr_class_reward\&.hpp\&.
.SS "double Forward (const InputType & input, const TargetType & target)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data that contains the log-probabilities for each class\&. 
.br
\fItarget\fP The target vector, that contains the class index in the range between 1 and the number of classes\&. 
.RE
.PP

.SS "std::vector<\fBLayerTypes\fP<> >& Model ()\fC [inline]\fP"

.PP
Get the network modules\&. 
.PP
Definition at line 102 of file vr_class_reward\&.hpp\&.
.SS "OutputDataType& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 77 of file vr_class_reward\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 79 of file vr_class_reward\&.hpp\&.
.SS "double Scale () const\fC [inline]\fP"

.PP
Get the value of scale parameter\&. 
.PP
Definition at line 108 of file vr_class_reward\&.hpp\&.
.PP
References VRClassReward< InputDataType, OutputDataType >::serialize()\&.
.SS "void serialize (Archive &, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by VRClassReward< InputDataType, OutputDataType >::Scale()\&.
.SS "bool SizeAverage () const\fC [inline]\fP"

.PP
Get the value of parameter sizeAverage\&. 
.PP
Definition at line 105 of file vr_class_reward\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
