.TH "AtrousConvolution< ForwardConvolutionRule, BackwardConvolutionRule, GradientConvolutionRule, InputDataType, OutputDataType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AtrousConvolution< ForwardConvolutionRule, BackwardConvolutionRule, GradientConvolutionRule, InputDataType, OutputDataType > \- Implementation of the Atrous \fBConvolution\fP class\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAtrousConvolution\fP ()"
.br
.RI "Create the \fBAtrousConvolution\fP object\&. "
.ti -1c
.RI "\fBAtrousConvolution\fP (const size_t inSize, const size_t outSize, const size_t kernelWidth, const size_t kernelHeight, const size_t strideWidth=1, const size_t strideHeight=1, const size_t padW=0, const size_t padH=0, const size_t inputWidth=0, const size_t inputHeight=0, const size_t dilationWidth=1, const size_t dilationHeight=1, const std::string &paddingType='None')"
.br
.RI "Create the \fBAtrousConvolution\fP object using the specified number of input maps, output maps, filter size, stride, dilation and padding parameter\&. "
.ti -1c
.RI "\fBAtrousConvolution\fP (const size_t inSize, const size_t outSize, const size_t kernelWidth, const size_t kernelHeight, const size_t strideWidth, const size_t strideHeight, const std::tuple< size_t, size_t > &padW, const std::tuple< size_t, size_t > &padH, const size_t inputWidth=0, const size_t inputHeight=0, const size_t dilationWidth=1, const size_t dilationHeight=1, const std::string &paddingType='None')"
.br
.RI "Create the \fBAtrousConvolution\fP object using the specified number of input maps, output maps, filter size, stride, dilation and padding parameter\&. "
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &, const arma::Mat< eT > &gy, arma::Mat< eT > &g)"
.br
.RI "Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards through f\&. "
.ti -1c
.RI "arma::mat const  & \fBBias\fP () const"
.br
.RI "Get the bias of the layer\&. "
.ti -1c
.RI "arma::mat & \fBBias\fP ()"
.br
.RI "Modify the bias of the layer\&. "
.ti -1c
.RI "OutputDataType const  & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "size_t \fBDilationHeight\fP () const"
.br
.RI "Get the dilation rate on the Y axis\&. "
.ti -1c
.RI "size_t & \fBDilationHeight\fP ()"
.br
.RI "Modify the dilation rate on the Y axis\&. "
.ti -1c
.RI "size_t \fBDilationWidth\fP () const"
.br
.RI "Get the dilation rate on the X axis\&. "
.ti -1c
.RI "size_t & \fBDilationWidth\fP ()"
.br
.RI "Modify the dilation rate on the X axis\&. "
.ti -1c
.RI "template<typename eT > void \fBForward\fP (const arma::Mat< eT > &input, arma::Mat< eT > &output)"
.br
.RI "Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. "
.ti -1c
.RI "template<typename eT > void \fBGradient\fP (const arma::Mat< eT > &, const arma::Mat< eT > &error, arma::Mat< eT > &gradient)"
.br
.ti -1c
.RI "OutputDataType const  & \fBGradient\fP () const"
.br
.RI "Get the gradient\&. "
.ti -1c
.RI "OutputDataType & \fBGradient\fP ()"
.br
.RI "Modify the gradient\&. "
.ti -1c
.RI "size_t \fBInputHeight\fP () const"
.br
.RI "Get the input height\&. "
.ti -1c
.RI "size_t & \fBInputHeight\fP ()"
.br
.RI "Modify the input height\&. "
.ti -1c
.RI "size_t \fBInputShape\fP () const"
.br
.RI "Get the shape of the input\&. "
.ti -1c
.RI "size_t \fBInputSize\fP () const"
.br
.RI "Get the input size\&. "
.ti -1c
.RI "size_t \fBInputWidth\fP () const"
.br
.RI "Get the input width\&. "
.ti -1c
.RI "size_t & \fBInputWidth\fP ()"
.br
.RI "Modify input the width\&. "
.ti -1c
.RI "size_t \fBKernelHeight\fP () const"
.br
.RI "Get the kernel height\&. "
.ti -1c
.RI "size_t & \fBKernelHeight\fP ()"
.br
.RI "Modify the kernel height\&. "
.ti -1c
.RI "size_t \fBKernelWidth\fP () const"
.br
.RI "Get the kernel width\&. "
.ti -1c
.RI "size_t & \fBKernelWidth\fP ()"
.br
.RI "Modify the kernel width\&. "
.ti -1c
.RI "size_t \fBOutputHeight\fP () const"
.br
.RI "Get the output height\&. "
.ti -1c
.RI "size_t & \fBOutputHeight\fP ()"
.br
.RI "Modify the output height\&. "
.ti -1c
.RI "OutputDataType const  & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "size_t \fBOutputSize\fP () const"
.br
.RI "Get the output size\&. "
.ti -1c
.RI "size_t \fBOutputWidth\fP () const"
.br
.RI "Get the output width\&. "
.ti -1c
.RI "size_t & \fBOutputWidth\fP ()"
.br
.RI "Modify the output width\&. "
.ti -1c
.RI "\fBann::Padding\fP const  & \fBPadding\fP () const"
.br
.RI "Get the internal \fBPadding\fP layer\&. "
.ti -1c
.RI "\fBann::Padding\fP & \fBPadding\fP ()"
.br
.RI "Modify the internal \fBPadding\fP layer\&. "
.ti -1c
.RI "OutputDataType const  & \fBParameters\fP () const"
.br
.RI "Get the parameters\&. "
.ti -1c
.RI "OutputDataType & \fBParameters\fP ()"
.br
.RI "Modify the parameters\&. "
.ti -1c
.RI "void \fBReset\fP ()"
.br
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.ti -1c
.RI "size_t \fBStrideHeight\fP () const"
.br
.RI "Get the stride height\&. "
.ti -1c
.RI "size_t & \fBStrideHeight\fP ()"
.br
.RI "Modify the stride height\&. "
.ti -1c
.RI "size_t \fBStrideWidth\fP () const"
.br
.RI "Get the stride width\&. "
.ti -1c
.RI "size_t & \fBStrideWidth\fP ()"
.br
.RI "Modify the stride width\&. "
.ti -1c
.RI "arma::cube const  & \fBWeight\fP () const"
.br
.RI "Get the weight of the layer\&. "
.ti -1c
.RI "arma::cube & \fBWeight\fP ()"
.br
.RI "Modify the weight of the layer\&. "
.ti -1c
.RI "size_t \fBWeightSize\fP () const"
.br
.RI "Get size of the weight matrix\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename ForwardConvolutionRule = NaiveConvolution<ValidConvolution>, typename BackwardConvolutionRule = NaiveConvolution<FullConvolution>, typename GradientConvolutionRule = NaiveConvolution<ValidConvolution>, typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::AtrousConvolution< ForwardConvolutionRule, BackwardConvolutionRule, GradientConvolutionRule, InputDataType, OutputDataType >"
Implementation of the Atrous \fBConvolution\fP class\&. 

The Atrous \fBConvolution\fP class represents a single layer of a neural network\&. Atrous (or Dilated) Convolutions are just simple convolutions applied to input with the defined, spaces included between the kernel cells, in order to capture a larger field of reception, without having to increase dicrete kernel sizes\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIForwardConvolutionRule\fP Atrous \fBConvolution\fP to perform forward process\&. 
.br
\fIBackwardConvolutionRule\fP Atrous \fBConvolution\fP to perform backward process\&. 
.br
\fIGradientConvolutionRule\fP Atrous \fBConvolution\fP to calculate gradient\&. 
.br
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 52 of file atrous_convolution\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBAtrousConvolution\fP ()"

.PP
Create the \fBAtrousConvolution\fP object\&. 
.SS "\fBAtrousConvolution\fP (const size_t inSize, const size_t outSize, const size_t kernelWidth, const size_t kernelHeight, const size_t strideWidth = \fC1\fP, const size_t strideHeight = \fC1\fP, const size_t padW = \fC0\fP, const size_t padH = \fC0\fP, const size_t inputWidth = \fC0\fP, const size_t inputHeight = \fC0\fP, const size_t dilationWidth = \fC1\fP, const size_t dilationHeight = \fC1\fP, const std::string & paddingType = \fC'None'\fP)"

.PP
Create the \fBAtrousConvolution\fP object using the specified number of input maps, output maps, filter size, stride, dilation and padding parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinSize\fP The number of input maps\&. 
.br
\fIoutSize\fP The number of output maps\&. 
.br
\fIkernelWidth\fP Width of the filter/kernel\&. 
.br
\fIkernelHeight\fP Height of the filter/kernel\&. 
.br
\fIstrideWidth\fP Stride of filter application in the x direction\&. 
.br
\fIstrideHeight\fP Stride of filter application in the y direction\&. 
.br
\fIpadW\fP \fBPadding\fP width of the input\&. 
.br
\fIpadH\fP \fBPadding\fP height of the input\&. 
.br
\fIinputWidth\fP The widht of the input data\&. 
.br
\fIinputHeight\fP The height of the input data\&. 
.br
\fIdilationWidth\fP The space between the cells of filters in x direction\&. 
.br
\fIdilationHeight\fP The space between the cells of filters in y direction\&. 
.br
\fIpaddingType\fP The type of padding (Valid or Same)\&. Defaults to None\&. 
.RE
.PP

.SS "\fBAtrousConvolution\fP (const size_t inSize, const size_t outSize, const size_t kernelWidth, const size_t kernelHeight, const size_t strideWidth, const size_t strideHeight, const std::tuple< size_t, size_t > & padW, const std::tuple< size_t, size_t > & padH, const size_t inputWidth = \fC0\fP, const size_t inputHeight = \fC0\fP, const size_t dilationWidth = \fC1\fP, const size_t dilationHeight = \fC1\fP, const std::string & paddingType = \fC'None'\fP)"

.PP
Create the \fBAtrousConvolution\fP object using the specified number of input maps, output maps, filter size, stride, dilation and padding parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinSize\fP The number of input maps\&. 
.br
\fIoutSize\fP The number of output maps\&. 
.br
\fIkernelWidth\fP Width of the filter/kernel\&. 
.br
\fIkernelHeight\fP Height of the filter/kernel\&. 
.br
\fIstrideWidth\fP Stride of filter application in the x direction\&. 
.br
\fIstrideHeight\fP Stride of filter application in the y direction\&. 
.br
\fIpadW\fP A two-value tuple indicating padding widths of the input\&. First value is padding at left side\&. Second value is padding on right side\&. 
.br
\fIpadH\fP A two-value tuple indicating padding heights of the input\&. First value is padding at top\&. Second value is padding on bottom\&. 
.br
\fIinputWidth\fP The widht of the input data\&. 
.br
\fIinputHeight\fP The height of the input data\&. 
.br
\fIdilationWidth\fP The space between the cells of filters in x direction\&. 
.br
\fIdilationHeight\fP The space between the cells of filters in y direction\&. 
.br
\fIpaddingType\fP The type of padding (Valid/Same/None)\&. Defaults to None\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Backward (const arma::Mat< eT > &, const arma::Mat< eT > & gy, arma::Mat< eT > & g)"

.PP
Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards through f\&. Using the results from the feed forward pass\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (input) The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "arma::mat const& Bias () const\fC [inline]\fP"

.PP
Get the bias of the layer\&. 
.PP
Definition at line 182 of file atrous_convolution\&.hpp\&.
.SS "arma::mat& Bias ()\fC [inline]\fP"

.PP
Modify the bias of the layer\&. 
.PP
Definition at line 184 of file atrous_convolution\&.hpp\&.
.SS "OutputDataType const& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 192 of file atrous_convolution\&.hpp\&.
.SS "OutputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 194 of file atrous_convolution\&.hpp\&.
.SS "size_t DilationHeight () const\fC [inline]\fP"

.PP
Get the dilation rate on the Y axis\&. 
.PP
Definition at line 253 of file atrous_convolution\&.hpp\&.
.SS "size_t& DilationHeight ()\fC [inline]\fP"

.PP
Modify the dilation rate on the Y axis\&. 
.PP
Definition at line 255 of file atrous_convolution\&.hpp\&.
.SS "size_t DilationWidth () const\fC [inline]\fP"

.PP
Get the dilation rate on the X axis\&. 
.PP
Definition at line 248 of file atrous_convolution\&.hpp\&.
.SS "size_t& DilationWidth ()\fC [inline]\fP"

.PP
Modify the dilation rate on the X axis\&. 
.PP
Definition at line 250 of file atrous_convolution\&.hpp\&.
.SS "void Forward (const arma::Mat< eT > & input, arma::Mat< eT > & output)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "void Gradient (const arma::Mat< eT > &, const arma::Mat< eT > & error, arma::Mat< eT > & gradient)"

.SS "OutputDataType const& Gradient () const\fC [inline]\fP"

.PP
Get the gradient\&. 
.PP
Definition at line 197 of file atrous_convolution\&.hpp\&.
.SS "OutputDataType& Gradient ()\fC [inline]\fP"

.PP
Modify the gradient\&. 
.PP
Definition at line 199 of file atrous_convolution\&.hpp\&.
.SS "size_t InputHeight () const\fC [inline]\fP"

.PP
Get the input height\&. 
.PP
Definition at line 207 of file atrous_convolution\&.hpp\&.
.SS "size_t& InputHeight ()\fC [inline]\fP"

.PP
Modify the input height\&. 
.PP
Definition at line 209 of file atrous_convolution\&.hpp\&.
.SS "size_t InputShape () const\fC [inline]\fP"

.PP
Get the shape of the input\&. 
.PP
Definition at line 269 of file atrous_convolution\&.hpp\&.
.PP
References AtrousConvolution< ForwardConvolutionRule, BackwardConvolutionRule, GradientConvolutionRule, InputDataType, OutputDataType >::serialize()\&.
.SS "size_t InputSize () const\fC [inline]\fP"

.PP
Get the input size\&. 
.PP
Definition at line 222 of file atrous_convolution\&.hpp\&.
.SS "size_t InputWidth () const\fC [inline]\fP"

.PP
Get the input width\&. 
.PP
Definition at line 202 of file atrous_convolution\&.hpp\&.
.SS "size_t& InputWidth ()\fC [inline]\fP"

.PP
Modify input the width\&. 
.PP
Definition at line 204 of file atrous_convolution\&.hpp\&.
.SS "size_t KernelHeight () const\fC [inline]\fP"

.PP
Get the kernel height\&. 
.PP
Definition at line 233 of file atrous_convolution\&.hpp\&.
.SS "size_t& KernelHeight ()\fC [inline]\fP"

.PP
Modify the kernel height\&. 
.PP
Definition at line 235 of file atrous_convolution\&.hpp\&.
.SS "size_t KernelWidth () const\fC [inline]\fP"

.PP
Get the kernel width\&. 
.PP
Definition at line 228 of file atrous_convolution\&.hpp\&.
.SS "size_t& KernelWidth ()\fC [inline]\fP"

.PP
Modify the kernel width\&. 
.PP
Definition at line 230 of file atrous_convolution\&.hpp\&.
.SS "size_t OutputHeight () const\fC [inline]\fP"

.PP
Get the output height\&. 
.PP
Definition at line 217 of file atrous_convolution\&.hpp\&.
.SS "size_t& OutputHeight ()\fC [inline]\fP"

.PP
Modify the output height\&. 
.PP
Definition at line 219 of file atrous_convolution\&.hpp\&.
.SS "OutputDataType const& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 187 of file atrous_convolution\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 189 of file atrous_convolution\&.hpp\&.
.SS "size_t OutputSize () const\fC [inline]\fP"

.PP
Get the output size\&. 
.PP
Definition at line 225 of file atrous_convolution\&.hpp\&.
.SS "size_t OutputWidth () const\fC [inline]\fP"

.PP
Get the output width\&. 
.PP
Definition at line 212 of file atrous_convolution\&.hpp\&.
.SS "size_t& OutputWidth ()\fC [inline]\fP"

.PP
Modify the output width\&. 
.PP
Definition at line 214 of file atrous_convolution\&.hpp\&.
.SS "\fBann::Padding\fP const& \fBPadding\fP () const\fC [inline]\fP"

.PP
Get the internal \fBPadding\fP layer\&. 
.PP
Definition at line 258 of file atrous_convolution\&.hpp\&.
.SS "\fBann::Padding\fP& \fBPadding\fP ()\fC [inline]\fP"

.PP
Modify the internal \fBPadding\fP layer\&. 
.PP
Definition at line 260 of file atrous_convolution\&.hpp\&.
.SS "OutputDataType const& Parameters () const\fC [inline]\fP"

.PP
Get the parameters\&. 
.PP
Definition at line 172 of file atrous_convolution\&.hpp\&.
.SS "OutputDataType& Parameters ()\fC [inline]\fP"

.PP
Modify the parameters\&. 
.PP
Definition at line 174 of file atrous_convolution\&.hpp\&.
.SS "void Reset ()"

.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by AtrousConvolution< ForwardConvolutionRule, BackwardConvolutionRule, GradientConvolutionRule, InputDataType, OutputDataType >::InputShape()\&.
.SS "size_t StrideHeight () const\fC [inline]\fP"

.PP
Get the stride height\&. 
.PP
Definition at line 243 of file atrous_convolution\&.hpp\&.
.SS "size_t& StrideHeight ()\fC [inline]\fP"

.PP
Modify the stride height\&. 
.PP
Definition at line 245 of file atrous_convolution\&.hpp\&.
.SS "size_t StrideWidth () const\fC [inline]\fP"

.PP
Get the stride width\&. 
.PP
Definition at line 238 of file atrous_convolution\&.hpp\&.
.SS "size_t& StrideWidth ()\fC [inline]\fP"

.PP
Modify the stride width\&. 
.PP
Definition at line 240 of file atrous_convolution\&.hpp\&.
.SS "arma::cube const& Weight () const\fC [inline]\fP"

.PP
Get the weight of the layer\&. 
.PP
Definition at line 177 of file atrous_convolution\&.hpp\&.
.SS "arma::cube& Weight ()\fC [inline]\fP"

.PP
Modify the weight of the layer\&. 
.PP
Definition at line 179 of file atrous_convolution\&.hpp\&.
.SS "size_t WeightSize () const\fC [inline]\fP"

.PP
Get size of the weight matrix\&. 
.PP
Definition at line 263 of file atrous_convolution\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
