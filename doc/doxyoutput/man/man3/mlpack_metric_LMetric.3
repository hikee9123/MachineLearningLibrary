.TH "LMetric< TPower, TTakeRoot >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LMetric< TPower, TTakeRoot > \- The L_p metric for arbitrary integer p, with an option to take the root\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLMetric\fP ()"
.br
.RI "Default constructor does nothing, but is required to satisfy the Metric policy\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &, const uint32_t)"
.br
.RI "Serialize the metric (nothing to do)\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename VecTypeA , typename VecTypeB > static VecTypeA::elem_type \fBEvaluate\fP (const VecTypeA &a, const VecTypeB &b)"
.br
.RI "Computes the distance between two points\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const int \fBPower\fP = TPower"
.br
.RI "The power of the metric\&. "
.ti -1c
.RI "static const bool \fBTakeRoot\fP = TTakeRoot"
.br
.RI "Whether or not the root is taken\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<int TPower, bool TTakeRoot = true>
.br
class mlpack::metric::LMetric< TPower, TTakeRoot >"
The L_p metric for arbitrary integer p, with an option to take the root\&. 

This class implements the standard L_p metric for two arbitrary vectors $ x $ and $ y $ of dimensionality $ n $:
.PP
\[ d(x, y) = \left( \sum_{i = 1}^{n} | x_i - y_i |^p \right)^{\frac{1}{p}}. \].PP
The value of p is given as a template parameter\&.
.PP
In addition, the function $ d(x, y) $ can be simplified, neglecting the p-root calculation\&. This is done by specifying the TakeRoot template parameter to be false\&. Then,
.PP
\[ d(x, y) = \sum_{i = 1}^{n} | x_i - y_i |^p \].PP
It is faster to compute that distance, so TakeRoot is by default off\&. However, when TakeRoot is false, the distance given is not actually a true metric -- it does not satisfy the triangle inequality\&. Some mlpack methods do not require the triangle inequality to operate correctly (such as the BinarySpaceTree), but setting TakeRoot = false in some cases will cause incorrect results\&.
.PP
A few convenience typedefs are given:
.PP
.IP "\(bu" 2
ManhattanDistance
.IP "\(bu" 2
EuclideanDistance
.IP "\(bu" 2
SquaredEuclideanDistance
.PP
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIPower\fP Power of metric; i\&.e\&. Power = 1 gives the L1-norm (Manhattan distance)\&. 
.br
\fITakeRoot\fP If true, the Power'th root of the result is taken before it is returned\&. Setting this to false causes the metric to not satisfy the Triangle Inequality (be careful!)\&. 
.RE
.PP

.PP
Definition at line 63 of file lmetric\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBLMetric\fP ()\fC [inline]\fP"

.PP
Default constructor does nothing, but is required to satisfy the Metric policy\&. 
.PP
Definition at line 70 of file lmetric\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "static VecTypeA::elem_type Evaluate (const VecTypeA & a, const VecTypeB & b)\fC [static]\fP"

.PP
Computes the distance between two points\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIVecTypeA\fP Type of first vector (generally arma::vec or arma::sp_vec)\&. 
.br
\fIVecTypeB\fP Type of second vector\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIa\fP First vector\&. 
.br
\fIb\fP Second vector\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Distance between vectors a and b\&. 
.RE
.PP

.PP
Referenced by KMeansPlusPlusInitialization::Cluster(), SphericalKernel::ConvolutionIntegral(), GaussianKernel::ConvolutionIntegral(), SphericalKernel::Evaluate(), TriangularKernel::Evaluate(), LaplacianKernel::Evaluate(), GaussianKernel::Evaluate(), CauchyKernel::Evaluate(), and LMetric< TPower, true >::LMetric()\&.
.SS "void serialize (Archive &, const uint32_t)\fC [inline]\fP"

.PP
Serialize the metric (nothing to do)\&. 
.PP
Definition at line 88 of file lmetric\&.hpp\&.
.SH "Member Data Documentation"
.PP 
.SS "const int Power = TPower\fC [static]\fP"

.PP
The power of the metric\&. 
.PP
Definition at line 91 of file lmetric\&.hpp\&.
.SS "const bool TakeRoot = TTakeRoot\fC [static]\fP"

.PP
Whether or not the root is taken\&. 
.PP
Definition at line 93 of file lmetric\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
