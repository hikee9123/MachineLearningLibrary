.TH "FurthestNS" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FurthestNS \- This class implements the necessary methods for the SortPolicy template parameter of the \fBNeighborSearch\fP class\&.  

.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static double \fBBestDistance\fP ()"
.br
.RI "Return what should represent the best possible distance with this particular sort policy\&. "
.ti -1c
.RI "template<typename TreeType > static double \fBBestNodeToNodeDistance\fP (const TreeType *queryNode, const TreeType *referenceNode)"
.br
.RI "Return the best possible distance between two nodes\&. "
.ti -1c
.RI "template<typename TreeType > static double \fBBestNodeToNodeDistance\fP (const TreeType *queryNode, const TreeType *referenceNode, const double centerToCenterDistance)"
.br
.RI "Return the best possible distance between two nodes, given that the distance between the centers of the two nodes has already been calculated\&. "
.ti -1c
.RI "template<typename TreeType > static double \fBBestNodeToNodeDistance\fP (const TreeType *queryNode, const TreeType *referenceNode, const TreeType *referenceChildNode, const double centerToCenterDistance)"
.br
.RI "Return the best possible distance between the query node and the reference child node given the base case distance between the query node and the reference node\&. "
.ti -1c
.RI "template<typename VecType , typename TreeType > static double \fBBestPointToNodeDistance\fP (const VecType &queryPoint, const TreeType *referenceNode)"
.br
.RI "Return the best possible distance between a node and a point\&. "
.ti -1c
.RI "template<typename VecType , typename TreeType > static double \fBBestPointToNodeDistance\fP (const VecType &queryPoint, const TreeType *referenceNode, const double pointToCenterDistance)"
.br
.RI "Return the best possible distance between a point and a node, given that the distance between the point and the center of the node has already been calculated\&. "
.ti -1c
.RI "static double \fBCombineBest\fP (const double a, const double b)"
.br
.RI "Return the best combination of the two distances\&. "
.ti -1c
.RI "static double \fBCombineWorst\fP (const double a, const double b)"
.br
.RI "Return the worst combination of the two distances\&. "
.ti -1c
.RI "static double \fBConvertToDistance\fP (const double score)"
.br
.RI "Convert the given score back to a distance\&. "
.ti -1c
.RI "static double \fBConvertToScore\fP (const double distance)"
.br
.RI "Convert the given distance to a score\&. "
.ti -1c
.RI "template<typename VecType , typename TreeType > static size_t \fBGetBestChild\fP (const VecType &queryPoint, TreeType &referenceNode)"
.br
.RI "Return the best child according to this sort policy\&. "
.ti -1c
.RI "template<typename TreeType > static size_t \fBGetBestChild\fP (const TreeType &queryNode, TreeType &referenceNode)"
.br
.RI "Return the best child according to this sort policy\&. "
.ti -1c
.RI "static bool \fBIsBetter\fP (const double value, const double ref)"
.br
.RI "Return whether or not value is 'better' than ref\&. "
.ti -1c
.RI "static double \fBRelax\fP (const double value, const double epsilon)"
.br
.RI "Return the given value relaxed\&. "
.ti -1c
.RI "static double \fBWorstDistance\fP ()"
.br
.RI "Return what should represent the worst possible distance with this particular sort policy\&. "
.in -1c
.SH "Detailed Description"
.PP 
This class implements the necessary methods for the SortPolicy template parameter of the \fBNeighborSearch\fP class\&. 

The sorting policy here is that the minimum distance is the best (so, when used with \fBNeighborSearch\fP, the output is furthest neighbors)\&. 
.PP
Definition at line 27 of file furthest_neighbor_sort\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "static double BestDistance ()\fC [inline]\fP, \fC [static]\fP"

.PP
Return what should represent the best possible distance with this particular sort policy\&. In our case, this should be the maximum possible distance, DBL_MAX\&.
.PP
\fBReturns:\fP
.RS 4
DBL_MAX 
.RE
.PP

.PP
Definition at line 138 of file furthest_neighbor_sort\&.hpp\&.
.SS "static double BestNodeToNodeDistance (const TreeType * queryNode, const TreeType * referenceNode)\fC [static]\fP"

.PP
Return the best possible distance between two nodes\&. In our case, this is the maximum distance between the two tree nodes using the given distance function\&. 
.PP
Referenced by FurthestNS::IsBetter()\&.
.SS "static double BestNodeToNodeDistance (const TreeType * queryNode, const TreeType * referenceNode, const double centerToCenterDistance)\fC [static]\fP"

.PP
Return the best possible distance between two nodes, given that the distance between the centers of the two nodes has already been calculated\&. This is used in conjunction with trees that have self-children (like cover trees)\&. 
.SS "static double BestNodeToNodeDistance (const TreeType * queryNode, const TreeType * referenceNode, const TreeType * referenceChildNode, const double centerToCenterDistance)\fC [static]\fP"

.PP
Return the best possible distance between the query node and the reference child node given the base case distance between the query node and the reference node\&. TreeType::ParentDistance() must be implemented to use this\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Query node\&. 
.br
\fIreferenceNode\fP Reference node\&. 
.br
\fIreferenceChildNode\fP Child of reference node which is being inspected\&. 
.br
\fIcenterToCenterDistance\fP Distance between centers of query node and reference node\&. 
.RE
.PP

.SS "static double BestPointToNodeDistance (const VecType & queryPoint, const TreeType * referenceNode)\fC [static]\fP"

.PP
Return the best possible distance between a node and a point\&. In our case, this is the maximum distance between the tree node and the point using the given distance function\&. 
.PP
Referenced by FurthestNS::IsBetter()\&.
.SS "static double BestPointToNodeDistance (const VecType & queryPoint, const TreeType * referenceNode, const double pointToCenterDistance)\fC [static]\fP"

.PP
Return the best possible distance between a point and a node, given that the distance between the point and the center of the node has already been calculated\&. This is used in conjunction with trees that have self-children (like cover trees)\&. 
.SS "static double CombineBest (const double a, const double b)\fC [inline]\fP, \fC [static]\fP"

.PP
Return the best combination of the two distances\&. 
.PP
Definition at line 143 of file furthest_neighbor_sort\&.hpp\&.
.SS "static double CombineWorst (const double a, const double b)\fC [inline]\fP, \fC [static]\fP"

.PP
Return the worst combination of the two distances\&. 
.PP
Definition at line 153 of file furthest_neighbor_sort\&.hpp\&.
.SS "static double ConvertToDistance (const double score)\fC [inline]\fP, \fC [static]\fP"

.PP
Convert the given score back to a distance\&. This is the inverse of the operation of converting a distance to a score, and again, for furthest neighbor search, corresponds to inverting the value\&. 
.PP
Definition at line 193 of file furthest_neighbor_sort\&.hpp\&.
.PP
References FurthestNS::ConvertToScore()\&.
.SS "static double ConvertToScore (const double distance)\fC [inline]\fP, \fC [static]\fP"

.PP
Convert the given distance to a score\&. Lower scores are better, but for furthest neighbor search, larger distances are better\&. Therefore we must invert the given distance\&. 
.PP
Definition at line 178 of file furthest_neighbor_sort\&.hpp\&.
.PP
Referenced by FurthestNS::ConvertToDistance()\&.
.SS "static size_t GetBestChild (const VecType & queryPoint, TreeType & referenceNode)\fC [inline]\fP, \fC [static]\fP"

.PP
Return the best child according to this sort policy\&. In this case it will return the one with the maximum distance\&. 
.PP
Definition at line 107 of file furthest_neighbor_sort\&.hpp\&.
.SS "static size_t GetBestChild (const TreeType & queryNode, TreeType & referenceNode)\fC [inline]\fP, \fC [static]\fP"

.PP
Return the best child according to this sort policy\&. In this case it will return the one with the maximum distance\&. 
.PP
Definition at line 117 of file furthest_neighbor_sort\&.hpp\&.
.SS "static bool IsBetter (const double value, const double ref)\fC [inline]\fP, \fC [static]\fP"

.PP
Return whether or not value is 'better' than ref\&. In this case, that means that the value is greater than or equal to the reference\&.
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Value to compare 
.br
\fIref\fP Value to compare with
.RE
.PP
\fBReturns:\fP
.RS 4
bool indicating whether or not (value >= ref)\&. 
.RE
.PP

.PP
Definition at line 39 of file furthest_neighbor_sort\&.hpp\&.
.PP
References FurthestNS::BestNodeToNodeDistance(), and FurthestNS::BestPointToNodeDistance()\&.
.SS "static double Relax (const double value, const double epsilon)\fC [inline]\fP, \fC [static]\fP"

.PP
Return the given value relaxed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Value to relax\&. 
.br
\fIepsilon\fP Relative error (non-negative)\&.
.RE
.PP
\fBReturns:\fP
.RS 4
double Value relaxed\&. 
.RE
.PP

.PP
Definition at line 164 of file furthest_neighbor_sort\&.hpp\&.
.SS "static double WorstDistance ()\fC [inline]\fP, \fC [static]\fP"

.PP
Return what should represent the worst possible distance with this particular sort policy\&. In our case, this should be the minimum possible distance, 0\&.
.PP
\fBReturns:\fP
.RS 4
0 
.RE
.PP

.PP
Definition at line 129 of file furthest_neighbor_sort\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
