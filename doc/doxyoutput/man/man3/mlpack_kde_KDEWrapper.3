.TH "KDEWrapper< KernelType, TreeType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KDEWrapper< KernelType, TreeType > \- \fBKDEWrapper\fP is a wrapper class for all \fBKDE\fP types supported by \fBKDEModel\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBKDEWrapperBase\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKDEWrapper\fP (const double relError, const double absError, const KernelType &kernel)"
.br
.RI "Create the \fBKDEWrapper\fP object, initializing the internally-held \fBKDE\fP object\&. "
.ti -1c
.RI "virtual \fB~KDEWrapper\fP ()"
.br
.RI "Destruct the \fBKDEWrapper\fP (nothing to do)\&. "
.ti -1c
.RI "virtual void \fBAbsoluteError\fP (const double eps)"
.br
.RI "Modify the absolute error tolerance\&. "
.ti -1c
.RI "virtual void \fBBandwidth\fP (const double bw)"
.br
.RI "Modify the bandwidth of the kernel\&. "
.ti -1c
.RI "virtual \fBKDEWrapper\fP * \fBClone\fP () const"
.br
.RI "Create a new \fBKDEWrapper\fP that is the same as this one\&. "
.ti -1c
.RI "virtual void \fBEvaluate\fP (\fButil::Timers\fP &timers, arma::mat &&querySet, arma::vec &estimates)"
.br
.RI "Perform bichromatic \fBKDE\fP (i\&.e\&. \fBKDE\fP with a separate query set)\&. "
.ti -1c
.RI "virtual void \fBEvaluate\fP (\fButil::Timers\fP &timers, arma::vec &estimates)"
.br
.RI "Perform monochromatic \fBKDE\fP (i\&.e\&. with the reference set as the query set)\&. "
.ti -1c
.RI "virtual void \fBMCBreakCoef\fP (const double b)"
.br
.RI "Modify the Monte Carlo break coefficient\&. "
.ti -1c
.RI "virtual void \fBMCEntryCoef\fP (const double e)"
.br
.RI "Modify the Monte Carlo entry coefficient\&. "
.ti -1c
.RI "virtual size_t \fBMCInitialSampleSize\fP () const"
.br
.RI "Get the Monte Carlo sample size\&. "
.ti -1c
.RI "virtual size_t & \fBMCInitialSampleSize\fP ()"
.br
.RI "Modify the Monte Carlo sample size\&. "
.ti -1c
.RI "virtual void \fBMCProb\fP (const double mcProb)"
.br
.RI "Modify the Monte Carlo probability\&. "
.ti -1c
.RI "virtual \fBKDEMode\fP \fBMode\fP () const"
.br
.RI "Get the search mode\&. "
.ti -1c
.RI "virtual \fBKDEMode\fP & \fBMode\fP ()"
.br
.RI "Modify the search mode\&. "
.ti -1c
.RI "virtual bool \fBMonteCarlo\fP () const"
.br
.RI "Get whether Monte Carlo search is being used\&. "
.ti -1c
.RI "virtual bool & \fBMonteCarlo\fP ()"
.br
.RI "Modify whether Monte Carlo search is being used\&. "
.ti -1c
.RI "virtual void \fBRelativeError\fP (const double eps)"
.br
.RI "Modify the relative error tolerance\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the \fBKDE\fP model\&. "
.ti -1c
.RI "virtual void \fBTrain\fP (\fButil::Timers\fP &timers, arma::mat &&referenceSet)"
.br
.RI "Train the model (build the tree)\&. "
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef \fBKDE\fP< KernelType, \fBmetric::EuclideanDistance\fP, arma::mat, TreeType > \fBKDEType\fP"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBKDEType\fP \fBkde\fP"
.br
.RI "The instantiated \fBKDE\fP object that we are wrapping\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename KernelType, template< typename TreeMetricType, typename TreeStatType, typename TreeMatType > class TreeType>
.br
class mlpack::kde::KDEWrapper< KernelType, TreeType >"
\fBKDEWrapper\fP is a wrapper class for all \fBKDE\fP types supported by \fBKDEModel\fP\&. 

It can be extended with new child classes if new functionality for certain types is needed\&. 
.PP
Definition at line 139 of file kde_model\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef \fBKDE\fP<KernelType, \fBmetric::EuclideanDistance\fP, arma::mat, TreeType> \fBKDEType\fP\fC [protected]\fP"

.PP
Definition at line 219 of file kde_model\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBKDEWrapper\fP (const double relError, const double absError, const KernelType & kernel)\fC [inline]\fP"

.PP
Create the \fBKDEWrapper\fP object, initializing the internally-held \fBKDE\fP object\&. 
.PP
Definition at line 143 of file kde_model\&.hpp\&.
.SS "virtual ~\fBKDEWrapper\fP ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Destruct the \fBKDEWrapper\fP (nothing to do)\&. 
.PP
Definition at line 156 of file kde_model\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "virtual void AbsoluteError (const double eps)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Modify the absolute error tolerance\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 165 of file kde_model\&.hpp\&.
.SS "virtual void Bandwidth (const double bw)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Modify the bandwidth of the kernel\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 159 of file kde_model\&.hpp\&.
.SS "virtual \fBKDEWrapper\fP* Clone () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Create a new \fBKDEWrapper\fP that is the same as this one\&. This function will properly handle polymorphism\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 153 of file kde_model\&.hpp\&.
.SS "virtual void Evaluate (\fButil::Timers\fP & timers, arma::mat && querySet, arma::vec & estimates)\fC [virtual]\fP"

.PP
Perform bichromatic \fBKDE\fP (i\&.e\&. \fBKDE\fP with a separate query set)\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.SS "virtual void Evaluate (\fButil::Timers\fP & timers, arma::vec & estimates)\fC [virtual]\fP"

.PP
Perform monochromatic \fBKDE\fP (i\&.e\&. with the reference set as the query set)\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.SS "virtual void MCBreakCoef (const double b)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Modify the Monte Carlo break coefficient\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 190 of file kde_model\&.hpp\&.
.SS "virtual void MCEntryCoef (const double e)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Modify the Monte Carlo entry coefficient\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 187 of file kde_model\&.hpp\&.
.SS "virtual size_t MCInitialSampleSize () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Get the Monte Carlo sample size\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 176 of file kde_model\&.hpp\&.
.SS "virtual size_t& MCInitialSampleSize ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Modify the Monte Carlo sample size\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 181 of file kde_model\&.hpp\&.
.SS "virtual void MCProb (const double mcProb)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Modify the Monte Carlo probability\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 173 of file kde_model\&.hpp\&.
.SS "virtual \fBKDEMode\fP Mode () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Get the search mode\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 193 of file kde_model\&.hpp\&.
.SS "virtual \fBKDEMode\fP& Mode ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Modify the search mode\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 195 of file kde_model\&.hpp\&.
.SS "virtual bool MonteCarlo () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Get whether Monte Carlo search is being used\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 168 of file kde_model\&.hpp\&.
.SS "virtual bool& MonteCarlo ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Modify whether Monte Carlo search is being used\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 170 of file kde_model\&.hpp\&.
.SS "virtual void RelativeError (const double eps)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Modify the relative error tolerance\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.PP
Definition at line 162 of file kde_model\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)\fC [inline]\fP"

.PP
Serialize the \fBKDE\fP model\&. 
.PP
Definition at line 210 of file kde_model\&.hpp\&.
.SS "virtual void Train (\fButil::Timers\fP & timers, arma::mat && referenceSet)\fC [virtual]\fP"

.PP
Train the model (build the tree)\&. 
.PP
Implements \fBKDEWrapperBase\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBKDEType\fP kde\fC [protected]\fP"

.PP
The instantiated \fBKDE\fP object that we are wrapping\&. 
.PP
Definition at line 222 of file kde_model\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
