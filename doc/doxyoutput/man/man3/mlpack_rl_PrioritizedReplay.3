.TH "PrioritizedReplay< EnvironmentType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PrioritizedReplay< EnvironmentType > \- Implementation of prioritized experience replay\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBTransition\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBActionType\fP = typename EnvironmentType::Action"
.br
.RI "Convenient typedef for action\&. "
.ti -1c
.RI "using \fBStateType\fP = typename EnvironmentType::State"
.br
.RI "Convenient typedef for state\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPrioritizedReplay\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBPrioritizedReplay\fP (const size_t batchSize, const size_t capacity, const double alpha, const size_t nSteps=1, const size_t dimension=StateType::dimension)"
.br
.RI "Construct an instance of prioritized experience replay class\&. "
.ti -1c
.RI "void \fBBetaAnneal\fP ()"
.br
.RI "Annealing the beta\&. "
.ti -1c
.RI "void \fBGetNStepInfo\fP (double &reward, \fBStateType\fP &nextState, bool &isEnd, const double &discount)"
.br
.RI "Get the reward, next state and terminal boolean for nth step\&. "
.ti -1c
.RI "const size_t & \fBNSteps\fP () const"
.br
.RI "Get the number of steps for n-step agent\&. "
.ti -1c
.RI "void \fBSample\fP (arma::mat &sampledStates, std::vector< \fBActionType\fP > &sampledActions, arma::rowvec &sampledRewards, arma::mat &sampledNextStates, arma::irowvec &isTerminal)"
.br
.RI "Sample some experience according to their priorities\&. "
.ti -1c
.RI "arma::ucolvec \fBSampleProportional\fP ()"
.br
.RI "Sample some experience according to their priorities\&. "
.ti -1c
.RI "const size_t & \fBSize\fP ()"
.br
.RI "Get the number of transitions in the memory\&. "
.ti -1c
.RI "void \fBStore\fP (\fBStateType\fP state, \fBActionType\fP action, double reward, \fBStateType\fP nextState, bool isEnd, const double &discount)"
.br
.RI "Store the given experience and set the priorities for the given experience\&. "
.ti -1c
.RI "void \fBUpdate\fP (arma::mat target, std::vector< \fBActionType\fP > sampledActions, arma::mat nextActionValues, arma::mat &gradients)"
.br
.RI "Update the priorities of transitions and Update the gradients\&. "
.ti -1c
.RI "void \fBUpdatePriorities\fP (arma::ucolvec &indices, arma::colvec &priorities)"
.br
.RI "Update priorities of sampled transitions\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename EnvironmentType>
.br
class mlpack::rl::PrioritizedReplay< EnvironmentType >"
Implementation of prioritized experience replay\&. 

Prioritized experience replay can replay important transitions more frequently by prioritizing transitions, and make agent learn more efficiently\&.
.PP
.PP
.nf
@article{schaul2015prioritized,
 title   = {Prioritized experience replay},
 author  = {Schaul, Tom and Quan, John and Antonoglou,
            Ioannis and Silver, David},
 journal = {arXiv preprint arXiv:1511\&.05952},
 year    = {2015}
 }
.fi
.PP
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIEnvironmentType\fP Desired task\&. 
.RE
.PP

.PP
Definition at line 39 of file prioritized_replay\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "using \fBActionType\fP =  typename EnvironmentType::Action"

.PP
Convenient typedef for action\&. 
.PP
Definition at line 43 of file prioritized_replay\&.hpp\&.
.SS "using \fBStateType\fP =  typename EnvironmentType::State"

.PP
Convenient typedef for state\&. 
.PP
Definition at line 46 of file prioritized_replay\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBPrioritizedReplay\fP ()\fC [inline]\fP"

.PP
Default constructor\&. 
.PP
Definition at line 60 of file prioritized_replay\&.hpp\&.
.SS "\fBPrioritizedReplay\fP (const size_t batchSize, const size_t capacity, const double alpha, const size_t nSteps = \fC1\fP, const size_t dimension = \fCStateType::dimension\fP)\fC [inline]\fP"

.PP
Construct an instance of prioritized experience replay class\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbatchSize\fP Number of examples returned at each sample\&. 
.br
\fIcapacity\fP Total memory size in terms of number of examples\&. 
.br
\fIalpha\fP How much prioritization is used\&. 
.br
\fInSteps\fP Number of steps to look in the future\&. 
.br
\fIdimension\fP The dimension of an encoded state\&. 
.RE
.PP

.PP
Definition at line 82 of file prioritized_replay\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void BetaAnneal ()\fC [inline]\fP"

.PP
Annealing the beta\&. 
.PP
Definition at line 276 of file prioritized_replay\&.hpp\&.
.PP
Referenced by PrioritizedReplay< EnvironmentType >::Sample()\&.
.SS "void GetNStepInfo (double & reward, \fBStateType\fP & nextState, bool & isEnd, const double & discount)\fC [inline]\fP"

.PP
Get the reward, next state and terminal boolean for nth step\&. 
.PP
\fBParameters:\fP
.RS 4
\fIreward\fP Given reward\&. 
.br
\fInextState\fP Given next state\&. 
.br
\fIisEnd\fP Whether next state is terminal state\&. 
.br
\fIdiscount\fP The discount parameter\&. 
.RE
.PP

.PP
Definition at line 171 of file prioritized_replay\&.hpp\&.
.PP
Referenced by PrioritizedReplay< EnvironmentType >::Store()\&.
.SS "const size_t& NSteps () const\fC [inline]\fP"

.PP
Get the number of steps for n-step agent\&. 
.PP
Definition at line 308 of file prioritized_replay\&.hpp\&.
.SS "void Sample (arma::mat & sampledStates, std::vector< \fBActionType\fP > & sampledActions, arma::rowvec & sampledRewards, arma::mat & sampledNextStates, arma::irowvec & isTerminal)\fC [inline]\fP"

.PP
Sample some experience according to their priorities\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsampledStates\fP Sampled encoded states\&. 
.br
\fIsampledActions\fP Sampled actions\&. 
.br
\fIsampledRewards\fP Sampled rewards\&. 
.br
\fIsampledNextStates\fP Sampled encoded next states\&. 
.br
\fIisTerminal\fP Indicate whether corresponding next state is terminal state\&. 
.RE
.PP

.PP
Definition at line 221 of file prioritized_replay\&.hpp\&.
.PP
References PrioritizedReplay< EnvironmentType >::BetaAnneal(), and PrioritizedReplay< EnvironmentType >::SampleProportional()\&.
.SS "arma::ucolvec SampleProportional ()\fC [inline]\fP"

.PP
Sample some experience according to their priorities\&. 
.PP
\fBReturns:\fP
.RS 4
The indices to be chosen\&. 
.RE
.PP

.PP
Definition at line 198 of file prioritized_replay\&.hpp\&.
.PP
Referenced by PrioritizedReplay< EnvironmentType >::Sample()\&.
.SS "const size_t& Size ()\fC [inline]\fP"

.PP
Get the number of transitions in the memory\&. 
.PP
\fBReturns:\fP
.RS 4
Actual used memory size\&. 
.RE
.PP

.PP
Definition at line 268 of file prioritized_replay\&.hpp\&.
.SS "void Store (\fBStateType\fP state, \fBActionType\fP action, double reward, \fBStateType\fP nextState, bool isEnd, const double & discount)\fC [inline]\fP"

.PP
Store the given experience and set the priorities for the given experience\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP Given state\&. 
.br
\fIaction\fP Given action\&. 
.br
\fIreward\fP Given reward\&. 
.br
\fInextState\fP Given next state\&. 
.br
\fIisEnd\fP Whether next state is terminal state\&. 
.br
\fIdiscount\fP The discount parameter\&. 
.RE
.PP

.PP
Definition at line 122 of file prioritized_replay\&.hpp\&.
.PP
References PrioritizedReplay< EnvironmentType >::Transition::action, PrioritizedReplay< EnvironmentType >::GetNStepInfo(), PrioritizedReplay< EnvironmentType >::Transition::isEnd, PrioritizedReplay< EnvironmentType >::Transition::nextState, PrioritizedReplay< EnvironmentType >::Transition::reward, and PrioritizedReplay< EnvironmentType >::Transition::state\&.
.SS "void Update (arma::mat target, std::vector< \fBActionType\fP > sampledActions, arma::mat nextActionValues, arma::mat & gradients)\fC [inline]\fP"

.PP
Update the priorities of transitions and Update the gradients\&. 
.PP
\fBParameters:\fP
.RS 4
\fItarget\fP The learned value\&. 
.br
\fIsampledActions\fP Agent's sampled action\&. 
.br
\fInextActionValues\fP Agent's next action\&. 
.br
\fIgradients\fP The model's gradients\&. 
.RE
.PP

.PP
Definition at line 289 of file prioritized_replay\&.hpp\&.
.PP
References PrioritizedReplay< EnvironmentType >::Transition::action, and PrioritizedReplay< EnvironmentType >::UpdatePriorities()\&.
.SS "void UpdatePriorities (arma::ucolvec & indices, arma::colvec & priorities)\fC [inline]\fP"

.PP
Update priorities of sampled transitions\&. 
.PP
\fBParameters:\fP
.RS 4
\fIindices\fP The indices of sample to be updated\&. 
.br
\fIpriorities\fP Their corresponding priorities\&. 
.RE
.PP

.PP
Definition at line 256 of file prioritized_replay\&.hpp\&.
.PP
Referenced by PrioritizedReplay< EnvironmentType >::Update()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
