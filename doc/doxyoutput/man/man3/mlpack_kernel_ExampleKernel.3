.TH "ExampleKernel" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExampleKernel \- An example kernel function\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBExampleKernel\fP ()"
.br
.RI "The default constructor, which takes no parameters\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &, const uint32_t)"
.br
.RI "Serializes the kernel\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename VecTypeA , typename VecTypeB > static double \fBConvolutionIntegral\fP (const VecTypeA &, const VecTypeB &)"
.br
.RI "Obtains the convolution integral [integral K(||x-a||)K(||b-x||)dx] for the two vectors\&. "
.ti -1c
.RI "template<typename VecTypeA , typename VecTypeB > static double \fBEvaluate\fP (const VecTypeA &, const VecTypeB &)"
.br
.RI "Evaluates the kernel function for two given vectors\&. "
.ti -1c
.RI "static double \fBNormalizer\fP ()"
.br
.RI "Obtains the normalizing volume for the kernel with dimension $dimension$\&. "
.in -1c
.SH "Detailed Description"
.PP 
An example kernel function\&. 

This is not a useful kernel, but it implements the two functions necessary to satisfy the Kernel policy (so that a class can be used whenever an mlpack method calls for a \fCtypename Kernel\fP template parameter\&.
.PP
All that is necessary is a constructor and an \fC\fBEvaluate()\fP\fP function\&. More methods could be added; for instance, one useful idea is a constructor which takes parameters for a kernel (for instance, the width of the Gaussian for a Gaussian kernel)\&. However, mlpack methods cannot count on these various constructors existing, which is why most methods allow passing an already-instantiated kernel object (and by default the method will construct the kernel with the default constructor)\&. So, for instance,
.PP
.PP
.nf
GaussianKernel k(5\&.0);
KernelPCA<GaussianKernel> kpca(dataset, k);
.fi
.PP
.PP
will set up kernel PCA using a Gaussian kernel with a width of 5\&.0, but
.PP
.PP
.nf
KernelPCA<GaussianKernel> kpca(dataset);
.fi
.PP
.PP
will create the kernel with the default constructor\&. It is important (but not strictly mandatory) that your default constructor still gives a working kernel\&.
.PP
\fBNote:\fP
.RS 4
Not all kernels require state\&. For instance, the regular dot product needs no parameters\&. In that case, no local variables are necessary and \fC\fBEvaluate()\fP\fP can (and should) be declared static\&. However, for greater generalization, mlpack methods expect all kernels to require state and hence must store instantiated kernel functions; this is why a default constructor is necessary\&. 
.RE
.PP

.PP
Definition at line 76 of file example_kernel\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBExampleKernel\fP ()\fC [inline]\fP"

.PP
The default constructor, which takes no parameters\&. Because our simple example kernel has no internal parameters that need to be stored, the constructor does not need to do anything\&. For a more complex example, see the \fBGaussianKernel\fP, which stores an internal parameter\&. 
.PP
Definition at line 85 of file example_kernel\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "static double ConvolutionIntegral (const VecTypeA &, const VecTypeB &)\fC [inline]\fP, \fC [static]\fP"

.PP
Obtains the convolution integral [integral K(||x-a||)K(||b-x||)dx] for the two vectors\&. In this case, because our simple example kernel has no internal parameters, we can declare the function static\&. For a more complex example which cannot be declared static, see the \fBGaussianKernel\fP, which stores an internal parameter\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIVecTypeA\fP Type of first vector (arma::vec, arma::sp_vec should be expected)\&. 
.br
\fIVecTypeB\fP Type of second vector (arma::vec, arma::sp_vec)\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (a) First vector\&. 
.br
\fI*\fP (b) Second vector\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the convolution integral value\&. 
.RE
.PP

.PP
Definition at line 126 of file example_kernel\&.hpp\&.
.SS "static double Evaluate (const VecTypeA &, const VecTypeB &)\fC [inline]\fP, \fC [static]\fP"

.PP
Evaluates the kernel function for two given vectors\&. In this case, because our simple example kernel has no internal parameters, we can declare the function static\&. For a more complex example which cannot be declared static, see the \fBGaussianKernel\fP, which stores an internal parameter\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIVecTypeA\fP Type of first vector (arma::vec, arma::sp_vec should be expected)\&. 
.br
\fIVecTypeB\fP Type of second vector (arma::vec, arma::sp_vec)\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (a) First vector\&. 
.br
\fI*\fP (b) Second vector\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
K(a, b)\&. 
.RE
.PP

.PP
Definition at line 101 of file example_kernel\&.hpp\&.
.SS "static double Normalizer ()\fC [inline]\fP, \fC [static]\fP"

.PP
Obtains the normalizing volume for the kernel with dimension $dimension$\&. In this case, because our simple example kernel has no internal parameters, we can declare the function static\&. For a more complex example which cannot be declared static, see the \fBGaussianKernel\fP, which stores an internal parameter\&.
.PP
\fBReturns:\fP
.RS 4
the normalization constant\&. 
.RE
.PP

.PP
Definition at line 138 of file example_kernel\&.hpp\&.
.SS "void serialize (Archive &, const uint32_t)\fC [inline]\fP"

.PP
Serializes the kernel\&. In this case, the kernel has no members, so we do not need to do anything at all\&. 
.PP
Definition at line 109 of file example_kernel\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
