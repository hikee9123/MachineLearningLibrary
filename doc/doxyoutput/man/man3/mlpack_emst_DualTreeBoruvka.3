.TH "DualTreeBoruvka< MetricType, MatType, TreeType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DualTreeBoruvka< MetricType, MatType, TreeType > \- Performs the MST calculation using the Dual-Tree Boruvka algorithm, using any type of tree\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef TreeType< MetricType, \fBDTBStat\fP, MatType > \fBTree\fP"
.br
.RI "Convenience typedef\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDualTreeBoruvka\fP (const MatType &dataset, const bool naive=false, const MetricType metric=MetricType())"
.br
.RI "Create the tree from the given dataset\&. "
.ti -1c
.RI "\fBDualTreeBoruvka\fP (\fBTree\fP *tree, const MetricType metric=MetricType())"
.br
.RI "Create the \fBDualTreeBoruvka\fP object with an already initialized tree\&. "
.ti -1c
.RI "\fB~DualTreeBoruvka\fP ()"
.br
.RI "Delete the tree, if it was created inside the object\&. "
.ti -1c
.RI "void \fBComputeMST\fP (arma::mat &results)"
.br
.RI "Iteratively find the nearest neighbor of each component until the MST is complete\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType = metric::EuclideanDistance, typename MatType = arma::mat, template< typename TreeMetricType, typename TreeStatType, typename TreeMatType > class TreeType = tree::KDTree>
.br
class mlpack::emst::DualTreeBoruvka< MetricType, MatType, TreeType >"
Performs the MST calculation using the Dual-Tree Boruvka algorithm, using any type of tree\&. 

For more information on the algorithm, see the following citation:
.PP
.PP
.nf
@inproceedings{
  author = {March, W\&.B\&., Ram, P\&., and Gray, A\&.G\&.},
  title = {{Fast Euclidean Minimum Spanning Tree: Algorithm, Analysis,
     Applications\&.}},
  booktitle = {Proceedings of the 16th ACM SIGKDD International Conference
     on Knowledge Discovery and Data Mining}
  series = {KDD 2010},
  year = {2010}
}
.fi
.PP
.PP
General usage of this class might be like this:
.PP
.PP
.nf
extern arma::mat data; // We want to find the MST of this dataset\&.
DualTreeBoruvka<> dtb(data); // Create the tree with default options\&.

// Find the MST\&.
arma::mat mstResults;
dtb\&.ComputeMST(mstResults);
.fi
.PP
.PP
More advanced usage of the class can use different types of trees, pass in an already-built tree, or compute the MST using the O(n^2) naive algorithm\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMetricType\fP The metric to use\&. 
.br
\fIMatType\fP The type of data matrix to use\&. 
.br
\fITreeType\fP Type of tree to use\&. This should follow the TreeType policy API\&. 
.RE
.PP

.PP
Definition at line 83 of file dtb\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef TreeType<MetricType, \fBDTBStat\fP, MatType> \fBTree\fP"

.PP
Convenience typedef\&. 
.PP
Definition at line 87 of file dtb\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBDualTreeBoruvka\fP (const MatType & dataset, const bool naive = \fCfalse\fP, const MetricType metric = \fCMetricType()\fP)"

.PP
Create the tree from the given dataset\&. This copies the dataset to an internal copy, because tree-building modifies the dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Dataset to build a tree for\&. 
.br
\fInaive\fP Whether the computation should be done in O(n^2) naive mode\&. 
.br
\fImetric\fP An optional instantiated metric to use\&. 
.RE
.PP

.SS "\fBDualTreeBoruvka\fP (\fBTree\fP * tree, const MetricType metric = \fCMetricType()\fP)"

.PP
Create the \fBDualTreeBoruvka\fP object with an already initialized tree\&. This will not copy the dataset, and can save a little processing power\&. Naive mode is not available as an option for this constructor; instead, to run naive computation, construct a tree with all the points in one leaf (i\&.e\&. leafSize = number of points)\&.
.PP
\fBNote:\fP
.RS 4
Because tree-building (at least with BinarySpaceTree) modifies the ordering of a matrix, be sure you pass the modified matrix to this object! In addition, mapping the points of the matrix back to their original indices is not done when this constructor is used\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fItree\fP Pre-built tree\&. 
.br
\fImetric\fP An optional instantiated metric to use\&. 
.RE
.PP

.SS "~\fBDualTreeBoruvka\fP ()"

.PP
Delete the tree, if it was created inside the object\&. 
.SH "Member Function Documentation"
.PP 
.SS "void ComputeMST (arma::mat & results)"

.PP
Iteratively find the nearest neighbor of each component until the MST is complete\&. The results will be a 3xN matrix (with N equal to the number of edges in the minimum spanning tree)\&. The first row will contain the lesser index of the edge; the second row will contain the greater index of the edge; and the third row will contain the distance between the two edges\&.
.PP
\fBParameters:\fP
.RS 4
\fIresults\fP Matrix which results will be stored in\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
