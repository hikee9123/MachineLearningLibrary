.TH "DatasetMapper< PolicyType, InputType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DatasetMapper< PolicyType, InputType > \- Auxiliary information for a dataset, including mappings to/from strings (or other types) and the datatype of each dimension\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDatasetMapper\fP (const size_t dimensionality=0)"
.br
.RI "Create the \fBDatasetMapper\fP object with the given dimensionality\&. "
.ti -1c
.RI "\fBDatasetMapper\fP (PolicyType &policy, const size_t dimensionality=0)"
.br
.RI "Create the \fBDatasetMapper\fP object with the given policy and dimensionality\&. "
.ti -1c
.RI "size_t \fBDimensionality\fP () const"
.br
.RI "Get the dimensionality of the \fBDatasetMapper\fP object (that is, how many dimensions it has information for)\&. "
.ti -1c
.RI "template<typename T > void \fBMapFirstPass\fP (const InputType &input, const size_t dimension)"
.br
.RI "Preprocessing: during a first pass of the data, pass the input on to the MapPolicy if they are needed\&. "
.ti -1c
.RI "template<typename T > T \fBMapString\fP (const InputType &input, const size_t dimension)"
.br
.RI "Given the input and the dimension to which it belongs, return its numeric mapping\&. "
.ti -1c
.RI "size_t \fBNumMappings\fP (const size_t dimension) const"
.br
.RI "Get the number of mappings for a particular dimension\&. "
.ti -1c
.RI "template<typename T > size_t \fBNumUnmappings\fP (const T value, const size_t dimension) const"
.br
.RI "Get the number of possible unmappings for a string in a given dimension\&. "
.ti -1c
.RI "const PolicyType & \fBPolicy\fP () const"
.br
.RI "Return the policy of the mapper\&. "
.ti -1c
.RI "PolicyType & \fBPolicy\fP ()"
.br
.RI "Modify the policy of the mapper (be careful!)\&. "
.ti -1c
.RI "void \fBPolicy\fP (PolicyType &&policy)"
.br
.RI "Modify (Replace) the policy of the mapper with a new policy\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the dataset information\&. "
.ti -1c
.RI "void \fBSetDimensionality\fP (const size_t dimensionality)"
.br
.RI "Set the dimensionality of an existing \fBDatasetMapper\fP object\&. "
.ti -1c
.RI "\fBDatatype\fP \fBType\fP (const size_t dimension) const"
.br
.RI "Return the type of a given dimension (numeric or categorical)\&. "
.ti -1c
.RI "\fBDatatype\fP & \fBType\fP (const size_t dimension)"
.br
.RI "Modify the type of a given dimension (be careful!)\&. "
.ti -1c
.RI "template<typename T > const InputType & \fBUnmapString\fP (const T value, const size_t dimension, const size_t unmappingIndex=0) const"
.br
.RI "Return the input that corresponds to a given value in a given dimension\&. "
.ti -1c
.RI "PolicyType::MappedType \fBUnmapValue\fP (const InputType &input, const size_t dimension)"
.br
.RI "Return the value that corresponds to a given input in a given dimension\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename PolicyType, typename InputType = std::string>
.br
class mlpack::data::DatasetMapper< PolicyType, InputType >"
Auxiliary information for a dataset, including mappings to/from strings (or other types) and the datatype of each dimension\&. 

\fBDatasetMapper\fP objects are optionally produced by \fBdata::Load()\fP, and store the type of each dimension (Datatype::numeric or Datatype::categorical) as well as mappings from strings to unsigned integers and vice versa\&.
.PP
\fBDatasetMapper\fP objects can also map from arbitrary types; the type to map from can be specified with the InputType template parameter\&. By default, the InputType parameter is std::string\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIPolicyType\fP Mapping policy used to specify \fBMapString()\fP\&. 
.br
\fIInputType\fP Type of input to be mapped\&. 
.RE
.PP

.PP
Definition at line 41 of file dataset_mapper\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBDatasetMapper\fP (const size_t dimensionality = \fC0\fP)\fC [explicit]\fP"

.PP
Create the \fBDatasetMapper\fP object with the given dimensionality\&. Note that the dimensionality cannot be changed later; you will have to create a new \fBDatasetMapper\fP object\&. 
.SS "\fBDatasetMapper\fP (PolicyType & policy, const size_t dimensionality = \fC0\fP)\fC [explicit]\fP"

.PP
Create the \fBDatasetMapper\fP object with the given policy and dimensionality\&. Note that the dimensionality cannot be changed later; you will have to create a new \fBDatasetMapper\fP object\&. Policy can be modified by the modifier\&. 
.SH "Member Function Documentation"
.PP 
.SS "size_t Dimensionality () const"

.PP
Get the dimensionality of the \fBDatasetMapper\fP object (that is, how many dimensions it has information for)\&. If this object was created by a call to \fBmlpack::data::Load()\fP, then the dimensionality will be the same as the number of rows (dimensions) in the dataset\&. 
.SS "void MapFirstPass (const InputType & input, const size_t dimension)"

.PP
Preprocessing: during a first pass of the data, pass the input on to the MapPolicy if they are needed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input to map\&. 
.br
\fIdimension\fP Dimension to map for\&. 
.RE
.PP

.SS "T MapString (const InputType & input, const size_t dimension)"

.PP
Given the input and the dimension to which it belongs, return its numeric mapping\&. If no mapping yet exists, the input is added to the list of mappings for the given dimension\&. The dimension parameter refers to the index of the dimension of the string (i\&.e\&. the row in the dataset)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP Numeric type to map to (int/double/float/etc\&.)\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input to find/create mapping for\&. 
.br
\fIdimension\fP Index of the dimension of the string\&. 
.RE
.PP

.PP
Referenced by MockCategoricalData()\&.
.SS "size_t NumMappings (const size_t dimension) const"

.PP
Get the number of mappings for a particular dimension\&. If the dimension is numeric, then this will return 0\&. 
.SS "size_t NumUnmappings (const T value, const size_t dimension) const"

.PP
Get the number of possible unmappings for a string in a given dimension\&. 
.SS "const PolicyType& Policy () const"

.PP
Return the policy of the mapper\&. 
.PP
Referenced by DatasetMapper< mlpack::data::IncrementPolicy, double >::serialize()\&.
.SS "PolicyType& Policy ()"

.PP
Modify the policy of the mapper (be careful!)\&. 
.SS "void Policy (PolicyType && policy)"

.PP
Modify (Replace) the policy of the mapper with a new policy\&. 
.SS "void serialize (Archive & ar, const uint32_t)\fC [inline]\fP"

.PP
Serialize the dataset information\&. 
.PP
Definition at line 154 of file dataset_mapper\&.hpp\&.
.SS "void SetDimensionality (const size_t dimensionality)"

.PP
Set the dimensionality of an existing \fBDatasetMapper\fP object\&. This resets all mappings (but not the PolicyType)\&.
.PP
\fBParameters:\fP
.RS 4
\fIdimensionality\fP New dimensionality\&. 
.RE
.PP

.PP
Referenced by LoadCSV::GetTransposeMatrixSize()\&.
.SS "\fBDatatype\fP Type (const size_t dimension) const"

.PP
Return the type of a given dimension (numeric or categorical)\&. 
.PP
Referenced by MockCategoricalData()\&.
.SS "\fBDatatype\fP& Type (const size_t dimension)"

.PP
Modify the type of a given dimension (be careful!)\&. 
.SS "const InputType& UnmapString (const T value, const size_t dimension, const size_t unmappingIndex = \fC0\fP) const"

.PP
Return the input that corresponds to a given value in a given dimension\&. If the value is not a valid mapping in the given dimension, a std::invalid_argument is thrown\&. Note that this does not remove the mapping\&.
.PP
If the mapping is non-unique (i\&.e\&. many strings can map to the same value), then you can pass a different value for unmappingIndex to get a different string that maps to the given value\&. unmappingIndex should be in the range from 0 to (NumUnmappings(value, dimension) - 1)\&.
.PP
If the mapping is unique (which it is for DatasetInfo), then the unmappingIndex parameter can be left as the default\&.
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Mapped value for input\&. 
.br
\fIdimension\fP Dimension to unmap string from\&. 
.br
\fIunmappingIndex\fP Index of non-unique unmapping (optional)\&. 
.RE
.PP

.SS "PolicyType::MappedType UnmapValue (const InputType & input, const size_t dimension)"

.PP
Return the value that corresponds to a given input in a given dimension\&. If the value is not a valid mapping in the given dimension, a std::invalid_argument is thrown\&. Note that this does not remove the mapping\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Mapped input for value\&. 
.br
\fIdimension\fP Dimension to unmap input from\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
