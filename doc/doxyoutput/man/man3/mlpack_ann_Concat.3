.TH "Concat< InputDataType, OutputDataType, CustomLayers >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Concat< InputDataType, OutputDataType, CustomLayers > \- Implementation of the \fBConcat\fP class\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConcat\fP (const bool model=false, const bool run=true)"
.br
.RI "Create the \fBConcat\fP object using the specified parameters\&. "
.ti -1c
.RI "\fBConcat\fP (arma::Row< size_t > &inputSize, const size_t axis, const bool model=false, const bool run=true)"
.br
.RI "Create the \fBConcat\fP object using the specified parameters\&. "
.ti -1c
.RI "\fB~Concat\fP ()"
.br
.RI "Destroy the layers held by the model\&. "
.ti -1c
.RI "template<class LayerType , class\&.\&.\&. Args> void \fBAdd\fP (Args\&.\&.\&. args)"
.br
.ti -1c
.RI "void \fBAdd\fP (\fBLayerTypes\fP< CustomLayers\&.\&.\&. > layer)"
.br
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &, const arma::Mat< eT > &gy, arma::Mat< eT > &g)"
.br
.RI "Ordinary feed backward pass of a neural network, using 3rd-order tensors as input, calculating the function f(x) by propagating x backwards through f\&. "
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &, const arma::Mat< eT > &gy, arma::Mat< eT > &g, const size_t index)"
.br
.RI "This is the overload of \fBBackward()\fP that runs only a specific layer with the given input\&. "
.ti -1c
.RI "size_t const  & \fBConcatAxis\fP () const"
.br
.RI "Get the axis of concatenation\&. "
.ti -1c
.RI "arma::mat const  & \fBDelta\fP () const"
.br
.RI "Get the delta\&.e\&. "
.ti -1c
.RI "arma::mat & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "template<typename eT > void \fBForward\fP (const arma::Mat< eT > &input, arma::Mat< eT > &output)"
.br
.RI "Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. "
.ti -1c
.RI "template<typename eT > void \fBGradient\fP (const arma::Mat< eT > &, const arma::Mat< eT > &error, arma::Mat< eT > &)"
.br
.ti -1c
.RI "template<typename eT > void \fBGradient\fP (const arma::Mat< eT > &input, const arma::Mat< eT > &error, arma::Mat< eT > &gradient, const size_t index)"
.br
.ti -1c
.RI "arma::mat const  & \fBGradient\fP () const"
.br
.RI "Get the gradient\&. "
.ti -1c
.RI "arma::mat & \fBGradient\fP ()"
.br
.RI "Modify the gradient\&. "
.ti -1c
.RI "arma::mat const  & \fBInputParameter\fP () const"
.br
.ti -1c
.RI "arma::mat & \fBInputParameter\fP ()"
.br
.RI "Modify the input parameter\&. "
.ti -1c
.RI "std::vector< \fBLayerTypes\fP< CustomLayers\&.\&.\&. > > & \fBModel\fP ()"
.br
.RI "Return the model modules\&. "
.ti -1c
.RI "arma::mat const  & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "arma::mat & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "const arma::mat & \fBParameters\fP () const"
.br
.RI "Return the initial point for the optimization\&. "
.ti -1c
.RI "arma::mat & \fBParameters\fP ()"
.br
.RI "Modify the initial point for the optimization\&. "
.ti -1c
.RI "bool \fBRun\fP () const"
.br
.RI "Get the value of run parameter\&. "
.ti -1c
.RI "bool & \fBRun\fP ()"
.br
.RI "Modify the value of run parameter\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.ti -1c
.RI "size_t \fBWeightSize\fP () const"
.br
.RI "Get the size of the weight matrix\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat, typename\&.\&.\&. CustomLayers>
.br
class mlpack::ann::Concat< InputDataType, OutputDataType, CustomLayers >"
Implementation of the \fBConcat\fP class\&. 

The \fBConcat\fP class works as a feed-forward fully connected network container which plugs various layers together\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fICustomLayers\fP Additional custom layers if required\&. 
.RE
.PP

.PP
Definition at line 45 of file concat\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBConcat\fP (const bool model = \fCfalse\fP, const bool run = \fCtrue\fP)"

.PP
Create the \fBConcat\fP object using the specified parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP Expose all network modules\&. 
.br
\fIrun\fP Call the Forward/Backward method before the output is merged\&. 
.RE
.PP

.SS "\fBConcat\fP (arma::Row< size_t > & inputSize, const size_t axis, const bool model = \fCfalse\fP, const bool run = \fCtrue\fP)"

.PP
Create the \fBConcat\fP object using the specified parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinputSize\fP A vector denoting input size of each layer added\&. 
.br
\fIaxis\fP \fBConcat\fP axis\&. 
.br
\fImodel\fP Expose all network modules\&. 
.br
\fIrun\fP Call the Forward/Backward method before the output is merged\&. 
.RE
.PP

.SS "~\fBConcat\fP ()"

.PP
Destroy the layers held by the model\&. 
.SH "Member Function Documentation"
.PP 
.SS "void \fBAdd\fP (Args\&.\&.\&. args)\fC [inline]\fP"

.PP
Definition at line 147 of file concat\&.hpp\&.
.PP
Referenced by DuelingDQN< OutputLayerType, InitType, CompleteNetworkType, FeatureNetworkType, AdvantageNetworkType, ValueNetworkType >::DuelingDQN()\&.
.SS "void \fBAdd\fP (\fBLayerTypes\fP< CustomLayers\&.\&.\&. > layer)\fC [inline]\fP"

.PP
Definition at line 154 of file concat\&.hpp\&.
.SS "void Backward (const arma::Mat< eT > &, const arma::Mat< eT > & gy, arma::Mat< eT > & g)"

.PP
Ordinary feed backward pass of a neural network, using 3rd-order tensors as input, calculating the function f(x) by propagating x backwards through f\&. Using the results from the feed forward pass\&.
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (input) The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "void Backward (const arma::Mat< eT > &, const arma::Mat< eT > & gy, arma::Mat< eT > & g, const size_t index)"

.PP
This is the overload of \fBBackward()\fP that runs only a specific layer with the given input\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (input) The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.br
\fIindex\fP The index of the layer to run\&. 
.RE
.PP

.SS "size_t const& ConcatAxis () const\fC [inline]\fP"

.PP
Get the axis of concatenation\&. 
.PP
Definition at line 197 of file concat\&.hpp\&.
.SS "arma::mat const& Delta () const\fC [inline]\fP"

.PP
Get the delta\&.e\&. 
.PP
Definition at line 187 of file concat\&.hpp\&.
.SS "arma::mat& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 189 of file concat\&.hpp\&.
.SS "void Forward (const arma::Mat< eT > & input, arma::Mat< eT > & output)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "void Gradient (const arma::Mat< eT > &, const arma::Mat< eT > & error, arma::Mat< eT > &)"

.SS "void Gradient (const arma::Mat< eT > & input, const arma::Mat< eT > & error, arma::Mat< eT > & gradient, const size_t index)"

.SS "arma::mat const& Gradient () const\fC [inline]\fP"

.PP
Get the gradient\&. 
.PP
Definition at line 192 of file concat\&.hpp\&.
.SS "arma::mat& Gradient ()\fC [inline]\fP"

.PP
Modify the gradient\&. 
.PP
Definition at line 194 of file concat\&.hpp\&.
.SS "arma::mat const& InputParameter () const\fC [inline]\fP"

.PP
Definition at line 177 of file concat\&.hpp\&.
.SS "arma::mat& InputParameter ()\fC [inline]\fP"

.PP
Modify the input parameter\&. 
.PP
Definition at line 179 of file concat\&.hpp\&.
.SS "std::vector<\fBLayerTypes\fP<CustomLayers\&.\&.\&.> >& Model ()\fC [inline]\fP"

.PP
Return the model modules\&. 
.PP
Definition at line 157 of file concat\&.hpp\&.
.SS "arma::mat const& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 182 of file concat\&.hpp\&.
.SS "arma::mat& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 184 of file concat\&.hpp\&.
.SS "const arma::mat& Parameters () const\fC [inline]\fP"

.PP
Return the initial point for the optimization\&. 
.PP
Definition at line 168 of file concat\&.hpp\&.
.SS "arma::mat& Parameters ()\fC [inline]\fP"

.PP
Modify the initial point for the optimization\&. 
.PP
Definition at line 170 of file concat\&.hpp\&.
.SS "bool Run () const\fC [inline]\fP"

.PP
Get the value of run parameter\&. 
.PP
Definition at line 173 of file concat\&.hpp\&.
.SS "bool& Run ()\fC [inline]\fP"

.PP
Modify the value of run parameter\&. 
.PP
Definition at line 175 of file concat\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by Concat< InputDataType, OutputDataType, CustomLayers >::WeightSize()\&.
.SS "size_t WeightSize () const\fC [inline]\fP"

.PP
Get the size of the weight matrix\&. 
.PP
Definition at line 200 of file concat\&.hpp\&.
.PP
References Concat< InputDataType, OutputDataType, CustomLayers >::serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
