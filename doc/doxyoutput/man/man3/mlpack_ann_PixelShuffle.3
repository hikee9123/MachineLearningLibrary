.TH "PixelShuffle< InputDataType, OutputDataType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PixelShuffle< InputDataType, OutputDataType > \- Implementation of the \fBPixelShuffle\fP layer\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPixelShuffle\fP ()"
.br
.RI "Create the \fBPixelShuffle\fP object\&. "
.ti -1c
.RI "\fBPixelShuffle\fP (const size_t upscaleFactor, const size_t height, const size_t width, const size_t size)"
.br
.RI "Create the \fBPixelShuffle\fP object using the specified parameters\&. "
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &input, const arma::Mat< eT > &gy, arma::Mat< eT > &g)"
.br
.RI "Ordinary feed backward pass of the \fBPixelShuffle\fP layer\&. "
.ti -1c
.RI "OutputDataType const  & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "OutputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "template<typename eT > void \fBForward\fP (const arma::Mat< eT > &input, arma::Mat< eT > &output)"
.br
.RI "Ordinary feed forward pass of the \fBPixelShuffle\fP layer\&. "
.ti -1c
.RI "size_t \fBInputChannels\fP () const"
.br
.RI "Get the number of input channels\&. "
.ti -1c
.RI "size_t & \fBInputChannels\fP ()"
.br
.RI "Modify the number of input channels\&. "
.ti -1c
.RI "size_t \fBInputHeight\fP () const"
.br
.RI "Get the input image height\&. "
.ti -1c
.RI "size_t & \fBInputHeight\fP ()"
.br
.RI "Modify the input image height\&. "
.ti -1c
.RI "size_t \fBInputWidth\fP () const"
.br
.RI "Get the input image width\&. "
.ti -1c
.RI "size_t & \fBInputWidth\fP ()"
.br
.RI "Modify the input image width\&. "
.ti -1c
.RI "size_t \fBOutputChannels\fP () const"
.br
.RI "Get the number of output channels\&. "
.ti -1c
.RI "size_t \fBOutputHeight\fP () const"
.br
.RI "Get the output image height\&. "
.ti -1c
.RI "OutputDataType const  & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "size_t \fBOutputWidth\fP () const"
.br
.RI "Get the output image width\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const unsigned int)"
.br
.RI "Serialize the layer\&. "
.ti -1c
.RI "size_t \fBUpscaleFactor\fP () const"
.br
.RI "Get the upscale factor\&. "
.ti -1c
.RI "size_t & \fBUpscaleFactor\fP ()"
.br
.RI "Modify the upscale factor\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::PixelShuffle< InputDataType, OutputDataType >"
Implementation of the \fBPixelShuffle\fP layer\&. 

For more information, refer to the following paper,
.PP
.PP
.nf
@article{Shi16,
  author    = {Wenzhe Shi, Jose Caballero,Ferenc Husz√°r, Johannes Totz,
              Andrew P\&. Aitken, Rob Bishop, Daniel Rueckert, Zehan Wang},
  title     = {Real-Time Single Image and Video Super-Resolution Using an
              Efficient Sub-Pixel Convolutional Neural Network},
  journal   = {CoRR},
  volume    = {abs/1609\&.05158},
  year      = {2016},
  url       = {https://arxiv\&.org/abs/1609\&.05158},
  eprint    = {1609\&.05158},
}
.fi
.PP
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 49 of file pixel_shuffle\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBPixelShuffle\fP ()"

.PP
Create the \fBPixelShuffle\fP object\&. 
.SS "\fBPixelShuffle\fP (const size_t upscaleFactor, const size_t height, const size_t width, const size_t size)"

.PP
Create the \fBPixelShuffle\fP object using the specified parameters\&. The number of input channels should be an integral multiple of the square of the upscale factor\&.
.PP
\fBParameters:\fP
.RS 4
\fIupscaleFactor\fP The scaling factor for Pixel Shuffle\&. 
.br
\fIheight\fP The height of each input image\&. 
.br
\fIwidth\fP The width of each input image\&. 
.br
\fIsize\fP The number of channels of each input image\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Backward (const arma::Mat< eT > & input, const arma::Mat< eT > & gy, arma::Mat< eT > & g)"

.PP
Ordinary feed backward pass of the \fBPixelShuffle\fP layer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "OutputDataType const& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 97 of file pixel_shuffle\&.hpp\&.
.SS "OutputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 99 of file pixel_shuffle\&.hpp\&.
.SS "void Forward (const arma::Mat< eT > & input, arma::Mat< eT > & output)"

.PP
Ordinary feed forward pass of the \fBPixelShuffle\fP layer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "size_t InputChannels () const\fC [inline]\fP"

.PP
Get the number of input channels\&. 
.PP
Definition at line 120 of file pixel_shuffle\&.hpp\&.
.SS "size_t& InputChannels ()\fC [inline]\fP"

.PP
Modify the number of input channels\&. 
.PP
Definition at line 123 of file pixel_shuffle\&.hpp\&.
.SS "size_t InputHeight () const\fC [inline]\fP"

.PP
Get the input image height\&. 
.PP
Definition at line 108 of file pixel_shuffle\&.hpp\&.
.SS "size_t& InputHeight ()\fC [inline]\fP"

.PP
Modify the input image height\&. 
.PP
Definition at line 111 of file pixel_shuffle\&.hpp\&.
.SS "size_t InputWidth () const\fC [inline]\fP"

.PP
Get the input image width\&. 
.PP
Definition at line 114 of file pixel_shuffle\&.hpp\&.
.SS "size_t& InputWidth ()\fC [inline]\fP"

.PP
Modify the input image width\&. 
.PP
Definition at line 117 of file pixel_shuffle\&.hpp\&.
.SS "size_t OutputChannels () const\fC [inline]\fP"

.PP
Get the number of output channels\&. 
.PP
Definition at line 132 of file pixel_shuffle\&.hpp\&.
.PP
References PixelShuffle< InputDataType, OutputDataType >::serialize()\&.
.SS "size_t OutputHeight () const\fC [inline]\fP"

.PP
Get the output image height\&. 
.PP
Definition at line 126 of file pixel_shuffle\&.hpp\&.
.SS "OutputDataType const& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 92 of file pixel_shuffle\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 94 of file pixel_shuffle\&.hpp\&.
.SS "size_t OutputWidth () const\fC [inline]\fP"

.PP
Get the output image width\&. 
.PP
Definition at line 129 of file pixel_shuffle\&.hpp\&.
.SS "void serialize (Archive & ar, const unsigned int)"

.PP
Serialize the layer\&. 
.PP
Referenced by PixelShuffle< InputDataType, OutputDataType >::OutputChannels()\&.
.SS "size_t UpscaleFactor () const\fC [inline]\fP"

.PP
Get the upscale factor\&. 
.PP
Definition at line 102 of file pixel_shuffle\&.hpp\&.
.SS "size_t& UpscaleFactor ()\fC [inline]\fP"

.PP
Modify the upscale factor\&. 
.PP
Definition at line 105 of file pixel_shuffle\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
