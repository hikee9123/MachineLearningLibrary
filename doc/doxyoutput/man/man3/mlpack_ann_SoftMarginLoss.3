.TH "SoftMarginLoss< InputDataType, OutputDataType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoftMarginLoss< InputDataType, OutputDataType >
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoftMarginLoss\fP (const bool reduction=true)"
.br
.RI "Create the \fBSoftMarginLoss\fP object\&. "
.ti -1c
.RI "template<typename PredictionType , typename TargetType , typename LossType > void \fBBackward\fP (const PredictionType &prediction, const TargetType &target, LossType &loss)"
.br
.RI "Ordinary feed backward pass of a neural network\&. "
.ti -1c
.RI "template<typename PredictionType , typename TargetType > PredictionType::elem_type \fBForward\fP (const PredictionType &prediction, const TargetType &target)"
.br
.RI "Computes the Soft Margin Loss function\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "bool \fBReduction\fP () const"
.br
.RI "Get the type of reduction used\&. "
.ti -1c
.RI "bool & \fBReduction\fP ()"
.br
.RI "Modify the type of reduction used\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t version)"
.br
.RI "Serialize the layer\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::SoftMarginLoss< InputDataType, OutputDataType >"

.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 34 of file soft_margin_loss\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBSoftMarginLoss\fP (const bool reduction = \fCtrue\fP)"

.PP
Create the \fBSoftMarginLoss\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIreduction\fP Specifies the reduction to apply to the output\&. If false, 'mean' reduction is used, where sum of the output will be divided by the number of elements in the output\&. If true, 'sum' reduction is used and the output will be summed\&. It is set to true by default\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Backward (const PredictionType & prediction, const TargetType & target, LossType & loss)"

.PP
Ordinary feed backward pass of a neural network\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprediction\fP Predictions used for evaluating the specified loss function\&. 
.br
\fItarget\fP The target vector\&. 
.br
\fIloss\fP The calculated error\&. 
.RE
.PP

.SS "PredictionType::elem_type Forward (const PredictionType & prediction, const TargetType & target)"

.PP
Computes the Soft Margin Loss function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprediction\fP Predictions used for evaluating the specified loss function\&. 
.br
\fItarget\fP The target vector with same shape as input\&. 
.RE
.PP

.SS "OutputDataType& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 73 of file soft_margin_loss\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 75 of file soft_margin_loss\&.hpp\&.
.SS "bool Reduction () const\fC [inline]\fP"

.PP
Get the type of reduction used\&. 
.PP
Definition at line 78 of file soft_margin_loss\&.hpp\&.
.SS "bool& Reduction ()\fC [inline]\fP"

.PP
Modify the type of reduction used\&. 
.PP
Definition at line 80 of file soft_margin_loss\&.hpp\&.
.PP
References SoftMarginLoss< InputDataType, OutputDataType >::serialize()\&.
.SS "void serialize (Archive & ar, const uint32_t version)"

.PP
Serialize the layer\&. 
.PP
Referenced by SoftMarginLoss< InputDataType, OutputDataType >::Reduction()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
