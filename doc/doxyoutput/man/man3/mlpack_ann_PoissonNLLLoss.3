.TH "PoissonNLLLoss< InputDataType, OutputDataType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PoissonNLLLoss< InputDataType, OutputDataType > \- Implementation of the Poisson negative log likelihood loss\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPoissonNLLLoss\fP (const bool logInput=true, const bool full=false, const typename InputDataType::elem_type eps=1e\-08, const bool mean=true)"
.br
.RI "Create the \fBPoissonNLLLoss\fP object\&. "
.ti -1c
.RI "template<typename PredictionType , typename TargetType , typename LossType > void \fBBackward\fP (const PredictionType &prediction, const TargetType &target, LossType &loss)"
.br
.RI "Ordinary feed backward pass of a neural network\&. "
.ti -1c
.RI "InputDataType::elem_type \fBEps\fP () const"
.br
.RI "Get the value of eps\&. "
.ti -1c
.RI "InputDataType::elem_type & \fBEps\fP ()"
.br
.RI "Modify the value of eps\&. "
.ti -1c
.RI "template<typename PredictionType , typename TargetType > InputDataType::elem_type \fBForward\fP (const PredictionType &prediction, const TargetType &target)"
.br
.RI "Computes the Poisson negative log likelihood Loss\&. "
.ti -1c
.RI "bool \fBFull\fP () const"
.br
.RI "Get the value of full\&. "
.ti -1c
.RI "bool & \fBFull\fP ()"
.br
.RI "Modify the value of full\&. "
.ti -1c
.RI "InputDataType & \fBInputParameter\fP () const"
.br
.RI "Get the input parameter\&. "
.ti -1c
.RI "InputDataType & \fBInputParameter\fP ()"
.br
.RI "Modify the input parameter\&. "
.ti -1c
.RI "bool \fBLogInput\fP () const"
.br
.RI "Get the value of logInput\&. "
.ti -1c
.RI "bool & \fBLogInput\fP ()"
.br
.RI "Modify the value of logInput\&. "
.ti -1c
.RI "bool \fBMean\fP () const"
.br
.RI "Get the value of mean\&. "
.ti -1c
.RI "bool & \fBMean\fP ()"
.br
.RI "Modify the value of mean\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::PoissonNLLLoss< InputDataType, OutputDataType >"
Implementation of the Poisson negative log likelihood loss\&. 

This loss function expects input for each class\&. It also expects a class index, in the range between 1 and the number of classes, as target when calling the Forward function\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 36 of file poisson_nll_loss\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBPoissonNLLLoss\fP (const bool logInput = \fCtrue\fP, const bool full = \fCfalse\fP, const typename InputDataType::elem_type eps = \fC1e\-08\fP, const bool mean = \fCtrue\fP)"

.PP
Create the \fBPoissonNLLLoss\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlogInput\fP If true the loss is computed as $ \exp(input) - target \cdot input $, if false then the loss is $ input - target \cdot \log(input + eps) $\&. 
.br
\fIfull\fP Boolean value that determines whether to include Stirling's approximation term\&. 
.br
\fIeps\fP A small value to prevent 0 in denominators and logarithms\&. 
.br
\fImean\fP When true, mean loss is computed otherwise total loss\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void Backward (const PredictionType & prediction, const TargetType & target, LossType & loss)"

.PP
Ordinary feed backward pass of a neural network\&. The Poisson Negative Log Likelihood loss function expects the input for each class\&. It expects a class index, in the range between 1 and the number of classes, as target when calling the Forward function\&.
.PP
\fBParameters:\fP
.RS 4
\fIprediction\fP Predictions used for evaluating the specified loss function\&. 
.br
\fItarget\fP The target vector, that contains the class index in the range between 1 and the number of classes\&. 
.br
\fIloss\fP The calculated error\&. 
.RE
.PP

.SS "InputDataType::elem_type Eps () const\fC [inline]\fP"

.PP
Get the value of eps\&. eps is a small value required to prevent 0 in logarithms and denominators\&. 
.PP
Definition at line 110 of file poisson_nll_loss\&.hpp\&.
.SS "InputDataType::elem_type& Eps ()\fC [inline]\fP"

.PP
Modify the value of eps\&. eps is a small value required to prevent 0 in logarithms and denominators\&. 
.PP
Definition at line 113 of file poisson_nll_loss\&.hpp\&.
.SS "InputDataType::elem_type Forward (const PredictionType & prediction, const TargetType & target)"

.PP
Computes the Poisson negative log likelihood Loss\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprediction\fP Predictions used for evaluating the specified loss function\&. 
.br
\fItarget\fP The target vector, that contains the class index in the range between 1 and the number of classes\&. 
.RE
.PP

.SS "bool Full () const\fC [inline]\fP"

.PP
Get the value of full\&. full is a boolean value that determines whether to include Stirling's approximation term\&. 
.PP
Definition at line 103 of file poisson_nll_loss\&.hpp\&.
.SS "bool& Full ()\fC [inline]\fP"

.PP
Modify the value of full\&. full is a boolean value that determines whether to include Stirling's approximation term\&. 
.PP
Definition at line 106 of file poisson_nll_loss\&.hpp\&.
.SS "InputDataType& InputParameter () const\fC [inline]\fP"

.PP
Get the input parameter\&. 
.PP
Definition at line 85 of file poisson_nll_loss\&.hpp\&.
.SS "InputDataType& InputParameter ()\fC [inline]\fP"

.PP
Modify the input parameter\&. 
.PP
Definition at line 87 of file poisson_nll_loss\&.hpp\&.
.SS "bool LogInput () const\fC [inline]\fP"

.PP
Get the value of logInput\&. logInput is a boolean value that tells if logits are given as input\&. 
.PP
Definition at line 96 of file poisson_nll_loss\&.hpp\&.
.SS "bool& LogInput ()\fC [inline]\fP"

.PP
Modify the value of logInput\&. logInput is a boolean value that tells if logits are given as input\&. 
.PP
Definition at line 99 of file poisson_nll_loss\&.hpp\&.
.SS "bool Mean () const\fC [inline]\fP"

.PP
Get the value of mean\&. It's a boolean value that tells if mean of the total loss has to be taken\&. 
.PP
Definition at line 117 of file poisson_nll_loss\&.hpp\&.
.SS "bool& Mean ()\fC [inline]\fP"

.PP
Modify the value of mean\&. It's a boolean value that tells if mean of the total loss has to be taken\&. 
.PP
Definition at line 120 of file poisson_nll_loss\&.hpp\&.
.PP
References PoissonNLLLoss< InputDataType, OutputDataType >::serialize()\&.
.SS "OutputDataType& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 90 of file poisson_nll_loss\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 92 of file poisson_nll_loss\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by PoissonNLLLoss< InputDataType, OutputDataType >::Mean()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
