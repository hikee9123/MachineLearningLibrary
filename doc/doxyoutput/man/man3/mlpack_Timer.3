.TH "Timer" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Timer \- The timer class provides a way for mlpack methods to be timed\&.  

.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBDisableTiming\fP ()"
.br
.RI "Disable timing of mlpack programs\&. "
.ti -1c
.RI "static void \fBEnableTiming\fP ()"
.br
.RI "Enable timing of mlpack programs\&. "
.ti -1c
.RI "static std::chrono::microseconds \fBGet\fP (const std::string &name)"
.br
.RI "Get the value of the given timer\&. "
.ti -1c
.RI "static void \fBResetAll\fP ()"
.br
.RI "Stop and reset all running timers\&. "
.ti -1c
.RI "static void \fBStart\fP (const std::string &name)"
.br
.RI "Start the given timer\&. "
.ti -1c
.RI "static void \fBStop\fP (const std::string &name)"
.br
.RI "Stop the given timer\&. "
.in -1c
.SH "Detailed Description"
.PP 
The timer class provides a way for mlpack methods to be timed\&. 

The three methods contained in this class allow a named timer to be started and stopped, and its value to be obtained\&. A named timer is specific to the thread it is running on, so if you start a timer in one thread, it cannot be stopped from a different thread\&. 
.PP
Definition at line 46 of file timers\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "static void DisableTiming ()\fC [static]\fP"

.PP
Disable timing of mlpack programs\&. Do not run this while timers are running! 
.SS "static void EnableTiming ()\fC [static]\fP"

.PP
Enable timing of mlpack programs\&. Do not run this while timers are running! 
.SS "static std::chrono::microseconds Get (const std::string & name)\fC [static]\fP"

.PP
Get the value of the given timer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP Name of timer to return value of\&. 
.RE
.PP

.SS "static void ResetAll ()\fC [static]\fP"

.PP
Stop and reset all running timers\&. This removes all knowledge of any existing timers\&. 
.SS "static void Start (const std::string & name)\fC [static]\fP"

.PP
Start the given timer\&. If a timer is started, then stopped, then re-started, then re-stopped, the final value of the timer is the length of both runs -- that is, mlpack timers are additive for each time they are run, and do not reset\&.
.PP
\fBNote:\fP
.RS 4
A std::runtime_error exception will be thrown if a timer is started twice\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIname\fP Name of timer to be started\&. 
.RE
.PP

.SS "static void Stop (const std::string & name)\fC [static]\fP"

.PP
Stop the given timer\&. 
.PP
\fBNote:\fP
.RS 4
A std::runtime_error exception will be thrown if a timer is started twice\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIname\fP Name of timer to be stopped\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
