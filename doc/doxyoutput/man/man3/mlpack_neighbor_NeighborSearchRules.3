.TH "NeighborSearchRules< SortPolicy, MetricType, TreeType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NeighborSearchRules< SortPolicy, MetricType, TreeType > \- The \fBNeighborSearchRules\fP class is a template helper class used by \fBNeighborSearch\fP class when performing distance-based neighbor searches\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBCandidateCmp\fP"
.br
.RI "Compare two candidates based on the distance\&. "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBtree::TraversalInfo\fP< TreeType > \fBTraversalInfoType\fP"
.br
.RI "Convenience typedef\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNeighborSearchRules\fP (const typename TreeType::Mat &\fBreferenceSet\fP, const typename TreeType::Mat &\fBquerySet\fP, const size_t \fBk\fP, MetricType &\fBmetric\fP, const double \fBepsilon\fP=0, const bool \fBsameSet\fP=false)"
.br
.RI "Construct the \fBNeighborSearchRules\fP object\&. "
.ti -1c
.RI "double \fBBaseCase\fP (const size_t queryIndex, const size_t referenceIndex)"
.br
.RI "Get the distance from the query point to the reference point\&. "
.ti -1c
.RI "size_t \fBBaseCases\fP () const"
.br
.RI "Get the number of base cases that have been performed\&. "
.ti -1c
.RI "size_t & \fBBaseCases\fP ()"
.br
.RI "Modify the number of base cases that have been performed\&. "
.ti -1c
.RI "size_t \fBGetBestChild\fP (const size_t queryIndex, TreeType &referenceNode)"
.br
.RI "Get the child node with the best score\&. "
.ti -1c
.RI "size_t \fBGetBestChild\fP (const TreeType &queryNode, TreeType &referenceNode)"
.br
.RI "Get the child node with the best score\&. "
.ti -1c
.RI "void \fBGetResults\fP (arma::Mat< size_t > &neighbors, arma::mat &distances)"
.br
.RI "Store the list of candidates for each query point in the given matrices\&. "
.ti -1c
.RI "size_t \fBMinimumBaseCases\fP () const"
.br
.RI "Get the minimum number of base cases we need to perform to have acceptable results\&. "
.ti -1c
.RI "double \fBRescore\fP (const size_t queryIndex, TreeType &referenceNode, const double oldScore) const"
.br
.RI "Re-evaluate the score for recursion order\&. "
.ti -1c
.RI "double \fBRescore\fP (TreeType &queryNode, TreeType &referenceNode, const double oldScore) const"
.br
.RI "Re-evaluate the score for recursion order\&. "
.ti -1c
.RI "double \fBScore\fP (const size_t queryIndex, TreeType &referenceNode)"
.br
.RI "Get the score for recursion order\&. "
.ti -1c
.RI "double \fBScore\fP (TreeType &queryNode, TreeType &referenceNode)"
.br
.RI "Get the score for recursion order\&. "
.ti -1c
.RI "size_t \fBScores\fP () const"
.br
.RI "Get the number of scores that have been performed\&. "
.ti -1c
.RI "size_t & \fBScores\fP ()"
.br
.RI "Modify the number of scores that have been performed\&. "
.ti -1c
.RI "const \fBTraversalInfoType\fP & \fBTraversalInfo\fP () const"
.br
.RI "Get the traversal info\&. "
.ti -1c
.RI "\fBTraversalInfoType\fP & \fBTraversalInfo\fP ()"
.br
.RI "Modify the traversal info\&. "
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef std::pair< double, size_t > \fBCandidate\fP"
.br
.RI "Candidate represents a possible candidate neighbor (distance, index)\&. "
.ti -1c
.RI "typedef std::priority_queue< \fBCandidate\fP, std::vector< \fBCandidate\fP >, \fBCandidateCmp\fP > \fBCandidateList\fP"
.br
.RI "Use a priority queue to represent the list of candidate neighbors\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "double \fBCalculateBound\fP (TreeType &queryNode) const"
.br
.RI "Recalculate the bound for a given query node\&. "
.ti -1c
.RI "void \fBInsertNeighbor\fP (const size_t queryIndex, const size_t neighbor, const double distance)"
.br
.RI "Helper function to insert a point into the list of candidate points\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "size_t \fBbaseCases\fP"
.br
.RI "The number of base cases that have been performed\&. "
.ti -1c
.RI "std::vector< \fBCandidateList\fP > \fBcandidates\fP"
.br
.RI "Set of candidate neighbors for each point\&. "
.ti -1c
.RI "const double \fBepsilon\fP"
.br
.RI "Relative error to be considered in approximate search\&. "
.ti -1c
.RI "const size_t \fBk\fP"
.br
.RI "Number of neighbors to search for\&. "
.ti -1c
.RI "double \fBlastBaseCase\fP"
.br
.RI "The last base case result\&. "
.ti -1c
.RI "size_t \fBlastQueryIndex\fP"
.br
.RI "The last query point \fBBaseCase()\fP was called with\&. "
.ti -1c
.RI "size_t \fBlastReferenceIndex\fP"
.br
.RI "The last reference point \fBBaseCase()\fP was called with\&. "
.ti -1c
.RI "MetricType & \fBmetric\fP"
.br
.RI "The instantiated metric\&. "
.ti -1c
.RI "const TreeType::Mat & \fBquerySet\fP"
.br
.RI "The query set\&. "
.ti -1c
.RI "const TreeType::Mat & \fBreferenceSet\fP"
.br
.RI "The reference set\&. "
.ti -1c
.RI "bool \fBsameSet\fP"
.br
.RI "Denotes whether or not the reference and query sets are the same\&. "
.ti -1c
.RI "size_t \fBscores\fP"
.br
.RI "The number of scores that have been performed\&. "
.ti -1c
.RI "\fBTraversalInfoType\fP \fBtraversalInfo\fP"
.br
.RI "Traversal info for the parent combination; this is updated by the traversal before each call to \fBScore()\fP\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename SortPolicy, typename MetricType, typename TreeType>
.br
class mlpack::neighbor::NeighborSearchRules< SortPolicy, MetricType, TreeType >"
The \fBNeighborSearchRules\fP class is a template helper class used by \fBNeighborSearch\fP class when performing distance-based neighbor searches\&. 

For each point in the query dataset, it keeps track of the k neighbors in the reference dataset which have the 'best' distance according to a given sorting policy\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fISortPolicy\fP The sort policy for distances\&. 
.br
\fIMetricType\fP The metric to use for computation\&. 
.br
\fITreeType\fP The tree type to use; must adhere to the TreeType API\&. 
.RE
.PP

.PP
Definition at line 35 of file neighbor_search_rules\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::pair<double, size_t> \fBCandidate\fP\fC [protected]\fP"

.PP
Candidate represents a possible candidate neighbor (distance, index)\&. 
.PP
Definition at line 172 of file neighbor_search_rules\&.hpp\&.
.SS "typedef std::priority_queue<\fBCandidate\fP, std::vector<\fBCandidate\fP>, \fBCandidateCmp\fP> \fBCandidateList\fP\fC [protected]\fP"

.PP
Use a priority queue to represent the list of candidate neighbors\&. 
.PP
Definition at line 184 of file neighbor_search_rules\&.hpp\&.
.SS "typedef \fBtree::TraversalInfo\fP<TreeType> \fBTraversalInfoType\fP"

.PP
Convenience typedef\&. 
.PP
Definition at line 153 of file neighbor_search_rules\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBNeighborSearchRules\fP (const typename TreeType::Mat & referenceSet, const typename TreeType::Mat & querySet, const size_t k, MetricType & metric, const double epsilon = \fC0\fP, const bool sameSet = \fCfalse\fP)"

.PP
Construct the \fBNeighborSearchRules\fP object\&. This is usually done from within the \fBNeighborSearch\fP class at search time\&.
.PP
\fBParameters:\fP
.RS 4
\fIreferenceSet\fP Set of reference data\&. 
.br
\fIquerySet\fP Set of query data\&. 
.br
\fIk\fP Number of neighbors to search for\&. 
.br
\fImetric\fP Instantiated metric\&. 
.br
\fIepsilon\fP Relative approximate error\&. 
.br
\fIsameSet\fP If true, the query and reference set are taken to be the same, and a query point will not return itself in the results\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "double BaseCase (const size_t queryIndex, const size_t referenceIndex)"

.PP
Get the distance from the query point to the reference point\&. This will update the list of candidates with the new point if appropriate and will track the number of base cases (number of points evaluated)\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceIndex\fP Index of reference point\&. 
.RE
.PP

.SS "size_t BaseCases () const\fC [inline]\fP"

.PP
Get the number of base cases that have been performed\&. 
.PP
Definition at line 143 of file neighbor_search_rules\&.hpp\&.
.PP
References NeighborSearchRules< SortPolicy, MetricType, TreeType >::baseCases\&.
.SS "size_t& BaseCases ()\fC [inline]\fP"

.PP
Modify the number of base cases that have been performed\&. 
.PP
Definition at line 145 of file neighbor_search_rules\&.hpp\&.
.PP
References NeighborSearchRules< SortPolicy, MetricType, TreeType >::baseCases\&.
.SS "double CalculateBound (TreeType & queryNode) const\fC [protected]\fP"

.PP
Recalculate the bound for a given query node\&. 
.SS "size_t GetBestChild (const size_t queryIndex, TreeType & referenceNode)"

.PP
Get the child node with the best score\&. 
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.RE
.PP

.SS "size_t GetBestChild (const TreeType & queryNode, TreeType & referenceNode)"

.PP
Get the child node with the best score\&. 
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Node to be considered\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.RE
.PP

.SS "void GetResults (arma::Mat< size_t > & neighbors, arma::mat & distances)"

.PP
Store the list of candidates for each query point in the given matrices\&. 
.PP
\fBParameters:\fP
.RS 4
\fIneighbors\fP Matrix storing lists of neighbors for each query point\&. 
.br
\fIdistances\fP Matrix storing distances of neighbors for each query point\&. 
.RE
.PP

.SS "void InsertNeighbor (const size_t queryIndex, const size_t neighbor, const double distance)\fC [protected]\fP"

.PP
Helper function to insert a point into the list of candidate points\&. 
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of point whose neighbors we are inserting into\&. 
.br
\fIneighbor\fP Index of reference point which is being inserted\&. 
.br
\fIdistance\fP Distance from query point to reference point\&. 
.RE
.PP

.SS "size_t MinimumBaseCases () const\fC [inline]\fP"

.PP
Get the minimum number of base cases we need to perform to have acceptable results\&. This is only needed in defeatist search mode\&. 
.PP
Definition at line 162 of file neighbor_search_rules\&.hpp\&.
.PP
References NeighborSearchRules< SortPolicy, MetricType, TreeType >::k\&.
.SS "double Rescore (const size_t queryIndex, TreeType & referenceNode, const double oldScore) const"

.PP
Re-evaluate the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&. This is used when the score has already been calculated, but another recursion may have modified the bounds for pruning\&. So the old score is checked against the new pruning bound\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.br
\fIoldScore\fP Old score produced by \fBScore()\fP (or \fBRescore()\fP)\&. 
.RE
.PP

.SS "double Rescore (TreeType & queryNode, TreeType & referenceNode, const double oldScore) const"

.PP
Re-evaluate the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&. This is used when the score has already been calculated, but another recursion may have modified the bounds for pruning\&. So the old score is checked against the new pruning bound\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Candidate query node to recurse into\&. 
.br
\fIreferenceNode\fP Candidate reference node to recurse into\&. 
.br
\fIoldScore\fP Old score produced by Socre() (or \fBRescore()\fP)\&. 
.RE
.PP

.SS "double Score (const size_t queryIndex, TreeType & referenceNode)"

.PP
Get the score for recursion order\&. A low score indicates priority for recursion, while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryIndex\fP Index of query point\&. 
.br
\fIreferenceNode\fP Candidate node to be recursed into\&. 
.RE
.PP

.SS "double Score (TreeType & queryNode, TreeType & referenceNode)"

.PP
Get the score for recursion order\&. A low score indicates priority for recursionm while DBL_MAX indicates that the node should not be recursed into at all (it should be pruned)\&.
.PP
\fBParameters:\fP
.RS 4
\fIqueryNode\fP Candidate query node to recurse into\&. 
.br
\fIreferenceNode\fP Candidate reference node to recurse into\&. 
.RE
.PP

.SS "size_t Scores () const\fC [inline]\fP"

.PP
Get the number of scores that have been performed\&. 
.PP
Definition at line 148 of file neighbor_search_rules\&.hpp\&.
.PP
References NeighborSearchRules< SortPolicy, MetricType, TreeType >::scores\&.
.SS "size_t& Scores ()\fC [inline]\fP"

.PP
Modify the number of scores that have been performed\&. 
.PP
Definition at line 150 of file neighbor_search_rules\&.hpp\&.
.PP
References NeighborSearchRules< SortPolicy, MetricType, TreeType >::scores\&.
.SS "const \fBTraversalInfoType\fP& TraversalInfo () const\fC [inline]\fP"

.PP
Get the traversal info\&. 
.PP
Definition at line 156 of file neighbor_search_rules\&.hpp\&.
.PP
References NeighborSearchRules< SortPolicy, MetricType, TreeType >::traversalInfo\&.
.SS "\fBTraversalInfoType\fP& TraversalInfo ()\fC [inline]\fP"

.PP
Modify the traversal info\&. 
.PP
Definition at line 158 of file neighbor_search_rules\&.hpp\&.
.PP
References NeighborSearchRules< SortPolicy, MetricType, TreeType >::traversalInfo\&.
.SH "Member Data Documentation"
.PP 
.SS "size_t baseCases\fC [protected]\fP"

.PP
The number of base cases that have been performed\&. 
.PP
Definition at line 209 of file neighbor_search_rules\&.hpp\&.
.PP
Referenced by NeighborSearchRules< SortPolicy, MetricType, TreeType >::BaseCases()\&.
.SS "std::vector<\fBCandidateList\fP> candidates\fC [protected]\fP"

.PP
Set of candidate neighbors for each point\&. 
.PP
Definition at line 187 of file neighbor_search_rules\&.hpp\&.
.SS "const double epsilon\fC [protected]\fP"

.PP
Relative error to be considered in approximate search\&. 
.PP
Definition at line 199 of file neighbor_search_rules\&.hpp\&.
.SS "const size_t k\fC [protected]\fP"

.PP
Number of neighbors to search for\&. 
.PP
Definition at line 190 of file neighbor_search_rules\&.hpp\&.
.PP
Referenced by NeighborSearchRules< SortPolicy, MetricType, TreeType >::MinimumBaseCases()\&.
.SS "double lastBaseCase\fC [protected]\fP"

.PP
The last base case result\&. 
.PP
Definition at line 206 of file neighbor_search_rules\&.hpp\&.
.SS "size_t lastQueryIndex\fC [protected]\fP"

.PP
The last query point \fBBaseCase()\fP was called with\&. 
.PP
Definition at line 202 of file neighbor_search_rules\&.hpp\&.
.SS "size_t lastReferenceIndex\fC [protected]\fP"

.PP
The last reference point \fBBaseCase()\fP was called with\&. 
.PP
Definition at line 204 of file neighbor_search_rules\&.hpp\&.
.SS "MetricType& metric\fC [protected]\fP"

.PP
The instantiated metric\&. 
.PP
Definition at line 193 of file neighbor_search_rules\&.hpp\&.
.SS "const TreeType::Mat& querySet\fC [protected]\fP"

.PP
The query set\&. 
.PP
Definition at line 169 of file neighbor_search_rules\&.hpp\&.
.SS "const TreeType::Mat& referenceSet\fC [protected]\fP"

.PP
The reference set\&. 
.PP
Definition at line 166 of file neighbor_search_rules\&.hpp\&.
.SS "bool sameSet\fC [protected]\fP"

.PP
Denotes whether or not the reference and query sets are the same\&. 
.PP
Definition at line 196 of file neighbor_search_rules\&.hpp\&.
.SS "size_t scores\fC [protected]\fP"

.PP
The number of scores that have been performed\&. 
.PP
Definition at line 211 of file neighbor_search_rules\&.hpp\&.
.PP
Referenced by NeighborSearchRules< SortPolicy, MetricType, TreeType >::Scores()\&.
.SS "\fBTraversalInfoType\fP traversalInfo\fC [protected]\fP"

.PP
Traversal info for the parent combination; this is updated by the traversal before each call to \fBScore()\fP\&. 
.PP
Definition at line 215 of file neighbor_search_rules\&.hpp\&.
.PP
Referenced by NeighborSearchRules< SortPolicy, MetricType, TreeType >::TraversalInfo()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
