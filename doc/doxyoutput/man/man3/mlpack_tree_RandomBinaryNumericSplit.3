.TH "RandomBinaryNumericSplit< FitnessFunction >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RandomBinaryNumericSplit< FitnessFunction > \- The \fBRandomBinaryNumericSplit\fP is a splitting function for decision trees that will split based on a randomly selected point between the minimum and maximum value of the numerical dimension\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAuxiliarySplitInfo\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename ElemType > static size_t \fBCalculateDirection\fP (const ElemType &point, const arma::vec &classProbabilities, const \fBAuxiliarySplitInfo\fP &)"
.br
.RI "Given a point, calculate which child it should go to (left or right)\&. "
.ti -1c
.RI "static size_t \fBNumChildren\fP (const arma::vec &, const \fBAuxiliarySplitInfo\fP &)"
.br
.RI "Returns 2, since the binary split always has two children\&. "
.ti -1c
.RI "template<bool UseWeights, typename VecType , typename WeightVecType > static double \fBSplitIfBetter\fP (const double bestGain, const VecType &data, const arma::Row< size_t > &labels, const size_t numClasses, const WeightVecType &weights, const size_t minimumLeafSize, const double minimumGainSplit, arma::vec &classProbabilities, \fBAuxiliarySplitInfo\fP &aux, const bool splitIfBetterGain=false)"
.br
.RI "Check if we can split a node\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename FitnessFunction>
.br
class mlpack::tree::RandomBinaryNumericSplit< FitnessFunction >"
The \fBRandomBinaryNumericSplit\fP is a splitting function for decision trees that will split based on a randomly selected point between the minimum and maximum value of the numerical dimension\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIFitnessFunction\fP Fitness function to use to calculate gain\&. 
.RE
.PP

.PP
Definition at line 28 of file random_binary_numeric_split\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "static size_t CalculateDirection (const ElemType & point, const arma::vec & classProbabilities, const \fBAuxiliarySplitInfo\fP &)\fC [static]\fP"

.PP
Given a point, calculate which child it should go to (left or right)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to calculate direction of\&. 
.br
\fIclassProbabilities\fP Auxiliary information for the split\&. 
.br
\fI*\fP (aux) Auxiliary information for the split (Unused)\&. 
.RE
.PP

.PP
Referenced by RandomBinaryNumericSplit< FitnessFunction >::NumChildren()\&.
.SS "static size_t NumChildren (const arma::vec &, const \fBAuxiliarySplitInfo\fP &)\fC [inline]\fP, \fC [static]\fP"

.PP
Returns 2, since the binary split always has two children\&. 
.PP
\fBParameters:\fP
.RS 4
\fIclassProbabilities\fP Class probabilities vector, which may be filled with split information a successful split\&. (Not used here\&.) 
.br
\fIaux\fP Auxiliary split information, which may be modified on a successful split\&. (Not used here\&.) 
.RE
.PP

.PP
Definition at line 98 of file random_binary_numeric_split\&.hpp\&.
.PP
References RandomBinaryNumericSplit< FitnessFunction >::CalculateDirection()\&.
.SS "static double SplitIfBetter (const double bestGain, const VecType & data, const arma::Row< size_t > & labels, const size_t numClasses, const WeightVecType & weights, const size_t minimumLeafSize, const double minimumGainSplit, arma::vec & classProbabilities, \fBAuxiliarySplitInfo\fP & aux, const bool splitIfBetterGain = \fCfalse\fP)\fC [static]\fP"

.PP
Check if we can split a node\&. If we can split a node in a way that improves on 'bestGain', then we return the improved gain\&. Otherwise we return the value 'bestGain'\&. If a split is made, then classProbabilities and aux may be modified\&.
.PP
.PP
.nf
@article{10\&.1007/s10994-006-6226-1,
  author = {Geurts, Pierre and Ernst, Damien and Wehenkel, Louis},
  title = {Extremely Randomized Trees},
  year = {2006},
  issue_date = {April 2006},
  publisher = {Kluwer Academic Publishers},
  address = {USA},
  volume = {63},
  number = {1},
  issn = {0885-6125},
  url = {https://doi\&.org/10\&.1007/s10994-006-6226-1},
  doi = {10\&.1007/s10994-006-6226-1},
  journal = {Mach\&. Learn\&.},
  month = apr,
  pages = {3â€“42},
  numpages = {40},
}
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIbestGain\fP Best gain seen so far (we'll only split if we find gain better than this)\&. 
.br
\fIdata\fP The dimension of data points to check for a split in\&. 
.br
\fIlabels\fP Labels for each point\&. 
.br
\fInumClasses\fP Number of classes in the dataset\&. 
.br
\fIweights\fP Weights associated with labels\&. 
.br
\fIminimumLeafSize\fP Minimum number of points in a leaf node for splitting\&. 
.br
\fIminimumGainSplit\fP Minimum gain split\&. 
.br
\fIclassProbabilities\fP Class probabilities vector, which may be filled with split information a successful split\&. 
.br
\fIaux\fP Auxiliary split information, which may be modified on a successful split\&. 
.br
\fIsplitIfBetterGain\fP When set to true, it will split only when gain is better than the current best gain\&. Otherwise, it always makes a split regardless of gain\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
