.TH "RSModel" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RSModel \- The \fBRSModel\fP class provides an abstraction for the \fBRangeSearch\fP class, abstracting away the TreeType parameter and allowing it to be specified at runtime\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBTreeTypes\fP { \fBKD_TREE\fP, \fBCOVER_TREE\fP, \fBR_TREE\fP, \fBR_STAR_TREE\fP, \fBBALL_TREE\fP, \fBX_TREE\fP, \fBHILBERT_R_TREE\fP, \fBR_PLUS_TREE\fP, \fBR_PLUS_PLUS_TREE\fP, \fBVP_TREE\fP, \fBRP_TREE\fP, \fBMAX_RP_TREE\fP, \fBUB_TREE\fP, \fBOCTREE\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRSModel\fP (const \fBTreeTypes\fP treeType=TreeTypes::KD_TREE, const bool randomBasis=false)"
.br
.RI "Initialize the \fBRSModel\fP with the given type and whether or not a random basis should be used\&. "
.ti -1c
.RI "\fBRSModel\fP (const \fBRSModel\fP &other)"
.br
.RI "Copy the given \fBRSModel\fP\&. "
.ti -1c
.RI "\fBRSModel\fP (\fBRSModel\fP &&other)"
.br
.RI "Take ownership of the given \fBRSModel\fP\&. "
.ti -1c
.RI "\fB~RSModel\fP ()"
.br
.RI "Clean memory, if necessary\&. "
.ti -1c
.RI "void \fBBuildModel\fP (\fButil::Timers\fP &timers, arma::mat &&referenceSet, const size_t leafSize, const bool naive, const bool singleMode)"
.br
.RI "Build the reference tree on the given dataset with the given parameters\&. "
.ti -1c
.RI "const arma::mat & \fBDataset\fP () const"
.br
.RI "Expose the dataset\&. "
.ti -1c
.RI "void \fBInitializeModel\fP (const bool naive, const bool singleMode)"
.br
.RI "Allocate the memory for the range search model\&. "
.ti -1c
.RI "size_t \fBLeafSize\fP () const"
.br
.RI "Get the leaf size (applicable to everything but the cover tree)\&. "
.ti -1c
.RI "size_t & \fBLeafSize\fP ()"
.br
.RI "Modify the leaf size (applicable to everything but the cover tree)\&. "
.ti -1c
.RI "bool \fBNaive\fP () const"
.br
.RI "Get whether the model is in naive search mode\&. "
.ti -1c
.RI "bool & \fBNaive\fP ()"
.br
.RI "Modify whether the model is in naive search mode\&. "
.ti -1c
.RI "\fBRSModel\fP & \fBoperator=\fP (const \fBRSModel\fP &other)"
.br
.RI "Copy the given \fBRSModel\fP\&. "
.ti -1c
.RI "\fBRSModel\fP & \fBoperator=\fP (\fBRSModel\fP &&other)"
.br
.RI "Take ownership of the given \fBRSModel\fP's data\&. "
.ti -1c
.RI "bool \fBRandomBasis\fP () const"
.br
.RI "Get whether a random basis is used\&. "
.ti -1c
.RI "bool & \fBRandomBasis\fP ()"
.br
.RI "Modify whether a random basis is used (don't do this after the model has been built)\&. "
.ti -1c
.RI "void \fBSearch\fP (\fButil::Timers\fP &timers, arma::mat &&querySet, const math::Range &range, std::vector< std::vector< size_t >> &neighbors, std::vector< std::vector< double >> &distances)"
.br
.RI "Perform range search\&. "
.ti -1c
.RI "void \fBSearch\fP (\fButil::Timers\fP &timers, const math::Range &range, std::vector< std::vector< size_t >> &neighbors, std::vector< std::vector< double >> &distances)"
.br
.RI "Perform monochromatic range search, with the reference set as the query set\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the range search model\&. "
.ti -1c
.RI "bool \fBSingleMode\fP () const"
.br
.RI "Get whether the model is in single-tree search mode\&. "
.ti -1c
.RI "bool & \fBSingleMode\fP ()"
.br
.RI "Modify whether the model is in single-tree search mode\&. "
.ti -1c
.RI "\fBTreeTypes\fP \fBTreeType\fP () const"
.br
.RI "Get the type of tree\&. "
.ti -1c
.RI "\fBTreeTypes\fP & \fBTreeType\fP ()"
.br
.RI "Modify the type of tree (don't do this after the model has been built)\&. "
.in -1c
.SH "Detailed Description"
.PP 
The \fBRSModel\fP class provides an abstraction for the \fBRangeSearch\fP class, abstracting away the TreeType parameter and allowing it to be specified at runtime\&. 

This class is written for the sake of the \fCrange_search\fP binding, but is not necessarily restricted to that usage\&. 
.PP
Definition at line 214 of file rs_model\&.hpp\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBTreeTypes\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIKD_TREE \fP\fP
.TP
\fB\fICOVER_TREE \fP\fP
.TP
\fB\fIR_TREE \fP\fP
.TP
\fB\fIR_STAR_TREE \fP\fP
.TP
\fB\fIBALL_TREE \fP\fP
.TP
\fB\fIX_TREE \fP\fP
.TP
\fB\fIHILBERT_R_TREE \fP\fP
.TP
\fB\fIR_PLUS_TREE \fP\fP
.TP
\fB\fIR_PLUS_PLUS_TREE \fP\fP
.TP
\fB\fIVP_TREE \fP\fP
.TP
\fB\fIRP_TREE \fP\fP
.TP
\fB\fIMAX_RP_TREE \fP\fP
.TP
\fB\fIUB_TREE \fP\fP
.TP
\fB\fIOCTREE \fP\fP
.PP
Definition at line 217 of file rs_model\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBRSModel\fP (const \fBTreeTypes\fP treeType = \fCTreeTypes::KD_TREE\fP, const bool randomBasis = \fCfalse\fP)"

.PP
Initialize the \fBRSModel\fP with the given type and whether or not a random basis should be used\&. 
.PP
\fBParameters:\fP
.RS 4
\fItreeType\fP Type of tree to use\&. 
.br
\fIrandomBasis\fP Whether or not to use a random basis\&. 
.RE
.PP

.SS "\fBRSModel\fP (const \fBRSModel\fP & other)"

.PP
Copy the given \fBRSModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRSModel\fP to copy\&. 
.RE
.PP

.SS "\fBRSModel\fP (\fBRSModel\fP && other)"

.PP
Take ownership of the given \fBRSModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRSModel\fP to take ownership of\&. 
.RE
.PP

.SS "~\fBRSModel\fP ()"

.PP
Clean memory, if necessary\&. 
.SH "Member Function Documentation"
.PP 
.SS "void BuildModel (\fButil::Timers\fP & timers, arma::mat && referenceSet, const size_t leafSize, const bool naive, const bool singleMode)"

.PP
Build the reference tree on the given dataset with the given parameters\&. This takes possession of the reference set to avoid a copy\&.
.PP
\fBParameters:\fP
.RS 4
\fIreferenceSet\fP Set of reference points\&. 
.br
\fIleafSize\fP Leaf size of tree (ignored for the cover tree)\&. 
.br
\fInaive\fP Whether naive search should be used\&. 
.br
\fIsingleMode\fP Whether single-tree search should be used\&. 
.RE
.PP

.SS "const arma::mat& Dataset () const\fC [inline]\fP"

.PP
Expose the dataset\&. 
.PP
Definition at line 283 of file rs_model\&.hpp\&.
.SS "void InitializeModel (const bool naive, const bool singleMode)"

.PP
Allocate the memory for the range search model\&. 
.SS "size_t LeafSize () const\fC [inline]\fP"

.PP
Get the leaf size (applicable to everything but the cover tree)\&. 
.PP
Definition at line 296 of file rs_model\&.hpp\&.
.SS "size_t& LeafSize ()\fC [inline]\fP"

.PP
Modify the leaf size (applicable to everything but the cover tree)\&. 
.PP
Definition at line 298 of file rs_model\&.hpp\&.
.SS "bool Naive () const\fC [inline]\fP"

.PP
Get whether the model is in naive search mode\&. 
.PP
Definition at line 291 of file rs_model\&.hpp\&.
.SS "bool& Naive ()\fC [inline]\fP"

.PP
Modify whether the model is in naive search mode\&. 
.PP
Definition at line 293 of file rs_model\&.hpp\&.
.SS "\fBRSModel\fP& operator= (const \fBRSModel\fP & other)"

.PP
Copy the given \fBRSModel\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRSModel\fP to copy\&. 
.RE
.PP

.SS "\fBRSModel\fP& operator= (\fBRSModel\fP && other)"

.PP
Take ownership of the given \fBRSModel\fP's data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBRSModel\fP to copy\&. 
.RE
.PP

.SS "bool RandomBasis () const\fC [inline]\fP"

.PP
Get whether a random basis is used\&. 
.PP
Definition at line 306 of file rs_model\&.hpp\&.
.SS "bool& RandomBasis ()\fC [inline]\fP"

.PP
Modify whether a random basis is used (don't do this after the model has been built)\&. 
.PP
Definition at line 309 of file rs_model\&.hpp\&.
.PP
References RSWrapperBase::Search()\&.
.SS "void Search (\fButil::Timers\fP & timers, arma::mat && querySet, const math::Range & range, std::vector< std::vector< size_t >> & neighbors, std::vector< std::vector< double >> & distances)"

.PP
Perform range search\&. This takes possession of the query set, so the query set will not be usable after the search\&. For more information on the output format, see \fBRangeSearch<>::Search()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIquerySet\fP Set of query points\&. 
.br
\fIrange\fP Range to search for\&. 
.br
\fIneighbors\fP Output: neighbors falling within the desired range\&. 
.br
\fIdistances\fP Output: distances of neighbors\&. 
.RE
.PP

.SS "void Search (\fButil::Timers\fP & timers, const math::Range & range, std::vector< std::vector< size_t >> & neighbors, std::vector< std::vector< double >> & distances)"

.PP
Perform monochromatic range search, with the reference set as the query set\&. For more information on the output format, see \fBRangeSearch<>::Search()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIrange\fP Range to search for\&. 
.br
\fIneighbors\fP Output: neighbors falling within the desired range\&. 
.br
\fIdistances\fP Output: distances of neighbors\&. 
.RE
.PP

.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the range search model\&. 
.SS "bool SingleMode () const\fC [inline]\fP"

.PP
Get whether the model is in single-tree search mode\&. 
.PP
Definition at line 286 of file rs_model\&.hpp\&.
.SS "bool& SingleMode ()\fC [inline]\fP"

.PP
Modify whether the model is in single-tree search mode\&. 
.PP
Definition at line 288 of file rs_model\&.hpp\&.
.SS "\fBTreeTypes\fP TreeType () const\fC [inline]\fP"

.PP
Get the type of tree\&. 
.PP
Definition at line 301 of file rs_model\&.hpp\&.
.SS "\fBTreeTypes\fP& TreeType ()\fC [inline]\fP"

.PP
Modify the type of tree (don't do this after the model has been built)\&. 
.PP
Definition at line 303 of file rs_model\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
