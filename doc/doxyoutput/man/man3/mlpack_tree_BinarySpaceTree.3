.TH "BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType > \- A binary space partitioning tree, such as a KD-tree or a ball tree\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBreadthFirstDualTreeTraverser\fP"
.br
.ti -1c
.RI "class \fBDualTreeTraverser\fP"
.br
.RI "A dual-tree traverser for binary space trees; see dual_tree_traverser\&.hpp\&. "
.ti -1c
.RI "class \fBSingleTreeTraverser\fP"
.br
.RI "A single-tree traverser for binary space trees; see single_tree_traverser\&.hpp for implementation\&. "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef MatType::elem_type \fBElemType\fP"
.br
.RI "The type of element held in MatType\&. "
.ti -1c
.RI "typedef MatType \fBMat\fP"
.br
.RI "So other classes can use TreeType::Mat\&. "
.ti -1c
.RI "typedef SplitType< BoundType< MetricType >, MatType > \fBSplit\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBinarySpaceTree\fP (const MatType &data, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of a binary space tree using the given dataset\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP (const MatType &data, std::vector< size_t > &oldFromNew, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of a binary space tree using the given dataset\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP (const MatType &data, std::vector< size_t > &oldFromNew, std::vector< size_t > &newFromOld, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of a binary space tree using the given dataset\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP (MatType &&data, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of a binary space tree using the given dataset\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP (MatType &&data, std::vector< size_t > &oldFromNew, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of a binary space tree using the given dataset\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP (MatType &&data, std::vector< size_t > &oldFromNew, std::vector< size_t > &newFromOld, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of a binary space tree using the given dataset\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP *parent, const size_t begin, const size_t count, SplitType< BoundType< MetricType >, MatType > &splitter, const size_t maxLeafSize=20)"
.br
.RI "Construct this node as a child of the given parent, starting at column begin and using count points\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP *parent, const size_t begin, const size_t count, std::vector< size_t > &oldFromNew, SplitType< BoundType< MetricType >, MatType > &splitter, const size_t maxLeafSize=20)"
.br
.RI "Construct this node as a child of the given parent, starting at column begin and using count points\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP *parent, const size_t begin, const size_t count, std::vector< size_t > &oldFromNew, std::vector< size_t > &newFromOld, SplitType< BoundType< MetricType >, MatType > &splitter, const size_t maxLeafSize=20)"
.br
.RI "Construct this node as a child of the given parent, starting at column begin and using count points\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP (const \fBBinarySpaceTree\fP &other)"
.br
.RI "Create a binary space tree by copying the other tree\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP &&other)"
.br
.RI "Move constructor for a \fBBinarySpaceTree\fP; possess all the members of the given tree\&. "
.ti -1c
.RI "template<typename Archive > \fBBinarySpaceTree\fP (Archive &ar, const typename \fBstd::enable_if_t\fP< \fBcereal::is_loading\fP< Archive >()> *=0)"
.br
.RI "Initialize the tree from a cereal archive\&. "
.ti -1c
.RI "\fB~BinarySpaceTree\fP ()"
.br
.RI "Deletes this node, deallocating the memory for the children and calling their destructors in turn\&. "
.ti -1c
.RI "size_t \fBBegin\fP () const"
.br
.RI "Return the index of the beginning point of this subset\&. "
.ti -1c
.RI "size_t & \fBBegin\fP ()"
.br
.RI "Modify the index of the beginning point of this subset\&. "
.ti -1c
.RI "const BoundType< MetricType > & \fBBound\fP () const"
.br
.RI "Return the bound object for this node\&. "
.ti -1c
.RI "BoundType< MetricType > & \fBBound\fP ()"
.br
.RI "Return the bound object for this node\&. "
.ti -1c
.RI "void \fBCenter\fP (arma::vec &center) const"
.br
.RI "Store the center of the bounding region in the given vector\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP & \fBChild\fP (const size_t child) const"
.br
.RI "Return the specified child (0 will be left, 1 will be right)\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP *& \fBChildPtr\fP (const size_t child)"
.br
.ti -1c
.RI "size_t \fBCount\fP () const"
.br
.RI "Return the number of points in this subset\&. "
.ti -1c
.RI "size_t & \fBCount\fP ()"
.br
.RI "Modify the number of points in this subset\&. "
.ti -1c
.RI "const MatType & \fBDataset\fP () const"
.br
.RI "Get the dataset which the tree is built on\&. "
.ti -1c
.RI "MatType & \fBDataset\fP ()"
.br
.RI "Modify the dataset which the tree is built on\&. Be careful! "
.ti -1c
.RI "size_t \fBDescendant\fP (const size_t index) const"
.br
.RI "Return the index (with reference to the dataset) of a particular descendant of this node\&. "
.ti -1c
.RI "\fBElemType\fP \fBFurthestDescendantDistance\fP () const"
.br
.RI "Return the furthest possible descendant distance\&. "
.ti -1c
.RI "\fBElemType\fP \fBFurthestPointDistance\fP () const"
.br
.RI "Return the furthest distance to a point held in this node\&. "
.ti -1c
.RI "template<typename VecType > size_t \fBGetFurthestChild\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0)"
.br
.RI "Return the index of the furthest child node to the given query point\&. "
.ti -1c
.RI "size_t \fBGetFurthestChild\fP (const \fBBinarySpaceTree\fP &queryNode)"
.br
.RI "Return the index of the furthest child node to the given query node\&. "
.ti -1c
.RI "template<typename VecType > size_t \fBGetNearestChild\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0)"
.br
.RI "Return the index of the nearest child node to the given query point\&. "
.ti -1c
.RI "size_t \fBGetNearestChild\fP (const \fBBinarySpaceTree\fP &queryNode)"
.br
.RI "Return the index of the nearest child node to the given query node\&. "
.ti -1c
.RI "bool \fBIsLeaf\fP () const"
.br
.RI "Return whether or not this node is a leaf (true if it has no children)\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP * \fBLeft\fP () const"
.br
.RI "Gets the left child of this node\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP *& \fBLeft\fP ()"
.br
.RI "Modify the left child of this node\&. "
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const \fBBinarySpaceTree\fP &other) const"
.br
.RI "Return the maximum distance to another node\&. "
.ti -1c
.RI "template<typename VecType > \fBElemType\fP \fBMaxDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Return the maximum distance to another point\&. "
.ti -1c
.RI "MetricType \fBMetric\fP () const"
.br
.RI "Get the metric that the tree uses\&. "
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const \fBBinarySpaceTree\fP &other) const"
.br
.RI "Return the minimum distance to another node\&. "
.ti -1c
.RI "template<typename VecType > \fBElemType\fP \fBMinDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Return the minimum distance to another point\&. "
.ti -1c
.RI "\fBElemType\fP \fBMinimumBoundDistance\fP () const"
.br
.RI "Return the minimum distance from the center of the node to any bound edge\&. "
.ti -1c
.RI "size_t \fBNumChildren\fP () const"
.br
.RI "Return the number of children in this node\&. "
.ti -1c
.RI "size_t \fBNumDescendants\fP () const"
.br
.RI "Return the number of descendants of this node\&. "
.ti -1c
.RI "size_t \fBNumPoints\fP () const"
.br
.RI "Return the number of points in this node (0 if not a leaf)\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP & \fBoperator=\fP (const \fBBinarySpaceTree\fP &other)"
.br
.RI "Copy the given BinarySaceTree\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP & \fBoperator=\fP (\fBBinarySpaceTree\fP &&other)"
.br
.RI "Take ownership of the given \fBBinarySpaceTree\fP\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP * \fBParent\fP () const"
.br
.RI "Gets the parent of this node\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP *& \fBParent\fP ()"
.br
.RI "Modify the parent of this node\&. "
.ti -1c
.RI "\fBElemType\fP \fBParentDistance\fP () const"
.br
.RI "Return the distance from the center of this node to the center of the parent node\&. "
.ti -1c
.RI "\fBElemType\fP & \fBParentDistance\fP ()"
.br
.RI "Modify the distance from the center of this node to the center of the parent node\&. "
.ti -1c
.RI "size_t \fBPoint\fP (const size_t index) const"
.br
.RI "Return the index (with reference to the dataset) of a particular point in this node\&. "
.ti -1c
.RI "math::RangeType< \fBElemType\fP > \fBRangeDistance\fP (const \fBBinarySpaceTree\fP &other) const"
.br
.RI "Return the minimum and maximum distance to another node\&. "
.ti -1c
.RI "template<typename VecType > math::RangeType< \fBElemType\fP > \fBRangeDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Return the minimum and maximum distance to another point\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP * \fBRight\fP () const"
.br
.RI "Gets the right child of this node\&. "
.ti -1c
.RI "\fBBinarySpaceTree\fP *& \fBRight\fP ()"
.br
.RI "Modify the right child of this node\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t version)"
.br
.RI "Serialize the tree\&. "
.ti -1c
.RI "const StatisticType & \fBStat\fP () const"
.br
.RI "Return the statistic object for this node\&. "
.ti -1c
.RI "StatisticType & \fBStat\fP ()"
.br
.RI "Return the statistic object for this node\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBBinarySpaceTree\fP ()"
.br
.RI "A default constructor\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType, typename StatisticType = EmptyStatistic, typename MatType = arma::mat, template< typename BoundMetricType, typename\&.\&.\&. > class BoundType = bound::HRectBound, template< typename SplitBoundType, typename SplitMatType > class SplitType = MidpointSplit>
.br
class mlpack::tree::BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >"
A binary space partitioning tree, such as a KD-tree or a ball tree\&. 

Once the bound and type of dataset is defined, the tree will construct itself\&. Call the constructor with the dataset to build the tree on, and the entire tree will be built\&.
.PP
This particular tree does not allow growth, so you cannot add or delete nodes from it\&. If you need to add or delete a node, the better procedure is to rebuild the tree entirely\&.
.PP
This tree does take one runtime parameter in the constructor, which is the max leaf size to be used\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMetricType\fP The metric used for tree-building\&. The BoundType may place restrictions on the metrics that can be used\&. 
.br
\fIStatisticType\fP Extra data contained in the node\&. See \fBstatistic\&.hpp\fP for the necessary skeleton interface\&. 
.br
\fIMatType\fP The dataset class\&. 
.br
\fIBoundType\fP The bound used for each node\&. HRectBound, the default, requires that an LMetric<> is used for MetricType (so, EuclideanDistance, ManhattanDistance, etc\&.)\&. 
.br
\fISplitType\fP The class that partitions the dataset/points at a particular node into two parts\&. Its definition decides the way this split is done\&. 
.RE
.PP

.PP
Definition at line 54 of file binary_space_tree\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef MatType::elem_type \fBElemType\fP"

.PP
The type of element held in MatType\&. 
.PP
Definition at line 60 of file binary_space_tree\&.hpp\&.
.SS "typedef MatType \fBMat\fP"

.PP
So other classes can use TreeType::Mat\&. 
.PP
Definition at line 58 of file binary_space_tree\&.hpp\&.
.SS "typedef SplitType<BoundType<MetricType>, MatType> \fBSplit\fP"

.PP
Definition at line 62 of file binary_space_tree\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBBinarySpaceTree\fP (const MatType & data, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will copy the input matrix; if you don't want this, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP (const MatType & data, std::vector< size_t > & oldFromNew, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will copy the input matrix and modify its ordering; a mapping of the old point indices to the new point indices is filled\&. If you don't want the matrix to be copied, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP (const MatType & data, std::vector< size_t > & oldFromNew, std::vector< size_t > & newFromOld, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will copy the input matrix and modify its ordering; a mapping of the old point indices to the new point indices is filled, as well as a mapping of the new point indices to the old point indices\&. If you don't want the matrix to be copied, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fInewFromOld\fP Vector which will be filled with the new positions for each old point\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP (MatType && data, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will take ownership of the data matrix; if you don't want this, consider using the constructor that takes a const reference to a dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP (MatType && data, std::vector< size_t > & oldFromNew, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will take ownership of the data matrix; a mapping of the old point indices to the new point indices is filled\&. If you don't want the matrix to have its ownership taken, consider using the constructor that takes a const reference to a dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP (MatType && data, std::vector< size_t > & oldFromNew, std::vector< size_t > & newFromOld, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of a binary space tree using the given dataset\&. This will take ownership of the data matrix; a mapping of the old point indices to the new point indices is filled, as well as a mapping of the new point indices to the old point indices\&. If you don't want the matrix to have its ownership taken, consider using the constructor that takes a const reference to a dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fInewFromOld\fP Vector which will be filled with the new positions for each old point\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > * parent, const size_t begin, const size_t count, SplitType< BoundType< MetricType >, MatType > & splitter, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this node as a child of the given parent, starting at column begin and using count points\&. The ordering of that subset of points in the parent's data matrix will be modified! This is used for recursive tree-building by the other constructors which don't specify point indices\&.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent of this node\&. Its dataset will be modified! 
.br
\fIbegin\fP Index of point to start tree construction with\&. 
.br
\fIcount\fP Number of points to use to construct tree\&. 
.br
\fIsplitter\fP Instantiated node splitter object\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > * parent, const size_t begin, const size_t count, std::vector< size_t > & oldFromNew, SplitType< BoundType< MetricType >, MatType > & splitter, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this node as a child of the given parent, starting at column begin and using count points\&. The ordering of that subset of points in the parent's data matrix will be modified! This is used for recursive tree-building by the other constructors which don't specify point indices\&.
.PP
A mapping of the old point indices to the new point indices is filled, but it is expected that the vector is already allocated with size greater than or equal to (begin + count), and if that is not true, invalid memory reads (and writes) will occur\&.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent of this node\&. Its dataset will be modified! 
.br
\fIbegin\fP Index of point to start tree construction with\&. 
.br
\fIcount\fP Number of points to use to construct tree\&. 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fIsplitter\fP Instantiated node splitter object\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > * parent, const size_t begin, const size_t count, std::vector< size_t > & oldFromNew, std::vector< size_t > & newFromOld, SplitType< BoundType< MetricType >, MatType > & splitter, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this node as a child of the given parent, starting at column begin and using count points\&. The ordering of that subset of points in the parent's data matrix will be modified! This is used for recursive tree-building by the other constructors which don't specify point indices\&.
.PP
A mapping of the old point indices to the new point indices is filled, as well as a mapping of the new point indices to the old point indices\&. It is expected that the vector is already allocated with size greater than or equal to (begin_in + count_in), and if that is not true, invalid memory reads (and writes) will occur\&.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent of this node\&. Its dataset will be modified! 
.br
\fIbegin\fP Index of point to start tree construction with\&. 
.br
\fIcount\fP Number of points to use to construct tree\&. 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fInewFromOld\fP Vector which will be filled with the new positions for each old point\&. 
.br
\fIsplitter\fP Splitter matrix to use\&. 
.br
\fImaxLeafSize\fP Size of each leaf in the tree\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & other)"

.PP
Create a binary space tree by copying the other tree\&. Be careful! This can take a long time and use a lot of memory\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Tree to be copied\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP (\fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > && other)"

.PP
Move constructor for a \fBBinarySpaceTree\fP; possess all the members of the given tree\&. 
.SS "\fBBinarySpaceTree\fP (Archive & ar, const typename \fBstd::enable_if_t\fP< \fBcereal::is_loading\fP< Archive >()> * = \fC0\fP)"

.PP
Initialize the tree from a cereal archive\&. 
.PP
\fBParameters:\fP
.RS 4
\fIar\fP Archive to load tree from\&. Must be an iarchive, not an oarchive\&. 
.RE
.PP

.SS "~\fBBinarySpaceTree\fP ()"

.PP
Deletes this node, deallocating the memory for the children and calling their destructors in turn\&. This will invalidate any pointers or references to any nodes which are children of this one\&. 
.SS "\fBBinarySpaceTree\fP ()\fC [protected]\fP"

.PP
A default constructor\&. This is meant to only be used with cereal, which is allowed with the friend declaration below\&. This does not return a valid tree! The method must be protected, so that the serialization shim can work with the default constructor\&. 
.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Center()\&.
.SH "Member Function Documentation"
.PP 
.SS "size_t Begin () const\fC [inline]\fP"

.PP
Return the index of the beginning point of this subset\&. 
.PP
Definition at line 498 of file binary_space_tree\&.hpp\&.
.SS "size_t& Begin ()\fC [inline]\fP"

.PP
Modify the index of the beginning point of this subset\&. 
.PP
Definition at line 500 of file binary_space_tree\&.hpp\&.
.SS "const BoundType<MetricType>& Bound () const\fC [inline]\fP"

.PP
Return the bound object for this node\&. 
.PP
Definition at line 319 of file binary_space_tree\&.hpp\&.
.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::MaxDistance(), BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::MinDistance(), and BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::RangeDistance()\&.
.SS "BoundType<MetricType>& Bound ()\fC [inline]\fP"

.PP
Return the bound object for this node\&. 
.PP
Definition at line 321 of file binary_space_tree\&.hpp\&.
.SS "void Center (arma::vec & center) const\fC [inline]\fP"

.PP
Store the center of the bounding region in the given vector\&. 
.PP
Definition at line 508 of file binary_space_tree\&.hpp\&.
.PP
References BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::BinarySpaceTree()\&.
.SS "\fBBinarySpaceTree\fP& Child (const size_t child) const"

.PP
Return the specified child (0 will be left, 1 will be right)\&. If the index is greater than 1, this will return the right child\&.
.PP
\fBParameters:\fP
.RS 4
\fIchild\fP Index of child to return\&. 
.RE
.PP

.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ParentDistance()\&.
.SS "\fBBinarySpaceTree\fP*& ChildPtr (const size_t child)\fC [inline]\fP"

.PP
Definition at line 420 of file binary_space_tree\&.hpp\&.
.PP
References BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Descendant(), BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::NumDescendants(), BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::NumPoints(), and BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Point()\&.
.SS "size_t Count () const\fC [inline]\fP"

.PP
Return the number of points in this subset\&. 
.PP
Definition at line 503 of file binary_space_tree\&.hpp\&.
.SS "size_t& Count ()\fC [inline]\fP"

.PP
Modify the number of points in this subset\&. 
.PP
Definition at line 505 of file binary_space_tree\&.hpp\&.
.SS "const MatType& Dataset () const\fC [inline]\fP"

.PP
Get the dataset which the tree is built on\&. 
.PP
Definition at line 347 of file binary_space_tree\&.hpp\&.
.SS "MatType& Dataset ()\fC [inline]\fP"

.PP
Modify the dataset which the tree is built on\&. Be careful! 
.PP
Definition at line 349 of file binary_space_tree\&.hpp\&.
.SS "size_t Descendant (const size_t index) const"

.PP
Return the index (with reference to the dataset) of a particular descendant of this node\&. The index should be greater than zero but less than the number of descendants\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Index of the descendant\&. 
.RE
.PP

.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ChildPtr()\&.
.SS "\fBElemType\fP FurthestDescendantDistance () const"

.PP
Return the furthest possible descendant distance\&. This returns the maximum distance from the centroid to the edge of the bound and not the empirical quantity which is the actual furthest descendant distance\&. So the actual furthest descendant distance may be less than what this method returns (but it will never be greater than this)\&. 
.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "\fBElemType\fP FurthestPointDistance () const"

.PP
Return the furthest distance to a point held in this node\&. If this is not a leaf node, then the distance is 0 because the node holds no points\&. 
.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "size_t GetFurthestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP)"

.PP
Return the index of the furthest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "size_t GetFurthestChild (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & queryNode)"

.PP
Return the index of the furthest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "size_t GetNearestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP)"

.PP
Return the index of the nearest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "size_t GetNearestChild (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & queryNode)"

.PP
Return the index of the nearest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "bool IsLeaf () const"

.PP
Return whether or not this node is a leaf (true if it has no children)\&. 
.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Stat()\&.
.SS "\fBBinarySpaceTree\fP* Left () const\fC [inline]\fP"

.PP
Gets the left child of this node\&. 
.PP
Definition at line 332 of file binary_space_tree\&.hpp\&.
.SS "\fBBinarySpaceTree\fP*& Left ()\fC [inline]\fP"

.PP
Modify the left child of this node\&. 
.PP
Definition at line 334 of file binary_space_tree\&.hpp\&.
.SS "\fBElemType\fP MaxDistance (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & other) const\fC [inline]\fP"

.PP
Return the maximum distance to another node\&. 
.PP
Definition at line 459 of file binary_space_tree\&.hpp\&.
.PP
References BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Bound()\&.
.SS "\fBElemType\fP MaxDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Return the maximum distance to another point\&. 
.PP
Definition at line 481 of file binary_space_tree\&.hpp\&.
.SS "MetricType Metric () const\fC [inline]\fP"

.PP
Get the metric that the tree uses\&. 
.PP
Definition at line 352 of file binary_space_tree\&.hpp\&.
.PP
References BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::FurthestDescendantDistance(), BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::FurthestPointDistance(), BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::GetFurthestChild(), BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::GetNearestChild(), BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::MinimumBoundDistance(), and BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::NumChildren()\&.
.SS "\fBElemType\fP MinDistance (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & other) const\fC [inline]\fP"

.PP
Return the minimum distance to another node\&. 
.PP
Definition at line 453 of file binary_space_tree\&.hpp\&.
.PP
References BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Bound()\&.
.SS "\fBElemType\fP MinDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Return the minimum distance to another point\&. 
.PP
Definition at line 472 of file binary_space_tree\&.hpp\&.
.SS "\fBElemType\fP MinimumBoundDistance () const"

.PP
Return the minimum distance from the center of the node to any bound edge\&. 
.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "size_t NumChildren () const"

.PP
Return the number of children in this node\&. 
.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Metric()\&.
.SS "size_t NumDescendants () const"

.PP
Return the number of descendants of this node\&. For a non-leaf in a binary space tree, this is the number of points at the descendant leaves\&. For a leaf, this is the number of points in the leaf\&. 
.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ChildPtr()\&.
.SS "size_t NumPoints () const"

.PP
Return the number of points in this node (0 if not a leaf)\&. 
.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ChildPtr()\&.
.SS "\fBBinarySpaceTree\fP& operator= (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & other)"

.PP
Copy the given BinarySaceTree\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The tree to be copied\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP& operator= (\fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > && other)"

.PP
Take ownership of the given \fBBinarySpaceTree\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The tree to take ownership of\&. 
.RE
.PP

.SS "\fBBinarySpaceTree\fP* Parent () const\fC [inline]\fP"

.PP
Gets the parent of this node\&. 
.PP
Definition at line 342 of file binary_space_tree\&.hpp\&.
.SS "\fBBinarySpaceTree\fP*& Parent ()\fC [inline]\fP"

.PP
Modify the parent of this node\&. 
.PP
Definition at line 344 of file binary_space_tree\&.hpp\&.
.SS "\fBElemType\fP ParentDistance () const\fC [inline]\fP"

.PP
Return the distance from the center of this node to the center of the parent node\&. 
.PP
Definition at line 407 of file binary_space_tree\&.hpp\&.
.SS "\fBElemType\fP& ParentDistance ()\fC [inline]\fP"

.PP
Modify the distance from the center of this node to the center of the parent node\&. 
.PP
Definition at line 410 of file binary_space_tree\&.hpp\&.
.PP
References BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Child()\&.
.SS "size_t Point (const size_t index) const"

.PP
Return the index (with reference to the dataset) of a particular point in this node\&. This will happily return invalid indices if the given index is greater than the number of points in this node (obtained with \fBNumPoints()\fP) -- be careful\&.
.PP
\fBParameters:\fP
.RS 4
\fIindex\fP Index of point for which a dataset index is wanted\&. 
.RE
.PP

.PP
Referenced by BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::ChildPtr()\&.
.SS "math::RangeType<\fBElemType\fP> RangeDistance (const \fBBinarySpaceTree\fP< MetricType, StatisticType, MatType, BoundType, SplitType > & other) const\fC [inline]\fP"

.PP
Return the minimum and maximum distance to another node\&. 
.PP
Definition at line 465 of file binary_space_tree\&.hpp\&.
.PP
References BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::Bound()\&.
.SS "math::RangeType<\fBElemType\fP> RangeDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Return the minimum and maximum distance to another point\&. 
.PP
Definition at line 491 of file binary_space_tree\&.hpp\&.
.SS "\fBBinarySpaceTree\fP* Right () const\fC [inline]\fP"

.PP
Gets the right child of this node\&. 
.PP
Definition at line 337 of file binary_space_tree\&.hpp\&.
.SS "\fBBinarySpaceTree\fP*& Right ()\fC [inline]\fP"

.PP
Modify the right child of this node\&. 
.PP
Definition at line 339 of file binary_space_tree\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t version)"

.PP
Serialize the tree\&. 
.SS "const StatisticType& Stat () const\fC [inline]\fP"

.PP
Return the statistic object for this node\&. 
.PP
Definition at line 324 of file binary_space_tree\&.hpp\&.
.SS "StatisticType& Stat ()\fC [inline]\fP"

.PP
Return the statistic object for this node\&. 
.PP
Definition at line 326 of file binary_space_tree\&.hpp\&.
.PP
References BinarySpaceTree< MetricType, StatisticType, MatType, BoundType, SplitType >::IsLeaf()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
