.TH "HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef TreeType::ElemType \fBElemType\fP"
.br
.RI "The element type held by the tree\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHilbertRTreeAuxiliaryInformation\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBHilbertRTreeAuxiliaryInformation\fP (const TreeType *node)"
.br
.RI "Construct this as an auxiliary information for the given node\&. "
.ti -1c
.RI "\fBHilbertRTreeAuxiliaryInformation\fP (const \fBHilbertRTreeAuxiliaryInformation\fP &other, TreeType *tree=NULL, bool deepCopy=true)"
.br
.RI "Create an auxiliary information object by copying from another object\&. "
.ti -1c
.RI "\fBHilbertRTreeAuxiliaryInformation\fP (\fBHilbertRTreeAuxiliaryInformation\fP &&other)"
.br
.RI "Create an auxiliary information object by moving from the other node\&. "
.ti -1c
.RI "bool \fBHandleNodeInsertion\fP (TreeType *node, TreeType *nodeToInsert, bool insertionLevel)"
.br
.RI "The Hilbert R tree requires to insert nodes according to their Hilbert value\&. "
.ti -1c
.RI "bool \fBHandleNodeRemoval\fP (TreeType *node, const size_t nodeIndex)"
.br
.RI "The Hilbert R tree requires all nodes to be arranged according to their Hilbert value\&. "
.ti -1c
.RI "bool \fBHandlePointDeletion\fP (TreeType *node, const size_t localIndex)"
.br
.RI "The Hilbert R tree requires all points to be arranged according to their Hilbert value\&. "
.ti -1c
.RI "bool \fBHandlePointInsertion\fP (TreeType *node, const size_t point)"
.br
.RI "The Hilbert R tree requires to insert points according to their Hilbert value\&. "
.ti -1c
.RI "const HilbertValueType< \fBElemType\fP > & \fBHilbertValue\fP () const"
.br
.RI "Return the largest Hilbert value of a point covered by the node\&. "
.ti -1c
.RI "HilbertValueType< \fBElemType\fP > & \fBHilbertValue\fP ()"
.br
.RI "Modify the largest Hilbert value of a point covered by the node\&. "
.ti -1c
.RI "void \fBNullifyData\fP ()"
.br
.RI "Clear memory\&. "
.ti -1c
.RI "\fBHilbertRTreeAuxiliaryInformation\fP & \fBoperator=\fP (const \fBHilbertRTreeAuxiliaryInformation\fP &other)"
.br
.RI "Copy the auxiliary information\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the information\&. "
.ti -1c
.RI "bool \fBUpdateAuxiliaryInfo\fP (TreeType *node)"
.br
.RI "Update the auxiliary information in the node\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const std::vector< TreeType * > \fBChildren\fP (const TreeType *tree)"
.br
.RI "Return the children vector of the tree\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename TreeType, template< typename > class HilbertValueType>
.br
class mlpack::tree::HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >"

.PP
Definition at line 22 of file hilbert_r_tree_auxiliary_information\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef TreeType::ElemType \fBElemType\fP"

.PP
The element type held by the tree\&. 
.PP
Definition at line 26 of file hilbert_r_tree_auxiliary_information\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBHilbertRTreeAuxiliaryInformation\fP ()"

.PP
Default constructor\&. 
.SS "\fBHilbertRTreeAuxiliaryInformation\fP (const TreeType * node)"

.PP
Construct this as an auxiliary information for the given node\&. 
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node that stores this auxiliary information\&. 
.RE
.PP

.SS "\fBHilbertRTreeAuxiliaryInformation\fP (const \fBHilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType > & other, TreeType * tree = \fCNULL\fP, bool deepCopy = \fCtrue\fP)"

.PP
Create an auxiliary information object by copying from another object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Another auxiliary information object from which the information will be copied\&. 
.br
\fItree\fP The node that holds the auxiliary information\&. 
.br
\fIdeepCopy\fP If false, the new object uses the same memory (not used here)\&. 
.RE
.PP

.SS "\fBHilbertRTreeAuxiliaryInformation\fP (\fBHilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType > && other)"

.PP
Create an auxiliary information object by moving from the other node\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The object from which the information will be moved\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "static const std::vector<TreeType*> Children (const TreeType * tree)\fC [inline]\fP, \fC [static]\fP"

.PP
Return the children vector of the tree\&. 
.PP
Definition at line 124 of file hilbert_r_tree_auxiliary_information\&.hpp\&.
.SS "bool HandleNodeInsertion (TreeType * node, TreeType * nodeToInsert, bool insertionLevel)"

.PP
The Hilbert R tree requires to insert nodes according to their Hilbert value\&. This method should take care of it\&. It returns false if it does nothing and true if it handles the insertion process\&.
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node in which the nodeToInsert is being inserted\&. 
.br
\fInodeToInsert\fP The node being inserted\&. 
.br
\fIinsertionLevel\fP The level of the tree at which the nodeToInsert should be inserted\&. 
.RE
.PP

.SS "bool HandleNodeRemoval (TreeType * node, const size_t nodeIndex)"

.PP
The Hilbert R tree requires all nodes to be arranged according to their Hilbert value\&. This method should take care of saving this property after the deletion process\&. It returns false if it does nothing and true if it handles the deletion process\&.
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node from which the node is being deleted\&. 
.br
\fInodeIndex\fP The index of the node being deleted\&. 
.RE
.PP

.SS "bool HandlePointDeletion (TreeType * node, const size_t localIndex)"

.PP
The Hilbert R tree requires all points to be arranged according to their Hilbert value\&. This method should take care of saving this property after the deletion process\&. It returns false if it does nothing and true if it handles the deletion process\&.
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node from which the point is being deleted\&. 
.br
\fIlocalIndex\fP The index of the point being deleted\&. 
.RE
.PP

.SS "bool HandlePointInsertion (TreeType * node, const size_t point)"

.PP
The Hilbert R tree requires to insert points according to their Hilbert value\&. This method should take care of it\&. It returns false if it does nothing and true if it handles the insertion process\&.
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node in which the point is being inserted\&. 
.br
\fIpoint\fP The number of the point being inserted\&. 
.RE
.PP

.SS "const HilbertValueType<\fBElemType\fP>& HilbertValue () const\fC [inline]\fP"

.PP
Return the largest Hilbert value of a point covered by the node\&. 
.PP
Definition at line 133 of file hilbert_r_tree_auxiliary_information\&.hpp\&.
.SS "HilbertValueType<\fBElemType\fP>& HilbertValue ()\fC [inline]\fP"

.PP
Modify the largest Hilbert value of a point covered by the node\&. 
.PP
Definition at line 136 of file hilbert_r_tree_auxiliary_information\&.hpp\&.
.PP
References HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >::serialize()\&.
.SS "void NullifyData ()"

.PP
Clear memory\&. 
.SS "\fBHilbertRTreeAuxiliaryInformation\fP& operator= (const \fBHilbertRTreeAuxiliaryInformation\fP< TreeType, HilbertValueType > & other)"

.PP
Copy the auxiliary information\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The object from which the information will be moved\&. 
.RE
.PP

.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the information\&. 
.PP
Referenced by HilbertRTreeAuxiliaryInformation< TreeType, HilbertValueType >::HilbertValue()\&.
.SS "bool UpdateAuxiliaryInfo (TreeType * node)"

.PP
Update the auxiliary information in the node\&. The method returns true if the update should be propagated downward\&.
.PP
\fBParameters:\fP
.RS 4
\fInode\fP The node in which the auxiliary information being update\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
