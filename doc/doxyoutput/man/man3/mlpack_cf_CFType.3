.TH "CFType< DecompositionPolicy, NormalizationType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CFType< DecompositionPolicy, NormalizationType > \- This class implements Collaborative Filtering (CF)\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCFType\fP (const size_t numUsersForSimilarity=5, const size_t rank=0)"
.br
.RI "Initialize the \fBCFType\fP object without performing any factorization\&. "
.ti -1c
.RI "template<typename MatType > \fBCFType\fP (const MatType &data, const DecompositionPolicy &decomposition=DecompositionPolicy(), const size_t numUsersForSimilarity=5, const size_t rank=0, const size_t maxIterations=1000, const double minResidue=1e\-5, const bool mit=false)"
.br
.RI "Initialize the \fBCFType\fP object using any decomposition method, immediately factorizing the given data to create a model\&. "
.ti -1c
.RI "const arma::sp_mat & \fBCleanedData\fP () const"
.br
.RI "Get the cleaned data matrix\&. "
.ti -1c
.RI "const DecompositionPolicy & \fBDecomposition\fP () const"
.br
.RI "Gets decomposition object\&. "
.ti -1c
.RI "template<typename NeighborSearchPolicy  = EuclideanSearch, typename InterpolationPolicy  = AverageInterpolation> void \fBGetRecommendations\fP (const size_t numRecs, arma::Mat< size_t > &recommendations)"
.br
.RI "Generates the given number of recommendations for all users\&. "
.ti -1c
.RI "template<typename NeighborSearchPolicy  = EuclideanSearch, typename InterpolationPolicy  = AverageInterpolation> void \fBGetRecommendations\fP (const size_t numRecs, arma::Mat< size_t > &recommendations, const arma::Col< size_t > &users)"
.br
.RI "Generates the given number of recommendations for the specified users\&. "
.ti -1c
.RI "const NormalizationType & \fBNormalization\fP () const"
.br
.RI "Get the normalization object\&. "
.ti -1c
.RI "void \fBNumUsersForSimilarity\fP (const size_t num)"
.br
.RI "Sets number of users for calculating similarity\&. "
.ti -1c
.RI "size_t \fBNumUsersForSimilarity\fP () const"
.br
.RI "Gets number of users for calculating similarity\&. "
.ti -1c
.RI "template<typename NeighborSearchPolicy  = EuclideanSearch, typename InterpolationPolicy  = AverageInterpolation> double \fBPredict\fP (const size_t user, const size_t item) const"
.br
.RI "Predict the rating of an item by a particular user\&. "
.ti -1c
.RI "template<typename NeighborSearchPolicy  = EuclideanSearch, typename InterpolationPolicy  = AverageInterpolation> void \fBPredict\fP (const arma::Mat< size_t > &combinations, arma::vec &predictions) const"
.br
.RI "Predict ratings for each user-item combination in the given coordinate list matrix\&. "
.ti -1c
.RI "void \fBRank\fP (const size_t rankValue)"
.br
.RI "Sets rank parameter for matrix factorization\&. "
.ti -1c
.RI "size_t \fBRank\fP () const"
.br
.RI "Gets rank parameter for matrix factorization\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the \fBCFType\fP model to the given archive\&. "
.ti -1c
.RI "void \fBTrain\fP (const arma::mat &data, const DecompositionPolicy &decomposition, const size_t maxIterations=1000, const double minResidue=1e\-5, const bool mit=false)"
.br
.RI "Train the \fBCFType\fP model (i\&.e\&. "
.ti -1c
.RI "void \fBTrain\fP (const arma::sp_mat &data, const DecompositionPolicy &decomposition, const size_t maxIterations=1000, const double minResidue=1e\-5, const bool mit=false)"
.br
.RI "Train the \fBCFType\fP model (i\&.e\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBCleanData\fP (const arma::mat &data, arma::sp_mat &cleanedData)"
.br
.RI "Converts the User, Item, Value Matrix to User-Item Table\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename DecompositionPolicy = NMFPolicy, typename NormalizationType = NoNormalization>
.br
class mlpack::cf::CFType< DecompositionPolicy, NormalizationType >"
This class implements Collaborative Filtering (CF)\&. 

This implementation presently supports Alternating Least Squares (ALS) for collaborative filtering\&.
.PP
A simple example of how to run Collaborative Filtering is shown below\&.
.PP
.PP
.nf
extern arma::mat data; // (user, item, rating) table
extern arma::Col<size_t> users; // users seeking recommendations
arma::Mat<size_t> recommendations; // Recommendations

CFType<> cf(data); // Default options\&.

// Generate 10 recommendations for all users\&.
cf\&.GetRecommendations(10, recommendations);

// Generate 10 recommendations for specified users\&.
cf\&.GetRecommendations(10, recommendations, users);
.fi
.PP
.PP
The data matrix is a (user, item, rating) table\&. Each column in the matrix should have three rows\&. The first represents the user; the second represents the item; and the third represents the rating\&. The user and item, while they are in a matrix that holds doubles, should hold integer (or size_t) values\&. The user and item indices are assumed to start at 0\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIDecompositionPolicy\fP The policy used to decompose the rating matrix\&. It also provides methods to compute prediction and neighborhood\&. 
.br
\fINormalizationType\fP The type of normalization performed on raw data\&. Data is normalized before calling \fBTrain()\fP method\&. Predicted rating is denormalized before return\&. 
.RE
.PP

.PP
Definition at line 70 of file cf\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBCFType\fP (const size_t numUsersForSimilarity = \fC5\fP, const size_t rank = \fC0\fP)"

.PP
Initialize the \fBCFType\fP object without performing any factorization\&. Be sure to call \fBTrain()\fP before calling \fBGetRecommendations()\fP or any other functions! 
.SS "\fBCFType\fP (const MatType & data, const DecompositionPolicy & decomposition = \fCDecompositionPolicy()\fP, const size_t numUsersForSimilarity = \fC5\fP, const size_t rank = \fC0\fP, const size_t maxIterations = \fC1000\fP, const double minResidue = \fC1e\-5\fP, const bool mit = \fCfalse\fP)"

.PP
Initialize the \fBCFType\fP object using any decomposition method, immediately factorizing the given data to create a model\&. There are parameters that can be set; default values are provided for each of them\&. If the rank is left unset (or is set to 0), a simple density-based heuristic will be used to choose a rank\&.
.PP
The provided dataset can be a coordinate list; that is, a 3-row matrix where each column corresponds to a (user, item, rating) entry in the matrix or a sparse matrix representing (user, item) table\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMatType\fP The type of input matrix, which is expected to be either arma::mat (table of (user, item, rating)) or arma::sp_mat (sparse rating matrix where row is item and column is user)\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Data matrix: dense matrix (coordinate lists) or sparse matrix(cleaned)\&. 
.br
\fIdecomposition\fP Instantiated DecompositionPolicy object\&. 
.br
\fInumUsersForSimilarity\fP Size of the neighborhood\&. 
.br
\fIrank\fP Rank parameter for matrix factorization\&. 
.br
\fImaxIterations\fP Maximum number of iterations\&. 
.br
\fIminResidue\fP Residue required to terminate\&. 
.br
\fImit\fP Whether to terminate only when maxIterations is reached\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "static void CleanData (const arma::mat & data, arma::sp_mat & cleanedData)\fC [static]\fP"

.PP
Converts the User, Item, Value Matrix to User-Item Table\&. 
.PP
Referenced by CFType< DecompositionPolicy, NormalizationPolicy >::Normalization()\&.
.SS "const arma::sp_mat& CleanedData () const\fC [inline]\fP"

.PP
Get the cleaned data matrix\&. 
.PP
Definition at line 180 of file cf\&.hpp\&.
.SS "const DecompositionPolicy& Decomposition () const\fC [inline]\fP"

.PP
Gets decomposition object\&. 
.PP
Definition at line 177 of file cf\&.hpp\&.
.SS "void GetRecommendations (const size_t numRecs, arma::Mat< size_t > & recommendations)"

.PP
Generates the given number of recommendations for all users\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fINeighborSearchPolicy\fP The policy used to search neighbors of query set in referece set\&. 
.br
\fIInterpolationPolicy\fP The policy used to calculate interpolation weights\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fInumRecs\fP Number of Recommendations\&. 
.br
\fIrecommendations\fP Matrix to save recommendations into\&. 
.RE
.PP

.PP
Referenced by CFType< DecompositionPolicy, NormalizationPolicy >::Normalization()\&.
.SS "void GetRecommendations (const size_t numRecs, arma::Mat< size_t > & recommendations, const arma::Col< size_t > & users)"

.PP
Generates the given number of recommendations for the specified users\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fINeighborSearchPolicy\fP The policy used to search neighbors of query set in referece set\&. 
.br
\fIInterpolationPolicy\fP The policy used to calculate interpolation weights\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fInumRecs\fP Number of Recommendations\&. 
.br
\fIrecommendations\fP Matrix to save recommendations\&. 
.br
\fIusers\fP Users for which recommendations are to be generated\&. 
.RE
.PP

.SS "const NormalizationType& Normalization () const\fC [inline]\fP"

.PP
Get the normalization object\&. 
.PP
Definition at line 183 of file cf\&.hpp\&.
.SS "void NumUsersForSimilarity (const size_t num)\fC [inline]\fP"

.PP
Sets number of users for calculating similarity\&. 
.PP
Definition at line 147 of file cf\&.hpp\&.
.SS "size_t NumUsersForSimilarity () const\fC [inline]\fP"

.PP
Gets number of users for calculating similarity\&. 
.PP
Definition at line 159 of file cf\&.hpp\&.
.SS "double Predict (const size_t user, const size_t item) const"

.PP
Predict the rating of an item by a particular user\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fINeighborSearchPolicy\fP The policy used to search neighbors of query set in referece set\&. 
.br
\fIInterpolationPolicy\fP The policy used to calculate interpolation weights\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIuser\fP User to predict for\&. 
.br
\fIitem\fP Item to predict for\&. 
.RE
.PP

.PP
Referenced by CFType< DecompositionPolicy, NormalizationPolicy >::Normalization()\&.
.SS "void Predict (const arma::Mat< size_t > & combinations, arma::vec & predictions) const"

.PP
Predict ratings for each user-item combination in the given coordinate list matrix\&. The matrix 'combinations' should have two rows and number of columns equal to the number of desired predictions\&. The first element of each column corresponds to the user index, and the second element of each column corresponds to the item index\&. The output vector 'predictions' will have length equal to combinations\&.n_cols, and predictions[i] will be equal to the prediction for the user/item combination in combinations\&.col(i)\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fINeighborSearchPolicy\fP The policy used to search neighbors of query set in referece set\&. 
.br
\fIInterpolationPolicy\fP The policy used to calculate interpolation weights\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIcombinations\fP User/item combinations to predict\&. 
.br
\fIpredictions\fP Predicted ratings for each user/item combination\&. 
.RE
.PP

.SS "void Rank (const size_t rankValue)\fC [inline]\fP"

.PP
Sets rank parameter for matrix factorization\&. 
.PP
Definition at line 165 of file cf\&.hpp\&.
.SS "size_t Rank () const\fC [inline]\fP"

.PP
Gets rank parameter for matrix factorization\&. 
.PP
Definition at line 171 of file cf\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the \fBCFType\fP model to the given archive\&. 
.PP
Referenced by CFType< DecompositionPolicy, NormalizationPolicy >::Normalization()\&.
.SS "void Train (const arma::mat & data, const DecompositionPolicy & decomposition, const size_t maxIterations = \fC1000\fP, const double minResidue = \fC1e\-5\fP, const bool mit = \fCfalse\fP)"

.PP
Train the \fBCFType\fP model (i\&.e\&. factorize the input matrix) using the parameters that have already been set for the model (specifically, the rank parameter), and optionally, using the given DecompositionPolicy\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Input dataset; dense matrix (coordinate lists)\&. 
.br
\fIdecomposition\fP Instantiated DecompositionPolicy object\&. 
.br
\fImaxIterations\fP Maximum number of iterations\&. 
.br
\fIminResidue\fP Residue required to terminate\&. 
.br
\fImit\fP Whether to terminate only when maxIterations is reached\&. 
.RE
.PP

.SS "void Train (const arma::sp_mat & data, const DecompositionPolicy & decomposition, const size_t maxIterations = \fC1000\fP, const double minResidue = \fC1e\-5\fP, const bool mit = \fCfalse\fP)"

.PP
Train the \fBCFType\fP model (i\&.e\&. factorize the input matrix) using the parameters that have already been set for the model (specifically, the rank parameter), and optionally, using the given DecompositionPolicy\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Input dataset; sparse matrix (user item table)\&. 
.br
\fIdecomposition\fP Instantiated DecompositionPolicy object\&. 
.br
\fImaxIterations\fP Maximum number of iterations\&. 
.br
\fIminResidue\fP Residue required to terminate\&. 
.br
\fImit\fP Whether to terminate only when maxIterations is reached\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
