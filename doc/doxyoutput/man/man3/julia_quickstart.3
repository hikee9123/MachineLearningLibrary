.TH "julia_quickstart" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
julia_quickstartmlpack in Julia quickstart guide 
 \- 
.SH "Introduction"
.PP
This page describes how you can quickly get started using mlpack from Julia and gives a few examples of usage, and pointers to deeper documentation\&.
.PP
This quickstart guide is also available for \fBPython\fP, \fBthe command-line\fP, \fBGo\fP and \fBR\fP\&.
.SH "Installing mlpack"
.PP
Installing the mlpack bindings for Julia is straightforward; you can just use \fCPkg:\fP 
.PP
.PP
.nf
using Pkg
Pkg\&.add("mlpack")
.fi
.PP
.PP
Building the Julia bindings from scratch is a little more in-depth, though\&. For information on that, follow the instructions on the \fBBuilding mlpack From Source\fP page, and be sure to specify \fC-DBUILD_JULIA_BINDINGS=ON\fP to CMake; you may need to also set the location of the Julia program with \fC-DJULIA_EXECUTABLE=/path/to/julia\fP\&.
.SH "Simple mlpack quickstart example"
.PP
As a really simple example of how to use mlpack from Julia, let's do some simple classification on a subset of the standard machine learning \fCcovertype\fP dataset\&. We'll first split the dataset into a training set and a testing set, then we'll train an mlpack random forest on the training data, and finally we'll print the accuracy of the random forest on the test dataset\&.
.PP
You can copy-paste this code directly into Julia to run it\&. You may need to add some extra packages with, e\&.g\&., \fCusing Pkg; Pkg\&.add('CSV'); Pkg\&.add('DataFrames'); Pkg\&.add('Libz')\fP\&.
.PP
.PP
.nf
using CSV
using DataFrames
using Libz
using mlpack

# Load the dataset from an online URL\&.  Replace with 'covertype\&.csv\&.gz' if you
# want to use on the full dataset\&.
df = CSV\&.read(ZlibInflateInputStream(open(download(
        "http://www\&.mlpack\&.org/datasets/covertype-small\&.csv\&.gz"))))

# Split the labels\&.
labels = df[!, :label][:]
dataset = select!(df, Not(:label))

# Split the dataset using mlpack\&.
test, test_labels, train, train_labels = mlpack\&.preprocess_split(
    dataset,
    input_labels=labels,
    test_ratio=0\&.3)

# Train a random forest\&.
rf_model, _, _ = mlpack\&.random_forest(training=train,
                              labels=train_labels,
                              print_training_accuracy=true,
                              num_trees=10,
                              minimum_leaf_size=3)

# Predict the labels of the test points\&.
_, predictions, _ = mlpack\&.random_forest(input_model=rf_model,
                                         test=test)

# Now print the accuracy\&.  The third return value ('probabilities'), which we
# ignored here, could also be used to generate an ROC curve\&.
correct = sum(predictions \&.== test_labels)
print("$(correct) out of $(length(test_labels)) test points correct " *
    "($(correct / length(test_labels) * 100\&.0)%)\&.\n")
.fi
.PP
.PP
We can see that we achieve reasonably good accuracy on the test dataset (80%+); if we use the full \fCcovertype\&.csv\&.gz\fP, the accuracy should increase significantly (but training will take longer)\&.
.PP
It's easy to modify the code above to do more complex things, or to use different mlpack learners, or to interface with other machine learning toolkits\&.
.SH "What else does mlpack implement?"
.PP
The example above has only shown a little bit of the functionality of mlpack\&. Lots of other commands are available with different functionality\&. A full list of each of these commands and full documentation can be found on the following page:
.PP
.IP "\(bu" 2
\fCJulia documentation\fP
.PP
.PP
You can also use the Julia REPL to explore the \fCmlpack\fP module and its functions; every function comes with comprehensive documentation\&.
.PP
For more information on what mlpack does, see https://www.mlpack.org/\&. Next, let's go through another example for providing movie recommendations with mlpack\&.
.SH "Using mlpack for movie recommendations"
.PP
In this example, we'll train a collaborative filtering model using mlpack's \fC\fCcf()\fP\fP method\&. We'll train this on the MovieLens dataset from https://grouplens.org/datasets/movielens/, and then we'll use the model that we train to give recommendations\&.
.PP
You can copy-paste this code directly into Julia to run it\&.
.PP
.PP
.nf
using CSV
using mlpack
using Libz
using DataFrames

# Load the dataset from an online URL\&.  Replace with 'covertype\&.csv\&.gz' if you
# want to use on the full dataset\&.
ratings = CSV\&.read(ZlibInflateInputStream(open(download(
        "http://www\&.mlpack\&.org/datasets/ml-20m/ratings-only\&.csv\&.gz"))))
movies = CSV\&.read(ZlibInflateInputStream(open(download(
        "http://www\&.mlpack\&.org/datasets/ml-20m/movies\&.csv\&.gz"))))

# Hold out 10% of the dataset into a test set so we can evaluate performance\&.
ratings_test, _, ratings_train, _ = mlpack\&.preprocess_split(ratings;
    test_ratio=0\&.1, verbose=true)

# Train the model\&.  Change the rank to increase/decrease the complexity of the
# model\&.
_, cf_model = mlpack\&.cf(training=ratings_train,
                        test=ratings_test,
                        rank=10,
                        verbose=true,
                        algorithm="RegSVD")

# Now query the 5 top movies for user 1\&.
output, _ = mlpack\&.cf(input_model=cf_model,
                      query=[1],
                      recommendations=10,
                      verbose=true,
                      max_iterations=10)

print("Recommendations for user 1:\n")
for i in 1:10
  print("  $(i): $(movies[output[i], :][3])\n")
end
.fi
.PP
.PP
Here is some example output, showing that user 1 seems to have good taste in movies:
.PP
.PP
.nf
Recommendations for user 1:
  0: Casablanca (1942)
  1: Pan's Labyrinth (Laberinto del fauno, El) (2006)
  2: Godfather, The (1972)
  3: Answer This! (2010)
  4: Life Is Beautiful (La Vita Ã¨ bella) (1997)
  5: Adventures of Tintin, The (2011)
  6: Dark Knight, The (2008)
  7: Out for Justice (1991)
  8: Dr\&. Strangelove or: How I Learned to Stop Worrying and Love the Bomb (1964)
  9: Schindler's List (1993)
.fi
.PP
.SH "Next steps with mlpack"
.PP
Now that you have done some simple work with mlpack, you have seen how it can easily plug into a data science workflow in Julia\&. A great thing to do next would be to look at more documentation for the Julia mlpack bindings:
.PP
.IP "\(bu" 2
\fCJulia mlpack binding documentation\fP
.PP
.PP
Also, mlpack is much more flexible from C++ and allows much greater functionality\&. So, more complicated tasks are possible if you are willing to write C++ (or perhaps CxxWrap\&.jl)\&. To get started learning about mlpack in C++, the following resources might be helpful:
.PP
.IP "\(bu" 2
\fCmlpack C++ tutorials\fP
.IP "\(bu" 2
\fCmlpack build and installation guide\fP
.IP "\(bu" 2
\fCSimple sample C++ mlpack programs\fP
.IP "\(bu" 2
\fCmlpack Doxygen documentation homepage\fP 
.PP

