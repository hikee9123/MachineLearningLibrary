.TH "Pendulum" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Pendulum \- Implementation of \fBPendulum\fP task\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAction\fP"
.br
.RI "Implementation of action of \fBPendulum\fP\&. "
.ti -1c
.RI "class \fBState\fP"
.br
.RI "Implementation of state of \fBPendulum\fP\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPendulum\fP (const size_t maxSteps=200, const double maxAngularVelocity=8, const double maxTorque=2\&.0, const double dt=0\&.05, const double doneReward=0\&.0)"
.br
.RI "Construct a \fBPendulum\fP instance using the given values\&. "
.ti -1c
.RI "double \fBAngleNormalize\fP (double theta) const"
.br
.RI "This function calculates the normalized angle for a particular theta\&. "
.ti -1c
.RI "\fBState\fP \fBInitialSample\fP ()"
.br
.RI "Initial theta is randomly generated within [-pi, pi]\&. "
.ti -1c
.RI "bool \fBIsTerminal\fP (const \fBState\fP &) const"
.br
.RI "This function checks if the pendulum has reaches a terminal state\&. "
.ti -1c
.RI "size_t \fBMaxSteps\fP () const"
.br
.RI "Get the maximum number of steps allowed\&. "
.ti -1c
.RI "size_t & \fBMaxSteps\fP ()"
.br
.RI "Set the maximum number of steps allowed\&. "
.ti -1c
.RI "double \fBSample\fP (const \fBState\fP &state, const \fBAction\fP &action, \fBState\fP &nextState)"
.br
.RI "Dynamics of \fBPendulum\fP\&. "
.ti -1c
.RI "double \fBSample\fP (const \fBState\fP &state, const \fBAction\fP &action)"
.br
.RI "Dynamics of \fBPendulum\fP\&. "
.ti -1c
.RI "size_t \fBStepsPerformed\fP () const"
.br
.RI "Get the number of steps performed\&. "
.in -1c
.SH "Detailed Description"
.PP 
Implementation of \fBPendulum\fP task\&. 

The inverted pendulum swingup problem is a classic problem in the control literature\&. In this version of the problem, the pendulum starts in a random position, and the goal is to swing it up so it stays upright 
.PP
Definition at line 31 of file pendulum\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBPendulum\fP (const size_t maxSteps = \fC200\fP, const double maxAngularVelocity = \fC8\fP, const double maxTorque = \fC2\&.0\fP, const double dt = \fC0\&.05\fP, const double doneReward = \fC0\&.0\fP)\fC [inline]\fP"

.PP
Construct a \fBPendulum\fP instance using the given values\&. 
.PP
\fBParameters:\fP
.RS 4
\fImaxSteps\fP The number of steps after which the episode terminates\&. If the value is 0, there is no limit (Default: 200 steps)\&. 
.br
\fImaxAngularVelocity\fP Maximum angular velocity\&. 
.br
\fImaxTorque\fP Maximum torque\&. 
.br
\fIdt\fP The differential value\&. 
.br
\fIdoneReward\fP The reward recieved by the agent on success\&. 
.RE
.PP

.PP
Definition at line 118 of file pendulum\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "double AngleNormalize (double theta) const\fC [inline]\fP"

.PP
This function calculates the normalized angle for a particular theta\&. 
.PP
\fBParameters:\fP
.RS 4
\fItheta\fP The un-normalized angle\&. 
.RE
.PP

.PP
Definition at line 212 of file pendulum\&.hpp\&.
.PP
References M_PI\&.
.PP
Referenced by Pendulum::Sample()\&.
.SS "\fBState\fP InitialSample ()\fC [inline]\fP"

.PP
Initial theta is randomly generated within [-pi, pi]\&. Initial angular velocity is randomly generated within [-1, 1]\&.
.PP
\fBReturns:\fP
.RS 4
Initial state for each episode\&. 
.RE
.PP

.PP
Definition at line 197 of file pendulum\&.hpp\&.
.PP
References Pendulum::State::AngularVelocity(), M_PI, mlpack::math::Random(), Pendulum::State::SetState(), and Pendulum::State::Theta()\&.
.SS "bool IsTerminal (const \fBState\fP &) const\fC [inline]\fP"

.PP
This function checks if the pendulum has reaches a terminal state\&. 
.PP
\fBParameters:\fP
.RS 4
\fI*\fP (state) desired state\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if state is a terminal state, otherwise false\&. 
.RE
.PP

.PP
Definition at line 227 of file pendulum\&.hpp\&.
.SS "size_t MaxSteps () const\fC [inline]\fP"

.PP
Get the maximum number of steps allowed\&. 
.PP
Definition at line 242 of file pendulum\&.hpp\&.
.SS "size_t& MaxSteps ()\fC [inline]\fP"

.PP
Set the maximum number of steps allowed\&. 
.PP
Definition at line 244 of file pendulum\&.hpp\&.
.SS "double Sample (const \fBState\fP & state, const \fBAction\fP & action, \fBState\fP & nextState)\fC [inline]\fP"

.PP
Dynamics of \fBPendulum\fP\&. Get reward and next state based on current state and current action\&.
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP The current state\&. 
.br
\fIaction\fP The current action\&. 
.br
\fInextState\fP The next state\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
reward, The reward for taking the action taken for current state\&. 
.RE
.PP

.PP
Definition at line 140 of file pendulum\&.hpp\&.
.PP
References Pendulum::Action::action, Pendulum::AngleNormalize(), Pendulum::State::AngularVelocity(), mlpack::math::ClampRange(), M_PI, Pendulum::State::SetState(), and Pendulum::State::Theta()\&.
.PP
Referenced by Pendulum::Sample()\&.
.SS "double Sample (const \fBState\fP & state, const \fBAction\fP & action)\fC [inline]\fP"

.PP
Dynamics of \fBPendulum\fP\&. Get reward based on current state and current action
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP The current state\&. 
.br
\fIaction\fP The current action\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
reward, The reward\&. 
.RE
.PP

.PP
Definition at line 185 of file pendulum\&.hpp\&.
.PP
References Pendulum::Sample()\&.
.SS "size_t StepsPerformed () const\fC [inline]\fP"

.PP
Get the number of steps performed\&. 
.PP
Definition at line 239 of file pendulum\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
