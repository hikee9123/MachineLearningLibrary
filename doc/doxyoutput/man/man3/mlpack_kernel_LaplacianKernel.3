.TH "LaplacianKernel" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LaplacianKernel \- The standard Laplacian kernel\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLaplacianKernel\fP ()"
.br
.RI "Default constructor; sets bandwidth to 1\&.0\&. "
.ti -1c
.RI "\fBLaplacianKernel\fP (double bandwidth)"
.br
.RI "Construct the Laplacian kernel with a custom bandwidth\&. "
.ti -1c
.RI "double \fBBandwidth\fP () const"
.br
.RI "Get the bandwidth\&. "
.ti -1c
.RI "double & \fBBandwidth\fP ()"
.br
.RI "Modify the bandwidth\&. "
.ti -1c
.RI "template<typename VecTypeA , typename VecTypeB > double \fBEvaluate\fP (const VecTypeA &a, const VecTypeB &b) const"
.br
.RI "Evaluation of the Laplacian kernel\&. "
.ti -1c
.RI "double \fBEvaluate\fP (const double t) const"
.br
.RI "Evaluation of the Laplacian kernel given the distance between two points\&. "
.ti -1c
.RI "double \fBGradient\fP (const double t) const"
.br
.RI "Evaluation of the gradient of the Laplacian kernel given the distance between two points\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the kernel\&. "
.in -1c
.SH "Detailed Description"
.PP 
The standard Laplacian kernel\&. 

Given two vectors $ x $, $ y $, and a bandwidth $ \mu $ (set in the constructor),
.PP
\[ K(x, y) = \exp(-\frac{|| x - y ||}{\mu}). \].PP
The implementation is all in the header file because it is so simple\&. 
.PP
Definition at line 30 of file laplacian_kernel\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBLaplacianKernel\fP ()\fC [inline]\fP"

.PP
Default constructor; sets bandwidth to 1\&.0\&. 
.PP
Definition at line 36 of file laplacian_kernel\&.hpp\&.
.SS "\fBLaplacianKernel\fP (double bandwidth)\fC [inline]\fP"

.PP
Construct the Laplacian kernel with a custom bandwidth\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbandwidth\fP The bandwidth of the kernel ( $\mu$)\&. 
.RE
.PP

.PP
Definition at line 44 of file laplacian_kernel\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "double Bandwidth () const\fC [inline]\fP"

.PP
Get the bandwidth\&. 
.PP
Definition at line 95 of file laplacian_kernel\&.hpp\&.
.SS "double& Bandwidth ()\fC [inline]\fP"

.PP
Modify the bandwidth\&. 
.PP
Definition at line 97 of file laplacian_kernel\&.hpp\&.
.SS "double Evaluate (const VecTypeA & a, const VecTypeB & b) const\fC [inline]\fP"

.PP
Evaluation of the Laplacian kernel\&. This could be generalized to use any distance metric, not the Euclidean distance, but for now, the Euclidean distance is used\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIVecTypeA\fP Type of first vector (likely arma::vec or arma::sp_vec)\&. 
.br
\fIVecTypeB\fP Type of second vector (arma::vec / arma::sp_vec)\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIa\fP First vector\&. 
.br
\fIb\fP Second vector\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
K(a, b) using the bandwidth ( $\mu$) specified in the constructor\&. 
.RE
.PP

.PP
Definition at line 61 of file laplacian_kernel\&.hpp\&.
.PP
References LMetric< TPower, TTakeRoot >::Evaluate()\&.
.SS "double Evaluate (const double t) const\fC [inline]\fP"

.PP
Evaluation of the Laplacian kernel given the distance between two points\&. 
.PP
\fBParameters:\fP
.RS 4
\fIt\fP The distance between the two points the kernel should be evaluated on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
K(t) using the bandwidth ( $\mu$) specified in the constructor\&. 
.RE
.PP

.PP
Definition at line 75 of file laplacian_kernel\&.hpp\&.
.SS "double Gradient (const double t) const\fC [inline]\fP"

.PP
Evaluation of the gradient of the Laplacian kernel given the distance between two points\&. 
.PP
\fBParameters:\fP
.RS 4
\fIt\fP The distance between the two points the kernel should be evaluated on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
K(t) using the bandwidth ( $\mu$) specified in the constructor\&. 
.RE
.PP

.PP
Definition at line 90 of file laplacian_kernel\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)\fC [inline]\fP"

.PP
Serialize the kernel\&. 
.PP
Definition at line 101 of file laplacian_kernel\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
