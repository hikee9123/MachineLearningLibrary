.TH "HyperplaneBase< BoundT, ProjVectorT >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
HyperplaneBase< BoundT, ProjVectorT > \- \fBHyperplaneBase\fP defines a splitting hyperplane based on a projection vector and projection value\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef BoundT \fBBoundType\fP"
.br
.RI "Useful typedef for the bound type\&. "
.ti -1c
.RI "typedef ProjVectorT \fBProjVectorType\fP"
.br
.RI "Useful typedef for the projection vector type\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHyperplaneBase\fP ()"
.br
.RI "Empty Constructor\&. "
.ti -1c
.RI "\fBHyperplaneBase\fP (const \fBProjVectorType\fP &projVect, double splitVal)"
.br
.RI "Create the hyperplane with the specified projection vector and split value\&. "
.ti -1c
.RI "template<typename VecType > bool \fBLeft\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Determine if the given point is to the left of the hyperplane, this means if the projection over the projection vector is negative or zero\&. "
.ti -1c
.RI "bool \fBLeft\fP (const \fBBoundType\fP &bound) const"
.br
.RI "Determine if the given bound is to the left of the hyperplane\&. "
.ti -1c
.RI "template<typename VecType > double \fBProject\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Project the given point on the projection vector and subtract the split value\&. "
.ti -1c
.RI "template<typename VecType > bool \fBRight\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Determine if the given point is to the right of the hyperplane, this means if the projection over the projection vector is positive\&. "
.ti -1c
.RI "bool \fBRight\fP (const \fBBoundType\fP &bound) const"
.br
.RI "Determine if the given bound is to the right of the hyperplane\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialization\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename BoundT, typename ProjVectorT>
.br
class mlpack::tree::HyperplaneBase< BoundT, ProjVectorT >"
\fBHyperplaneBase\fP defines a splitting hyperplane based on a projection vector and projection value\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIBoundT\fP The bound type considered\&. 
.br
\fIProjVectorT\fP Type of projection vector (\fBAxisParallelProjVector\fP, \fBProjVector\fP)\&. 
.RE
.PP

.PP
Definition at line 30 of file hyperplane\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef BoundT \fBBoundType\fP"

.PP
Useful typedef for the bound type\&. 
.PP
Definition at line 34 of file hyperplane\&.hpp\&.
.SS "typedef ProjVectorT \fBProjVectorType\fP"

.PP
Useful typedef for the projection vector type\&. 
.PP
Definition at line 36 of file hyperplane\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBHyperplaneBase\fP ()\fC [inline]\fP"

.PP
Empty Constructor\&. By default will consider all points to the left\&. 
.PP
Definition at line 49 of file hyperplane\&.hpp\&.
.SS "\fBHyperplaneBase\fP (const \fBProjVectorType\fP & projVect, double splitVal)\fC [inline]\fP"

.PP
Create the hyperplane with the specified projection vector and split value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIprojVect\fP Projection vector\&. 
.br
\fIsplitVal\fP Split value\&. 
.RE
.PP

.PP
Definition at line 59 of file hyperplane\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "bool Left (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Determine if the given point is to the left of the hyperplane, this means if the projection over the projection vector is negative or zero\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to be analyzed\&. 
.RE
.PP

.PP
Definition at line 86 of file hyperplane\&.hpp\&.
.PP
References HyperplaneBase< BoundT, ProjVectorT >::Project()\&.
.SS "bool Left (const \fBBoundType\fP & bound) const\fC [inline]\fP"

.PP
Determine if the given bound is to the left of the hyperplane\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbound\fP Bound to be analyzed\&. 
.RE
.PP

.PP
Definition at line 110 of file hyperplane\&.hpp\&.
.SS "double Project (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Project the given point on the projection vector and subtract the split value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to be projected\&. 
.RE
.PP

.PP
Definition at line 71 of file hyperplane\&.hpp\&.
.PP
Referenced by HyperplaneBase< BoundT, ProjVectorT >::Left(), and HyperplaneBase< BoundT, ProjVectorT >::Right()\&.
.SS "bool Right (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const\fC [inline]\fP"

.PP
Determine if the given point is to the right of the hyperplane, this means if the projection over the projection vector is positive\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to be analyzed\&. 
.RE
.PP

.PP
Definition at line 99 of file hyperplane\&.hpp\&.
.PP
References HyperplaneBase< BoundT, ProjVectorT >::Project()\&.
.SS "bool Right (const \fBBoundType\fP & bound) const\fC [inline]\fP"

.PP
Determine if the given bound is to the right of the hyperplane\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbound\fP Bound to be analyzed\&. 
.RE
.PP

.PP
Definition at line 122 of file hyperplane\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)\fC [inline]\fP"

.PP
Serialization\&. 
.PP
Definition at line 133 of file hyperplane\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
