.TH "KDERules< MetricType, KernelType, TreeType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
KDERules< MetricType, KernelType, TreeType > \- A dual-tree traversal Rules class for kernel density estimation\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBtree::TraversalInfo\fP< TreeType > \fBTraversalInfoType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBKDERules\fP (const arma::mat &referenceSet, const arma::mat &querySet, arma::vec &densities, const double relError, const double absError, const double mcProb, const size_t initialSampleSize, const double mcAccessCoef, const double mcBreakCoef, MetricType &metric, KernelType &kernel, const bool monteCarlo, const bool sameSet)"
.br
.RI "Construct \fBKDERules\fP\&. "
.ti -1c
.RI "double \fBBaseCase\fP (const size_t queryIndex, const size_t referenceIndex)"
.br
.RI "Base Case\&. "
.ti -1c
.RI "size_t \fBBaseCases\fP () const"
.br
.RI "Get the number of base cases\&. "
.ti -1c
.RI "size_t \fBMinimumBaseCases\fP () const"
.br
.RI "Get the minimum number of base cases we need to perform to have acceptable results\&. "
.ti -1c
.RI "double \fBRescore\fP (const size_t queryIndex, TreeType &referenceNode, const double oldScore) const"
.br
.RI "SingleTree Score\&. "
.ti -1c
.RI "double \fBRescore\fP (TreeType &queryNode, TreeType &referenceNode, const double oldScore) const"
.br
.RI "Dual-Tree Rescore\&. "
.ti -1c
.RI "double \fBScore\fP (const size_t queryIndex, TreeType &referenceNode)"
.br
.RI "SingleTree Rescore\&. "
.ti -1c
.RI "double \fBScore\fP (TreeType &queryNode, TreeType &referenceNode)"
.br
.RI "Dual-Tree Score\&. "
.ti -1c
.RI "size_t \fBScores\fP () const"
.br
.RI "Get the number of scores\&. "
.ti -1c
.RI "const \fBTraversalInfoType\fP & \fBTraversalInfo\fP () const"
.br
.RI "Get traversal information\&. "
.ti -1c
.RI "\fBTraversalInfoType\fP & \fBTraversalInfo\fP ()"
.br
.RI "Modify traversal information\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType, typename KernelType, typename TreeType>
.br
class mlpack::kde::KDERules< MetricType, KernelType, TreeType >"
A dual-tree traversal Rules class for kernel density estimation\&. 

This contains the \fBScore()\fP and \fBBaseCase()\fP implementations\&. 
.PP
Definition at line 26 of file kde_rules\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef \fBtree::TraversalInfo\fP<TreeType> \fBTraversalInfoType\fP"

.PP
Definition at line 82 of file kde_rules\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBKDERules\fP (const arma::mat & referenceSet, const arma::mat & querySet, arma::vec & densities, const double relError, const double absError, const double mcProb, const size_t initialSampleSize, const double mcAccessCoef, const double mcBreakCoef, MetricType & metric, KernelType & kernel, const bool monteCarlo, const bool sameSet)"

.PP
Construct \fBKDERules\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIreferenceSet\fP Reference set data\&. 
.br
\fIquerySet\fP Query set data\&. 
.br
\fIdensities\fP Vector where estimations will be written\&. 
.br
\fIrelError\fP Relative error tolerance\&. 
.br
\fIabsError\fP Absolute error tolerance\&. 
.br
\fImcProb\fP Probability of relative error compliance for Monte Carlo estimations\&. 
.br
\fIinitialSampleSize\fP Initial size of the Monte Carlo samples\&. 
.br
\fImcAccessCoef\fP Access coefficient for Monte Carlo estimations\&. 
.br
\fImcBreakCoef\fP Break coefficient for Monte Carlo estimations\&. 
.br
\fImetric\fP Instantiated metric\&. 
.br
\fIkernel\fP Instantiated kernel\&. 
.br
\fImonteCarlo\fP If true Monte Carlo estimations will be applied when possible\&. 
.br
\fIsameSet\fP True if query and reference sets are the same (monochromatic evaluation)\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "double BaseCase (const size_t queryIndex, const size_t referenceIndex)"

.PP
Base Case\&. 
.PP
Referenced by KDECleanRules< TreeType >::KDECleanRules()\&.
.SS "size_t BaseCases () const\fC [inline]\fP"

.PP
Get the number of base cases\&. 
.PP
Definition at line 91 of file kde_rules\&.hpp\&.
.SS "size_t MinimumBaseCases () const\fC [inline]\fP"

.PP
Get the minimum number of base cases we need to perform to have acceptable results\&. 
.PP
Definition at line 98 of file kde_rules\&.hpp\&.
.SS "double Rescore (const size_t queryIndex, TreeType & referenceNode, const double oldScore) const"

.PP
SingleTree Score\&. 
.SS "double Rescore (TreeType & queryNode, TreeType & referenceNode, const double oldScore) const"

.PP
Dual-Tree Rescore\&. 
.SS "double Score (const size_t queryIndex, TreeType & referenceNode)"

.PP
SingleTree Rescore\&. 
.PP
Referenced by KDECleanRules< TreeType >::KDECleanRules(), and KDECleanRules< TreeType >::Rescore()\&.
.SS "double Score (TreeType & queryNode, TreeType & referenceNode)"

.PP
Dual-Tree Score\&. 
.SS "size_t Scores () const\fC [inline]\fP"

.PP
Get the number of scores\&. 
.PP
Definition at line 94 of file kde_rules\&.hpp\&.
.SS "const \fBTraversalInfoType\fP& TraversalInfo () const\fC [inline]\fP"

.PP
Get traversal information\&. 
.PP
Definition at line 85 of file kde_rules\&.hpp\&.
.SS "\fBTraversalInfoType\fP& TraversalInfo ()\fC [inline]\fP"

.PP
Modify traversal information\&. 
.PP
Definition at line 88 of file kde_rules\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
