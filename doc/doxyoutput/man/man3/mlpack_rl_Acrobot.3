.TH "Acrobot" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Acrobot \- Implementation of \fBAcrobot\fP game\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAction\fP"
.br
.ti -1c
.RI "class \fBState\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAcrobot\fP (const size_t maxSteps=500, const double gravity=9\&.81, const double linkLength1=1\&.0, const double linkLength2=1\&.0, const double linkMass1=1\&.0, const double linkMass2=1\&.0, const double linkCom1=0\&.5, const double linkCom2=0\&.5, const double linkMoi=1\&.0, const double maxVel1=4 *\fBM_PI\fP, const double maxVel2=9 *\fBM_PI\fP, const double dt=0\&.2, const double doneReward=0)"
.br
.RI "Construct a \fBAcrobot\fP instance using the given constants\&. "
.ti -1c
.RI "arma::colvec \fBDsdt\fP (arma::colvec state, const double torque) const"
.br
.RI "This is the ordinary differential equations required for estimation of nextState through RK4 method\&. "
.ti -1c
.RI "\fBState\fP \fBInitialSample\fP ()"
.br
.RI "This function does random initialization of state space\&. "
.ti -1c
.RI "bool \fBIsTerminal\fP (const \fBState\fP &state) const"
.br
.RI "This function checks if the acrobot has reached the terminal state\&. "
.ti -1c
.RI "size_t \fBMaxSteps\fP () const"
.br
.RI "Get the maximum number of steps allowed\&. "
.ti -1c
.RI "size_t & \fBMaxSteps\fP ()"
.br
.RI "Set the maximum number of steps allowed\&. "
.ti -1c
.RI "arma::colvec \fBRk4\fP (const arma::colvec state, const double torque) const"
.br
.RI "This function calls the RK4 iterative method to estimate the next state based on given ordinary differential equation\&. "
.ti -1c
.RI "double \fBSample\fP (const \fBState\fP &state, const \fBAction\fP &action, \fBState\fP &nextState)"
.br
.RI "Dynamics of the \fBAcrobot\fP System\&. "
.ti -1c
.RI "double \fBSample\fP (const \fBState\fP &state, const \fBAction\fP &action)"
.br
.RI "Dynamics of the \fBAcrobot\fP System\&. "
.ti -1c
.RI "size_t \fBStepsPerformed\fP () const"
.br
.RI "Get the number of steps performed\&. "
.ti -1c
.RI "double \fBTorque\fP (const \fBAction\fP &action) const"
.br
.RI "This function calculates the torque for a particular action\&. "
.ti -1c
.RI "double \fBWrap\fP (double value, const double minimum, const double maximum) const"
.br
.RI "Wrap funtion is required to truncate the angle value from -180 to 180\&. "
.in -1c
.SH "Detailed Description"
.PP 
Implementation of \fBAcrobot\fP game\&. 

\fBAcrobot\fP is a 2-link pendulum with only the second joint actuated\&. Intitially, both links point downwards\&. The goal is to swing the end-effector at a height at least the length of one link above the base\&. Both links can swing freely and can pass by each other, i\&.e\&., they don't collide when they have the same angle\&. 
.PP
Definition at line 28 of file acrobot\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBAcrobot\fP (const size_t maxSteps = \fC500\fP, const double gravity = \fC9\&.81\fP, const double linkLength1 = \fC1\&.0\fP, const double linkLength2 = \fC1\&.0\fP, const double linkMass1 = \fC1\&.0\fP, const double linkMass2 = \fC1\&.0\fP, const double linkCom1 = \fC0\&.5\fP, const double linkCom2 = \fC0\&.5\fP, const double linkMoi = \fC1\&.0\fP, const double maxVel1 = \fC4 * \fBM_PI\fP\fP, const double maxVel2 = \fC9 * \fBM_PI\fP\fP, const double dt = \fC0\&.2\fP, const double doneReward = \fC0\fP)\fC [inline]\fP"

.PP
Construct a \fBAcrobot\fP instance using the given constants\&. 
.PP
\fBParameters:\fP
.RS 4
\fImaxSteps\fP The number of steps after which the episode terminates\&. If the value is 0, there is no limit\&. 
.br
\fIgravity\fP The gravity parameter\&. 
.br
\fIlinkLength1\fP The length of link 1\&. 
.br
\fIlinkLength2\fP The length of link 2\&. 
.br
\fIlinkMass1\fP The mass of link 1\&. 
.br
\fIlinkMass2\fP The mass of link 2\&. 
.br
\fIlinkCom1\fP The position of the center of mass of link 1\&. 
.br
\fIlinkCom2\fP The position of the center of mass of link 2\&. 
.br
\fIlinkMoi\fP The moments of inertia for both links\&. 
.br
\fImaxVel1\fP The max angular velocity of link1\&. 
.br
\fImaxVel2\fP The max angular velocity of link2\&. 
.br
\fIdt\fP The differential value\&. 
.br
\fIdoneReward\fP The reward recieved by the agent on success\&. 
.RE
.PP

.PP
Definition at line 122 of file acrobot\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "arma::colvec Dsdt (arma::colvec state, const double torque) const\fC [inline]\fP"

.PP
This is the ordinary differential equations required for estimation of nextState through RK4 method\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP Current \fBState\fP\&. 
.br
\fItorque\fP The torque Applied\&. 
.RE
.PP

.PP
Definition at line 249 of file acrobot\&.hpp\&.
.PP
References M_PI\&.
.PP
Referenced by Acrobot::Rk4()\&.
.SS "\fBState\fP InitialSample ()\fC [inline]\fP"

.PP
This function does random initialization of state space\&. 
.PP
Definition at line 213 of file acrobot\&.hpp\&.
.PP
References Acrobot::State::State()\&.
.SS "bool IsTerminal (const \fBState\fP & state) const\fC [inline]\fP"

.PP
This function checks if the acrobot has reached the terminal state\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP The current \fBState\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if state is a terminal state, otherwise false\&. 
.RE
.PP

.PP
Definition at line 225 of file acrobot\&.hpp\&.
.PP
References Acrobot::State::Theta1(), and Acrobot::State::Theta2()\&.
.PP
Referenced by Acrobot::Sample()\&.
.SS "size_t MaxSteps () const\fC [inline]\fP"

.PP
Get the maximum number of steps allowed\&. 
.PP
Definition at line 350 of file acrobot\&.hpp\&.
.SS "size_t& MaxSteps ()\fC [inline]\fP"

.PP
Set the maximum number of steps allowed\&. 
.PP
Definition at line 352 of file acrobot\&.hpp\&.
.SS "arma::colvec Rk4 (const arma::colvec state, const double torque) const\fC [inline]\fP"

.PP
This function calls the RK4 iterative method to estimate the next state based on given ordinary differential equation\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP The current \fBState\fP\&. 
.br
\fItorque\fP The torque applied\&. 
.RE
.PP

.PP
Definition at line 335 of file acrobot\&.hpp\&.
.PP
References Acrobot::Dsdt()\&.
.PP
Referenced by Acrobot::Sample()\&.
.SS "double Sample (const \fBState\fP & state, const \fBAction\fP & action, \fBState\fP & nextState)\fC [inline]\fP"

.PP
Dynamics of the \fBAcrobot\fP System\&. To get reward and next state based on current state and current action\&. Always return -1 reward\&.
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP The current \fBState\fP\&. 
.br
\fIaction\fP The action taken\&. 
.br
\fInextState\fP The next state\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
reward, it's always -1\&.0\&. 
.RE
.PP
The value of angular velocity is bounded in min and max value\&. 
.PP
Definition at line 160 of file acrobot\&.hpp\&.
.PP
References Acrobot::State::AngularVelocity1(), Acrobot::State::AngularVelocity2(), mlpack::math::ClampRange(), Acrobot::IsTerminal(), M_PI, Acrobot::Rk4(), Acrobot::State::Theta1(), Acrobot::State::Theta2(), Acrobot::Torque(), and Acrobot::Wrap()\&.
.PP
Referenced by Acrobot::Sample()\&.
.SS "double Sample (const \fBState\fP & state, const \fBAction\fP & action)\fC [inline]\fP"

.PP
Dynamics of the \fBAcrobot\fP System\&. To get reward and next state based on current state and current action\&. This function calls the Sample function to estimate the next state return reward for taking a particular action\&.
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP The current \fBState\fP\&. 
.br
\fIaction\fP The action taken\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
nextState The next state\&. 
.RE
.PP

.PP
Definition at line 204 of file acrobot\&.hpp\&.
.PP
References Acrobot::Sample()\&.
.SS "size_t StepsPerformed () const\fC [inline]\fP"

.PP
Get the number of steps performed\&. 
.PP
Definition at line 347 of file acrobot\&.hpp\&.
.SS "double Torque (const \fBAction\fP & action) const\fC [inline]\fP"

.PP
This function calculates the torque for a particular action\&. 0 : negative torque, 1 : zero torque, 2 : positive torque\&.
.PP
\fBParameters:\fP
.RS 4
\fIaction\fP \fBAction\fP taken\&. 
.RE
.PP

.PP
Definition at line 322 of file acrobot\&.hpp\&.
.PP
References Acrobot::Action::action, and mlpack::math::Random()\&.
.PP
Referenced by Acrobot::Sample()\&.
.SS "double Wrap (double value, const double minimum, const double maximum) const\fC [inline]\fP"

.PP
Wrap funtion is required to truncate the angle value from -180 to 180\&. This function will make sure that value will always be between minimum to maximum\&.
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Scalar value to wrap\&. 
.br
\fIminimum\fP Minimum range of wrap\&. 
.br
\fImaximum\fP Maximum range of wrap\&. 
.RE
.PP

.PP
Definition at line 298 of file acrobot\&.hpp\&.
.PP
Referenced by Acrobot::Sample()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
