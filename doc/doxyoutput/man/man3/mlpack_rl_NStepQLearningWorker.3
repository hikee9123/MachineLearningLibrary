.TH "NStepQLearningWorker< EnvironmentType, NetworkType, UpdaterType, PolicyType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NStepQLearningWorker< EnvironmentType, NetworkType, UpdaterType, PolicyType > \- Forward declaration of \fBNStepQLearningWorker\fP\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBActionType\fP = typename EnvironmentType::Action"
.br
.ti -1c
.RI "using \fBStateType\fP = typename EnvironmentType::State"
.br
.ti -1c
.RI "using \fBTransitionType\fP = std::tuple< \fBStateType\fP, \fBActionType\fP, double, \fBStateType\fP >"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNStepQLearningWorker\fP (const UpdaterType &updater, const EnvironmentType &environment, const \fBTrainingConfig\fP &config, bool deterministic)"
.br
.RI "Construct N-step Q-Learning worker with the given parameters and environment\&. "
.ti -1c
.RI "\fBNStepQLearningWorker\fP (const \fBNStepQLearningWorker\fP &other)"
.br
.RI "Copy another \fBNStepQLearningWorker\fP\&. "
.ti -1c
.RI "\fBNStepQLearningWorker\fP (\fBNStepQLearningWorker\fP &&other)"
.br
.RI "Take ownership of another \fBNStepQLearningWorker\fP\&. "
.ti -1c
.RI "\fB~NStepQLearningWorker\fP ()"
.br
.RI "Clean memory\&. "
.ti -1c
.RI "void \fBInitialize\fP (NetworkType &learningNetwork)"
.br
.RI "Initialize the worker\&. "
.ti -1c
.RI "\fBNStepQLearningWorker\fP & \fBoperator=\fP (const \fBNStepQLearningWorker\fP &other)"
.br
.RI "Copy another \fBNStepQLearningWorker\fP\&. "
.ti -1c
.RI "\fBNStepQLearningWorker\fP & \fBoperator=\fP (\fBNStepQLearningWorker\fP &&other)"
.br
.RI "Take ownership of another \fBNStepQLearningWorker\fP\&. "
.ti -1c
.RI "bool \fBStep\fP (NetworkType &learningNetwork, NetworkType &targetNetwork, size_t &totalSteps, PolicyType &policy, double &totalReward)"
.br
.RI "The agent will execute one step\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename EnvironmentType, typename NetworkType, typename UpdaterType, typename PolicyType>
.br
class mlpack::rl::NStepQLearningWorker< EnvironmentType, NetworkType, UpdaterType, PolicyType >"
Forward declaration of \fBNStepQLearningWorker\fP\&. 

N-step Q-Learning worker\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIEnvironmentType\fP The type of the reinforcement learning task\&. 
.br
\fINetworkType\fP The type of the network model\&. 
.br
\fIUpdaterType\fP The type of the optimizer\&. 
.br
\fIPolicyType\fP The type of the behavior policy\&. 
.RE
.PP

.PP
Definition at line 179 of file async_learning\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "using \fBActionType\fP =  typename EnvironmentType::Action"

.PP
Definition at line 40 of file n_step_q_learning_worker\&.hpp\&.
.SS "using \fBStateType\fP =  typename EnvironmentType::State"

.PP
Definition at line 39 of file n_step_q_learning_worker\&.hpp\&.
.SS "using \fBTransitionType\fP =  std::tuple<\fBStateType\fP, \fBActionType\fP, double, \fBStateType\fP>"

.PP
Definition at line 41 of file n_step_q_learning_worker\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBNStepQLearningWorker\fP (const UpdaterType & updater, const EnvironmentType & environment, const \fBTrainingConfig\fP & config, bool deterministic)\fC [inline]\fP"

.PP
Construct N-step Q-Learning worker with the given parameters and environment\&. 
.PP
\fBParameters:\fP
.RS 4
\fIupdater\fP The optimizer\&. 
.br
\fIenvironment\fP The reinforcement learning task\&. 
.br
\fIconfig\fP Hyper-parameters\&. 
.br
\fIdeterministic\fP Whether it should be deterministic\&. 
.RE
.PP

.PP
Definition at line 52 of file n_step_q_learning_worker\&.hpp\&.
.SS "\fBNStepQLearningWorker\fP (const \fBNStepQLearningWorker\fP< EnvironmentType, NetworkType, UpdaterType, PolicyType > & other)\fC [inline]\fP"

.PP
Copy another \fBNStepQLearningWorker\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBNStepQLearningWorker\fP to copy\&. 
.RE
.PP

.PP
Definition at line 72 of file n_step_q_learning_worker\&.hpp\&.
.SS "\fBNStepQLearningWorker\fP (\fBNStepQLearningWorker\fP< EnvironmentType, NetworkType, UpdaterType, PolicyType > && other)\fC [inline]\fP"

.PP
Take ownership of another \fBNStepQLearningWorker\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBNStepQLearningWorker\fP to take ownership of\&. 
.RE
.PP

.PP
Definition at line 102 of file n_step_q_learning_worker\&.hpp\&.
.SS "~\fBNStepQLearningWorker\fP ()\fC [inline]\fP"

.PP
Clean memory\&. 
.PP
Definition at line 204 of file n_step_q_learning_worker\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void Initialize (NetworkType & learningNetwork)\fC [inline]\fP"

.PP
Initialize the worker\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlearningNetwork\fP The shared network\&. 
.RE
.PP

.PP
Definition at line 215 of file n_step_q_learning_worker\&.hpp\&.
.SS "\fBNStepQLearningWorker\fP& operator= (const \fBNStepQLearningWorker\fP< EnvironmentType, NetworkType, UpdaterType, PolicyType > & other)\fC [inline]\fP"

.PP
Copy another \fBNStepQLearningWorker\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBNStepQLearningWorker\fP to copy\&. 
.RE
.PP

.PP
Definition at line 132 of file n_step_q_learning_worker\&.hpp\&.
.SS "\fBNStepQLearningWorker\fP& operator= (\fBNStepQLearningWorker\fP< EnvironmentType, NetworkType, UpdaterType, PolicyType > && other)\fC [inline]\fP"

.PP
Take ownership of another \fBNStepQLearningWorker\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP \fBNStepQLearningWorker\fP to take ownership of\&. 
.RE
.PP

.PP
Definition at line 169 of file n_step_q_learning_worker\&.hpp\&.
.SS "bool Step (NetworkType & learningNetwork, NetworkType & targetNetwork, size_t & totalSteps, PolicyType & policy, double & totalReward)\fC [inline]\fP"

.PP
The agent will execute one step\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlearningNetwork\fP The shared learning network\&. 
.br
\fItargetNetwork\fP The shared target network\&. 
.br
\fItotalSteps\fP The shared counter for total steps\&. 
.br
\fIpolicy\fP The shared behavior policy\&. 
.br
\fItotalReward\fP This will be the episode return if the episode ends after this step\&. Otherwise this is invalid\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Indicate whether current episode ends after this step\&. 
.RE
.PP

.PP
Definition at line 244 of file n_step_q_learning_worker\&.hpp\&.
.PP
References TrainingConfig::Discount(), TrainingConfig::GradientLimit(), TrainingConfig::StepLimit(), TrainingConfig::StepSize(), TrainingConfig::TargetNetworkSyncInterval(), and TrainingConfig::UpdateInterval()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
