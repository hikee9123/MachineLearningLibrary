.TH "SoftmaxErrorFunction< MetricType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoftmaxErrorFunction< MetricType > \- The 'softmax' stochastic neighbor assignment probability function\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoftmaxErrorFunction\fP (const arma::mat &dataset, const arma::Row< size_t > &labels, MetricType metric=MetricType())"
.br
.RI "Initialize with the given kernel; useful when the kernel has some state to store, which is set elsewhere\&. "
.ti -1c
.RI "double \fBEvaluate\fP (const arma::mat &covariance)"
.br
.RI "Evaluate the softmax function for the given covariance matrix\&. "
.ti -1c
.RI "double \fBEvaluate\fP (const arma::mat &covariance, const size_t begin, const size_t batchSize=1)"
.br
.RI "Evaluate the softmax objective function for the given covariance matrix on the given batch size from a given inital point of the dataset\&. "
.ti -1c
.RI "const arma::mat \fBGetInitialPoint\fP () const"
.br
.RI "Get the initial point\&. "
.ti -1c
.RI "void \fBGradient\fP (const arma::mat &covariance, arma::mat &gradient)"
.br
.RI "Evaluate the gradient of the softmax function for the given covariance matrix\&. "
.ti -1c
.RI "template<typename GradType > void \fBGradient\fP (const arma::mat &covariance, const size_t begin, GradType &gradient, const size_t batchSize=1)"
.br
.RI "Evaluate the gradient of the softmax function for the given covariance matrix on the given batch size, from a given initial point of the dataset\&. "
.ti -1c
.RI "size_t \fBNumFunctions\fP () const"
.br
.RI "Get the number of functions the objective function can be decomposed into\&. "
.ti -1c
.RI "void \fBShuffle\fP ()"
.br
.RI "Shuffle the dataset\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType = metric::SquaredEuclideanDistance>
.br
class mlpack::nca::SoftmaxErrorFunction< MetricType >"
The 'softmax' stochastic neighbor assignment probability function\&. 

The actual function is
.PP
p_ij = (exp(-|| A x_i - A x_j || ^ 2)) / (sum_{k != i} (exp(-|| A x_i - A x_k || ^ 2)))
.PP
where x_n represents a point and A is the current scaling matrix\&.
.PP
This class is more flexible than the original paper, allowing an arbitrary metric function to be used in place of || A x_i - A x_j ||^2, meaning that the squared Euclidean distance is not the only allowed metric for \fBNCA\fP\&. However, that is probably the best way to use this class\&.
.PP
In addition to the standard \fBEvaluate()\fP and \fBGradient()\fP functions which mlpack optimizers use, overloads of \fBEvaluate()\fP and \fBGradient()\fP are given which only operate on one point in the dataset\&. This is useful for optimizers like stochastic gradient descent (see mlpack::optimization::SGD)\&. 
.PP
Definition at line 45 of file nca_softmax_error_function\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBSoftmaxErrorFunction\fP (const arma::mat & dataset, const arma::Row< size_t > & labels, MetricType metric = \fCMetricType()\fP)"

.PP
Initialize with the given kernel; useful when the kernel has some state to store, which is set elsewhere\&. If no kernel is given, an empty kernel is used; this way, you can call the constructor with no arguments\&. A reference to the dataset we will be optimizing over is also required\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Matrix containing the dataset\&. 
.br
\fIlabels\fP Vector of class labels for each point in the dataset\&. 
.br
\fImetric\fP Instantiated metric (optional)\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "double Evaluate (const arma::mat & covariance)"

.PP
Evaluate the softmax function for the given covariance matrix\&. This is the non-separable implementation, where the objective function is not decomposed into the sum of several objective functions\&.
.PP
\fBParameters:\fP
.RS 4
\fIcovariance\fP Covariance matrix of Mahalanobis distance\&. 
.RE
.PP

.SS "double Evaluate (const arma::mat & covariance, const size_t begin, const size_t batchSize = \fC1\fP)"

.PP
Evaluate the softmax objective function for the given covariance matrix on the given batch size from a given inital point of the dataset\&. This is the separable implementation, where the objective function is decomposed into the sum of many objective functions, and here, only one of those constituent objective functions is returned\&.
.PP
\fBParameters:\fP
.RS 4
\fIcovariance\fP Covariance matrix of Mahalanobis distance\&. 
.br
\fIbegin\fP Index of the initial point to use for objective function\&. 
.br
\fIbatchSize\fP Number of points to use for objective function\&. 
.RE
.PP

.SS "const arma::mat GetInitialPoint () const"

.PP
Get the initial point\&. 
.SS "void Gradient (const arma::mat & covariance, arma::mat & gradient)"

.PP
Evaluate the gradient of the softmax function for the given covariance matrix\&. This is the non-separable implementation, where the objective function is not decomposed into the sum of several objective functions\&.
.PP
\fBParameters:\fP
.RS 4
\fIcovariance\fP Covariance matrix of Mahalanobis distance\&. 
.br
\fIgradient\fP Matrix to store the calculated gradient in\&. 
.RE
.PP

.SS "void Gradient (const arma::mat & covariance, const size_t begin, GradType & gradient, const size_t batchSize = \fC1\fP)"

.PP
Evaluate the gradient of the softmax function for the given covariance matrix on the given batch size, from a given initial point of the dataset\&. This is the separable implementation, where the objective function is decomposed into the sum of many objective functions, and here, only one of those constituent objective functions is returned\&. The type of the gradient parameter is a template argument to allow the computation of a sparse gradient\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIGradType\fP The type of the gradient out-param\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIcovariance\fP Covariance matrix of Mahalanobis distance\&. 
.br
\fIbegin\fP Index of the initial point to use for objective function\&. 
.br
\fIbatchSize\fP Number of points to use for objective function\&. 
.br
\fIgradient\fP Matrix to store the calculated gradient in\&. 
.RE
.PP

.SS "size_t NumFunctions () const\fC [inline]\fP"

.PP
Get the number of functions the objective function can be decomposed into\&. This is just the number of points in the dataset\&. 
.PP
Definition at line 132 of file nca_softmax_error_function\&.hpp\&.
.SS "void Shuffle ()"

.PP
Shuffle the dataset\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
