.TH "LogisticRegression< MatType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LogisticRegression< MatType > \- The \fBLogisticRegression\fP class implements an L2-regularized logistic regression model, and supports training with multiple optimizers and classification\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLogisticRegression\fP (const MatType &predictors, const arma::Row< size_t > &responses, const double lambda=0)"
.br
.RI "Construct the \fBLogisticRegression\fP class with the given labeled training data\&. "
.ti -1c
.RI "\fBLogisticRegression\fP (const MatType &predictors, const arma::Row< size_t > &responses, const arma::rowvec &initialPoint, const double lambda=0)"
.br
.RI "Construct the \fBLogisticRegression\fP class with the given labeled training data\&. "
.ti -1c
.RI "\fBLogisticRegression\fP (const size_t dimensionality=0, const double lambda=0)"
.br
.RI "Construct the \fBLogisticRegression\fP class without performing any training\&. "
.ti -1c
.RI "template<typename OptimizerType > \fBLogisticRegression\fP (const MatType &predictors, const arma::Row< size_t > &responses, OptimizerType &optimizer, const double lambda)"
.br
.RI "Construct the \fBLogisticRegression\fP class with the given labeled training data\&. "
.ti -1c
.RI "template<typename VecType > size_t \fBClassify\fP (const VecType &point, const double decisionBoundary=0\&.5) const"
.br
.RI "Classify the given point\&. "
.ti -1c
.RI "void \fBClassify\fP (const MatType &dataset, arma::Row< size_t > &labels, const double decisionBoundary=0\&.5) const"
.br
.RI "Classify the given points, returning the predicted labels for each point\&. "
.ti -1c
.RI "void \fBClassify\fP (const MatType &dataset, arma::mat &probabilities) const"
.br
.RI "Classify the given points, returning class probabilities for each point\&. "
.ti -1c
.RI "double \fBComputeAccuracy\fP (const MatType &predictors, const arma::Row< size_t > &responses, const double decisionBoundary=0\&.5) const"
.br
.RI "Compute the accuracy of the model on the given predictors and responses, optionally using the given decision boundary\&. "
.ti -1c
.RI "double \fBComputeError\fP (const MatType &predictors, const arma::Row< size_t > &responses) const"
.br
.RI "Compute the error of the model\&. "
.ti -1c
.RI "const double & \fBLambda\fP () const"
.br
.RI "Return the lambda value for L2-regularization\&. "
.ti -1c
.RI "double & \fBLambda\fP ()"
.br
.RI "Modify the lambda value for L2-regularization\&. "
.ti -1c
.RI "const arma::rowvec & \fBParameters\fP () const"
.br
.RI "Return the parameters (the b vector)\&. "
.ti -1c
.RI "arma::rowvec & \fBParameters\fP ()"
.br
.RI "Modify the parameters (the b vector)\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the model\&. "
.ti -1c
.RI "template<typename OptimizerType  = ens::L_BFGS, typename\&.\&.\&. CallbackTypes> double \fBTrain\fP (const MatType &predictors, const arma::Row< size_t > &responses, CallbackTypes &&\&.\&.\&. callbacks)"
.br
.RI "Train the \fBLogisticRegression\fP model on the given input data\&. "
.ti -1c
.RI "template<typename OptimizerType , typename\&.\&.\&. CallbackTypes> double \fBTrain\fP (const MatType &predictors, const arma::Row< size_t > &responses, OptimizerType &optimizer, CallbackTypes &&\&.\&.\&. callbacks)"
.br
.RI "Train the \fBLogisticRegression\fP model with the given instantiated optimizer\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MatType = arma::mat>
.br
class mlpack::regression::LogisticRegression< MatType >"
The \fBLogisticRegression\fP class implements an L2-regularized logistic regression model, and supports training with multiple optimizers and classification\&. 

The class supports different observation types via the MatType template parameter; for instance, logistic regression can be performed on sparse datasets by specifying arma::sp_mat as the MatType parameter\&.
.PP
\fBLogisticRegression\fP can be used for general classification tasks, but the class is restricted to support only two classes\&. For multiclass logistic regression, see \fBmlpack::regression::SoftmaxRegression\fP\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMatType\fP Type of data matrix\&. 
.RE
.PP

.PP
Definition at line 39 of file logistic_regression\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBLogisticRegression\fP (const MatType & predictors, const arma::Row< size_t > & responses, const double lambda = \fC0\fP)"

.PP
Construct the \fBLogisticRegression\fP class with the given labeled training data\&. This will train the model\&. Optionally, specify lambda, which is the penalty parameter for L2-regularization\&. If not specified, it is set to 0, which results in standard (unregularized) logistic regression\&.
.PP
It is not possible to set a custom optimizer with this constructor\&. Either use a constructor that does not train and call \fBTrain()\fP with a custom optimizer type, or use the constructor that takes an instantiated optimizer\&. (This unfortunate situation is a language restriction of C++\&.)
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input training variables\&. 
.br
\fIresponses\fP Outputs resulting from input training variables\&. 
.br
\fIlambda\fP L2-regularization parameter\&. 
.RE
.PP

.SS "\fBLogisticRegression\fP (const MatType & predictors, const arma::Row< size_t > & responses, const arma::rowvec & initialPoint, const double lambda = \fC0\fP)"

.PP
Construct the \fBLogisticRegression\fP class with the given labeled training data\&. This will train the model\&. Optionally, specify lambda, which is the penalty parameter for L2-regularization\&. If not specified, it is set to 0, which results in standard (unregularized) logistic regression\&.
.PP
It is not possible to set a custom optimizer with this constructor\&. Either use a constructor that does not train and call \fBTrain()\fP with a custom optimizer type, or use the constructor that takes an instantiated optimizer\&. (This unfortunate situation is a language restriction of C++\&.)
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input training variables\&. 
.br
\fIresponses\fP Outputs results from input training variables\&. 
.br
\fIinitialPoint\fP Initial model to train with\&. 
.br
\fIlambda\fP L2-regularization parameter\&. 
.RE
.PP

.SS "\fBLogisticRegression\fP (const size_t dimensionality = \fC0\fP, const double lambda = \fC0\fP)"

.PP
Construct the \fBLogisticRegression\fP class without performing any training\&. The dimensionality of the data (which will be used to set the size of the parameters vector) must be specified, and all of the parameters in the model will be set to 0\&. Note that the dimensionality may be changed later by directly modifying the parameters vector (using \fBParameters()\fP)\&.
.PP
\fBParameters:\fP
.RS 4
\fIdimensionality\fP Dimensionality of the data\&. 
.br
\fIlambda\fP L2-regularization parameter\&. 
.RE
.PP

.SS "\fBLogisticRegression\fP (const MatType & predictors, const arma::Row< size_t > & responses, OptimizerType & optimizer, const double lambda)"

.PP
Construct the \fBLogisticRegression\fP class with the given labeled training data\&. This will train the model\&. This overload takes an already instantiated optimizer (which holds the \fBLogisticRegressionFunction\fP error function, which must also be instantiated), so that the optimizer can be configured before the training is run by this constructor\&. The update policy of the optimizer can be set through the policy argument\&. The predictors and responses and initial point are all taken from the error function contained in the optimizer\&.
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input training variables\&. 
.br
\fIresponses\fP Outputs results from input training variables\&. 
.br
\fIoptimizer\fP Instantiated optimizer with instantiated error function\&. 
.br
\fIlambda\fP L2-regularization parameter\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "size_t Classify (const VecType & point, const double decisionBoundary = \fC0\&.5\fP) const"

.PP
Classify the given point\&. The predicted label is returned\&. Optionally, specify the decision boundary; logistic regression returns a value between 0 and 1\&. If the value is greater than the decision boundary, the response is taken to be 1; otherwise, it is 0\&. By default the decision boundary is 0\&.5\&.
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to classify\&. 
.br
\fIdecisionBoundary\fP Decision boundary (default 0\&.5)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Predicted label of point\&. 
.RE
.PP

.PP
Referenced by LogisticRegression< MatType >::Lambda()\&.
.SS "void Classify (const MatType & dataset, arma::Row< size_t > & labels, const double decisionBoundary = \fC0\&.5\fP) const"

.PP
Classify the given points, returning the predicted labels for each point\&. Optionally, specify the decision boundary; logistic regression returns a value between 0 and 1\&. If the value is greater than the decision boundary, the response is taken to be 1; otherwise, it is 0\&. By default the decision boundary is 0\&.5\&.
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Set of points to classify\&. 
.br
\fIlabels\fP Predicted labels for each point\&. 
.br
\fIdecisionBoundary\fP Decision boundary (default 0\&.5)\&. 
.RE
.PP

.SS "void Classify (const MatType & dataset, arma::mat & probabilities) const"

.PP
Classify the given points, returning class probabilities for each point\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdataset\fP Set of points to classify\&. 
.br
\fIprobabilities\fP Class probabilities for each point (output)\&. 
.RE
.PP

.SS "double ComputeAccuracy (const MatType & predictors, const arma::Row< size_t > & responses, const double decisionBoundary = \fC0\&.5\fP) const"

.PP
Compute the accuracy of the model on the given predictors and responses, optionally using the given decision boundary\&. The responses should be either 0 or 1\&. Logistic regression returns a value between 0 and 1\&. If the value is greater than the decision boundary, the response is taken to be 1; otherwise, it is 0\&. By default, the decision boundary is 0\&.5\&.
.PP
The accuracy is returned as a percentage, between 0 and 100\&.
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input predictors\&. 
.br
\fIresponses\fP Vector of responses\&. 
.br
\fIdecisionBoundary\fP Decision boundary (default 0\&.5)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Percentage of responses that are predicted correctly\&. 
.RE
.PP

.PP
Referenced by LogisticRegression< MatType >::Lambda()\&.
.SS "double ComputeError (const MatType & predictors, const arma::Row< size_t > & responses) const"

.PP
Compute the error of the model\&. This returns the negative objective function of the logistic regression log-likelihood function\&. For the model to be optimal, the negative log-likelihood function should be minimized\&.
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input predictors\&. 
.br
\fIresponses\fP Vector of responses\&. 
.RE
.PP

.PP
Referenced by LogisticRegression< MatType >::Lambda()\&.
.SS "const double& Lambda () const\fC [inline]\fP"

.PP
Return the lambda value for L2-regularization\&. 
.PP
Definition at line 168 of file logistic_regression\&.hpp\&.
.SS "double& Lambda ()\fC [inline]\fP"

.PP
Modify the lambda value for L2-regularization\&. 
.PP
Definition at line 170 of file logistic_regression\&.hpp\&.
.PP
References LogisticRegression< MatType >::Classify(), LogisticRegression< MatType >::ComputeAccuracy(), LogisticRegression< MatType >::ComputeError(), and LogisticRegression< MatType >::serialize()\&.
.SS "const arma::rowvec& Parameters () const\fC [inline]\fP"

.PP
Return the parameters (the b vector)\&. 
.PP
Definition at line 163 of file logistic_regression\&.hpp\&.
.SS "arma::rowvec& Parameters ()\fC [inline]\fP"

.PP
Modify the parameters (the b vector)\&. 
.PP
Definition at line 165 of file logistic_regression\&.hpp\&.
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the model\&. 
.PP
Referenced by LogisticRegression< MatType >::Lambda()\&.
.SS "double Train (const MatType & predictors, const arma::Row< size_t > & responses, CallbackTypes &&\&.\&.\&. callbacks)"

.PP
Train the \fBLogisticRegression\fP model on the given input data\&. By default, the L-BFGS optimization algorithm is used, but others can be specified (such as ens::SGD)\&.
.PP
This will use the existing model parameters as a starting point for the optimization\&. If this is not what you want, then you should access the parameters vector directly with \fBParameters()\fP and modify it as desired\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOptimizerType\fP Type of optimizer to use to train the model\&. 
.br
\fICallbackTypes\fP Types of Callback Functions\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input training variables\&. 
.br
\fIresponses\fP Outputs results from input training variables\&. 
.br
\fIcallbacks\fP Callback function for ensmallen optimizer \fCOptimizerType\fP\&. See https://www.ensmallen.org/docs.html#callback-documentation\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The final objective of the trained model (NaN or Inf on error) 
.RE
.PP

.SS "double Train (const MatType & predictors, const arma::Row< size_t > & responses, OptimizerType & optimizer, CallbackTypes &&\&.\&.\&. callbacks)"

.PP
Train the \fBLogisticRegression\fP model with the given instantiated optimizer\&. Using this overload allows configuring the instantiated optimizer before training is performed\&.
.PP
This will use the existing model parameters as a starting point for the optimization\&. If this is not what you want, then you should access the parameters vector directly with \fBParameters()\fP and modify it as desired\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIOptimizerType\fP Type of optimizer to use to train the model\&. 
.br
\fICallbackTypes\fP Types of Callback Functions\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIpredictors\fP Input training variables\&. 
.br
\fIresponses\fP Outputs results from input training variables\&. 
.br
\fIoptimizer\fP Instantiated optimizer with instantiated error function\&. 
.br
\fIcallbacks\fP Callback function for ensmallen optimizer \fCOptimizerType\fP\&. See https://www.ensmallen.org/docs.html#callback-documentation\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The final objective of the trained model (NaN or Inf on error) 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
