.TH "Softmin< InputDataType, OutputDataType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Softmin< InputDataType, OutputDataType > \- Implementation of the \fBSoftmin\fP layer\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoftmin\fP ()"
.br
.RI "Create the \fBSoftmin\fP object\&. "
.ti -1c
.RI "template<typename eT > void \fBBackward\fP (const arma::Mat< eT > &input, const arma::Mat< eT > &gy, arma::Mat< eT > &g)"
.br
.RI "Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards through f\&. "
.ti -1c
.RI "InputDataType & \fBDelta\fP () const"
.br
.RI "Get the delta\&. "
.ti -1c
.RI "InputDataType & \fBDelta\fP ()"
.br
.RI "Modify the delta\&. "
.ti -1c
.RI "template<typename InputType , typename OutputType > void \fBForward\fP (const InputType &input, OutputType &output)"
.br
.RI "Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP () const"
.br
.RI "Get the output parameter\&. "
.ti -1c
.RI "OutputDataType & \fBOutputParameter\fP ()"
.br
.RI "Modify the output parameter\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &, const uint32_t)"
.br
.RI "Serialize the layer\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename InputDataType = arma::mat, typename OutputDataType = arma::mat>
.br
class mlpack::ann::Softmin< InputDataType, OutputDataType >"
Implementation of the \fBSoftmin\fP layer\&. 

The \fBSoftmin\fP function takes as a input a vector of K real numbers, rescaling them so that the elements of the K-dimensional output vector lie in the range [0, 1] and sum to 1\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIInputDataType\fP Type of the input data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.br
\fIOutputDataType\fP Type of the output data (arma::colvec, arma::mat, arma::sp_mat or arma::cube)\&. 
.RE
.PP

.PP
Definition at line 35 of file softmin\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBSoftmin\fP ()"

.PP
Create the \fBSoftmin\fP object\&. 
.SH "Member Function Documentation"
.PP 
.SS "void Backward (const arma::Mat< eT > & input, const arma::Mat< eT > & gy, arma::Mat< eT > & g)"

.PP
Ordinary feed backward pass of a neural network, calculating the function f(x) by propagating x backwards through f\&. Using the results from the feed forward pass\&.
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP The propagated input activation\&. 
.br
\fIgy\fP The backpropagated error\&. 
.br
\fIg\fP The calculated gradient\&. 
.RE
.PP

.SS "InputDataType& Delta () const\fC [inline]\fP"

.PP
Get the delta\&. 
.PP
Definition at line 73 of file softmin\&.hpp\&.
.SS "InputDataType& Delta ()\fC [inline]\fP"

.PP
Modify the delta\&. 
.PP
Definition at line 75 of file softmin\&.hpp\&.
.PP
References Softmin< InputDataType, OutputDataType >::serialize()\&.
.SS "void Forward (const InputType & input, OutputType & output)"

.PP
Ordinary feed forward pass of a neural network, evaluating the function f(x) by propagating the activity forward through f\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP Input data used for evaluating the specified function\&. 
.br
\fIoutput\fP Resulting output activation\&. 
.RE
.PP

.SS "OutputDataType& OutputParameter () const\fC [inline]\fP"

.PP
Get the output parameter\&. 
.PP
Definition at line 68 of file softmin\&.hpp\&.
.SS "OutputDataType& OutputParameter ()\fC [inline]\fP"

.PP
Modify the output parameter\&. 
.PP
Definition at line 70 of file softmin\&.hpp\&.
.SS "void serialize (Archive &, const uint32_t)"

.PP
Serialize the layer\&. 
.PP
Referenced by Softmin< InputDataType, OutputDataType >::Delta()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
