.TH "BestBinaryNumericSplit< FitnessFunction >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BestBinaryNumericSplit< FitnessFunction > \- The \fBBestBinaryNumericSplit\fP is a splitting function for decision trees that will exhaustively search a numeric dimension for the best binary split\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAuxiliarySplitInfo\fP"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename ElemType > static size_t \fBCalculateDirection\fP (const ElemType &point, const double &splitInfo, const \fBAuxiliarySplitInfo\fP &)"
.br
.RI "Given a point, calculate which child it should go to (left or right)\&. "
.ti -1c
.RI "static size_t \fBNumChildren\fP (const double &, const \fBAuxiliarySplitInfo\fP &)"
.br
.RI "Returns 2, since the binary split always has two children\&. "
.ti -1c
.RI "template<bool UseWeights, typename VecType , typename WeightVecType > static double \fBSplitIfBetter\fP (const double bestGain, const VecType &data, const arma::Row< size_t > &labels, const size_t numClasses, const WeightVecType &weights, const size_t minimumLeafSize, const double minimumGainSplit, arma::vec &splitInfo, \fBAuxiliarySplitInfo\fP &aux)"
.br
.RI "Check if we can split a node\&. "
.ti -1c
.RI "template<bool UseWeights, typename VecType , typename ResponsesType , typename WeightVecType > static std::enable_if< !\fBHasOptimizedBinarySplitForms\fP< FitnessFunction, UseWeights >::value, double >::type \fBSplitIfBetter\fP (const double bestGain, const VecType &data, const ResponsesType &responses, const WeightVecType &weights, const size_t minimumLeafSize, const double minimumGainSplit, double &splitInfo, \fBAuxiliarySplitInfo\fP &aux, FitnessFunction &fitnessFunction)"
.br
.RI "Check if we can split a node\&. "
.ti -1c
.RI "template<bool UseWeights, typename VecType , typename ResponsesType , typename WeightVecType > static std::enable_if< \fBHasOptimizedBinarySplitForms\fP< FitnessFunction, UseWeights >::value, double >::type \fBSplitIfBetter\fP (const double bestGain, const VecType &data, const ResponsesType &responses, const WeightVecType &weights, const size_t minimumLeafSize, const double minimumGainSplit, double &splitInfo, \fBAuxiliarySplitInfo\fP &, FitnessFunction &fitnessFunction)"
.br
.RI "Check if we can split a node\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename FitnessFunction>
.br
class mlpack::tree::BestBinaryNumericSplit< FitnessFunction >"
The \fBBestBinaryNumericSplit\fP is a splitting function for decision trees that will exhaustively search a numeric dimension for the best binary split\&. 


.PP
\fBTemplate Parameters:\fP
.RS 4
\fIFitnessFunction\fP Fitness function to use to calculate gain\&. 
.RE
.PP

.PP
Definition at line 49 of file best_binary_numeric_split\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "static size_t CalculateDirection (const ElemType & point, const double & splitInfo, const \fBAuxiliarySplitInfo\fP &)\fC [static]\fP"

.PP
Given a point, calculate which child it should go to (left or right)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to calculate direction of\&. 
.br
\fIsplitInfo\fP Auxiliary information for the split\&. 
.br
\fI*\fP (aux) Auxiliary information for the split (Unused)\&. 
.RE
.PP

.SS "static size_t NumChildren (const double &, const \fBAuxiliarySplitInfo\fP &)\fC [inline]\fP, \fC [static]\fP"

.PP
Returns 2, since the binary split always has two children\&. 
.PP
Definition at line 166 of file best_binary_numeric_split\&.hpp\&.
.SS "static double SplitIfBetter (const double bestGain, const VecType & data, const arma::Row< size_t > & labels, const size_t numClasses, const WeightVecType & weights, const size_t minimumLeafSize, const double minimumGainSplit, arma::vec & splitInfo, \fBAuxiliarySplitInfo\fP & aux)\fC [static]\fP"

.PP
Check if we can split a node\&. If we can split a node in a way that improves on 'bestGain', then we return the improved gain\&. Otherwise we return the value 'bestGain'\&. If a split is made, then splitInfo and aux may be modified\&.
.PP
This overload is used only for classification tasks\&.
.PP
\fBParameters:\fP
.RS 4
\fIbestGain\fP Best gain seen so far (we'll only split if we find gain better than this)\&. 
.br
\fIdata\fP The dimension of data points to check for a split in\&. 
.br
\fIlabels\fP Labels for each point\&. 
.br
\fInumClasses\fP Number of classes in the dataset\&. 
.br
\fIweights\fP Weights associated with labels\&. 
.br
\fIminimumLeafSize\fP Minimum number of points in a leaf node for splitting\&. 
.br
\fIminimumGainSplit\fP Minimum gain split\&. 
.br
\fIsplitInfo\fP Stores split information on a successful split\&. 
.br
\fIaux\fP Auxiliary split information, which may be modified on a successful split\&. 
.RE
.PP

.SS "static std::enable_if< !\fBHasOptimizedBinarySplitForms\fP<FitnessFunction, UseWeights>::value, double>::type SplitIfBetter (const double bestGain, const VecType & data, const ResponsesType & responses, const WeightVecType & weights, const size_t minimumLeafSize, const double minimumGainSplit, double & splitInfo, \fBAuxiliarySplitInfo\fP & aux, FitnessFunction & fitnessFunction)\fC [static]\fP"

.PP
Check if we can split a node\&. If we can split a node in a way that improves on 'bestGain', then we return the improved gain\&. Otherwise we return the value 'bestGain'\&. If a split is made, then splitInfo and aux may be modified\&.
.PP
This overload is used only for regression tasks\&.
.PP
\fBParameters:\fP
.RS 4
\fIbestGain\fP Best gain seen so far (we'll only split if we find gain better than this)\&. 
.br
\fIdata\fP The dimension of data points to check for a split in\&. 
.br
\fIresponses\fP Responses for each point\&. 
.br
\fIweights\fP Weights associated with responses\&. 
.br
\fIminimumLeafSize\fP Minimum number of points in a leaf node for splitting\&. 
.br
\fIminimumGainSplit\fP Minimum gain split\&. 
.br
\fIsplitInfo\fP Stores split information on a successful split\&. 
.br
\fIaux\fP Auxiliary split information, which may be modified on a successful split\&. 
.br
\fIfitnessFunction\fP The FitnessFunction object instance\&. It it used to evaluate the gain for the split\&. 
.RE
.PP

.SS "static std::enable_if< \fBHasOptimizedBinarySplitForms\fP<FitnessFunction, UseWeights>::value, double>::type SplitIfBetter (const double bestGain, const VecType & data, const ResponsesType & responses, const WeightVecType & weights, const size_t minimumLeafSize, const double minimumGainSplit, double & splitInfo, \fBAuxiliarySplitInfo\fP &, FitnessFunction & fitnessFunction)\fC [static]\fP"

.PP
Check if we can split a node\&. If we can split a node in a way that improves on 'bestGain', then we return the improved gain\&. Otherwise we return the value 'bestGain'\&. If a split is made, then splitInfo and aux may be modified\&.
.PP
This overload is specialized for any fitness function that implements BinaryScanInitialize(), BinaryStep() and BinaryGains() functions\&.
.PP
\fBParameters:\fP
.RS 4
\fIbestGain\fP Best gain seen so far (we'll only split if we find gain better than this)\&. 
.br
\fIdata\fP The dimension of data points to check for a split in\&. 
.br
\fIresponses\fP Responses for each point\&. 
.br
\fIweights\fP Weights associated with responses\&. 
.br
\fIminimumLeafSize\fP Minimum number of points in a leaf node for splitting\&. 
.br
\fIminimumGainSplit\fP Minimum gain split\&. 
.br
\fIsplitInfo\fP Stores split information on a successful split\&. 
.br
\fIaux\fP Auxiliary split information, which may be modified on a successful split\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
