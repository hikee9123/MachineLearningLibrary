.TH "Octree< MetricType, StatisticType, MatType >" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Octree< MetricType, StatisticType, MatType >
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBDualTreeTraverser\fP"
.br
.RI "A dual-tree traverser; see dual_tree_traverser\&.hpp\&. "
.ti -1c
.RI "class \fBSingleTreeTraverser\fP"
.br
.RI "A single-tree traverser; see single_tree_traverser\&.hpp\&. "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef MatType::elem_type \fBElemType\fP"
.br
.RI "The type of element held in MatType\&. "
.ti -1c
.RI "typedef MatType \fBMat\fP"
.br
.RI "So other classes can use TreeType::Mat\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBOctree\fP (const MatType &data, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of an octree on the given dataset\&. "
.ti -1c
.RI "\fBOctree\fP (const MatType &data, std::vector< size_t > &oldFromNew, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of an octree on the given dataset\&. "
.ti -1c
.RI "\fBOctree\fP (const MatType &data, std::vector< size_t > &oldFromNew, std::vector< size_t > &newFromOld, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of an octree on the given dataset\&. "
.ti -1c
.RI "\fBOctree\fP (MatType &&data, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of an octree on the given dataset\&. "
.ti -1c
.RI "\fBOctree\fP (MatType &&data, std::vector< size_t > &oldFromNew, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of an octree on the given dataset\&. "
.ti -1c
.RI "\fBOctree\fP (MatType &&data, std::vector< size_t > &oldFromNew, std::vector< size_t > &newFromOld, const size_t maxLeafSize=20)"
.br
.RI "Construct this as the root node of an octree on the given dataset\&. "
.ti -1c
.RI "\fBOctree\fP (\fBOctree\fP *parent, const size_t begin, const size_t count, const arma::vec &center, const double width, const size_t maxLeafSize=20)"
.br
.RI "Construct this node as a child of the given parent, starting at column begin and using count points\&. "
.ti -1c
.RI "\fBOctree\fP (\fBOctree\fP *parent, const size_t begin, const size_t count, std::vector< size_t > &oldFromNew, const arma::vec &center, const double width, const size_t maxLeafSize=20)"
.br
.RI "Construct this node as a child of the given parent, starting at column begin and using count points\&. "
.ti -1c
.RI "\fBOctree\fP (const \fBOctree\fP &other)"
.br
.RI "Copy the given tree\&. "
.ti -1c
.RI "\fBOctree\fP (\fBOctree\fP &&other)"
.br
.RI "Move the given tree\&. "
.ti -1c
.RI "template<typename Archive > \fBOctree\fP (Archive &ar, const typename \fBstd::enable_if_t\fP< \fBcereal::is_loading\fP< Archive >()> *=0)"
.br
.RI "Initialize the tree from a cereal archive\&. "
.ti -1c
.RI "\fB~Octree\fP ()"
.br
.RI "Destroy the tree\&. "
.ti -1c
.RI "const \fBbound::HRectBound\fP< MetricType > & \fBBound\fP () const"
.br
.RI "Return the bound object for this node\&. "
.ti -1c
.RI "\fBbound::HRectBound\fP< MetricType > & \fBBound\fP ()"
.br
.RI "Modify the bound object for this node\&. "
.ti -1c
.RI "void \fBCenter\fP (arma::vec &center) const"
.br
.RI "Store the center of the bounding region in the given vector\&. "
.ti -1c
.RI "const \fBOctree\fP & \fBChild\fP (const size_t child) const"
.br
.RI "Return the specified child\&. "
.ti -1c
.RI "\fBOctree\fP & \fBChild\fP (const size_t child)"
.br
.RI "Return the specified child\&. "
.ti -1c
.RI "\fBOctree\fP *& \fBChildPtr\fP (const size_t child)"
.br
.RI "Return the pointer to the given child\&. "
.ti -1c
.RI "const MatType & \fBDataset\fP () const"
.br
.RI "Return the dataset used by this node\&. "
.ti -1c
.RI "size_t \fBDescendant\fP (const size_t index) const"
.br
.RI "Return the index (with reference to the dataset) of a particular descendant\&. "
.ti -1c
.RI "\fBElemType\fP \fBFurthestDescendantDistance\fP () const"
.br
.RI "Return the furthest possible descendant distance\&. "
.ti -1c
.RI "\fBElemType\fP \fBFurthestPointDistance\fP () const"
.br
.RI "Return the furthest distance to a point held in this node\&. "
.ti -1c
.RI "template<typename VecType > size_t \fBGetFurthestChild\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Return the index of the furthest child node to the given query point\&. "
.ti -1c
.RI "size_t \fBGetFurthestChild\fP (const \fBOctree\fP &queryNode) const"
.br
.RI "Return the index of the furthest child node to the given query node\&. "
.ti -1c
.RI "template<typename VecType > size_t \fBGetNearestChild\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Return the index of the nearest child node to the given query point\&. "
.ti -1c
.RI "size_t \fBGetNearestChild\fP (const \fBOctree\fP &queryNode) const"
.br
.RI "Return the index of the nearest child node to the given query node\&. "
.ti -1c
.RI "bool \fBIsLeaf\fP () const"
.br
.RI "Return whether or not the node is a leaf\&. "
.ti -1c
.RI "\fBElemType\fP \fBMaxDistance\fP (const \fBOctree\fP &other) const"
.br
.RI "Return the maximum distance to another node\&. "
.ti -1c
.RI "template<typename VecType > \fBElemType\fP \fBMaxDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Return the maximum distance to the given point\&. "
.ti -1c
.RI "MetricType \fBMetric\fP () const"
.br
.RI "Return the metric that this tree uses\&. "
.ti -1c
.RI "\fBElemType\fP \fBMinDistance\fP (const \fBOctree\fP &other) const"
.br
.RI "Return the minimum distance to another node\&. "
.ti -1c
.RI "template<typename VecType > \fBElemType\fP \fBMinDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Return the minimum distance to the given point\&. "
.ti -1c
.RI "\fBElemType\fP \fBMinimumBoundDistance\fP () const"
.br
.RI "Return the minimum distance from the center of the node to any bound edge\&. "
.ti -1c
.RI "size_t \fBNumChildren\fP () const"
.br
.RI "Return the number of children in this node\&. "
.ti -1c
.RI "size_t \fBNumDescendants\fP () const"
.br
.RI "Return the number of descendants of this node\&. "
.ti -1c
.RI "size_t \fBNumPoints\fP () const"
.br
.RI "Return the number of points in this node (0 if not a leaf)\&. "
.ti -1c
.RI "\fBOctree\fP & \fBoperator=\fP (const \fBOctree\fP &other)"
.br
.RI "Copy the given \fBOctree\fP\&. "
.ti -1c
.RI "\fBOctree\fP & \fBoperator=\fP (\fBOctree\fP &&other)"
.br
.RI "Take ownership of the given \fBOctree\fP\&. "
.ti -1c
.RI "\fBOctree\fP * \fBParent\fP () const"
.br
.RI "Get the pointer to the parent\&. "
.ti -1c
.RI "\fBOctree\fP *& \fBParent\fP ()"
.br
.RI "Modify the pointer to the parent (be careful!)\&. "
.ti -1c
.RI "\fBElemType\fP \fBParentDistance\fP () const"
.br
.RI "Return the distance from the center of this node to the center of the parent node\&. "
.ti -1c
.RI "\fBElemType\fP & \fBParentDistance\fP ()"
.br
.RI "Modify the distance from the center of this node to the center of the parent node\&. "
.ti -1c
.RI "size_t \fBPoint\fP (const size_t index) const"
.br
.RI "Return the index (with reference to the dataset) of a particular point in this node\&. "
.ti -1c
.RI "math::RangeType< \fBElemType\fP > \fBRangeDistance\fP (const \fBOctree\fP &other) const"
.br
.RI "Return the minimum and maximum distance to another node\&. "
.ti -1c
.RI "template<typename VecType > math::RangeType< \fBElemType\fP > \fBRangeDistance\fP (const VecType &point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > *=0) const"
.br
.RI "Return the minimum and maximum distance to another node\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the tree\&. "
.ti -1c
.RI "const StatisticType & \fBStat\fP () const"
.br
.RI "Return the statistic object for this node\&. "
.ti -1c
.RI "StatisticType & \fBStat\fP ()"
.br
.RI "Modify the statistic object for this node\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBOctree\fP ()"
.br
.RI "A default constructor\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename MetricType = metric::EuclideanDistance, typename StatisticType = EmptyStatistic, typename MatType = arma::mat>
.br
class mlpack::tree::Octree< MetricType, StatisticType, MatType >"

.PP
Definition at line 25 of file octree\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef MatType::elem_type \fBElemType\fP"

.PP
The type of element held in MatType\&. 
.PP
Definition at line 31 of file octree\&.hpp\&.
.SS "typedef MatType \fBMat\fP"

.PP
So other classes can use TreeType::Mat\&. 
.PP
Definition at line 29 of file octree\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBOctree\fP (const MatType & data, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This copies the dataset\&. If you don't want to copy the input dataset, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "\fBOctree\fP (const MatType & data, std::vector< size_t > & oldFromNew, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This copies the dataset and modifies its ordering; a mapping of the old point indices to the new point indices is filled\&. If you don't want the matrix to be copied, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "\fBOctree\fP (const MatType & data, std::vector< size_t > & oldFromNew, std::vector< size_t > & newFromOld, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This copies the dataset and modifies its ordering; a mapping of the old point indices to the new point indices is filled, and a mapping of the new point indices to the old point indices is filled\&. If you don't want the matrix to be copied, consider using the constructor that takes an rvalue reference and use std::move()\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fInewFromOld\fP Vector which will be filled with the new positions for each old point\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "\fBOctree\fP (MatType && data, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This will take ownership of the dataset; if you don't want this, consider using the constructor that takes a const reference to the dataset\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "\fBOctree\fP (MatType && data, std::vector< size_t > & oldFromNew, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This will take ownership of the dataset; if you don't want this, consider using the constructor that takes a const reference to the dataset\&. This modifies the ordering of the dataset; a mapping of the old point indices to the new point indices is filled\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "\fBOctree\fP (MatType && data, std::vector< size_t > & oldFromNew, std::vector< size_t > & newFromOld, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this as the root node of an octree on the given dataset\&. This will take ownership of the dataset; if you don't want this, consider using the constructor that takes a const reference to the dataset\&. This modifies the ordering of the dataset; a mapping of the old point indices to the new point indices is filled, and a mapping of the new point indices to the old point indices is filled\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Dataset to create tree from\&. This will be copied! 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fInewFromOld\fP Vector which will be filled with the new positions for each old point\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "\fBOctree\fP (\fBOctree\fP< MetricType, StatisticType, MatType > * parent, const size_t begin, const size_t count, const arma::vec & center, const double width, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this node as a child of the given parent, starting at column begin and using count points\&. The ordering of that subset of points in the parent's data matrix will be modified! This is used for recursive tree-building by the other constructors that don't specify point indices\&.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent of this node\&. Its dataset will be modified! 
.br
\fIbegin\fP Index of point to start tree construction with\&. 
.br
\fIcount\fP Number of points to use to construct tree\&. 
.br
\fIcenter\fP Center of the node (for splitting)\&. 
.br
\fIwidth\fP Width of the node in each dimension\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "\fBOctree\fP (\fBOctree\fP< MetricType, StatisticType, MatType > * parent, const size_t begin, const size_t count, std::vector< size_t > & oldFromNew, const arma::vec & center, const double width, const size_t maxLeafSize = \fC20\fP)"

.PP
Construct this node as a child of the given parent, starting at column begin and using count points\&. The ordering of that subset of points in the parent's data matrix will be modified! This is used for recursive tree-building by the other constructors that don't specify point indices\&.
.PP
A mapping of the old point indices to the new point indices is filled, but it is expected that the vector is already allocated with size greater than or equal to (begin + count), and if that is not true, invalid memory reads (and writes) will occur\&.
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent of this node\&. Its dataset will be modified! 
.br
\fIbegin\fP Index of point to start tree construction with\&. 
.br
\fIcount\fP Number of points to use to construct tree\&. 
.br
\fIoldFromNew\fP Vector which will be filled with the old positions for each new point\&. 
.br
\fIcenter\fP Center of the node (for splitting)\&. 
.br
\fIwidth\fP Width of the node in each dimension\&. 
.br
\fImaxLeafSize\fP Maximum number of points in a leaf node\&. 
.RE
.PP

.SS "\fBOctree\fP (const \fBOctree\fP< MetricType, StatisticType, MatType > & other)"

.PP
Copy the given tree\&. Be careful! This may use a lot of memory\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Tree to copy from\&. 
.RE
.PP

.SS "\fBOctree\fP (\fBOctree\fP< MetricType, StatisticType, MatType > && other)"

.PP
Move the given tree\&. The tree passed as a parameter will be emptied and will not be usable after this call\&.
.PP
\fBParameters:\fP
.RS 4
\fIother\fP Tree to move\&. 
.RE
.PP

.SS "\fBOctree\fP (Archive & ar, const typename \fBstd::enable_if_t\fP< \fBcereal::is_loading\fP< Archive >()> * = \fC0\fP)"

.PP
Initialize the tree from a cereal archive\&. 
.PP
\fBParameters:\fP
.RS 4
\fIar\fP Archive to load tree from\&. Must be an iarchive, not an oarchive\&. 
.RE
.PP

.SS "~\fBOctree\fP ()"

.PP
Destroy the tree\&. 
.SS "\fBOctree\fP ()\fC [protected]\fP"

.PP
A default constructor\&. This is meant to only be used with cereal, which is allowed with the friend declaration below\&. This does not return a valid treee! The method must be protected, so that the serialization shim can work with the default constructor\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::Center()\&.
.SH "Member Function Documentation"
.PP 
.SS "const \fBbound::HRectBound\fP<MetricType>& Bound () const\fC [inline]\fP"

.PP
Return the bound object for this node\&. 
.PP
Definition at line 261 of file octree\&.hpp\&.
.SS "\fBbound::HRectBound\fP<MetricType>& Bound ()\fC [inline]\fP"

.PP
Modify the bound object for this node\&. 
.PP
Definition at line 263 of file octree\&.hpp\&.
.SS "void Center (arma::vec & center) const\fC [inline]\fP"

.PP
Store the center of the bounding region in the given vector\&. 
.PP
Definition at line 397 of file octree\&.hpp\&.
.PP
References HRectBound< MetricType, ElemType >::Center(), Octree< MetricType, StatisticType, MatType >::Octree(), and Octree< MetricType, StatisticType, MatType >::serialize()\&.
.SS "const \fBOctree\fP& Child (const size_t child) const\fC [inline]\fP"

.PP
Return the specified child\&. If the index is out of bounds, unspecified behavior will occur\&. 
.PP
Definition at line 340 of file octree\&.hpp\&.
.SS "\fBOctree\fP& Child (const size_t child)\fC [inline]\fP"

.PP
Return the specified child\&. If the index is out of bounds, unspecified behavior will occur\&. 
.PP
Definition at line 346 of file octree\&.hpp\&.
.SS "\fBOctree\fP*& ChildPtr (const size_t child)\fC [inline]\fP"

.PP
Return the pointer to the given child\&. This allows the child itself to be modified\&. 
.PP
Definition at line 352 of file octree\&.hpp\&.
.PP
References Octree< MetricType, StatisticType, MatType >::Descendant(), Octree< MetricType, StatisticType, MatType >::MaxDistance(), Octree< MetricType, StatisticType, MatType >::MinDistance(), Octree< MetricType, StatisticType, MatType >::NumDescendants(), Octree< MetricType, StatisticType, MatType >::NumPoints(), Octree< MetricType, StatisticType, MatType >::Point(), and Octree< MetricType, StatisticType, MatType >::RangeDistance()\&.
.SS "const MatType& Dataset () const\fC [inline]\fP"

.PP
Return the dataset used by this node\&. 
.PP
Definition at line 253 of file octree\&.hpp\&.
.SS "size_t Descendant (const size_t index) const"

.PP
Return the index (with reference to the dataset) of a particular descendant\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "\fBElemType\fP FurthestDescendantDistance () const"

.PP
Return the furthest possible descendant distance\&. This returns the maximum distance from the centroid to the edge of the bound and not the empirical quantity which is the actual furthest descendant distance\&. So the actual furthest descendant distance may be less than what this method returns (but it will never be greater than this)\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::IsLeaf()\&.
.SS "\fBElemType\fP FurthestPointDistance () const"

.PP
Return the furthest distance to a point held in this node\&. If this is not a leaf node, then the distance is 0 because the node holds no points\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::IsLeaf()\&.
.SS "size_t GetFurthestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Return the index of the furthest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::IsLeaf(), and Octree< MetricType, StatisticType, MatType >::Metric()\&.
.SS "size_t GetFurthestChild (const \fBOctree\fP< MetricType, StatisticType, MatType > & queryNode) const"

.PP
Return the index of the furthest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "size_t GetNearestChild (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Return the index of the nearest child node to the given query point\&. If this is a leaf node, it will return \fBNumChildren()\fP (invalid index)\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::IsLeaf(), and Octree< MetricType, StatisticType, MatType >::Metric()\&.
.SS "size_t GetNearestChild (const \fBOctree\fP< MetricType, StatisticType, MatType > & queryNode) const"

.PP
Return the index of the nearest child node to the given query node\&. If it can't decide, it will return \fBNumChildren()\fP (invalid index)\&. 
.SS "bool IsLeaf () const\fC [inline]\fP"

.PP
Return whether or not the node is a leaf\&. 
.PP
Definition at line 297 of file octree\&.hpp\&.
.PP
References Octree< MetricType, StatisticType, MatType >::FurthestDescendantDistance(), Octree< MetricType, StatisticType, MatType >::FurthestPointDistance(), Octree< MetricType, StatisticType, MatType >::GetFurthestChild(), Octree< MetricType, StatisticType, MatType >::GetNearestChild(), Octree< MetricType, StatisticType, MatType >::MinimumBoundDistance(), and Octree< MetricType, StatisticType, MatType >::NumChildren()\&.
.SS "\fBElemType\fP MaxDistance (const \fBOctree\fP< MetricType, StatisticType, MatType > & other) const"

.PP
Return the maximum distance to another node\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "\fBElemType\fP MaxDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Return the maximum distance to the given point\&. 
.SS "MetricType Metric () const\fC [inline]\fP"

.PP
Return the metric that this tree uses\&. 
.PP
Definition at line 274 of file octree\&.hpp\&.
.PP
References Octree< MetricType, StatisticType, MatType >::GetFurthestChild(), and Octree< MetricType, StatisticType, MatType >::GetNearestChild()\&.
.SS "\fBElemType\fP MinDistance (const \fBOctree\fP< MetricType, StatisticType, MatType > & other) const"

.PP
Return the minimum distance to another node\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "\fBElemType\fP MinDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Return the minimum distance to the given point\&. 
.SS "\fBElemType\fP MinimumBoundDistance () const"

.PP
Return the minimum distance from the center of the node to any bound edge\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::IsLeaf()\&.
.SS "size_t NumChildren () const"

.PP
Return the number of children in this node\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::IsLeaf(), and Octree< MetricType, StatisticType, MatType >::Stat()\&.
.SS "size_t NumDescendants () const"

.PP
Return the number of descendants of this node\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "size_t NumPoints () const"

.PP
Return the number of points in this node (0 if not a leaf)\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "\fBOctree\fP& operator= (const \fBOctree\fP< MetricType, StatisticType, MatType > & other)"

.PP
Copy the given \fBOctree\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The tree to be copied\&. 
.RE
.PP

.SS "\fBOctree\fP& operator= (\fBOctree\fP< MetricType, StatisticType, MatType > && other)"

.PP
Take ownership of the given \fBOctree\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIother\fP The tree to take ownership of\&. 
.RE
.PP

.SS "\fBOctree\fP* Parent () const\fC [inline]\fP"

.PP
Get the pointer to the parent\&. 
.PP
Definition at line 256 of file octree\&.hpp\&.
.SS "\fBOctree\fP*& Parent ()\fC [inline]\fP"

.PP
Modify the pointer to the parent (be careful!)\&. 
.PP
Definition at line 258 of file octree\&.hpp\&.
.SS "\fBElemType\fP ParentDistance () const\fC [inline]\fP"

.PP
Return the distance from the center of this node to the center of the parent node\&. 
.PP
Definition at line 331 of file octree\&.hpp\&.
.SS "\fBElemType\fP& ParentDistance ()\fC [inline]\fP"

.PP
Modify the distance from the center of this node to the center of the parent node\&. 
.PP
Definition at line 334 of file octree\&.hpp\&.
.SS "size_t Point (const size_t index) const"

.PP
Return the index (with reference to the dataset) of a particular point in this node\&. If the given index is invalid (i\&.e\&. if it is greater than \fBNumPoints()\fP), the indices returned will be invalid\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "math::RangeType<\fBElemType\fP> RangeDistance (const \fBOctree\fP< MetricType, StatisticType, MatType > & other) const"

.PP
Return the minimum and maximum distance to another node\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::ChildPtr()\&.
.SS "math::RangeType<\fBElemType\fP> RangeDistance (const VecType & point, typename \fBstd::enable_if_t\fP< \fBIsVector\fP< VecType >::value > * = \fC0\fP) const"

.PP
Return the minimum and maximum distance to another node\&. 
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the tree\&. 
.PP
Referenced by Octree< MetricType, StatisticType, MatType >::Center()\&.
.SS "const StatisticType& Stat () const\fC [inline]\fP"

.PP
Return the statistic object for this node\&. 
.PP
Definition at line 266 of file octree\&.hpp\&.
.SS "StatisticType& Stat ()\fC [inline]\fP"

.PP
Modify the statistic object for this node\&. 
.PP
Definition at line 268 of file octree\&.hpp\&.
.PP
References Octree< MetricType, StatisticType, MatType >::NumChildren()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
