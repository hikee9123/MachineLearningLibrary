.TH "ContinuousMountainCar" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ContinuousMountainCar \- Implementation of Continuous Mountain Car task\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBAction\fP"
.br
.RI "Implementation of action of Continuous Mountain Car\&. "
.ti -1c
.RI "class \fBState\fP"
.br
.RI "Implementation of state of Continuous Mountain Car\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBContinuousMountainCar\fP (const double positionMin=\-1\&.2, const double positionMax=0\&.6, const double positionGoal=0\&.45, const double velocityMin=\-0\&.07, const double velocityMax=0\&.07, const double duration=0\&.0015, const double doneReward=100, const size_t maxSteps=0)"
.br
.RI "Construct a Continuous Mountain Car instance using the given constant\&. "
.ti -1c
.RI "\fBState\fP \fBInitialSample\fP ()"
.br
.RI "Initial position is randomly generated within [-0\&.6, -0\&.4]\&. "
.ti -1c
.RI "bool \fBIsTerminal\fP (const \fBState\fP &state) const"
.br
.RI "Whether given state is a terminal state\&. "
.ti -1c
.RI "size_t \fBMaxSteps\fP () const"
.br
.RI "Get the maximum number of steps allowed\&. "
.ti -1c
.RI "size_t & \fBMaxSteps\fP ()"
.br
.RI "Set the maximum number of steps allowed\&. "
.ti -1c
.RI "double \fBSample\fP (const \fBState\fP &state, const \fBAction\fP &action, \fBState\fP &nextState)"
.br
.RI "Dynamics of Continuous Mountain Car\&. "
.ti -1c
.RI "double \fBSample\fP (const \fBState\fP &state, const \fBAction\fP &action)"
.br
.RI "Dynamics of Continuous Mountain Car\&. "
.ti -1c
.RI "size_t \fBStepsPerformed\fP () const"
.br
.RI "Get the number of steps performed\&. "
.in -1c
.SH "Detailed Description"
.PP 
Implementation of Continuous Mountain Car task\&. 
.PP
Definition at line 29 of file continuous_mountain_car\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBContinuousMountainCar\fP (const double positionMin = \fC\-1\&.2\fP, const double positionMax = \fC0\&.6\fP, const double positionGoal = \fC0\&.45\fP, const double velocityMin = \fC\-0\&.07\fP, const double velocityMax = \fC0\&.07\fP, const double duration = \fC0\&.0015\fP, const double doneReward = \fC100\fP, const size_t maxSteps = \fC0\fP)\fC [inline]\fP"

.PP
Construct a Continuous Mountain Car instance using the given constant\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpositionMin\fP Minimum legal position\&. 
.br
\fIpositionMax\fP Maximum legal position\&. 
.br
\fIpositionGoal\fP Final target position\&. 
.br
\fIvelocityMin\fP Minimum legal velocity\&. 
.br
\fIvelocityMax\fP Maximum legal velocity\&. 
.br
\fIduration\fP Time Duration for which force is applied on the car\&. 
.br
\fIdoneReward\fP Reward recieved by the agent on success\&. 
.br
\fImaxSteps\fP The number of steps after which the episode terminates\&. If the value is 0, there is no limit\&. 
.RE
.PP

.PP
Definition at line 105 of file continuous_mountain_car\&.hpp\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBState\fP InitialSample ()\fC [inline]\fP"

.PP
Initial position is randomly generated within [-0\&.6, -0\&.4]\&. Initial velocity is 0\&.
.PP
\fBReturns:\fP
.RS 4
Initial state for each episode\&. 
.RE
.PP

.PP
Definition at line 185 of file continuous_mountain_car\&.hpp\&.
.PP
References ContinuousMountainCar::State::Position(), mlpack::math::Random(), and ContinuousMountainCar::State::Velocity()\&.
.SS "bool IsTerminal (const \fBState\fP & state) const\fC [inline]\fP"

.PP
Whether given state is a terminal state\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP desired state\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if state is a terminal state, otherwise false\&. 
.RE
.PP

.PP
Definition at line 200 of file continuous_mountain_car\&.hpp\&.
.PP
References ContinuousMountainCar::State::Position()\&.
.PP
Referenced by ContinuousMountainCar::Sample()\&.
.SS "size_t MaxSteps () const\fC [inline]\fP"

.PP
Get the maximum number of steps allowed\&. 
.PP
Definition at line 220 of file continuous_mountain_car\&.hpp\&.
.SS "size_t& MaxSteps ()\fC [inline]\fP"

.PP
Set the maximum number of steps allowed\&. 
.PP
Definition at line 222 of file continuous_mountain_car\&.hpp\&.
.SS "double Sample (const \fBState\fP & state, const \fBAction\fP & action, \fBState\fP & nextState)\fC [inline]\fP"

.PP
Dynamics of Continuous Mountain Car\&. Get reward and next state based on current state and current action\&.
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP The current state\&. 
.br
\fIaction\fP The current action\&. 
.br
\fInextState\fP The next state\&. 
.RE
.PP

.PP
Definition at line 132 of file continuous_mountain_car\&.hpp\&.
.PP
References ContinuousMountainCar::Action::action, mlpack::math::ClampRange(), ContinuousMountainCar::IsTerminal(), ContinuousMountainCar::State::Position(), and ContinuousMountainCar::State::Velocity()\&.
.PP
Referenced by ContinuousMountainCar::Sample()\&.
.SS "double Sample (const \fBState\fP & state, const \fBAction\fP & action)\fC [inline]\fP"

.PP
Dynamics of Continuous Mountain Car\&. Get reward based on current state and current action\&.
.PP
\fBParameters:\fP
.RS 4
\fIstate\fP The current state\&. 
.br
\fIaction\fP The current action\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
reward, it's always -1\&.0\&. 
.RE
.PP

.PP
Definition at line 173 of file continuous_mountain_car\&.hpp\&.
.PP
References ContinuousMountainCar::Sample()\&.
.SS "size_t StepsPerformed () const\fC [inline]\fP"

.PP
Get the number of steps performed\&. 
.PP
Definition at line 217 of file continuous_mountain_car\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
