.TH "SoftmaxRegressionFunction" 3 "Thu Jun 24 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SoftmaxRegressionFunction
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSoftmaxRegressionFunction\fP (const arma::mat &data, const arma::Row< size_t > &labels, const size_t numClasses, const double lambda=0\&.0001, const bool fitIntercept=false)"
.br
.RI "Construct the Softmax Regression objective function with the given parameters\&. "
.ti -1c
.RI "double \fBEvaluate\fP (const arma::mat &parameters) const"
.br
.RI "Evaluates the objective function of the softmax regression model using the given parameters\&. "
.ti -1c
.RI "double \fBEvaluate\fP (const arma::mat &parameters, const size_t start, const size_t batchSize=1) const"
.br
.RI "Evaluate the objective function of the softmax regression model for a subset of the data points using the given parameters\&. "
.ti -1c
.RI "bool \fBFitIntercept\fP () const"
.br
.RI "Gets the intercept flag\&. "
.ti -1c
.RI "void \fBGetGroundTruthMatrix\fP (const arma::Row< size_t > &labels, arma::sp_mat &groundTruth)"
.br
.RI "Constructs the ground truth label matrix with the passed labels\&. "
.ti -1c
.RI "const arma::mat & \fBGetInitialPoint\fP () const"
.br
.RI "Return the initial point for the optimization\&. "
.ti -1c
.RI "void \fBGetProbabilitiesMatrix\fP (const arma::mat &parameters, arma::mat &probabilities, const size_t start, const size_t batchSize) const"
.br
.RI "Evaluate the probabilities matrix with the passed parameters\&. "
.ti -1c
.RI "void \fBGradient\fP (const arma::mat &parameters, arma::mat &gradient) const"
.br
.RI "Evaluates the gradient values of the objective function given the current set of parameters\&. "
.ti -1c
.RI "void \fBGradient\fP (const arma::mat &parameters, const size_t start, arma::mat &gradient, const size_t batchSize=1) const"
.br
.RI "Evaluate the gradient of the objective function given the current set of parameters, on a subset of the data\&. "
.ti -1c
.RI "const arma::mat \fBInitializeWeights\fP ()"
.br
.RI "Initializes the parameters of the model to suitable values\&. "
.ti -1c
.RI "double & \fBLambda\fP ()"
.br
.RI "Sets the regularization parameter\&. "
.ti -1c
.RI "double \fBLambda\fP () const"
.br
.RI "Gets the regularization parameter\&. "
.ti -1c
.RI "size_t \fBNumClasses\fP () const"
.br
.RI "Gets the number of classes\&. "
.ti -1c
.RI "size_t \fBNumFeatures\fP () const"
.br
.RI "Gets the features size of the training data\&. "
.ti -1c
.RI "size_t \fBNumFunctions\fP () const"
.br
.RI "Return the number of separable functions (the number of predictor points)\&. "
.ti -1c
.RI "void \fBPartialGradient\fP (const arma::mat &parameters, size_t j, arma::sp_mat &gradient) const"
.br
.RI "Evaluates the gradient values of the objective function given the current set of parameters for a single feature indexed by j\&. "
.ti -1c
.RI "void \fBShuffle\fP ()"
.br
.RI "Shuffle the dataset\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static const arma::mat \fBInitializeWeights\fP (const size_t featureSize, const size_t numClasses, const bool fitIntercept=false)"
.br
.RI "Initialize Softmax Regression weights (trainable parameters) with the given parameters\&. "
.ti -1c
.RI "static void \fBInitializeWeights\fP (arma::mat &weights, const size_t featureSize, const size_t numClasses, const bool fitIntercept=false)"
.br
.RI "Initialize Softmax Regression weights (trainable parameters) with the given parameters\&. "
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 21 of file softmax_regression_function\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBSoftmaxRegressionFunction\fP (const arma::mat & data, const arma::Row< size_t > & labels, const size_t numClasses, const double lambda = \fC0\&.0001\fP, const bool fitIntercept = \fCfalse\fP)"

.PP
Construct the Softmax Regression objective function with the given parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Input training data, each column associate with one sample 
.br
\fIlabels\fP Labels associated with the feature data\&. 
.br
\fInumClasses\fP Number of classes for classification\&. 
.br
\fIlambda\fP L2-regularization constant\&. 
.br
\fIfitIntercept\fP Intercept term flag\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "double Evaluate (const arma::mat & parameters) const"

.PP
Evaluates the objective function of the softmax regression model using the given parameters\&. The cost function has terms for the log likelihood error and the regularization cost\&. The objective function takes a low value when the model generalizes well for the given training data, while having small parameter values\&.
.PP
\fBParameters:\fP
.RS 4
\fIparameters\fP Current values of the model parameters\&. 
.RE
.PP

.SS "double Evaluate (const arma::mat & parameters, const size_t start, const size_t batchSize = \fC1\fP) const"

.PP
Evaluate the objective function of the softmax regression model for a subset of the data points using the given parameters\&. The cost function has terms for the log likelihood error and the regularization cost\&. The objective function takes a low value when the model generalizes well for the given training data, while having small parameter values\&.
.PP
\fBParameters:\fP
.RS 4
\fIparameters\fP Current values of the model parameters\&. 
.br
\fIstart\fP First index of the data points to use\&. 
.br
\fIbatchSize\fP Number of data points to evaluate objective for\&. 
.RE
.PP

.SS "bool FitIntercept () const\fC [inline]\fP"

.PP
Gets the intercept flag\&. 
.PP
Definition at line 188 of file softmax_regression_function\&.hpp\&.
.SS "void GetGroundTruthMatrix (const arma::Row< size_t > & labels, arma::sp_mat & groundTruth)"

.PP
Constructs the ground truth label matrix with the passed labels\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlabels\fP Labels associated with the training data\&. 
.br
\fIgroundTruth\fP Pointer to arma::mat which stores the computed matrix\&. 
.RE
.PP

.SS "const arma::mat& GetInitialPoint () const\fC [inline]\fP"

.PP
Return the initial point for the optimization\&. 
.PP
Definition at line 167 of file softmax_regression_function\&.hpp\&.
.SS "void GetProbabilitiesMatrix (const arma::mat & parameters, arma::mat & probabilities, const size_t start, const size_t batchSize) const"

.PP
Evaluate the probabilities matrix with the passed parameters\&. probabilities(i, j) = $ exp(\theta_i * data_j) / sum_k(exp(\theta_k * data_j)) $\&. It represents the probability of data_j belongs to class i\&.
.PP
\fBParameters:\fP
.RS 4
\fIparameters\fP Current values of the model parameters\&. 
.br
\fIprobabilities\fP Pointer to arma::mat which stores the probabilities\&. 
.br
\fIstart\fP Index of point to start at\&. 
.br
\fIbatchSize\fP Number of points to calculate probabilities for\&. 
.RE
.PP

.SS "void Gradient (const arma::mat & parameters, arma::mat & gradient) const"

.PP
Evaluates the gradient values of the objective function given the current set of parameters\&. The function calculates the probabilities for each class given the parameters, and computes the gradients based on the difference from the ground truth\&.
.PP
\fBParameters:\fP
.RS 4
\fIparameters\fP Current values of the model parameters\&. 
.br
\fIgradient\fP Matrix where gradient values will be stored\&. 
.RE
.PP

.SS "void Gradient (const arma::mat & parameters, const size_t start, arma::mat & gradient, const size_t batchSize = \fC1\fP) const"

.PP
Evaluate the gradient of the objective function given the current set of parameters, on a subset of the data\&. The function calculates the probabilities for each class given the parameters, and computes the gradients based on the difference from the ground truth\&.
.PP
\fBParameters:\fP
.RS 4
\fIparameters\fP Current values of the model parameters\&. 
.br
\fIstart\fP First index of the data points to use\&. 
.br
\fIgradient\fP Matrix to store gradient into\&. 
.br
\fIbatchSize\fP Number of data points to evaluate gradient for\&. 
.RE
.PP

.SS "const arma::mat InitializeWeights ()"

.PP
Initializes the parameters of the model to suitable values\&. 
.SS "static const arma::mat InitializeWeights (const size_t featureSize, const size_t numClasses, const bool fitIntercept = \fCfalse\fP)\fC [static]\fP"

.PP
Initialize Softmax Regression weights (trainable parameters) with the given parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfeatureSize\fP The number of features in the training set\&. 
.br
\fInumClasses\fP Number of classes for classification\&. 
.br
\fIfitIntercept\fP If true, an intercept is fitted\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Initialized model weights\&. 
.RE
.PP

.SS "static void InitializeWeights (arma::mat & weights, const size_t featureSize, const size_t numClasses, const bool fitIntercept = \fCfalse\fP)\fC [static]\fP"

.PP
Initialize Softmax Regression weights (trainable parameters) with the given parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIweights\fP This will be filled with the initialized model weights\&. 
.br
\fIfeatureSize\fP The number of features in the training set\&. 
.br
\fInumClasses\fP Number of classes for classification\&. 
.br
\fIfitIntercept\fP Intercept term flag\&. 
.RE
.PP

.SS "double& Lambda ()\fC [inline]\fP"

.PP
Sets the regularization parameter\&. 
.PP
Definition at line 183 of file softmax_regression_function\&.hpp\&.
.SS "double Lambda () const\fC [inline]\fP"

.PP
Gets the regularization parameter\&. 
.PP
Definition at line 185 of file softmax_regression_function\&.hpp\&.
.SS "size_t NumClasses () const\fC [inline]\fP"

.PP
Gets the number of classes\&. 
.PP
Definition at line 170 of file softmax_regression_function\&.hpp\&.
.SS "size_t NumFeatures () const\fC [inline]\fP"

.PP
Gets the features size of the training data\&. 
.PP
Definition at line 173 of file softmax_regression_function\&.hpp\&.
.SS "size_t NumFunctions () const\fC [inline]\fP"

.PP
Return the number of separable functions (the number of predictor points)\&. 
.PP
Definition at line 180 of file softmax_regression_function\&.hpp\&.
.SS "void PartialGradient (const arma::mat & parameters, size_t j, arma::sp_mat & gradient) const"

.PP
Evaluates the gradient values of the objective function given the current set of parameters for a single feature indexed by j\&. 
.PP
\fBParameters:\fP
.RS 4
\fIparameters\fP Current values of the model parameters\&. 
.br
\fIj\fP The index of the feature with respect to which the partial gradient is to be computed\&. 
.br
\fIgradient\fP Out param for the gradient value\&. 
.RE
.PP

.SS "void Shuffle ()"

.PP
Shuffle the dataset\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
