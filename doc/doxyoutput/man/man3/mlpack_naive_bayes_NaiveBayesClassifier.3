.TH "NaiveBayesClassifier< ModelMatType >" 3 "Sun Aug 22 2021" "Version 3.4.2" "mlpack" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NaiveBayesClassifier< ModelMatType > \- The simple Naive Bayes classifier\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef ModelMatType::elem_type \fBElemType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename MatType > \fBNaiveBayesClassifier\fP (const MatType &data, const arma::Row< size_t > &labels, const size_t numClasses, const bool incrementalVariance=false, const double epsilon=1e\-10)"
.br
.RI "Initializes the classifier as per the input and then trains it by calculating the sample mean and variances\&. "
.ti -1c
.RI "\fBNaiveBayesClassifier\fP (const size_t dimensionality=0, const size_t numClasses=0, const double epsilon=1e\-10)"
.br
.RI "Initialize the Naive Bayes classifier without performing training\&. "
.ti -1c
.RI "template<typename VecType > size_t \fBClassify\fP (const VecType &point) const"
.br
.RI "Classify the given point, using the trained \fBNaiveBayesClassifier\fP model\&. "
.ti -1c
.RI "template<typename VecType , typename ProbabilitiesVecType > void \fBClassify\fP (const VecType &point, size_t &prediction, ProbabilitiesVecType &probabilities) const"
.br
.RI "Classify the given point using the trained \fBNaiveBayesClassifier\fP model and also return estimates of the probability for each class in the given vector\&. "
.ti -1c
.RI "template<typename MatType > void \fBClassify\fP (const MatType &data, arma::Row< size_t > &predictions) const"
.br
.RI "Classify the given points using the trained \fBNaiveBayesClassifier\fP model\&. "
.ti -1c
.RI "template<typename MatType , typename ProbabilitiesMatType > void \fBClassify\fP (const MatType &data, arma::Row< size_t > &predictions, ProbabilitiesMatType &probabilities) const"
.br
.RI "Classify the given points using the trained \fBNaiveBayesClassifier\fP model and also return estimates of the probabilities for each class in the given matrix\&. "
.ti -1c
.RI "const ModelMatType & \fBMeans\fP () const"
.br
.RI "Get the sample means for each class\&. "
.ti -1c
.RI "ModelMatType & \fBMeans\fP ()"
.br
.RI "Modify the sample means for each class\&. "
.ti -1c
.RI "const ModelMatType & \fBProbabilities\fP () const"
.br
.RI "Get the prior probabilities for each class\&. "
.ti -1c
.RI "ModelMatType & \fBProbabilities\fP ()"
.br
.RI "Modify the prior probabilities for each class\&. "
.ti -1c
.RI "template<typename Archive > void \fBserialize\fP (Archive &ar, const uint32_t)"
.br
.RI "Serialize the classifier\&. "
.ti -1c
.RI "template<typename MatType > void \fBTrain\fP (const MatType &data, const arma::Row< size_t > &labels, const size_t numClasses, const bool incremental=true)"
.br
.RI "Train the Naive Bayes classifier on the given dataset\&. "
.ti -1c
.RI "template<typename VecType > void \fBTrain\fP (const VecType &point, const size_t label)"
.br
.RI "Train the Naive Bayes classifier on the given point\&. "
.ti -1c
.RI "const ModelMatType & \fBVariances\fP () const"
.br
.RI "Get the sample variances for each class\&. "
.ti -1c
.RI "ModelMatType & \fBVariances\fP ()"
.br
.RI "Modify the sample variances for each class\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename ModelMatType = arma::mat>
.br
class mlpack::naive_bayes::NaiveBayesClassifier< ModelMatType >"
The simple Naive Bayes classifier\&. 

This class trains on the data by calculating the sample mean and variance of the features with respect to each of the labels, and also the class probabilities\&. The class labels are assumed to be positive integers (starting with 0), and are expected to be the last row of the data input to the constructor\&.
.PP
Mathematically, it computes P(X_i = x_i | Y = y_j) for each feature X_i for each of the labels y_j\&. Along with this, it also computes the class probabilities P(Y = y_j)\&.
.PP
For classifying a data point (x_1, x_2, \&.\&.\&., x_n), it computes the following: arg max_y(P(Y = y)*P(X_1 = x_1 | Y = y) * \&.\&.\&. * P(X_n = x_n | Y = y))
.PP
Example use:
.PP
.PP
.nf
extern arma::mat training_data, testing_data;
NaiveBayesClassifier<> nbc(training_data, 5);
arma::vec results;

nbc\&.Classify(testing_data, results);
.fi
.PP
.PP
The ModelMatType template parameter specifies the internal matrix type that \fBNaiveBayesClassifier\fP will use to hold the means, variances, and weights that make up the Naive Bayes model\&. This can be arma::mat, arma::fmat, or any other Armadillo (or Armadillo-compatible) object\&. Because ModelMatType may be different than the type of the data the model is trained on, now training is possible with subviews, sparse matrices, or anything else, while still storing the model as a ModelMatType internally\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIModelMatType\fP Internal matrix type to use to store the model\&. 
.RE
.PP

.PP
Definition at line 58 of file naive_bayes_classifier\&.hpp\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef ModelMatType::elem_type \fBElemType\fP"

.PP
Definition at line 62 of file naive_bayes_classifier\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBNaiveBayesClassifier\fP (const MatType & data, const arma::Row< size_t > & labels, const size_t numClasses, const bool incrementalVariance = \fCfalse\fP, const double epsilon = \fC1e\-10\fP)"

.PP
Initializes the classifier as per the input and then trains it by calculating the sample mean and variances\&. Example use: 
.PP
.nf
extern arma::mat training_data, testing_data;
extern arma::Row<size_t> labels;
NaiveBayesClassifier nbc(training_data, labels, 5);

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Training data points\&. 
.br
\fIlabels\fP Labels corresponding to training data points\&. 
.br
\fInumClasses\fP Number of classes in this classifier\&. 
.br
\fIincrementalVariance\fP If true, an incremental algorithm is used to calculate the variance; this can prevent loss of precision in some cases, but will be somewhat slower to calculate\&. 
.br
\fIepsilon\fP Small value to prevent log of zero\&. 
.RE
.PP

.SS "\fBNaiveBayesClassifier\fP (const size_t dimensionality = \fC0\fP, const size_t numClasses = \fC0\fP, const double epsilon = \fC1e\-10\fP)"

.PP
Initialize the Naive Bayes classifier without performing training\&. All of the parameters of the model will be initialized to zero\&. Be sure to use \fBTrain()\fP before calling \fBClassify()\fP, otherwise the results may be meaningless\&. 
.SH "Member Function Documentation"
.PP 
.SS "size_t Classify (const VecType & point) const"

.PP
Classify the given point, using the trained \fBNaiveBayesClassifier\fP model\&. The predicted label is returned\&.
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to classify\&. 
.RE
.PP

.SS "void Classify (const VecType & point, size_t & prediction, ProbabilitiesVecType & probabilities) const"

.PP
Classify the given point using the trained \fBNaiveBayesClassifier\fP model and also return estimates of the probability for each class in the given vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Point to classify\&. 
.br
\fIprediction\fP This will be set to the predicted class of the point\&. 
.br
\fIprobabilities\fP This will be filled with class probabilities for the point\&. 
.RE
.PP

.SS "void Classify (const MatType & data, arma::Row< size_t > & predictions) const"

.PP
Classify the given points using the trained \fBNaiveBayesClassifier\fP model\&. The predicted labels for each point are stored in the given vector\&.
.PP
.PP
.nf
arma::mat test_data; // each column is a test point
arma::Row<size_t> results;
\&.\&.\&.
nbc\&.Classify(test_data, results);
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP List of data points\&. 
.br
\fIpredictions\fP Vector that class predictions will be placed into\&. 
.RE
.PP

.SS "void Classify (const MatType & data, arma::Row< size_t > & predictions, ProbabilitiesMatType & probabilities) const"

.PP
Classify the given points using the trained \fBNaiveBayesClassifier\fP model and also return estimates of the probabilities for each class in the given matrix\&. The predicted labels for each point are stored in the given vector\&.
.PP
.PP
.nf
arma::mat test_data; // each column is a test point
arma::Row<size_t> results;
arma::mat resultsProbs;
\&.\&.\&.
nbc\&.Classify(test_data, results, resultsProbs);
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP Set of points to classify\&. 
.br
\fIpredictions\fP This will be filled with predictions for each point\&. 
.br
\fIprobabilities\fP This will be filled with class probabilities for each point\&. Each row represents a point\&. 
.RE
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIMatType\fP Type of data to be classified\&. 
.br
\fIProbabilitiesMatType\fP Type to store output probabilities in\&. 
.RE
.PP

.SS "const ModelMatType& Means () const\fC [inline]\fP"

.PP
Get the sample means for each class\&. 
.PP
Definition at line 203 of file naive_bayes_classifier\&.hpp\&.
.SS "ModelMatType& Means ()\fC [inline]\fP"

.PP
Modify the sample means for each class\&. 
.PP
Definition at line 205 of file naive_bayes_classifier\&.hpp\&.
.SS "const ModelMatType& Probabilities () const\fC [inline]\fP"

.PP
Get the prior probabilities for each class\&. 
.PP
Definition at line 213 of file naive_bayes_classifier\&.hpp\&.
.SS "ModelMatType& Probabilities ()\fC [inline]\fP"

.PP
Modify the prior probabilities for each class\&. 
.PP
Definition at line 215 of file naive_bayes_classifier\&.hpp\&.
.PP
References NaiveBayesClassifier< ModelMatType >::serialize()\&.
.SS "void serialize (Archive & ar, const uint32_t)"

.PP
Serialize the classifier\&. 
.PP
Referenced by NaiveBayesClassifier< ModelMatType >::Probabilities()\&.
.SS "void Train (const MatType & data, const arma::Row< size_t > & labels, const size_t numClasses, const bool incremental = \fCtrue\fP)"

.PP
Train the Naive Bayes classifier on the given dataset\&. If the incremental algorithm is used, the current model is used as a starting point (this is the default)\&. If the incremental algorithm is not used, then the current model is ignored and the new model will be trained only on the given data\&. Note that even if the incremental algorithm is not used, the data must have the same dimensionality and number of classes that the model was initialized with\&. If you want to change the dimensionality or number of classes, either re-initialize or call \fBMeans()\fP, \fBVariances()\fP, and \fBProbabilities()\fP individually to set them to the right size\&.
.PP
\fBParameters:\fP
.RS 4
\fIdata\fP The dataset to train on\&. 
.br
\fIlabels\fP The labels for the dataset\&. 
.br
\fInumClasses\fP The numbe of classes in the dataset\&. 
.br
\fIincremental\fP Whether or not to use the incremental algorithm for training\&. 
.RE
.PP

.SS "void Train (const VecType & point, const size_t label)"

.PP
Train the Naive Bayes classifier on the given point\&. This will use the incremental algorithm for updating the model parameters\&. The data must be the same dimensionality as the existing model parameters\&.
.PP
\fBParameters:\fP
.RS 4
\fIpoint\fP Data point to train on\&. 
.br
\fIlabel\fP Label of data point\&. 
.RE
.PP

.SS "const ModelMatType& Variances () const\fC [inline]\fP"

.PP
Get the sample variances for each class\&. 
.PP
Definition at line 208 of file naive_bayes_classifier\&.hpp\&.
.SS "ModelMatType& Variances ()\fC [inline]\fP"

.PP
Modify the sample variances for each class\&. 
.PP
Definition at line 210 of file naive_bayes_classifier\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for mlpack from the source code\&.
