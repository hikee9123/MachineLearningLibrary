<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1metric_1_1IPMetric" kind="class" language="C++" prot="public">
    <compoundname>mlpack::metric::IPMetric</compoundname>
    <includes refid="ip__metric_8hpp" local="no">ip_metric.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>KernelType</declname>
        <defname>KernelType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1metric_1_1IPMetric_1a893a705238f162f8946081402be89e3c" prot="private" static="no" mutable="no">
        <type>KernelType *</type>
        <definition>KernelType* kernel</definition>
        <argsstring></argsstring>
        <name>kernel</name>
        <briefdescription>
<para>The kernel we are using. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="73" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1metric_1_1IPMetric_1a16fe9380a2ccb61923ff42273994dd27" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool kernelOwner</definition>
        <argsstring></argsstring>
        <name>kernelOwner</name>
        <briefdescription>
<para>If true, we are responsible for deleting the kernel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="75" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1metric_1_1IPMetric_1a0774938d01373c8d5aaeebfc930c4e3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IPMetric</definition>
        <argsstring>()</argsstring>
        <name>IPMetric</name>
        <briefdescription>
<para>Create the <ref refid="classmlpack_1_1metric_1_1IPMetric" kindref="compound">IPMetric</ref> without an instantiated kernel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1metric_1_1IPMetric_1a83bc1993b4d2626112ba0169e8fdd5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IPMetric</definition>
        <argsstring>(KernelType &amp;kernel)</argsstring>
        <name>IPMetric</name>
        <param>
          <type>KernelType &amp;</type>
          <declname>kernel</declname>
        </param>
        <briefdescription>
<para>Create the <ref refid="classmlpack_1_1metric_1_1IPMetric" kindref="compound">IPMetric</ref> with an instantiated kernel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1metric_1_1IPMetric_1a068775d03b4fe6ccf17bd833c152bf86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IPMetric</definition>
        <argsstring>(const IPMetric &amp;other)</argsstring>
        <name>IPMetric</name>
        <param>
          <type>const <ref refid="classmlpack_1_1metric_1_1IPMetric" kindref="compound">IPMetric</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy the parameters of the given metric. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1metric_1_1IPMetric_1acb6ac7e7c6b1cdeffaccfa96b5573c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~IPMetric</definition>
        <argsstring>()</argsstring>
        <name>~IPMetric</name>
        <briefdescription>
<para>Destroy the <ref refid="classmlpack_1_1metric_1_1IPMetric" kindref="compound">IPMetric</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1metric_1_1IPMetric_1a55e03560fb8c7923de4a43df9a265437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecTypeA</type>
          </param>
          <param>
            <type>typename VecTypeB</type>
          </param>
        </templateparamlist>
        <type>VecTypeA::elem_type</type>
        <definition>VecTypeA::elem_type Evaluate</definition>
        <argsstring>(const VecTypeA &amp;a, const VecTypeB &amp;b)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const VecTypeA &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const VecTypeB &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Evaluate the metric. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VecTypeA</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of first vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VecTypeB</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of second vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Distance between the two points in kernel space. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1metric_1_1IPMetric_1a917492b75cc17298bc58c3d28e2944fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const KernelType &amp;</type>
        <definition>const KernelType&amp; Kernel</definition>
        <argsstring>() const</argsstring>
        <name>Kernel</name>
        <briefdescription>
<para>Get the kernel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="63" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1metric_1_1IPMetric_1ab8d1bedeac8344d80e50d819790a117a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>KernelType &amp;</type>
        <definition>KernelType&amp; Kernel</definition>
        <argsstring>()</argsstring>
        <name>Kernel</name>
        <briefdescription>
<para>Modify the kernel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="65" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1metric_1_1IPMetric_1af19fbcb2dbe02750f2815fb015ab52ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1metric_1_1IPMetric" kindref="compound">IPMetric</ref> &amp;</type>
        <definition>IPMetric&amp; operator=</definition>
        <argsstring>(const IPMetric &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmlpack_1_1metric_1_1IPMetric" kindref="compound">IPMetric</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assign this metric to be a copy of the given metric. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1metric_1_1IPMetric_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t version)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Serialize the metric. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="69" column="1"/>
        <referencedby refid="classmlpack_1_1metric_1_1IPMetric_1ab8d1bedeac8344d80e50d819790a117a" compoundref="ip__metric_8hpp" startline="65" endline="65">IPMetric&lt; mlpack::kernel::CosineDistance &gt;::Kernel</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The inner product metric, <ref refid="classmlpack_1_1metric_1_1IPMetric" kindref="compound">IPMetric</ref>, takes a given Mercer kernel (KernelType), and when <ref refid="classmlpack_1_1metric_1_1IPMetric_1a55e03560fb8c7923de4a43df9a265437" kindref="member">Evaluate()</ref> is called, returns the distance between the two points in kernel space: </para>    </briefdescription>
    <detaileddescription>
<para><formula id="64">\[ d(x, y) = \sqrt{ K(x, x) + K(y, y) - 2K(x, y) }. \]</formula></para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>KernelType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of Kernel to use. This must be a Mercer kernel (positive definite), otherwise the metric may not be valid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1033">
        <label>IPMetric&lt; mlpack::kernel::PolynomialKernel &gt;</label>
        <link refid="classmlpack_1_1metric_1_1IPMetric"/>
        <childnode refid="1028" relation="template-instance">
          <edgelabel>&lt; mlpack::kernel::PolynomialKernel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1030">
        <label>IPMetric&lt; mlpack::kernel::TriangularKernel &gt;</label>
        <link refid="classmlpack_1_1metric_1_1IPMetric"/>
        <childnode refid="1028" relation="template-instance">
          <edgelabel>&lt; mlpack::kernel::TriangularKernel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1032">
        <label>IPMetric&lt; mlpack::kernel::HyperbolicTangentKernel &gt;</label>
        <link refid="classmlpack_1_1metric_1_1IPMetric"/>
        <childnode refid="1028" relation="template-instance">
          <edgelabel>&lt; mlpack::kernel::HyperbolicTangentKernel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1029">
        <label>IPMetric&lt; mlpack::kernel::GaussianKernel &gt;</label>
        <link refid="classmlpack_1_1metric_1_1IPMetric"/>
        <childnode refid="1028" relation="template-instance">
          <edgelabel>&lt; mlpack::kernel::GaussianKernel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1028">
        <label>IPMetric&lt; KernelType &gt;</label>
        <link refid="classmlpack_1_1metric_1_1IPMetric"/>
      </node>
      <node id="1035">
        <label>IPMetric&lt; mlpack::kernel::CosineDistance &gt;</label>
        <link refid="classmlpack_1_1metric_1_1IPMetric"/>
        <childnode refid="1028" relation="template-instance">
          <edgelabel>&lt; mlpack::kernel::CosineDistance &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1034">
        <label>IPMetric&lt; mlpack::kernel::LinearKernel &gt;</label>
        <link refid="classmlpack_1_1metric_1_1IPMetric"/>
        <childnode refid="1028" relation="template-instance">
          <edgelabel>&lt; mlpack::kernel::LinearKernel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1031">
        <label>IPMetric&lt; mlpack::kernel::EpanechnikovKernel &gt;</label>
        <link refid="classmlpack_1_1metric_1_1IPMetric"/>
        <childnode refid="1028" relation="template-instance">
          <edgelabel>&lt; mlpack::kernel::EpanechnikovKernel &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" line="33" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/metrics/ip_metric.hpp" bodystart="32" bodyend="76"/>
    <listofallmembers>
      <member refid="classmlpack_1_1metric_1_1IPMetric_1a55e03560fb8c7923de4a43df9a265437" prot="public" virt="non-virtual"><scope>mlpack::metric::IPMetric</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1metric_1_1IPMetric_1a0774938d01373c8d5aaeebfc930c4e3d" prot="public" virt="non-virtual"><scope>mlpack::metric::IPMetric</scope><name>IPMetric</name></member>
      <member refid="classmlpack_1_1metric_1_1IPMetric_1a83bc1993b4d2626112ba0169e8fdd5b9" prot="public" virt="non-virtual"><scope>mlpack::metric::IPMetric</scope><name>IPMetric</name></member>
      <member refid="classmlpack_1_1metric_1_1IPMetric_1a068775d03b4fe6ccf17bd833c152bf86" prot="public" virt="non-virtual"><scope>mlpack::metric::IPMetric</scope><name>IPMetric</name></member>
      <member refid="classmlpack_1_1metric_1_1IPMetric_1a917492b75cc17298bc58c3d28e2944fb" prot="public" virt="non-virtual"><scope>mlpack::metric::IPMetric</scope><name>Kernel</name></member>
      <member refid="classmlpack_1_1metric_1_1IPMetric_1ab8d1bedeac8344d80e50d819790a117a" prot="public" virt="non-virtual"><scope>mlpack::metric::IPMetric</scope><name>Kernel</name></member>
      <member refid="classmlpack_1_1metric_1_1IPMetric_1a893a705238f162f8946081402be89e3c" prot="private" virt="non-virtual"><scope>mlpack::metric::IPMetric</scope><name>kernel</name></member>
      <member refid="classmlpack_1_1metric_1_1IPMetric_1a16fe9380a2ccb61923ff42273994dd27" prot="private" virt="non-virtual"><scope>mlpack::metric::IPMetric</scope><name>kernelOwner</name></member>
      <member refid="classmlpack_1_1metric_1_1IPMetric_1af19fbcb2dbe02750f2815fb015ab52ef" prot="public" virt="non-virtual"><scope>mlpack::metric::IPMetric</scope><name>operator=</name></member>
      <member refid="classmlpack_1_1metric_1_1IPMetric_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" virt="non-virtual"><scope>mlpack::metric::IPMetric</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1metric_1_1IPMetric_1acb6ac7e7c6b1cdeffaccfa96b5573c99" prot="public" virt="non-virtual"><scope>mlpack::metric::IPMetric</scope><name>~IPMetric</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
