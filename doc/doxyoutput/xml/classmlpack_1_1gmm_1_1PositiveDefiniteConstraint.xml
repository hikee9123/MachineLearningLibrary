<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint" kind="class" language="C++" prot="public">
    <compoundname>mlpack::gmm::PositiveDefiniteConstraint</compoundname>
    <includes refid="positive__definite__constraint_8hpp" local="no">positive_definite_constraint.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a1e68c9489180b84b3a8d1e265a3d8a8f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ApplyConstraint</definition>
        <argsstring>(arma::mat &amp;covariance)</argsstring>
        <name>ApplyConstraint</name>
        <param>
          <type>arma::mat &amp;</type>
          <declname>covariance</declname>
        </param>
        <briefdescription>
<para>Apply the positive definiteness constraint to the given covariance matrix, and ensure each value on the diagonal is at least 1e-50. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>covariance</parametername>
</parameternamelist>
<parameterdescription>
<para>Covariance matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp" line="36" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp" bodystart="36" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a5262e4a927a389167cfc7714de4df883" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ApplyConstraint</definition>
        <argsstring>(arma::vec &amp;diagCovariance)</argsstring>
        <name>ApplyConstraint</name>
        <param>
          <type>arma::vec &amp;</type>
          <declname>diagCovariance</declname>
        </param>
        <briefdescription>
<para>Apply the positive definiteness constraint to the given diagonal covariance matrix (which is represented as a vector), and ensure each value on the diagonal is at least 1e-50. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp" line="75" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp" bodystart="75" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a408eb4ebf27591742383f36e84641a80" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void serialize</definition>
        <argsstring>(Archive &amp;, const uint32_t)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
        </param>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>Serialize the constraint (which stores nothing, so, nothing to do). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp" line="100" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Given a covariance matrix, force the matrix to be positive definite. </para>    </briefdescription>
    <detaileddescription>
<para>Also force a minimum value on the diagonal, so that even if the matrix is invertible, it doesn&apos;t cause problems with Cholesky decompositions. The forcing here is also done in order to bring the condition number of the matrix under 1e5 (10k), which should help with numerical stability. </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp" line="28" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp" bodystart="27" bodyend="101"/>
    <listofallmembers>
      <member refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a1e68c9489180b84b3a8d1e265a3d8a8f" prot="public" virt="non-virtual"><scope>mlpack::gmm::PositiveDefiniteConstraint</scope><name>ApplyConstraint</name></member>
      <member refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a5262e4a927a389167cfc7714de4df883" prot="public" virt="non-virtual"><scope>mlpack::gmm::PositiveDefiniteConstraint</scope><name>ApplyConstraint</name></member>
      <member refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a408eb4ebf27591742383f36e84641a80" prot="public" virt="non-virtual"><scope>mlpack::gmm::PositiveDefiniteConstraint</scope><name>serialize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
