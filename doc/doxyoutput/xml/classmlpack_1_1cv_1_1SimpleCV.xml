<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1cv_1_1SimpleCV" kind="class" language="C++" prot="public">
    <compoundname>mlpack::cv::SimpleCV</compoundname>
    <includes refid="simple__cv_8hpp" local="no">simple_cv.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename MLAlgorithm</type>
      </param>
      <param>
        <type>typename Metric</type>
      </param>
      <param>
        <type>typename MatType</type>
        <defval>arma::mat</defval>
      </param>
      <param>
        <type>typename PredictionsType</type>
        <defval>typename <ref refid="classmlpack_1_1cv_1_1MetaInfoExtractor" kindref="compound">MetaInfoExtractor</ref>&lt;MLAlgorithm, MatType&gt;::PredictionsType</defval>
      </param>
      <param>
        <type>typename WeightsType</type>
        <defval>typename <ref refid="classmlpack_1_1cv_1_1MetaInfoExtractor" kindref="compound">MetaInfoExtractor</ref>&lt;MLAlgorithm, MatType,                 PredictionsType&gt;::WeightsType</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classmlpack_1_1cv_1_1SimpleCV_1a4a157c774ff84233650cf9292ff69c40" prot="private" static="no">
        <type><ref refid="classmlpack_1_1cv_1_1CVBase" kindref="compound">CVBase</ref>&lt; MLAlgorithm, MatType, PredictionsType, WeightsType &gt;</type>
        <definition>using Base =  CVBase&lt;MLAlgorithm, MatType, PredictionsType, WeightsType&gt;</definition>
        <argsstring></argsstring>
        <name>Base</name>
        <briefdescription>
<para>A short alias for <ref refid="classmlpack_1_1cv_1_1CVBase" kindref="compound">CVBase</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="216" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1cv_1_1SimpleCV_1a12a9b00b635f4868359d0554d4dbfc31" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1cv_1_1CVBase" kindref="compound">Base</ref></type>
        <definition>Base base</definition>
        <argsstring></argsstring>
        <name>base</name>
        <briefdescription>
<para>An auxiliary object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="219" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cv_1_1SimpleCV_1a4f600385748d2bfc2883f5d3f0b3c211" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; MLAlgorithm &gt;</type>
        <definition>std::unique_ptr&lt;MLAlgorithm&gt; modelPtr</definition>
        <argsstring></argsstring>
        <name>modelPtr</name>
        <briefdescription>
<para>The pointer to the last trained model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="241" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cv_1_1SimpleCV_1a5d78a35db515af35857528de81d2db63" prot="private" static="no" mutable="no">
        <type>WeightsType</type>
        <definition>WeightsType trainingWeights</definition>
        <argsstring></argsstring>
        <name>trainingWeights</name>
        <briefdescription>
<para>The training weights (optional). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="233" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cv_1_1SimpleCV_1a8b2b53386f5c27528eee6626513fe855" prot="private" static="no" mutable="no">
        <type>MatType</type>
        <definition>MatType trainingXs</definition>
        <argsstring></argsstring>
        <name>trainingXs</name>
        <briefdescription>
<para>The training data points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="229" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cv_1_1SimpleCV_1a7c86c15a563eb9c9ea8aa6212c193f2f" prot="private" static="no" mutable="no">
        <type>PredictionsType</type>
        <definition>PredictionsType trainingYs</definition>
        <argsstring></argsstring>
        <name>trainingYs</name>
        <briefdescription>
<para>The training predictions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="231" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cv_1_1SimpleCV_1af3e8e63dc1e4a9aed53d4f51212d7015" prot="private" static="no" mutable="no">
        <type>MatType</type>
        <definition>MatType validationXs</definition>
        <argsstring></argsstring>
        <name>validationXs</name>
        <briefdescription>
<para>The validation data points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="236" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cv_1_1SimpleCV_1a7906208b31ef025f934d78cfee50a5e1" prot="private" static="no" mutable="no">
        <type>PredictionsType</type>
        <definition>PredictionsType validationYs</definition>
        <argsstring></argsstring>
        <name>validationYs</name>
        <briefdescription>
<para>The validation predictions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="238" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cv_1_1SimpleCV_1ae41eaaefe61a0c886c8b3ec26da9df66" prot="private" static="no" mutable="no">
        <type>WeightsType</type>
        <definition>WeightsType weights</definition>
        <argsstring></argsstring>
        <name>weights</name>
        <briefdescription>
<para>All input weights (optional). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="226" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cv_1_1SimpleCV_1acc80249c914e057ad5b3c4e81f9287cd" prot="private" static="no" mutable="no">
        <type>MatType</type>
        <definition>MatType xs</definition>
        <argsstring></argsstring>
        <name>xs</name>
        <briefdescription>
<para>All input data points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="222" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cv_1_1SimpleCV_1aceb2d8be184e9b84b05226a314637509" prot="private" static="no" mutable="no">
        <type>PredictionsType</type>
        <definition>PredictionsType ys</definition>
        <argsstring></argsstring>
        <name>ys</name>
        <briefdescription>
<para>All input predictions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="224" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1a2ff628c0b64ff1484a174a44986a8f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatInType</type>
          </param>
          <param>
            <type>typename PredictionsInType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SimpleCV</definition>
        <argsstring>(const double validationSize, MatInType &amp;&amp;xs, PredictionsInType &amp;&amp;ys)</argsstring>
        <name>SimpleCV</name>
        <param>
          <type>const double</type>
          <declname>validationSize</declname>
        </param>
        <param>
          <type>MatInType &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>PredictionsInType &amp;&amp;</type>
          <declname>ys</declname>
        </param>
        <briefdescription>
<para>This constructor can be used for regression algorithms and for binary classification algorithms. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>validationSize</parametername>
</parameternamelist>
<parameterdescription>
<para>A proportion (between 0 and 1) of data used as a validation set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points to cross-validate on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>Predictions (labels for classification algorithms and responses for regression algorithms) for each data point.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to MatType. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PredictionsInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to PredictionsType. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1a3b523a0befc766716c2f83ae4de0c409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatInType</type>
          </param>
          <param>
            <type>typename PredictionsInType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SimpleCV</definition>
        <argsstring>(const double validationSize, MatInType &amp;&amp;xs, PredictionsInType &amp;&amp;ys, const size_t numClasses)</argsstring>
        <name>SimpleCV</name>
        <param>
          <type>const double</type>
          <declname>validationSize</declname>
        </param>
        <param>
          <type>MatInType &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>PredictionsInType &amp;&amp;</type>
          <declname>ys</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>numClasses</declname>
        </param>
        <briefdescription>
<para>This constructor can be used for multiclass classification algorithms. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>validationSize</parametername>
</parameternamelist>
<parameterdescription>
<para>A proportion (between 0 and 1) of data used as a validation set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points to cross-validate on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>Labels for each data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numClasses</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of classes in the dataset.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to MatType. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PredictionsInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to PredictionsType. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1a00fb12da682539521fa19f63b6975673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatInType</type>
          </param>
          <param>
            <type>typename PredictionsInType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SimpleCV</definition>
        <argsstring>(const double validationSize, MatInType &amp;&amp;xs, const data::DatasetInfo &amp;datasetInfo, PredictionsInType &amp;&amp;ys, const size_t numClasses)</argsstring>
        <name>SimpleCV</name>
        <param>
          <type>const double</type>
          <declname>validationSize</declname>
        </param>
        <param>
          <type>MatInType &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>const <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref> &amp;</type>
          <declname>datasetInfo</declname>
        </param>
        <param>
          <type>PredictionsInType &amp;&amp;</type>
          <declname>ys</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>numClasses</declname>
        </param>
        <briefdescription>
<para>This constructor can be used for multiclass classification algorithms that can take a <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref> parameter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>validationSize</parametername>
</parameternamelist>
<parameterdescription>
<para>A proportion (between 0 and 1) of data used as a validation set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points to cross-validate on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>datasetInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Type information for each dimension of the dataset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>Labels for each data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numClasses</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of classes in the dataset.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to MatType. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PredictionsInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to PredictionsType. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1aad1230ac63f39932129ec309f127e66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatInType</type>
          </param>
          <param>
            <type>typename PredictionsInType</type>
          </param>
          <param>
            <type>typename WeightsInType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SimpleCV</definition>
        <argsstring>(const double validationSize, MatInType &amp;&amp;xs, PredictionsInType &amp;&amp;ys, WeightsInType &amp;&amp;weights)</argsstring>
        <name>SimpleCV</name>
        <param>
          <type>const double</type>
          <declname>validationSize</declname>
        </param>
        <param>
          <type>MatInType &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>PredictionsInType &amp;&amp;</type>
          <declname>ys</declname>
        </param>
        <param>
          <type>WeightsInType &amp;&amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>This constructor can be used for regression and binary classification algorithms that support weighted learning. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>validationSize</parametername>
</parameternamelist>
<parameterdescription>
<para>A proportion (between 0 and 1) of data used as a validation set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points to cross-validate on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>Predictions (labels for classification algorithms and responses for regression algorithms) for each data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Observation weights (for boosting).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to MatType. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PredictionsInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to PredictionsType. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WeightsInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to WeightsType. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1a9cafb1e9fbdf9ba67c5da36c2e358d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatInType</type>
          </param>
          <param>
            <type>typename PredictionsInType</type>
          </param>
          <param>
            <type>typename WeightsInType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SimpleCV</definition>
        <argsstring>(const double validationSize, MatInType &amp;&amp;xs, PredictionsInType &amp;&amp;ys, const size_t numClasses, WeightsInType &amp;&amp;weights)</argsstring>
        <name>SimpleCV</name>
        <param>
          <type>const double</type>
          <declname>validationSize</declname>
        </param>
        <param>
          <type>MatInType &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>PredictionsInType &amp;&amp;</type>
          <declname>ys</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>numClasses</declname>
        </param>
        <param>
          <type>WeightsInType &amp;&amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>This constructor can be used for multiclass classification algorithms that support weighted learning. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>validationSize</parametername>
</parameternamelist>
<parameterdescription>
<para>A proportion (between 0 and 1) of data used as a validation set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points to cross-validate on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>Labels for each data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numClasses</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of classes in the dataset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Observation weights (for boosting).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to MatType. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PredictionsInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to PredictionsType. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WeightsInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to WeightsType. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1a3e1040fd79834f43f1d9450102727d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatInType</type>
          </param>
          <param>
            <type>typename PredictionsInType</type>
          </param>
          <param>
            <type>typename WeightsInType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SimpleCV</definition>
        <argsstring>(const double validationSize, MatInType &amp;&amp;xs, const data::DatasetInfo &amp;datasetInfo, PredictionsInType &amp;&amp;ys, const size_t numClasses, WeightsInType &amp;&amp;weights)</argsstring>
        <name>SimpleCV</name>
        <param>
          <type>const double</type>
          <declname>validationSize</declname>
        </param>
        <param>
          <type>MatInType &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>const <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref> &amp;</type>
          <declname>datasetInfo</declname>
        </param>
        <param>
          <type>PredictionsInType &amp;&amp;</type>
          <declname>ys</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>numClasses</declname>
        </param>
        <param>
          <type>WeightsInType &amp;&amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>This constructor can be used for multiclass classification algorithms that can take a <ref refid="namespacemlpack_1_1data_1aa243ad7e4d29363b858bbc92b732921d" kindref="member">data::DatasetInfo</ref> parameter and support weighted learning. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>validationSize</parametername>
</parameternamelist>
<parameterdescription>
<para>A proportion (between 0 and 1) of data used as a validation set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points to cross-validate on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>datasetInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Type information for each dimension of the dataset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ys</parametername>
</parameternamelist>
<parameterdescription>
<para>Labels for each data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numClasses</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of classes in the dataset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Observation weights (for boosting).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to MatType. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PredictionsInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to PredictionsType. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WeightsInType</parametername>
</parameternamelist>
<parameterdescription>
<para>A type that can be converted to WeightsType. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1a007c5bdf4563b1afe12053585052e67f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>MLAlgorithmArgs</declname>
            <defname>MLAlgorithmArgs</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Evaluate</definition>
        <argsstring>(const MLAlgorithmArgs &amp;... args)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const MLAlgorithmArgs &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Train on the training set and assess performance on the validation set by using the class Metric. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments for the given MLAlgorithm taken by its constructor (in addition to the passed ones in the <ref refid="classmlpack_1_1cv_1_1SimpleCV" kindref="compound">SimpleCV</ref> constructor). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1ab89814a92c5627562bbc60fb788f978a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MLAlgorithm &amp;</type>
        <definition>MLAlgorithm&amp; Model</definition>
        <argsstring>()</argsstring>
        <name>Model</name>
        <briefdescription>
<para>Access and modify the last trained model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="212" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1a2c91d5eb9c6cfdf2330c4ceba745ed00" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatInType</type>
          </param>
          <param>
            <type>typename PredictionsInType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SimpleCV</definition>
        <argsstring>(Base &amp;&amp;base, const double validationSize, MatInType &amp;&amp;xs, PredictionsInType &amp;&amp;ys)</argsstring>
        <name>SimpleCV</name>
        <param>
          <type><ref refid="classmlpack_1_1cv_1_1CVBase" kindref="compound">Base</ref> &amp;&amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>validationSize</declname>
        </param>
        <param>
          <type>MatInType &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>PredictionsInType &amp;&amp;</type>
          <declname>ys</declname>
        </param>
        <briefdescription>
<para>Assert data consistency and initialize fields required for running cross-validation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1add19111ac4101224464b8257a2202beb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatInType</type>
          </param>
          <param>
            <type>typename PredictionsInType</type>
          </param>
          <param>
            <type>typename WeightsInType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SimpleCV</definition>
        <argsstring>(Base &amp;&amp;base, const double validationSize, MatInType &amp;&amp;xs, PredictionsInType &amp;&amp;ys, WeightsInType &amp;&amp;weights)</argsstring>
        <name>SimpleCV</name>
        <param>
          <type><ref refid="classmlpack_1_1cv_1_1CVBase" kindref="compound">Base</ref> &amp;&amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>validationSize</declname>
        </param>
        <param>
          <type>MatInType &amp;&amp;</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>PredictionsInType &amp;&amp;</type>
          <declname>ys</declname>
        </param>
        <param>
          <type>WeightsInType &amp;&amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>Assert data consistency and initialize fields required for running cross-validation in the case of weighted learning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1a45d5308fd8c1d901930cb6762d2b5d65" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t CalculateAndAssertNumberOfTrainingPoints</definition>
        <argsstring>(const double validationSize)</argsstring>
        <name>CalculateAndAssertNumberOfTrainingPoints</name>
        <param>
          <type>const double</type>
          <declname>validationSize</declname>
        </param>
        <briefdescription>
<para>Calculate the number of training points and assert it is legitimate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1a80038fcb90a2be90cb2f113afb7c06e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElementType</type>
          </param>
        </templateparamlist>
        <type>arma::Mat&lt; ElementType &gt;</type>
        <definition>arma::Mat&lt;ElementType&gt; GetSubset</definition>
        <argsstring>(arma::Mat&lt; ElementType &gt; &amp;m, const size_t firstCol, const size_t lastCol)</argsstring>
        <name>GetSubset</name>
        <param>
          <type>arma::Mat&lt; ElementType &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>firstCol</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>lastCol</declname>
        </param>
        <briefdescription>
<para>Get the specified submatrix without coping the data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1aac09c8c34232e86d00829dde49f380c4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElementType</type>
          </param>
        </templateparamlist>
        <type>arma::Row&lt; ElementType &gt;</type>
        <definition>arma::Row&lt;ElementType&gt; GetSubset</definition>
        <argsstring>(arma::Row&lt; ElementType &gt; &amp;r, const size_t firstCol, const size_t lastCol)</argsstring>
        <name>GetSubset</name>
        <param>
          <type>arma::Row&lt; ElementType &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>firstCol</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>lastCol</declname>
        </param>
        <briefdescription>
<para>Get the specified subrow without coping the data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1a349558280ad7d8c8792473dc89e0dd9b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>MLAlgorithmArgs</declname>
            <defname>MLAlgorithmArgs</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>Enabled</declname>
            <defname>Enabled</defname>
            <defval>!<ref refid="classmlpack_1_1cv_1_1MetaInfoExtractor_1af9be7f6c420e961867c5945da0a3a339" kindref="member">Base::MIE::SupportsWeights</ref></defval>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;Enabled&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double TrainAndEvaluate</definition>
        <argsstring>(const MLAlgorithmArgs &amp;... args)</argsstring>
        <name>TrainAndEvaluate</name>
        <param>
          <type>const MLAlgorithmArgs &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Train and run evaluation in the case of non-weighted learning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cv_1_1SimpleCV_1a3b54f2685cf4171c72d8f3c92a639b17" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>MLAlgorithmArgs</declname>
            <defname>MLAlgorithmArgs</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>Enabled</declname>
            <defname>Enabled</defname>
            <defval><ref refid="classmlpack_1_1cv_1_1MetaInfoExtractor_1af9be7f6c420e961867c5945da0a3a339" kindref="member">Base::MIE::SupportsWeights</ref></defval>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;Enabled&gt;::type</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double TrainAndEvaluate</definition>
        <argsstring>(const MLAlgorithmArgs &amp;... args)</argsstring>
        <name>TrainAndEvaluate</name>
        <param>
          <type>const MLAlgorithmArgs &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Train and run evaluation in the case of supporting weighted learning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="303" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classmlpack_1_1cv_1_1SimpleCV" kindref="compound">SimpleCV</ref> splits data into two sets - training and validation sets - and then runs training on the training set and evaluates performance on the validation set. </para>    </briefdescription>
    <detaileddescription>
<para>To construct a <ref refid="classmlpack_1_1cv_1_1SimpleCV" kindref="compound">SimpleCV</ref> object you need to pass the validationSize parameter and arguments that specify data. For example, SoftmaxRegression can be validated in the following way.</para><para><programlisting><codeline><highlight class="normal">//<sp/>100-point<sp/>5-dimensional<sp/>random<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>data<sp/>=<sp/>arma::randu&lt;arma::mat&gt;(5,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Random<sp/>labels<sp/>in<sp/>the<sp/>[0,<sp/>4]<sp/>interval.</highlight></codeline>
<codeline><highlight class="normal">arma::Row&lt;size_t&gt;<sp/>labels<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arma::randi&lt;arma::Row&lt;size_t&gt;&gt;(100,<sp/>arma::distr_param(0,<sp/>4));</highlight></codeline>
<codeline><highlight class="normal">size_t<sp/>numClasses<sp/>=<sp/>5;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>validationSize<sp/>=<sp/>0.2;</highlight></codeline>
<codeline><highlight class="normal">SimpleCV&lt;SoftmaxRegression&lt;&gt;,<sp/>Accuracy&gt;<sp/>cv(validationSize,<sp/>data,<sp/>labels,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>numClasses);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>lambda<sp/>=<sp/>0.1;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>softmaxAccuracy<sp/>=<sp/>cv.Evaluate(lambda);</highlight></codeline>
</programlisting></para><para>In the example above, 80% of the passed dataset will be used for training, and remaining 20% will be used for calculating the accuracy metric.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MLAlgorithm</parametername>
</parameternamelist>
<parameterdescription>
<para>A machine learning algorithm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Metric</parametername>
</parameternamelist>
<parameterdescription>
<para>A metric to assess the quality of a trained model. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MatType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PredictionsType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of predictions (should be passed when the predictions type is a template parameter in Train methods of the given MLAlgorithm; arma::Row&lt;size_t&gt; will be used otherwise). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WeightsType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of weights (should be passed when weighted learning is supported, and the weights type is a template parameter in Train methods of the given MLAlgorithm; arma::vec will be used otherwise). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" line="69" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp" bodystart="68" bodyend="304"/>
    <listofallmembers>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a4a157c774ff84233650cf9292ff69c40" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>Base</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a12a9b00b635f4868359d0554d4dbfc31" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>base</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a45d5308fd8c1d901930cb6762d2b5d65" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>CalculateAndAssertNumberOfTrainingPoints</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a007c5bdf4563b1afe12053585052e67f" prot="public" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a80038fcb90a2be90cb2f113afb7c06e2" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>GetSubset</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1aac09c8c34232e86d00829dde49f380c4" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>GetSubset</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1ab89814a92c5627562bbc60fb788f978a" prot="public" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>Model</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a4f600385748d2bfc2883f5d3f0b3c211" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>modelPtr</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a2ff628c0b64ff1484a174a44986a8f8d" prot="public" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>SimpleCV</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a3b523a0befc766716c2f83ae4de0c409" prot="public" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>SimpleCV</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a00fb12da682539521fa19f63b6975673" prot="public" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>SimpleCV</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1aad1230ac63f39932129ec309f127e66d" prot="public" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>SimpleCV</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a9cafb1e9fbdf9ba67c5da36c2e358d47" prot="public" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>SimpleCV</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a3e1040fd79834f43f1d9450102727d3a" prot="public" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>SimpleCV</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a2c91d5eb9c6cfdf2330c4ceba745ed00" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>SimpleCV</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1add19111ac4101224464b8257a2202beb" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>SimpleCV</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a349558280ad7d8c8792473dc89e0dd9b" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>TrainAndEvaluate</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a3b54f2685cf4171c72d8f3c92a639b17" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>TrainAndEvaluate</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a5d78a35db515af35857528de81d2db63" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>trainingWeights</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a8b2b53386f5c27528eee6626513fe855" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>trainingXs</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a7c86c15a563eb9c9ea8aa6212c193f2f" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>trainingYs</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1af3e8e63dc1e4a9aed53d4f51212d7015" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>validationXs</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1a7906208b31ef025f934d78cfee50a5e1" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>validationYs</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1ae41eaaefe61a0c886c8b3ec26da9df66" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>weights</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1acc80249c914e057ad5b3c4e81f9287cd" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>xs</name></member>
      <member refid="classmlpack_1_1cv_1_1SimpleCV_1aceb2d8be184e9b84b05226a314637509" prot="private" virt="non-virtual"><scope>mlpack::cv::SimpleCV</scope><name>ys</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
