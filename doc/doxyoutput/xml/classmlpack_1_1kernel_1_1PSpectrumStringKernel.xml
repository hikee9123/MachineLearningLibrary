<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1kernel_1_1PSpectrumStringKernel" kind="class" language="C++" prot="public">
    <compoundname>mlpack::kernel::PSpectrumStringKernel</compoundname>
    <includes refid="pspectrum__string__kernel_8hpp" local="no">pspectrum_string_kernel.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1aada5163abd56ec5a203ff3d886cbf368" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; std::map&lt; std::string, int &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;std::map&lt;std::string, int&gt; &gt; &gt; counts</definition>
        <argsstring></argsstring>
        <name>counts</name>
        <briefdescription>
<para>Mappings of the datasets to counts of substrings. </para>        </briefdescription>
        <detaileddescription>
<para>Such a huge structure is not wonderful... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" line="107" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1a7e13621a6fab9b292d4807e65151be1e" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <briefdescription>
<para>The value of p to use in calculation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" line="110" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1a47cbfdf26b3615d6db222d23d4e644d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PSpectrumStringKernel</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; std::string &gt; &gt; &amp;datasets, const size_t p)</argsstring>
        <name>PSpectrumStringKernel</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::string &gt; &gt; &amp;</type>
          <declname>datasets</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classmlpack_1_1kernel_1_1PSpectrumStringKernel" kindref="compound">PSpectrumStringKernel</ref> with the given string datasets. </para>        </briefdescription>
        <detaileddescription>
<para>For more information on this, see the general class documentation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datasets</parametername>
</parameternamelist>
<parameterdescription>
<para>Sets of string data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of substrings to search. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1ac234cd7efb1abfdc125c85a7ac055327" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::vector&lt; std::map&lt; std::string, int &gt; &gt; &gt; &amp;</type>
        <definition>const std::vector&lt;std::vector&lt;std::map&lt;std::string, int&gt; &gt; &gt;&amp; Counts</definition>
        <argsstring>() const</argsstring>
        <name>Counts</name>
        <briefdescription>
<para>Access the lists of substrings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" line="93" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" bodystart="93" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1a6af5550e3efc25fc95bda59c318cc313" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; std::map&lt; std::string, int &gt; &gt; &gt; &amp;</type>
        <definition>std::vector&lt;std::vector&lt;std::map&lt;std::string, int&gt; &gt; &gt;&amp; Counts</definition>
        <argsstring>()</argsstring>
        <name>Counts</name>
        <briefdescription>
<para>Modify the lists of substrings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" line="96" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" bodystart="96" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1a18c0420cf974d5223049f21f796abc5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Evaluate</definition>
        <argsstring>(const VecType &amp;a, const VecType &amp;b) const</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const VecType &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Evaluate the kernel for the string indices given. </para>        </briefdescription>
        <detaileddescription>
<para>As mentioned in the class documentation, a and b should be 2-element vectors, where the first element contains the index of the dataset and the second element contains the index of the string. Therefore, if [2 3] is passed for a, the string used will be datasets[2][3] (datasets is of type std::vector&lt;std::vector&lt;std::string&gt; &gt;&amp;).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of string and dataset for first string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of string and dataset for second string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1ad0b1284cb7df64984925548091781d48" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t P</definition>
        <argsstring>() const</argsstring>
        <name>P</name>
        <briefdescription>
<para>Access the value of p. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" line="100" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1a97c58660ce444396887bca51b1c831a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t &amp;</type>
        <definition>size_t&amp; P</definition>
        <argsstring>()</argsstring>
        <name>P</name>
        <briefdescription>
<para>Modify the value of p. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" line="102" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The p-spectrum string kernel. </para>    </briefdescription>
    <detaileddescription>
<para>Given a length p, the p-spectrum kernel finds the contiguous subsequence match count between two strings. The kernel will take every possible substring of length p of one string and count how many times it appears in the other string.</para><para>The string kernel, when created, must be passed a reference to a series of string datasets (std::vector&lt;std::vector&lt;std::string&gt; &gt;&amp;). This is because mlpack only supports datasets which are Armadillo matrices <ndash/> and a dataset of variable-length strings cannot be easily cast into an Armadillo matrix.</para><para>Therefore, once the <ref refid="classmlpack_1_1kernel_1_1PSpectrumStringKernel" kindref="compound">PSpectrumStringKernel</ref> is created with a reference to the string datasets, a &quot;fake&quot; Armadillo data matrix must be created, which simply holds indices to the strings they represent. This &quot;fake&quot; matrix has two rows and n columns (where n is the number of strings in the dataset). The first row holds the index of the dataset (remember, the kernel can have multiple datasets), and the second row holds the index of the string. A fake matrix containing only strings from dataset 0 might look like this:</para><para>[[0 0 0 0 0 0 0 0 0] [0 1 2 3 4 5 6 7 8]]</para><para>This fake matrix is then given to the machine learning method, which will eventually call PSpectrumStringKernel::Evaluate(a, b), where a and b are two columns of the fake matrix. The string kernel will then map these fake columns back to the strings they represent, and then correctly evaluate the kernel.</para><para>Unfortunately, not every machine learning method will work with this kernel. Only machine learning methods which do not ever operate on the explicit representation of points can use this kernel. So, for instance, one cannot build a kd-tree on strings, because the BinarySpaceTree&lt;&gt; class will split the data according to the fake data matrix <ndash/> resulting in a meaningless tree. This kernel was originally written for the FastMKS method; so, at the very least, it will work with that. </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" line="66" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/pspectrum_string_kernel.hpp" bodystart="65" bodyend="111"/>
    <listofallmembers>
      <member refid="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1aada5163abd56ec5a203ff3d886cbf368" prot="private" virt="non-virtual"><scope>mlpack::kernel::PSpectrumStringKernel</scope><name>counts</name></member>
      <member refid="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1ac234cd7efb1abfdc125c85a7ac055327" prot="public" virt="non-virtual"><scope>mlpack::kernel::PSpectrumStringKernel</scope><name>Counts</name></member>
      <member refid="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1a6af5550e3efc25fc95bda59c318cc313" prot="public" virt="non-virtual"><scope>mlpack::kernel::PSpectrumStringKernel</scope><name>Counts</name></member>
      <member refid="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1a18c0420cf974d5223049f21f796abc5f" prot="public" virt="non-virtual"><scope>mlpack::kernel::PSpectrumStringKernel</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1a7e13621a6fab9b292d4807e65151be1e" prot="private" virt="non-virtual"><scope>mlpack::kernel::PSpectrumStringKernel</scope><name>p</name></member>
      <member refid="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1ad0b1284cb7df64984925548091781d48" prot="public" virt="non-virtual"><scope>mlpack::kernel::PSpectrumStringKernel</scope><name>P</name></member>
      <member refid="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1a97c58660ce444396887bca51b1c831a9" prot="public" virt="non-virtual"><scope>mlpack::kernel::PSpectrumStringKernel</scope><name>P</name></member>
      <member refid="classmlpack_1_1kernel_1_1PSpectrumStringKernel_1a47cbfdf26b3615d6db222d23d4e644d4" prot="public" virt="non-virtual"><scope>mlpack::kernel::PSpectrumStringKernel</scope><name>PSpectrumStringKernel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
