<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1kernel_1_1ExampleKernel" kind="class" language="C++" prot="public">
    <compoundname>mlpack::kernel::ExampleKernel</compoundname>
    <includes refid="example__kernel_8hpp" local="no">example_kernel.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1ExampleKernel_1ae749bed5678e12147a188ec9eab90ace" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ExampleKernel</definition>
        <argsstring>()</argsstring>
        <name>ExampleKernel</name>
        <briefdescription>
<para>The default constructor, which takes no parameters. </para>        </briefdescription>
        <detaileddescription>
<para>Because our simple example kernel has no internal parameters that need to be stored, the constructor does not need to do anything. For a more complex example, see the <ref refid="classmlpack_1_1kernel_1_1GaussianKernel" kindref="compound">GaussianKernel</ref>, which stores an internal parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" line="85" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1ExampleKernel_1aa2ccb5a0533a6ba0abe6dfc1f98fbafb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;, const uint32_t)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
        </param>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>Serializes the kernel. </para>        </briefdescription>
        <detaileddescription>
<para>In this case, the kernel has no members, so we do not need to do anything at all. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" line="109" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1ExampleKernel_1a74f0cef3d02d0bba7327397f500d942c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecTypeA</type>
          </param>
          <param>
            <type>typename VecTypeB</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>static double ConvolutionIntegral</definition>
        <argsstring>(const VecTypeA &amp;, const VecTypeB &amp;)</argsstring>
        <name>ConvolutionIntegral</name>
        <param>
          <type>const VecTypeA &amp;</type>
        </param>
        <param>
          <type>const VecTypeB &amp;</type>
        </param>
        <briefdescription>
<para>Obtains the convolution integral [integral K(||x-a||)K(||b-x||)dx] for the two vectors. </para>        </briefdescription>
        <detaileddescription>
<para>In this case, because our simple example kernel has no internal parameters, we can declare the function static. For a more complex example which cannot be declared static, see the <ref refid="classmlpack_1_1kernel_1_1GaussianKernel" kindref="compound">GaussianKernel</ref>, which stores an internal parameter.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VecTypeA</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of first vector (arma::vec, arma::sp_vec should be expected). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VecTypeB</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of second vector (arma::vec, arma::sp_vec). </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(a) First vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(b) Second vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the convolution integral value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" line="126" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" bodystart="126" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1ExampleKernel_1adb822097969089daac573baeb5c9b184" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecTypeA</type>
          </param>
          <param>
            <type>typename VecTypeB</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>static double Evaluate</definition>
        <argsstring>(const VecTypeA &amp;, const VecTypeB &amp;)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const VecTypeA &amp;</type>
        </param>
        <param>
          <type>const VecTypeB &amp;</type>
        </param>
        <briefdescription>
<para>Evaluates the kernel function for two given vectors. </para>        </briefdescription>
        <detaileddescription>
<para>In this case, because our simple example kernel has no internal parameters, we can declare the function static. For a more complex example which cannot be declared static, see the <ref refid="classmlpack_1_1kernel_1_1GaussianKernel" kindref="compound">GaussianKernel</ref>, which stores an internal parameter.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VecTypeA</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of first vector (arma::vec, arma::sp_vec should be expected). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VecTypeB</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of second vector (arma::vec, arma::sp_vec). </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(a) First vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(b) Second vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>K(a, b). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" line="101" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" bodystart="101" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1ExampleKernel_1a451ae0fa79b59e479c6393647a6713d8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double Normalizer</definition>
        <argsstring>()</argsstring>
        <name>Normalizer</name>
        <briefdescription>
<para>Obtains the normalizing volume for the kernel with dimension $dimension$. </para>        </briefdescription>
        <detaileddescription>
<para>In this case, because our simple example kernel has no internal parameters, we can declare the function static. For a more complex example which cannot be declared static, see the <ref refid="classmlpack_1_1kernel_1_1GaussianKernel" kindref="compound">GaussianKernel</ref>, which stores an internal parameter.</para><para><simplesect kind="return"><para>the normalization constant. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" line="138" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" bodystart="138" bodyend="138"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An example kernel function. </para>    </briefdescription>
    <detaileddescription>
<para>This is not a useful kernel, but it implements the two functions necessary to satisfy the Kernel policy (so that a class can be used whenever an mlpack method calls for a <computeroutput>typename Kernel</computeroutput> template parameter.</para><para>All that is necessary is a constructor and an <computeroutput><ref refid="classmlpack_1_1kernel_1_1ExampleKernel_1adb822097969089daac573baeb5c9b184" kindref="member">Evaluate()</ref></computeroutput> function. More methods could be added; for instance, one useful idea is a constructor which takes parameters for a kernel (for instance, the width of the Gaussian for a Gaussian kernel). However, mlpack methods cannot count on these various constructors existing, which is why most methods allow passing an already-instantiated kernel object (and by default the method will construct the kernel with the default constructor). So, for instance,</para><para><programlisting><codeline><highlight class="normal">GaussianKernel<sp/>k(5.0);</highlight></codeline>
<codeline><highlight class="normal">KernelPCA&lt;GaussianKernel&gt;<sp/>kpca(dataset,<sp/>k);</highlight></codeline>
</programlisting></para><para>will set up kernel PCA using a Gaussian kernel with a width of 5.0, but</para><para><programlisting><codeline><highlight class="normal">KernelPCA&lt;GaussianKernel&gt;<sp/>kpca(dataset);</highlight></codeline>
</programlisting></para><para>will create the kernel with the default constructor. It is important (but not strictly mandatory) that your default constructor still gives a working kernel.</para><para><simplesect kind="note"><para>Not all kernels require state. For instance, the regular dot product needs no parameters. In that case, no local variables are necessary and <computeroutput><ref refid="classmlpack_1_1kernel_1_1ExampleKernel_1adb822097969089daac573baeb5c9b184" kindref="member">Evaluate()</ref></computeroutput> can (and should) be declared static. However, for greater generalization, mlpack methods expect all kernels to require state and hence must store instantiated kernel functions; this is why a default constructor is necessary. </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" line="77" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/example_kernel.hpp" bodystart="76" bodyend="142"/>
    <listofallmembers>
      <member refid="classmlpack_1_1kernel_1_1ExampleKernel_1a74f0cef3d02d0bba7327397f500d942c" prot="public" virt="non-virtual"><scope>mlpack::kernel::ExampleKernel</scope><name>ConvolutionIntegral</name></member>
      <member refid="classmlpack_1_1kernel_1_1ExampleKernel_1adb822097969089daac573baeb5c9b184" prot="public" virt="non-virtual"><scope>mlpack::kernel::ExampleKernel</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1kernel_1_1ExampleKernel_1ae749bed5678e12147a188ec9eab90ace" prot="public" virt="non-virtual"><scope>mlpack::kernel::ExampleKernel</scope><name>ExampleKernel</name></member>
      <member refid="classmlpack_1_1kernel_1_1ExampleKernel_1a451ae0fa79b59e479c6393647a6713d8" prot="public" virt="non-virtual"><scope>mlpack::kernel::ExampleKernel</scope><name>Normalizer</name></member>
      <member refid="classmlpack_1_1kernel_1_1ExampleKernel_1aa2ccb5a0533a6ba0abe6dfc1f98fbafb" prot="public" virt="non-virtual"><scope>mlpack::kernel::ExampleKernel</scope><name>serialize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
