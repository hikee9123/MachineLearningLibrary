<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1sparse__coding_1_1SparseCoding" kind="class" language="C++" prot="public">
    <compoundname>mlpack::sparse_coding::SparseCoding</compoundname>
    <includes refid="sparse__coding_8hpp" local="no">sparse_coding.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a609c2a583fdbf2e467572e1b2c707e1a" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t atoms</definition>
        <argsstring></argsstring>
        <name>atoms</name>
        <briefdescription>
<para>Number of atoms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="263" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1afed8259a67349d88581e1e2e88e7d320" prot="private" static="no" mutable="no">
        <type>arma::mat</type>
        <definition>arma::mat dictionary</definition>
        <argsstring></argsstring>
        <name>dictionary</name>
        <briefdescription>
<para>Dictionary (columns are atoms). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="266" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1ab43246964e91b737c5202793c9f337ed" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lambda1</definition>
        <argsstring></argsstring>
        <name>lambda1</name>
        <briefdescription>
<para>l1 regularization term. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="269" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1afdbf7b2b51f4f367aed9590917976d9f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lambda2</definition>
        <argsstring></argsstring>
        <name>lambda2</name>
        <briefdescription>
<para>l2 regularization term. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="271" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1adb3fa2e38847b23885acf3833f28538e" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t maxIterations</definition>
        <argsstring></argsstring>
        <name>maxIterations</name>
        <briefdescription>
<para>Maximum number of iterations during training. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="274" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a11a32c8eeaf928af5cb365d580fbccae" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double newtonTolerance</definition>
        <argsstring></argsstring>
        <name>newtonTolerance</name>
        <briefdescription>
<para>Tolerance for Newton&apos;s method (dictionary training). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="278" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a0cac908220ae3d1eb415c80a50e36eca" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double objTolerance</definition>
        <argsstring></argsstring>
        <name>objTolerance</name>
        <briefdescription>
<para>Tolerance for main objective. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="276" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="276" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a603b4e6346773526111dd0e759ec1283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DictionaryInitializer</type>
            <defval><ref refid="classmlpack_1_1sparse__coding_1_1DataDependentRandomInitializer" kindref="compound">DataDependentRandomInitializer</ref></defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SparseCoding</definition>
        <argsstring>(const arma::mat &amp;data, const size_t atoms, const double lambda1, const double lambda2=0, const size_t maxIterations=0, const double objTolerance=0.01, const double newtonTolerance=1e-6, const DictionaryInitializer &amp;initializer=DictionaryInitializer())</argsstring>
        <name>SparseCoding</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>atoms</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda1</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda2</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxIterations</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>objTolerance</declname>
          <defval>0.01</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>newtonTolerance</declname>
          <defval>1e-6</defval>
        </param>
        <param>
          <type>const DictionaryInitializer &amp;</type>
          <declname>initializer</declname>
          <defval>DictionaryInitializer()</defval>
        </param>
        <briefdescription>
<para>Set the parameters to <ref refid="classmlpack_1_1sparse__coding_1_1SparseCoding" kindref="compound">SparseCoding</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>lambda2 defaults to 0. This constructor will train the model. If that is not desired, call the other constructor that does not take a data matrix. This constructor will also initialize the dictionary using the given DictionaryInitializer before training.</para><para>If you want to initialize the dictionary to a custom matrix, consider either writing your own DictionaryInitializer class (with void Initialize(const arma::mat&amp; data, arma::mat&amp; dictionary) function), or call the constructor that does not take a data matrix, then call <ref refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a3146526cfc85ff339121972d67c73f62" kindref="member">Dictionary()</ref> to set the dictionary matrix to a matrix of your choosing, and then call <ref refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a69503a211de26a7b35e7e7867cf20246" kindref="member">Train()</ref> with <ref refid="classmlpack_1_1sparse__coding_1_1NothingInitializer" kindref="compound">NothingInitializer</ref> (i.e. Train&lt;NothingInitializer&gt;(data)).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atoms</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of atoms in dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda1</parametername>
</parameternamelist>
<parameterdescription>
<para>Regularization parameter for l1-norm penalty. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda2</parametername>
</parameternamelist>
<parameterdescription>
<para>Regularization parameter for l2-norm penalty. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of iterations to run algorithm. If 0, the algorithm will run until convergence (or forever). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>objTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for objective function. When an iteration of the algorithm produces an improvement smaller than this, the algorithm will terminate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newtonTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for the Newton&apos;s method dictionary optimization step. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initializer</parametername>
</parameternamelist>
<parameterdescription>
<para>The initializer to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1ad3476d9c5a489044fa1142e33a6052d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SparseCoding</definition>
        <argsstring>(const size_t atoms=0, const double lambda1=0, const double lambda2=0, const size_t maxIterations=0, const double objTolerance=0.01, const double newtonTolerance=1e-6)</argsstring>
        <name>SparseCoding</name>
        <param>
          <type>const size_t</type>
          <declname>atoms</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda1</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda2</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxIterations</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>objTolerance</declname>
          <defval>0.01</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>newtonTolerance</declname>
          <defval>1e-6</defval>
        </param>
        <briefdescription>
<para>Set the parameters to <ref refid="classmlpack_1_1sparse__coding_1_1SparseCoding" kindref="compound">SparseCoding</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>lambda2 defaults to 0. This constructor will not train the model, and a subsequent call to <ref refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a69503a211de26a7b35e7e7867cf20246" kindref="member">Train()</ref> will be required before the model can encode points with <ref refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a4b2741b0e146d6eb6a09e30f228ea309" kindref="member">Encode()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>atoms</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of atoms in dictionary. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda1</parametername>
</parameternamelist>
<parameterdescription>
<para>Regularization parameter for l1-norm penalty. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda2</parametername>
</parameternamelist>
<parameterdescription>
<para>Regularization parameter for l2-norm penalty. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of iterations to run algorithm. If 0, the algorithm will run until convergence (or forever). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>objTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for objective function. When an iteration of the algorithm produces an improvement smaller than this, the algorithm will terminate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newtonTolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for the Newton&apos;s method dictionary optimization step. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1ac1a924c2cc0b117283fc8aba76a92a07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Atoms</definition>
        <argsstring>() const</argsstring>
        <name>Atoms</name>
        <briefdescription>
<para>Access the number of atoms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="228" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a30a05b58ad809476c03aba6df5970b52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t &amp;</type>
        <definition>size_t&amp; Atoms</definition>
        <argsstring>()</argsstring>
        <name>Atoms</name>
        <briefdescription>
<para>Modify the number of atoms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="230" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a29bceb0b46c45a45594c9feb0e743171" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::mat &amp;</type>
        <definition>const arma::mat&amp; Dictionary</definition>
        <argsstring>() const</argsstring>
        <name>Dictionary</name>
        <briefdescription>
<para>Access the dictionary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="223" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a3146526cfc85ff339121972d67c73f62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>arma::mat &amp;</type>
        <definition>arma::mat&amp; Dictionary</definition>
        <argsstring>()</argsstring>
        <name>Dictionary</name>
        <briefdescription>
<para>Modify the dictionary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="225" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a4b2741b0e146d6eb6a09e30f228ea309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Encode</definition>
        <argsstring>(const arma::mat &amp;data, arma::mat &amp;codes)</argsstring>
        <name>Encode</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>codes</declname>
        </param>
        <briefdescription>
<para>Sparse code each point in the given dataset via LARS, using the current dictionary and store the encoded data in the codes matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input data matrix to be encoded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>Output codes matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a264615b0081adef98427420db074cd44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Lambda1</definition>
        <argsstring>() const</argsstring>
        <name>Lambda1</name>
        <briefdescription>
<para>Access the L1 regularization term. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="233" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="233" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a743296069b1e03a1bb2e7a466eb68022" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; Lambda1</definition>
        <argsstring>()</argsstring>
        <name>Lambda1</name>
        <briefdescription>
<para>Modify the L1 regularization term. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="235" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1aae12d0e36b1a7fa52a155f9d3f7a50f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Lambda2</definition>
        <argsstring>() const</argsstring>
        <name>Lambda2</name>
        <briefdescription>
<para>Access the L2 regularization term. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="238" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1adb32f19e01e1576af72865eb87978008" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; Lambda2</definition>
        <argsstring>()</argsstring>
        <name>Lambda2</name>
        <briefdescription>
<para>Modify the L2 regularization term. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="240" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="240" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a420770944a5b0c7a852c4ec372c4a2d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t MaxIterations</definition>
        <argsstring>() const</argsstring>
        <name>MaxIterations</name>
        <briefdescription>
<para>Get the maximum number of iterations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="243" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="243" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1acda675ab4ab86b95c92bc33bc391a61b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t &amp;</type>
        <definition>size_t&amp; MaxIterations</definition>
        <argsstring>()</argsstring>
        <name>MaxIterations</name>
        <briefdescription>
<para>Modify the maximum number of iterations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="245" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="245" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a6fcf2b9f21e7933d9292d11be1535475" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double NewtonTolerance</definition>
        <argsstring>() const</argsstring>
        <name>NewtonTolerance</name>
        <briefdescription>
<para>Get the tolerance for Newton&apos;s method (dictionary optimization step). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="253" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a32f233437346e49c0b7dad746ac62b6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; NewtonTolerance</definition>
        <argsstring>()</argsstring>
        <name>NewtonTolerance</name>
        <briefdescription>
<para>Modify the tolerance for Newton&apos;s method (dictionary optimization step). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="255" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="255" bodyend="255"/>
        <references refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a65cba07328997659bec80b9879b15a51">SparseCoding::serialize</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a8a45b3d947cc22079a5941b9d46acfe3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Objective</definition>
        <argsstring>(const arma::mat &amp;data, const arma::mat &amp;codes) const</argsstring>
        <name>Objective</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>codes</declname>
        </param>
        <briefdescription>
<para>Compute the objective function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a8c2c8dec8e93ca1ddc14ac238266ef20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double ObjTolerance</definition>
        <argsstring>() const</argsstring>
        <name>ObjTolerance</name>
        <briefdescription>
<para>Get the objective tolerance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="248" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="248" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1afe546afaa975282a5549cc416c1d64f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; ObjTolerance</definition>
        <argsstring>()</argsstring>
        <name>ObjTolerance</name>
        <briefdescription>
<para>Modify the objective tolerance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="250" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a2d164dea45075388335d75f8c27fd659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double OptimizeDictionary</definition>
        <argsstring>(const arma::mat &amp;data, const arma::mat &amp;codes, const arma::uvec &amp;adjacencies)</argsstring>
        <name>OptimizeDictionary</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>const arma::uvec &amp;</type>
          <declname>adjacencies</declname>
        </param>
        <briefdescription>
<para>Learn dictionary via Newton method based on Lagrange dual. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of codes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adjacencies</parametername>
</parameternamelist>
<parameterdescription>
<para>Indices of entries (unrolled column by column) of the coding matrix Z that are non-zero (the adjacency matrix for the bipartite graph of points and atoms). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the norm of the gradient of the Lagrange dual with respect to the dual variables </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1ab8a90e33cb1a5db9cda2ef2f0ba26e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ProjectDictionary</definition>
        <argsstring>()</argsstring>
        <name>ProjectDictionary</name>
        <briefdescription>
<para>Project each atom of the dictionary back onto the unit ball, if necessary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a65cba07328997659bec80b9879b15a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>Serialize the sparse coding model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="259" column="1"/>
        <referencedby refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a32f233437346e49c0b7dad746ac62b6b" compoundref="sparse__coding_8hpp" startline="255" endline="255">SparseCoding::NewtonTolerance</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1sparse__coding_1_1SparseCoding_1a69503a211de26a7b35e7e7867cf20246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DictionaryInitializer</type>
            <defval><ref refid="classmlpack_1_1sparse__coding_1_1DataDependentRandomInitializer" kindref="compound">DataDependentRandomInitializer</ref></defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Train</definition>
        <argsstring>(const arma::mat &amp;data, const DictionaryInitializer &amp;initializer=DictionaryInitializer())</argsstring>
        <name>Train</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const DictionaryInitializer &amp;</type>
          <declname>initializer</declname>
          <defval>DictionaryInitializer()</defval>
        </param>
        <briefdescription>
<para>Train the sparse coding model on the given dataset. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The final objective value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="184" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An implementation of Sparse Coding with Dictionary Learning that achieves sparsity via an l1-norm regularizer on the codes (LASSO) or an (l1+l2)-norm regularizer on the codes (the Elastic Net). </para>    </briefdescription>
    <detaileddescription>
<para>Let d be the number of dimensions in the original space, m the number of training points, and k the number of atoms in the dictionary (the dimension of the learned feature space). The training data X is a d-by-m matrix where each column is a point and each row is a dimension. The dictionary D is a d-by-k matrix, and the sparse codes matrix Z is a k-by-m matrix. This program seeks to minimize the objective:</para><para><formula id="167">\[ \min_{D,Z} 0.5 ||X - D Z||_{F}^2\ + \lambda_1 \sum_{i=1}^m ||Z_i||_1 + 0.5 \lambda_2 \sum_{i=1}^m ||Z_i||_2^2 \]</formula></para><para>subject to <formula id="168">$ ||D_j||_2 &lt;= 1 $</formula> for <formula id="169">$ 1 &lt;= j &lt;= k $</formula> where typically <formula id="170">$ lambda_1 &gt; 0 $</formula> and <formula id="171">$ lambda_2 = 0 $</formula>.</para><para>This problem is solved by an algorithm that alternates between a dictionary learning step and a sparse coding step. The dictionary learning step updates the dictionary D using a Newton method based on the Lagrange dual (see the paper below for details). The sparse coding step involves solving a large number of sparse linear regression problems; this can be done efficiently using LARS, an algorithm that can solve the LASSO or the Elastic Net (papers below).</para><para>Here are those papers:</para><para><programlisting><codeline><highlight class="normal">@incollection{lee2007efficient,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title<sp/>=<sp/>{Efficient<sp/>sparse<sp/>coding<sp/>algorithms},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author<sp/>=<sp/>{Honglak<sp/>Lee<sp/>and<sp/>Alexis<sp/>Battle<sp/>and<sp/>Rajat<sp/>Raina<sp/>and<sp/>Andrew<sp/>Y.<sp/>Ng},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>booktitle<sp/>=<sp/>{Advances<sp/>in<sp/>Neural<sp/>Information<sp/>Processing<sp/>Systems<sp/>19},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>editor<sp/>=<sp/>{B.<sp/>Sch\&quot;{o}lkopf<sp/>and<sp/>J.<sp/>Platt<sp/>and<sp/>T.<sp/>Hoffman},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>publisher<sp/>=<sp/>{MIT<sp/>Press},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>address<sp/>=<sp/>{Cambridge,<sp/>MA},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages<sp/>=<sp/>{801--808},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year<sp/>=<sp/>{2007}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><programlisting><codeline><highlight class="normal">@article{efron2004least,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title={Least<sp/>angle<sp/>regression},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author={Efron,<sp/>B.<sp/>and<sp/>Hastie,<sp/>T.<sp/>and<sp/>Johnstone,<sp/>I.<sp/>and<sp/>Tibshirani,<sp/>R.},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>journal={The<sp/>Annals<sp/>of<sp/>statistics},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>volume={32},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>number={2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages={407--499},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year={2004},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>publisher={Institute<sp/>of<sp/>Mathematical<sp/>Statistics}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><programlisting><codeline><highlight class="normal">@article{zou2005regularization,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title={Regularization<sp/>and<sp/>variable<sp/>selection<sp/>via<sp/>the<sp/>elastic<sp/>net},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author={Zou,<sp/>H.<sp/>and<sp/>Hastie,<sp/>T.},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>journal={Journal<sp/>of<sp/>the<sp/>Royal<sp/>Statistical<sp/>Society<sp/>Series<sp/>B},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>volume={67},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>number={2},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages={301--320},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year={2005},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>publisher={Royal<sp/>Statistical<sp/>Society}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Note that the implementation here does not use the feature-sign search algorithm from Honglak Lee&apos;s paper, but instead the LARS algorithm suggested in that paper.</para><para>When <ref refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a69503a211de26a7b35e7e7867cf20246" kindref="member">Train()</ref> is called, the dictionary is initialized using the DictionaryInitializationPolicy class. Possible choices include the <ref refid="classmlpack_1_1sparse__coding_1_1RandomInitializer" kindref="compound">RandomInitializer</ref>, which provides an entirely random dictionary, the <ref refid="classmlpack_1_1sparse__coding_1_1DataDependentRandomInitializer" kindref="compound">DataDependentRandomInitializer</ref>, which provides a random dictionary based loosely on characteristics of the dataset, and the <ref refid="classmlpack_1_1sparse__coding_1_1NothingInitializer" kindref="compound">NothingInitializer</ref>, which does not initialize the dictionary <ndash/> instead, the user should set the dictionary using the <ref refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a3146526cfc85ff339121972d67c73f62" kindref="member">Dictionary()</ref> mutator method.</para><para>Once a dictionary is trained with <ref refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a69503a211de26a7b35e7e7867cf20246" kindref="member">Train()</ref>, another matrix may be encoded with the <ref refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a4b2741b0e146d6eb6a09e30f228ea309" kindref="member">Encode()</ref> function.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DictionaryInitializationPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The class to use to initialize the dictionary; must have &apos;void Initialize(const arma::mat&amp; data, arma::mat&amp; dictionary)&apos; function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" line="116" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/sparse_coding/sparse_coding.hpp" bodystart="115" bodyend="279"/>
    <listofallmembers>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a609c2a583fdbf2e467572e1b2c707e1a" prot="private" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>atoms</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1ac1a924c2cc0b117283fc8aba76a92a07" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>Atoms</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a30a05b58ad809476c03aba6df5970b52" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>Atoms</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1afed8259a67349d88581e1e2e88e7d320" prot="private" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>dictionary</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a29bceb0b46c45a45594c9feb0e743171" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>Dictionary</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a3146526cfc85ff339121972d67c73f62" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>Dictionary</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a4b2741b0e146d6eb6a09e30f228ea309" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>Encode</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a264615b0081adef98427420db074cd44" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>Lambda1</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a743296069b1e03a1bb2e7a466eb68022" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>Lambda1</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1ab43246964e91b737c5202793c9f337ed" prot="private" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>lambda1</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1afdbf7b2b51f4f367aed9590917976d9f" prot="private" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>lambda2</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1aae12d0e36b1a7fa52a155f9d3f7a50f1" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>Lambda2</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1adb32f19e01e1576af72865eb87978008" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>Lambda2</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a420770944a5b0c7a852c4ec372c4a2d1" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>MaxIterations</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1acda675ab4ab86b95c92bc33bc391a61b" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>MaxIterations</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1adb3fa2e38847b23885acf3833f28538e" prot="private" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>maxIterations</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a6fcf2b9f21e7933d9292d11be1535475" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>NewtonTolerance</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a32f233437346e49c0b7dad746ac62b6b" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>NewtonTolerance</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a11a32c8eeaf928af5cb365d580fbccae" prot="private" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>newtonTolerance</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a8a45b3d947cc22079a5941b9d46acfe3" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>Objective</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a0cac908220ae3d1eb415c80a50e36eca" prot="private" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>objTolerance</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a8c2c8dec8e93ca1ddc14ac238266ef20" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>ObjTolerance</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1afe546afaa975282a5549cc416c1d64f5" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>ObjTolerance</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a2d164dea45075388335d75f8c27fd659" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>OptimizeDictionary</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1ab8a90e33cb1a5db9cda2ef2f0ba26e5f" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>ProjectDictionary</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a65cba07328997659bec80b9879b15a51" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a603b4e6346773526111dd0e759ec1283" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>SparseCoding</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1ad3476d9c5a489044fa1142e33a6052d7" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>SparseCoding</name></member>
      <member refid="classmlpack_1_1sparse__coding_1_1SparseCoding_1a69503a211de26a7b35e7e7867cf20246" prot="public" virt="non-virtual"><scope>mlpack::sparse_coding::SparseCoding</scope><name>Train</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
