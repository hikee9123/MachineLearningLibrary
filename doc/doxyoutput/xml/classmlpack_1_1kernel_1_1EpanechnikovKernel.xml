<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1kernel_1_1EpanechnikovKernel" kind="class" language="C++" prot="public">
    <compoundname>mlpack::kernel::EpanechnikovKernel</compoundname>
    <includes refid="epanechnikov__kernel_8hpp" local="no">epanechnikov_kernel.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1kernel_1_1EpanechnikovKernel_1a3a14628ead92d0afcce5f53e0ff017c8" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double bandwidth</definition>
        <argsstring></argsstring>
        <name>bandwidth</name>
        <briefdescription>
<para>Bandwidth of the kernel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" line="100" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1kernel_1_1EpanechnikovKernel_1af986b9b8ed0c30d7aad367c422ac6429" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double inverseBandwidthSquared</definition>
        <argsstring></argsstring>
        <name>inverseBandwidthSquared</name>
        <briefdescription>
<para>Cached value of the inverse bandwidth squared (to speed up computation). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" line="102" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1EpanechnikovKernel_1ad3880022e464ae367ed9b7342f0cdf37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>EpanechnikovKernel</definition>
        <argsstring>(const double bandwidth=1.0)</argsstring>
        <name>EpanechnikovKernel</name>
        <param>
          <type>const double</type>
          <declname>bandwidth</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Instantiate the Epanechnikov kernel with the given bandwidth (default 1.0). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bandwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Bandwidth of the kernel. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" line="38" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" bodystart="38" bodyend="41"/>
        <references refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1af3077f924263d1932950f4f7176c93eb">EpanechnikovKernel::ConvolutionIntegral</references>
        <references refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1a84c3aeba25ea7703bd2d4f85a54301da">EpanechnikovKernel::Evaluate</references>
        <references refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1ac83f017e98c3f23c603fb26b50b82cfd">EpanechnikovKernel::Gradient</references>
        <references refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1aa993982e3ab29e7c8a299012dbe42cc5">EpanechnikovKernel::GradientForSquaredDistance</references>
        <references refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1aa500736f2a5dac08fa9027543c2b05cb">EpanechnikovKernel::Normalizer</references>
        <references refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1a72d63b74c8166dff8e1a9006905ad9ca">EpanechnikovKernel::serialize</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1EpanechnikovKernel_1af3077f924263d1932950f4f7176c93eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecTypeA</type>
          </param>
          <param>
            <type>typename VecTypeB</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double ConvolutionIntegral</definition>
        <argsstring>(const VecTypeA &amp;a, const VecTypeB &amp;b)</argsstring>
        <name>ConvolutionIntegral</name>
        <param>
          <type>const VecTypeA &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const VecTypeB &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Obtains the convolution integral [integral of K(||x-a||) K(||b-x||) dx] for the two vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VecType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of vector (arma::vec, arma::spvec should be expected). </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the convolution integral value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" line="83" column="1"/>
        <referencedby refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1ad3880022e464ae367ed9b7342f0cdf37" compoundref="epanechnikov__kernel_8hpp" startline="38" endline="41">EpanechnikovKernel::EpanechnikovKernel</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1EpanechnikovKernel_1a84c3aeba25ea7703bd2d4f85a54301da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecTypeA</type>
          </param>
          <param>
            <type>typename VecTypeB</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Evaluate</definition>
        <argsstring>(const VecTypeA &amp;a, const VecTypeB &amp;b) const</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const VecTypeA &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const VecTypeB &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Evaluate the Epanechnikov kernel on the given two inputs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VecTypeA</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of first vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VecTypeB</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of second vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>One input vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The other input vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" line="52" column="1"/>
        <referencedby refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1ad3880022e464ae367ed9b7342f0cdf37" compoundref="epanechnikov__kernel_8hpp" startline="38" endline="41">EpanechnikovKernel::EpanechnikovKernel</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1EpanechnikovKernel_1a5602dee5d3ad98a183b9a11d9e0ed225" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Evaluate</definition>
        <argsstring>(const double distance) const</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Evaluate the Epanechnikov kernel given that the distance between the two input points is known. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1EpanechnikovKernel_1ac83f017e98c3f23c603fb26b50b82cfd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gradient</definition>
        <argsstring>(const double distance) const</argsstring>
        <name>Gradient</name>
        <param>
          <type>const double</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>Evaluate the Gradient of Epanechnikov kernel given that the distance between the two input points is known. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" line="65" column="1"/>
        <referencedby refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1ad3880022e464ae367ed9b7342f0cdf37" compoundref="epanechnikov__kernel_8hpp" startline="38" endline="41">EpanechnikovKernel::EpanechnikovKernel</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1EpanechnikovKernel_1aa993982e3ab29e7c8a299012dbe42cc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double GradientForSquaredDistance</definition>
        <argsstring>(const double distanceSquared) const</argsstring>
        <name>GradientForSquaredDistance</name>
        <param>
          <type>const double</type>
          <declname>distanceSquared</declname>
        </param>
        <briefdescription>
<para>Evaluate the Gradient of Epanechnikov kernel given that the squared distance between the two input points is known. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" line="72" column="1"/>
        <referencedby refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1ad3880022e464ae367ed9b7342f0cdf37" compoundref="epanechnikov__kernel_8hpp" startline="38" endline="41">EpanechnikovKernel::EpanechnikovKernel</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1EpanechnikovKernel_1aa500736f2a5dac08fa9027543c2b05cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Normalizer</definition>
        <argsstring>(const size_t dimension)</argsstring>
        <name>Normalizer</name>
        <param>
          <type>const size_t</type>
          <declname>dimension</declname>
        </param>
        <briefdescription>
<para>Compute the normalizer of this Epanechnikov kernel for the given dimension. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dimension</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimension to calculate the normalizer for. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" line="90" column="1"/>
        <referencedby refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1ad3880022e464ae367ed9b7342f0cdf37" compoundref="epanechnikov__kernel_8hpp" startline="38" endline="41">EpanechnikovKernel::EpanechnikovKernel</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1EpanechnikovKernel_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t version)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Serialize the kernel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" line="96" column="1"/>
        <referencedby refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1ad3880022e464ae367ed9b7342f0cdf37" compoundref="epanechnikov__kernel_8hpp" startline="38" endline="41">EpanechnikovKernel::EpanechnikovKernel</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The Epanechnikov kernel, defined as. </para>    </briefdescription>
    <detaileddescription>
<para><formula id="41">\[ K(x, y) = \max \{0, 1 - || x - y ||^2_2 / b^2 \} \]</formula></para><para>where <formula id="42">$ b $</formula> is the bandwidth the of the kernel (defaults to 1.0). </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" line="31" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/epanechnikov_kernel.hpp" bodystart="30" bodyend="103"/>
    <listofallmembers>
      <member refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1a3a14628ead92d0afcce5f53e0ff017c8" prot="private" virt="non-virtual"><scope>mlpack::kernel::EpanechnikovKernel</scope><name>bandwidth</name></member>
      <member refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1af3077f924263d1932950f4f7176c93eb" prot="public" virt="non-virtual"><scope>mlpack::kernel::EpanechnikovKernel</scope><name>ConvolutionIntegral</name></member>
      <member refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1ad3880022e464ae367ed9b7342f0cdf37" prot="public" virt="non-virtual"><scope>mlpack::kernel::EpanechnikovKernel</scope><name>EpanechnikovKernel</name></member>
      <member refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1a84c3aeba25ea7703bd2d4f85a54301da" prot="public" virt="non-virtual"><scope>mlpack::kernel::EpanechnikovKernel</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1a5602dee5d3ad98a183b9a11d9e0ed225" prot="public" virt="non-virtual"><scope>mlpack::kernel::EpanechnikovKernel</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1ac83f017e98c3f23c603fb26b50b82cfd" prot="public" virt="non-virtual"><scope>mlpack::kernel::EpanechnikovKernel</scope><name>Gradient</name></member>
      <member refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1aa993982e3ab29e7c8a299012dbe42cc5" prot="public" virt="non-virtual"><scope>mlpack::kernel::EpanechnikovKernel</scope><name>GradientForSquaredDistance</name></member>
      <member refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1af986b9b8ed0c30d7aad367c422ac6429" prot="private" virt="non-virtual"><scope>mlpack::kernel::EpanechnikovKernel</scope><name>inverseBandwidthSquared</name></member>
      <member refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1aa500736f2a5dac08fa9027543c2b05cb" prot="public" virt="non-virtual"><scope>mlpack::kernel::EpanechnikovKernel</scope><name>Normalizer</name></member>
      <member refid="classmlpack_1_1kernel_1_1EpanechnikovKernel_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" virt="non-virtual"><scope>mlpack::kernel::EpanechnikovKernel</scope><name>serialize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
