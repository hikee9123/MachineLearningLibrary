<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="softsign__function_8hpp" kind="file" language="C++">
    <compoundname>softsign_function.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <incdepgraph>
      <node id="26150">
        <label>list</label>
      </node>
      <node id="26147">
        <label>atomic</label>
      </node>
      <node id="26137">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="26113">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="26149">
        <label>iomanip</label>
      </node>
      <node id="26122">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="26123" relation="include">
        </childnode>
        <childnode refid="26125" relation="include">
        </childnode>
      </node>
      <node id="26105">
        <label>cstdint</label>
      </node>
      <node id="26114">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="26121">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="26144">
        <label>arma_config.hpp</label>
      </node>
      <node id="26134">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="26101">
        <label>cmath</label>
      </node>
      <node id="26120">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="26109">
        <label>stdexcept</label>
      </node>
      <node id="26129">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="26114" relation="include">
        </childnode>
        <childnode refid="26116" relation="include">
        </childnode>
        <childnode refid="26117" relation="include">
        </childnode>
        <childnode refid="26115" relation="include">
        </childnode>
      </node>
      <node id="26153">
        <label>string</label>
      </node>
      <node id="26141">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="26142" relation="include">
        </childnode>
        <childnode refid="26108" relation="include">
        </childnode>
      </node>
      <node id="26151">
        <label>map</label>
      </node>
      <node id="26103">
        <label>cfloat</label>
      </node>
      <node id="26133">
        <label>boost/variant.hpp</label>
      </node>
      <node id="26155">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="26117">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="26140">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="26141" relation="include">
        </childnode>
        <childnode refid="26117" relation="include">
        </childnode>
        <childnode refid="26124" relation="include">
        </childnode>
        <childnode refid="26142" relation="include">
        </childnode>
      </node>
      <node id="26130">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="26128">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="26114" relation="include">
        </childnode>
        <childnode refid="26116" relation="include">
        </childnode>
        <childnode refid="26117" relation="include">
        </childnode>
        <childnode refid="26115" relation="include">
        </childnode>
      </node>
      <node id="26131">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="26114" relation="include">
        </childnode>
        <childnode refid="26116" relation="include">
        </childnode>
        <childnode refid="26117" relation="include">
        </childnode>
        <childnode refid="26115" relation="include">
        </childnode>
      </node>
      <node id="26119">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="26139">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="26115" relation="include">
        </childnode>
        <childnode refid="26116" relation="include">
        </childnode>
        <childnode refid="26117" relation="include">
        </childnode>
        <childnode refid="26127" relation="include">
        </childnode>
        <childnode refid="26136" relation="include">
        </childnode>
      </node>
      <node id="26143">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="26144" relation="include">
        </childnode>
      </node>
      <node id="26145">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="26100">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="26101" relation="include">
        </childnode>
        <childnode refid="26102" relation="include">
        </childnode>
        <childnode refid="26103" relation="include">
        </childnode>
        <childnode refid="26104" relation="include">
        </childnode>
        <childnode refid="26105" relation="include">
        </childnode>
        <childnode refid="26106" relation="include">
        </childnode>
        <childnode refid="26107" relation="include">
        </childnode>
        <childnode refid="26108" relation="include">
        </childnode>
        <childnode refid="26109" relation="include">
        </childnode>
        <childnode refid="26110" relation="include">
        </childnode>
        <childnode refid="26111" relation="include">
        </childnode>
        <childnode refid="26112" relation="include">
        </childnode>
        <childnode refid="26113" relation="include">
        </childnode>
        <childnode refid="26114" relation="include">
        </childnode>
        <childnode refid="26115" relation="include">
        </childnode>
        <childnode refid="26116" relation="include">
        </childnode>
        <childnode refid="26117" relation="include">
        </childnode>
        <childnode refid="26118" relation="include">
        </childnode>
        <childnode refid="26119" relation="include">
        </childnode>
        <childnode refid="26120" relation="include">
        </childnode>
        <childnode refid="26121" relation="include">
        </childnode>
        <childnode refid="26122" relation="include">
        </childnode>
        <childnode refid="26126" relation="include">
        </childnode>
        <childnode refid="26127" relation="include">
        </childnode>
        <childnode refid="26128" relation="include">
        </childnode>
        <childnode refid="26129" relation="include">
        </childnode>
        <childnode refid="26130" relation="include">
        </childnode>
        <childnode refid="26131" relation="include">
        </childnode>
        <childnode refid="26132" relation="include">
        </childnode>
        <childnode refid="26138" relation="include">
        </childnode>
        <childnode refid="26139" relation="include">
        </childnode>
        <childnode refid="26136" relation="include">
        </childnode>
        <childnode refid="26140" relation="include">
        </childnode>
        <childnode refid="26143" relation="include">
        </childnode>
        <childnode refid="26145" relation="include">
        </childnode>
        <childnode refid="26146" relation="include">
        </childnode>
        <childnode refid="26155" relation="include">
        </childnode>
        <childnode refid="26156" relation="include">
        </childnode>
      </node>
      <node id="26106">
        <label>cstdio</label>
      </node>
      <node id="26110">
        <label>tuple</label>
      </node>
      <node id="26115">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="26132">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="26115" relation="include">
        </childnode>
        <childnode refid="26116" relation="include">
        </childnode>
        <childnode refid="26117" relation="include">
        </childnode>
        <childnode refid="26119" relation="include">
        </childnode>
        <childnode refid="26133" relation="include">
        </childnode>
        <childnode refid="26134" relation="include">
        </childnode>
        <childnode refid="26135" relation="include">
        </childnode>
        <childnode refid="26136" relation="include">
        </childnode>
      </node>
      <node id="26111">
        <label>utility</label>
      </node>
      <node id="26135">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="26126">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="26123">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="26124" relation="include">
        </childnode>
      </node>
      <node id="26146">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="26147" relation="include">
        </childnode>
        <childnode refid="26148" relation="include">
        </childnode>
        <childnode refid="26149" relation="include">
        </childnode>
        <childnode refid="26150" relation="include">
        </childnode>
        <childnode refid="26151" relation="include">
        </childnode>
        <childnode refid="26152" relation="include">
        </childnode>
        <childnode refid="26153" relation="include">
        </childnode>
        <childnode refid="26154" relation="include">
        </childnode>
      </node>
      <node id="26124">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="26138">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="26136" relation="include">
        </childnode>
        <childnode refid="26132" relation="include">
        </childnode>
        <childnode refid="26139" relation="include">
        </childnode>
      </node>
      <node id="26107">
        <label>cstdlib</label>
      </node>
      <node id="26102">
        <label>cctype</label>
      </node>
      <node id="26125">
        <label>unordered_map</label>
      </node>
      <node id="26104">
        <label>climits</label>
      </node>
      <node id="26152">
        <label>mutex</label>
      </node>
      <node id="26148">
        <label>chrono</label>
      </node>
      <node id="26156">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="26099">
        <label>/home/aakash/mlpack/src/mlpack/methods/ann/activation_functions/softsign_function.hpp</label>
        <link refid="softsign__function_8hpp"/>
        <childnode refid="26100" relation="include">
        </childnode>
      </node>
      <node id="26154">
        <label>thread</label>
      </node>
      <node id="26142">
        <label>type_traits</label>
      </node>
      <node id="26118">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="26112">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="26136">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="26114" relation="include">
        </childnode>
        <childnode refid="26115" relation="include">
        </childnode>
        <childnode refid="26116" relation="include">
        </childnode>
        <childnode refid="26117" relation="include">
        </childnode>
        <childnode refid="26137" relation="include">
        </childnode>
      </node>
      <node id="26108">
        <label>cstring</label>
      </node>
      <node id="26127">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="26116">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmlpack_1_1ann_1_1SoftsignFunction" prot="public">mlpack::ann::SoftsignFunction</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1ann">mlpack::ann</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Marcus Edel</para></simplesect>
Definition and implementation of the softsign function as described by X. Glorot and Y. Bengio.</para><para>For more information, see the following paper.</para><para><programlisting><codeline><highlight class="normal">@inproceedings{GlorotAISTATS2010,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title={title={Understanding<sp/>the<sp/>difficulty<sp/>of<sp/>training<sp/>deep<sp/>feedforward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>neural<sp/>networks},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author={Glorot,<sp/>Xavier<sp/>and<sp/>Bengio,<sp/>Yoshua},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>booktitle={Proceedings<sp/>of<sp/>AISTATS<sp/>2010},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year={2010}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="25"><highlight class="preprocessor">#ifndef<sp/>MLPACK_METHODS_ANN_ACTIVATION_FUNCTIONS_SOFTSIGN_FUNCTION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_METHODS_ANN_ACTIVATION_FUNCTIONS_SOFTSIGN_FUNCTION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ann<sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classmlpack_1_1ann_1_1SoftsignFunction" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1ann_1_1SoftsignFunction" kindref="compound">SoftsignFunction</ref></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56" refid="classmlpack_1_1ann_1_1SoftsignFunction_1a11bd9a1195e6b107f9fee73643bc328b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1ann_1_1SoftsignFunction_1a11bd9a1195e6b107f9fee73643bc328b" kindref="member">Fn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>DBL_MAX)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&gt;<sp/>-DBL_MAX<sp/>?<sp/>x<sp/>/<sp/>(1.0<sp/>+<sp/>std::abs(x))<sp/>:<sp/>-1.0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputVecType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputVecType&gt;</highlight></codeline>
<codeline lineno="70" refid="classmlpack_1_1ann_1_1SoftsignFunction_1af6cf5da90eb6312e3e25c9b8bd9c3527" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1ann_1_1SoftsignFunction_1af6cf5da90eb6312e3e25c9b8bd9c3527" kindref="member">Fn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InputVecType&amp;<sp/>x,<sp/>OutputVecType&amp;<sp/>y)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>y.set_size(arma::size(x));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.n_elem;<sp/>++i)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y(i)<sp/>=<sp/><ref refid="classmlpack_1_1ann_1_1SoftsignFunction_1a11bd9a1195e6b107f9fee73643bc328b" kindref="member">Fn</ref>(x(i));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classmlpack_1_1ann_1_1SoftsignFunction_1a163d34fd09f8edf457164f5033c635cf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1ann_1_1SoftsignFunction_1a163d34fd09f8edf457164f5033c635cf" kindref="member">Deriv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::pow(1.0<sp/>-<sp/>std::abs(y),<sp/>2);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputVecType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputVecType&gt;</highlight></codeline>
<codeline lineno="96" refid="classmlpack_1_1ann_1_1SoftsignFunction_1ad442502c34b67303b74c735641dab790" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1ann_1_1SoftsignFunction_1ad442502c34b67303b74c735641dab790" kindref="member">Deriv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InputVecType&amp;<sp/>y,<sp/>OutputVecType&amp;<sp/>x)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>arma::pow(1.0<sp/>-<sp/>arma::abs(y),<sp/>2);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classmlpack_1_1ann_1_1SoftsignFunction_1a32d503b167c9646569a202e8c134ef76" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1ann_1_1SoftsignFunction_1a32d503b167c9646569a202e8c134ef76" kindref="member">Inv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>&lt;<sp/>1<sp/>?<sp/>-y<sp/>/<sp/>(y<sp/>-<sp/>1)<sp/>:<sp/>DBL_MAX;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y<sp/>&gt;<sp/>-1<sp/>?<sp/>y<sp/>/<sp/>(1<sp/>+<sp/>y)<sp/>:<sp/>-DBL_MAX;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputVecType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputVecType&gt;</highlight></codeline>
<codeline lineno="122" refid="classmlpack_1_1ann_1_1SoftsignFunction_1ad48548410161bbf6178eb1c293c991c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1ann_1_1SoftsignFunction_1ad48548410161bbf6178eb1c293c991c3" kindref="member">Inv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InputVecType&amp;<sp/>y,<sp/>OutputVecType&amp;<sp/>x)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>x.set_size(arma::size(y));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>y.n_elem;<sp/>++i)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x(i)<sp/>=<sp/><ref refid="classmlpack_1_1ann_1_1SoftsignFunction_1a32d503b167c9646569a202e8c134ef76" kindref="member">Inv</ref>(y(i));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>SoftsignFunction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ann</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/methods/ann/activation_functions/softsign_function.hpp"/>
  </compounddef>
</doxygen>
