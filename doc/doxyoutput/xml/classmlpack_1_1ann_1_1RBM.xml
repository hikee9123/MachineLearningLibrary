<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1ann_1_1RBM" kind="class" language="C++" prot="public">
    <compoundname>mlpack::ann::RBM</compoundname>
    <includes refid="rbm_8hpp" local="no">rbm.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename InitializationRuleType</type>
      </param>
      <param>
        <type>typename DataType</type>
        <defval>arma::mat</defval>
      </param>
      <param>
        <type>typename PolicyType</type>
        <defval><ref refid="classmlpack_1_1ann_1_1BinaryRBM" kindref="compound">BinaryRBM</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" prot="public" static="no">
        <type>DataType::elem_type</type>
        <definition>typedef DataType::elem_type ElemType</definition>
        <argsstring></argsstring>
        <name>ElemType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="42" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1ann_1_1RBM_1a1222e7405946cb6c406b8ab61b88950a" prot="public" static="no">
        <type><ref refid="classmlpack_1_1ann_1_1RBM" kindref="compound">RBM</ref>&lt; InitializationRuleType, DataType, PolicyType &gt;</type>
        <definition>using NetworkType =  RBM&lt;InitializationRuleType, DataType, PolicyType&gt;</definition>
        <argsstring></argsstring>
        <name>NetworkType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="41" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1acc8b6b6879b002e34f544046de374ce8" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t batchSize</definition>
        <argsstring></argsstring>
        <name>batchSize</name>
        <briefdescription>
<para>Locally stored batch size parameter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="398" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a444befef16cc041880176a8e112de356" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
        <definition>arma::Mat&lt;ElemType&gt; gibbsTemporary</definition>
        <argsstring></argsstring>
        <name>gibbsTemporary</name>
        <briefdescription>
<para>Locally-stored temporary output of Gibbs chain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="444" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a65affc6f87f4bd63497a5f07ffbdc579" prot="private" static="no" mutable="no">
        <type>DataType</type>
        <definition>DataType hiddenBias</definition>
        <argsstring></argsstring>
        <name>hiddenBias</name>
        <briefdescription>
<para>Locally stored biases of the hidden layer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="412" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a79f7da02074421432c510326ff61ce30" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
        <definition>arma::Mat&lt;ElemType&gt; hiddenReconstruction</definition>
        <argsstring></argsstring>
        <name>hiddenReconstruction</name>
        <briefdescription>
<para>Locally-stored reconstructed output from hidden layer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="432" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1ad807388d5d1fc99793b27be860a1a204" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t hiddenSize</definition>
        <argsstring></argsstring>
        <name>hiddenSize</name>
        <briefdescription>
<para>Locally stored number of hidden neurons. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="396" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1afe2a6ce1565af9e715f04dc42338e439" prot="private" static="no" mutable="no">
        <type>InitializationRuleType</type>
        <definition>InitializationRuleType initializeRule</definition>
        <argsstring></argsstring>
        <name>initializeRule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="388" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a5b57091a9651ad2dc3a953956aeb8952" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
        <definition>arma::Mat&lt;ElemType&gt; negativeGradient</definition>
        <argsstring></argsstring>
        <name>negativeGradient</name>
        <briefdescription>
<para>Locally-stored gradients from the negative phase. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="438" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a7465ff683ea54b2abea7865483e03e85" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
        <definition>arma::Mat&lt;ElemType&gt; negativeSamples</definition>
        <argsstring></argsstring>
        <name>negativeSamples</name>
        <briefdescription>
<para>Locally-stored negative samples from Gibbs distribution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="436" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a517e637abac589740a964468701c4dd6" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t negSteps</definition>
        <argsstring></argsstring>
        <name>negSteps</name>
        <briefdescription>
<para>Locally-stored number of negative samples. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="402" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1aaab494c30f729e32dc742dc5f65ecddb" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t numFunctions</definition>
        <argsstring></argsstring>
        <name>numFunctions</name>
        <briefdescription>
<para>Locally-stored number of data points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="392" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1abb00e40320f1cfd547dce27485769773" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t numSteps</definition>
        <argsstring></argsstring>
        <name>numSteps</name>
        <briefdescription>
<para>Locally-stored number of steps in Gibbs Sampling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="400" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1acf03001a1a84765a566b240ca88cc727" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
        <definition>arma::Mat&lt;ElemType&gt; parameter</definition>
        <argsstring></argsstring>
        <name>parameter</name>
        <briefdescription>
<para>Locally stored parameters of the network. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="384" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a8eb4345be1fa2163bda7389dfa842b5b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool persistence</definition>
        <argsstring></argsstring>
        <name>persistence</name>
        <briefdescription>
<para>Locally-stored persistent CD-k boolean flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="446" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a5017b145458a6f08fdc754f3ea38fc9b" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t poolSize</definition>
        <argsstring></argsstring>
        <name>poolSize</name>
        <briefdescription>
<para>Locally stored variable poolSize. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="404" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a64d10b1fa1540d2abe2cd0836b4e9699" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
        <definition>arma::Mat&lt;ElemType&gt; positiveGradient</definition>
        <argsstring></argsstring>
        <name>positiveGradient</name>
        <briefdescription>
<para>Locally-stored gradient for positive phase. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="442" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a96d59246762eb9b80a31cf0adce56cc1" prot="private" static="no" mutable="no">
        <type>DataType</type>
        <definition>DataType preActivation</definition>
        <argsstring></argsstring>
        <name>preActivation</name>
        <briefdescription>
<para>Locally-stored output of the preActivation function used in FreeEnergy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="414" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a25c768fa22bf29d6e15250440221315b" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
        <definition>arma::Mat&lt;ElemType&gt; predictors</definition>
        <argsstring></argsstring>
        <name>predictors</name>
        <briefdescription>
<para>The matrix of data points (predictors). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="386" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a4956d6265055d21651f82b0de1fc8fb4" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref></type>
        <definition>ElemType radius</definition>
        <argsstring></argsstring>
        <name>radius</name>
        <briefdescription>
<para>Locally stored radius used for rejection sampling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="430" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a8409a0d351d4fba2eeef26a7dcc585a8" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool reset</definition>
        <argsstring></argsstring>
        <name>reset</name>
        <briefdescription>
<para>Locally-stored reset variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="448" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a7861c0ce606366ab430fd35edbbbee0c" prot="private" static="no" mutable="no">
        <type>DataType</type>
        <definition>DataType slabMean</definition>
        <argsstring></argsstring>
        <name>slabMean</name>
        <briefdescription>
<para>Locally stored mean of the P(s|v, h). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="426" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a07ab6ecee9867e768e8da55d021e14fd" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref></type>
        <definition>ElemType slabPenalty</definition>
        <argsstring></argsstring>
        <name>slabPenalty</name>
        <briefdescription>
<para>Locally stored slabPenalty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="428" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a2c4200c9878af7ca378dd4426b5d0a5f" prot="private" static="no" mutable="no">
        <type>DataType</type>
        <definition>DataType spikeBias</definition>
        <argsstring></argsstring>
        <name>spikeBias</name>
        <briefdescription>
<para>Locally stored spikeBias (hiddenSize * 1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="416" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1af2d04012af8a4e98a1617b4675d8dc14" prot="private" static="no" mutable="no">
        <type>DataType</type>
        <definition>DataType spikeMean</definition>
        <argsstring></argsstring>
        <name>spikeMean</name>
        <briefdescription>
<para>Locally stored mean of the P(v|h). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="422" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a4e31bedbfc34a7b8ff34271b8ada87b5" prot="private" static="no" mutable="no">
        <type>DataType</type>
        <definition>DataType spikeSamples</definition>
        <argsstring></argsstring>
        <name>spikeSamples</name>
        <briefdescription>
<para>Locally stored spike variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="424" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a1b901f8e3a37fe08ce7f255fe4d61f58" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
        <definition>arma::Mat&lt;ElemType&gt; state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
<para>Locally-stored state of the persistent CD-k. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="390" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a2a30a0fc4077aef1e55c562ac2586c65" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t steps</definition>
        <argsstring></argsstring>
        <name>steps</name>
        <briefdescription>
<para>Locally stored number of Sampling steps. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="406" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a5d2846196b1dfe00b0b0efeba72e7132" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
        <definition>arma::Mat&lt;ElemType&gt; tempNegativeGradient</definition>
        <argsstring></argsstring>
        <name>tempNegativeGradient</name>
        <briefdescription>
<para>Locally-stored temporary negative gradient used for negative phase. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="440" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1ad3d079e92a79857a39b4f3d6936f856b" prot="private" static="no" mutable="no">
        <type>DataType</type>
        <definition>DataType visibleBias</definition>
        <argsstring></argsstring>
        <name>visibleBias</name>
        <briefdescription>
<para>Locally stored biases of the visible layer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="410" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1ab4d03d053a7348dc87c8844fccf408ca" prot="private" static="no" mutable="no">
        <type>DataType</type>
        <definition>DataType visibleMean</definition>
        <argsstring></argsstring>
        <name>visibleMean</name>
        <briefdescription>
<para>Locally stored mean of the P(v|s, h). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="420" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1ad46687f3ee66fc7247aa640281a52b2a" prot="private" static="no" mutable="no">
        <type>DataType</type>
        <definition>DataType visiblePenalty</definition>
        <argsstring></argsstring>
        <name>visiblePenalty</name>
        <briefdescription>
<para>Locally stored visible Penalty (1 * 1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="418" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a3ed03202f7a3d8cfe18cdb77aa506ac0" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
        <definition>arma::Mat&lt;ElemType&gt; visibleReconstruction</definition>
        <argsstring></argsstring>
        <name>visibleReconstruction</name>
        <briefdescription>
<para>Locally-stored reconstructed output from visible layer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="434" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a0381a080118c46d9bd4177072d1e646c" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t visibleSize</definition>
        <argsstring></argsstring>
        <name>visibleSize</name>
        <briefdescription>
<para>Locally stored number of visible neurons. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="394" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1RBM_1a806b6d8540cd1378e9b34a4eb76889dd" prot="private" static="no" mutable="no">
        <type>arma::Cube&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
        <definition>arma::Cube&lt;ElemType&gt; weight</definition>
        <argsstring></argsstring>
        <name>weight</name>
        <briefdescription>
<para>Locally stored weight of the network. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="408" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="408" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1af96c1d7469e25128c1391dee9da7fcd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RBM</definition>
        <argsstring>(arma::Mat&lt; ElemType &gt; predictors, InitializationRuleType initializeRule, const size_t visibleSize, const size_t hiddenSize, const size_t batchSize=1, const size_t numSteps=1, const size_t negSteps=1, const size_t poolSize=2, const ElemType slabPenalty=8, const ElemType radius=1, const bool persistence=false)</argsstring>
        <name>RBM</name>
        <param>
          <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>InitializationRuleType</type>
          <declname>initializeRule</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>visibleSize</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>hiddenSize</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>batchSize</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>numSteps</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>negSteps</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>poolSize</declname>
          <defval>2</defval>
        </param>
        <param>
          <type>const <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref></type>
          <declname>slabPenalty</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>const <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref></type>
          <declname>radius</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>persistence</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Initialize all the parameters of the network using initializeRule. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Training data to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initializeRule</parametername>
</parameternamelist>
<parameterdescription>
<para>InitializationRule object for initializing the network parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>visibleSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of visible neurons. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hiddenSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of hidden neurons. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Batch size to be used for training. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numSteps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Gibbs Sampling steps. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>negSteps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of negative samples to average negative gradient. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>poolSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of hidden neurons to pool together. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slabPenalty</parametername>
</parameternamelist>
<parameterdescription>
<para>Regulariser of slab variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>Feasible regions for visible layer samples. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether to use Persistent CD or not. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a0bcf0739f699f1147677f759067127eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Evaluate</definition>
        <argsstring>(const arma::Mat&lt; ElemType &gt; &amp;parameters, const size_t i, const size_t batchSize)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>batchSize</declname>
        </param>
        <briefdescription>
<para>Evaluate the <ref refid="classmlpack_1_1ann_1_1RBM" kindref="compound">RBM</ref> network with the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para>The function is needed for monitoring the progress of the network.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix model parameters. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable to store the present number of inputs. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a7dffa97022d69b63dea8fd67c2dcec63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1BinaryRBM" kindref="compound">BinaryRBM</ref> &gt;::value, double &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, BinaryRBM&gt;::value, double&gt;::type FreeEnergy</definition>
        <argsstring>(const arma::Mat&lt; ElemType &gt; &amp;input)</argsstring>
        <name>FreeEnergy</name>
        <param>
          <type>const arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>This function calculates the free energy of the <ref refid="classmlpack_1_1ann_1_1BinaryRBM" kindref="compound">BinaryRBM</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The free energy is given by: <formula id="133">$ -b^Tv - \sum_{i=1}^M log(1 + e^{c_j+v^TW_j}) $</formula>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The visible neurons. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a1af63b5755f3a0fbb92a4472987cbd15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref> &gt;::value, double &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, SpikeSlabRBM&gt;::value, double&gt;::type FreeEnergy</definition>
        <argsstring>(const arma::Mat&lt; ElemType &gt; &amp;input)</argsstring>
        <name>FreeEnergy</name>
        <param>
          <type>const arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>This function calculates the free energy of the <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The free energy is given by: <formula id="134">$ v^t$$\Delta$v - $\sum_{i=1}^N $</formula> <formula id="135">$ \log{ \sqrt{\frac{(-2\pi)^K}{\prod_{m=1}^{K}(\alpha_i)_m}}} $</formula> - <formula id="136">$ \sum_{i=1}^N \log(1+\exp( b_i + \sum_{m=1}^k \frac{(v(w_i)_m^t)^2}{2(\alpha_i)_m}) $</formula></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The visible layer neurons. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a918883c908d730e9790e49dd16ecf8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gibbs</definition>
        <argsstring>(const arma::Mat&lt; ElemType &gt; &amp;input, arma::Mat&lt; ElemType &gt; &amp;output, const size_t steps=SIZE_MAX)</argsstring>
        <name>Gibbs</name>
        <param>
          <type>const arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>steps</declname>
          <defval>SIZE_MAX</defval>
        </param>
        <briefdescription>
<para>This function does the k-step Gibbs Sampling. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input to the Gibbs function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Used for storing the negative sample. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>steps</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Gibbs Sampling steps taken. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1aab9fd0b4b53e35da7c2e5c5e1ade7bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gradient</definition>
        <argsstring>(const arma::Mat&lt; ElemType &gt; &amp;parameters, const size_t i, arma::Mat&lt; ElemType &gt; &amp;gradient, const size_t batchSize)</argsstring>
        <name>Gradient</name>
        <param>
          <type>const arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>gradient</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>batchSize</declname>
        </param>
        <briefdescription>
<para>Calculates the gradients for the <ref refid="classmlpack_1_1ann_1_1RBM" kindref="compound">RBM</ref> network. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>The current parameters of the network. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the data point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable to store the present gradient. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable to store the present number of inputs. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a7834c6befe9e3b5bd950ed64bfc24225" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType const  &amp;</type>
        <definition>DataType const&amp; HiddenBias</definition>
        <argsstring>() const</argsstring>
        <name>HiddenBias</name>
        <briefdescription>
<para>Return the hidden bias of the network. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="354" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="354" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a95ee1068552bc1e1f05438ed13786ab3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType &amp;</type>
        <definition>DataType&amp; HiddenBias</definition>
        <argsstring>()</argsstring>
        <name>HiddenBias</name>
        <briefdescription>
<para>Modify the hidden bias of the network. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="356" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1afe74913f93a425c688e018c8bf5a7cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1BinaryRBM" kindref="compound">BinaryRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, BinaryRBM&gt;::value, void&gt;::type HiddenMean</definition>
        <argsstring>(const InputType &amp;input, DataType &amp;output)</argsstring>
        <name>HiddenMean</name>
        <param>
          <type>const InputType &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>The function calculates the mean for the hidden layer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Visible neurons. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Hidden neuron activations. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1acffebca1b9b134cc908c85afdf125e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, SpikeSlabRBM&gt;::value, void&gt;::type HiddenMean</definition>
        <argsstring>(const InputType &amp;input, DataType &amp;output)</argsstring>
        <name>HiddenMean</name>
        <param>
          <type>const InputType &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>The function calculates the mean of the Normal distribution of P(s|v, h). </para>        </briefdescription>
        <detaileddescription>
<para>The mean is given by: <formula id="137">$ h_i*\alpha^{-1}*W_i^T*v $</formula> The variance is given by: <formula id="138">$ \alpha^{-1} $</formula></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Visible layer neurons. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Consists of both the spike samples and slab samples. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a2b00f48e3f5906e07a24615a572bf440" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t const  &amp;</type>
        <definition>size_t const&amp; HiddenSize</definition>
        <argsstring>() const</argsstring>
        <name>HiddenSize</name>
        <briefdescription>
<para>Get the hidden size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="374" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="374" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a1fa76af34a6e3ea927b307f0c318ee4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t NumFunctions</definition>
        <argsstring>() const</argsstring>
        <name>NumFunctions</name>
        <briefdescription>
<para>Return the number of separable functions (the number of predictor points). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="333" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="333" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1adbc0b25e9e3d013f7886ea72998f9d8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t NumSteps</definition>
        <argsstring>() const</argsstring>
        <name>NumSteps</name>
        <briefdescription>
<para>Return the number of steps of Gibbs Sampling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="336" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="336" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1ab1b2789fef2a390f863d39250c209a43" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
        <definition>const arma::Mat&lt;ElemType&gt;&amp; Parameters</definition>
        <argsstring>() const</argsstring>
        <name>Parameters</name>
        <briefdescription>
<para>Return the parameters of the network. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="339" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1ab2414685b4049c8d634fe67103f283a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
        <definition>arma::Mat&lt;ElemType&gt;&amp; Parameters</definition>
        <argsstring>()</argsstring>
        <name>Parameters</name>
        <briefdescription>
<para>Modify the parameters of the network. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="341" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1ae41b770114d774a34e87a91e0389cd7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1BinaryRBM" kindref="compound">BinaryRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, BinaryRBM&gt;::value, void&gt;::type Phase</definition>
        <argsstring>(const InputType &amp;input, DataType &amp;gradient)</argsstring>
        <name>Phase</name>
        <param>
          <type>const InputType &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Calculates the gradient of the <ref refid="classmlpack_1_1ann_1_1RBM" kindref="compound">RBM</ref> network on the provided input. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The provided input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores the gradient of the <ref refid="classmlpack_1_1ann_1_1RBM" kindref="compound">RBM</ref> network. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a3d36e3403c6150b8d705e08bf64ffd4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, SpikeSlabRBM&gt;::value, void&gt;::type Phase</definition>
        <argsstring>(const InputType &amp;input, DataType &amp;gradient)</argsstring>
        <name>Phase</name>
        <param>
          <type>const InputType &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Calculates the gradient of the <ref refid="classmlpack_1_1ann_1_1RBM" kindref="compound">RBM</ref> network on the provided input. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The provided input data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores the gradient of the <ref refid="classmlpack_1_1ann_1_1RBM" kindref="compound">RBM</ref> network. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1ac94d648f4d497a1197361acf2ab0a590" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t const  &amp;</type>
        <definition>size_t const&amp; PoolSize</definition>
        <argsstring>() const</argsstring>
        <name>PoolSize</name>
        <briefdescription>
<para>Get the pool size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="376" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="376" bodyend="376"/>
        <references refid="classmlpack_1_1ann_1_1RBM_1a72d63b74c8166dff8e1a9006905ad9ca">RBM&lt; InitializationRuleType, DataType, PolicyType &gt;::serialize</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a63597e688935e6e1625379a24df8a1d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1BinaryRBM" kindref="compound">BinaryRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, BinaryRBM&gt;::value, void&gt;::type Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1abc35221dab70db439425de807c4799d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, SpikeSlabRBM&gt;::value, void&gt;::type Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a178a35402811647b0d91a8d86a17cad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1BinaryRBM" kindref="compound">BinaryRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, BinaryRBM&gt;::value, void&gt;::type SampleHidden</definition>
        <argsstring>(const arma::Mat&lt; ElemType &gt; &amp;input, arma::Mat&lt; ElemType &gt; &amp;output)</argsstring>
        <name>SampleHidden</name>
        <param>
          <type>const arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function samples the hidden layer given the visible layer using Bernoulli function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Visible layer input. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The sampled hidden layer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1ac8a5a85863a4e0259149223df8207aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, SpikeSlabRBM&gt;::value, void&gt;::type SampleHidden</definition>
        <argsstring>(const arma::Mat&lt; ElemType &gt; &amp;input, arma::Mat&lt; ElemType &gt; &amp;output)</argsstring>
        <name>SampleHidden</name>
        <param>
          <type>const arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function samples the slab outputs from the Normal distribution with mean given by: <formula id="137">$ h_i*\alpha^{-1}*W_i^T*v $</formula> and variance: <formula id="138">$ \alpha^{-1} $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Consists of both visible and spike variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampled slab neurons. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a178154b1972a70ccb122f9f5b23d9c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, SpikeSlabRBM&gt;::value, void&gt;::type SampleSlab</definition>
        <argsstring>(InputType &amp;slabMean, DataType &amp;slab)</argsstring>
        <name>SampleSlab</name>
        <param>
          <type>InputType &amp;</type>
          <declname>slabMean</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>slab</declname>
        </param>
        <briefdescription>
<para>The function samples from the Normal distribution of P(s|v, h), where the mean is given by: <formula id="137">$ h_i*\alpha^{-1}*W_i^T*v $</formula> and variance is given by: <formula id="138">$ \alpha^{-1} $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slabMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean of the Normal distribution of the slab neurons. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slab</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampled slab variable from the Normal distribution. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a1edd2a46befde0cb93d28b3217411de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, SpikeSlabRBM&gt;::value, void&gt;::type SampleSpike</definition>
        <argsstring>(InputType &amp;spikeMean, DataType &amp;spike)</argsstring>
        <name>SampleSpike</name>
        <param>
          <type>InputType &amp;</type>
          <declname>spikeMean</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>spike</declname>
        </param>
        <briefdescription>
<para>The function samples the spike function using Bernoulli distribution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spikeMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates P(h|v). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spike</parametername>
</parameternamelist>
<parameterdescription>
<para>Sampled binary spike variables. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1aa7e2df3a068c8fdcde1ecb5c16a5b3ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1BinaryRBM" kindref="compound">BinaryRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, BinaryRBM&gt;::value, void&gt;::type SampleVisible</definition>
        <argsstring>(arma::Mat&lt; ElemType &gt; &amp;input, arma::Mat&lt; ElemType &gt; &amp;output)</argsstring>
        <name>SampleVisible</name>
        <param>
          <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>This function samples the visible layer given the hidden layer using Bernoulli function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Hidden layer of the network. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The sampled visible layer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a41a2c78c98511526e05f3e5437383a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, SpikeSlabRBM&gt;::value, void&gt;::type SampleVisible</definition>
        <argsstring>(arma::Mat&lt; ElemType &gt; &amp;input, arma::Mat&lt; ElemType &gt; &amp;output)</argsstring>
        <name>SampleVisible</name>
        <param>
          <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>arma::Mat&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Sample Hidden function samples the slab outputs from the Normal distribution with mean given by: <formula id="137">$ h_i*\alpha^{-1}*W_i^T*v $</formula> and variance: <formula id="138">$ \alpha^{-1} $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Hidden layer of the network. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The sampled visible layer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t version)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Serialize the model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="380" column="1"/>
        <referencedby refid="classmlpack_1_1ann_1_1RBM_1ac94d648f4d497a1197361acf2ab0a590" compoundref="rbm_8hpp" startline="376" endline="376">RBM&lt; InitializationRuleType, DataType, PolicyType &gt;::PoolSize</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a2697cc8b37d7bca7c055228382a9b208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Shuffle</definition>
        <argsstring>()</argsstring>
        <name>Shuffle</name>
        <briefdescription>
<para>Shuffle the order of function visitation. </para>        </briefdescription>
        <detaileddescription>
<para>This may be called by the optimizer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a2678db9cde48206d923338bad609c606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, SpikeSlabRBM&gt;::value, void&gt;::type SlabMean</definition>
        <argsstring>(const DataType &amp;visible, DataType &amp;spike, DataType &amp;slabMean)</argsstring>
        <name>SlabMean</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>visible</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>spike</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>slabMean</declname>
        </param>
        <briefdescription>
<para>The function calculates the mean of Normal distribution of P(s|v, h), where the mean is given by: <formula id="137">$ h_i*\alpha^{-1}*W_i^T*v $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visible</parametername>
</parameternamelist>
<parameterdescription>
<para>The visible layer neurons. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spike</parametername>
</parameternamelist>
<parameterdescription>
<para>The spike variables from hidden layer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slabMean</parametername>
</parameternamelist>
<parameterdescription>
<para>The mean of the Normal distribution of slab neurons. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a6f1cf88e0f2a58c078ea435c94d1b055" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> const  &amp;</type>
        <definition>ElemType const&amp; SlabPenalty</definition>
        <argsstring>() const</argsstring>
        <name>SlabPenalty</name>
        <briefdescription>
<para>Get the regularizer associated with slab variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="364" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="364" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a6e0e561b035221128bcf78d1a7e84f88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType const  &amp;</type>
        <definition>DataType const&amp; SpikeBias</definition>
        <argsstring>() const</argsstring>
        <name>SpikeBias</name>
        <briefdescription>
<para>Get the regularizer associated with spike variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="359" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="359" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1ac3151aa09f96f582e7ebc29cbf235e47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType &amp;</type>
        <definition>DataType&amp; SpikeBias</definition>
        <argsstring>()</argsstring>
        <name>SpikeBias</name>
        <briefdescription>
<para>Modify the regularizer associated with spike variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="361" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="361" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a05a33a8b30ea231d1f9e885861e31c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, SpikeSlabRBM&gt;::value, void&gt;::type SpikeMean</definition>
        <argsstring>(const InputType &amp;visible, DataType &amp;spikeMean)</argsstring>
        <name>SpikeMean</name>
        <param>
          <type>const InputType &amp;</type>
          <declname>visible</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>spikeMean</declname>
        </param>
        <briefdescription>
<para>The function calculates the mean of the distribution P(h|v), where mean is given by: <formula id="140">$ sigm(v^T*W_i*\alpha_i^{-1}*W_i^T*v + b_i) $</formula>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visible</parametername>
</parameternamelist>
<parameterdescription>
<para>The visible layer neurons. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>spikeMean</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates P(h|v). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a179f2b52999c7885ec3799c32ef0c35d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OptimizerType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>CallbackType</declname>
            <defname>CallbackType</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Train</definition>
        <argsstring>(OptimizerType &amp;optimizer, CallbackType &amp;&amp;... callbacks)</argsstring>
        <name>Train</name>
        <param>
          <type>OptimizerType &amp;</type>
          <declname>optimizer</declname>
        </param>
        <param>
          <type>CallbackType &amp;&amp;...</type>
          <declname>callbacks</declname>
        </param>
        <briefdescription>
<para>Train the <ref refid="classmlpack_1_1ann_1_1RBM" kindref="compound">RBM</ref> on the given input data. </para>        </briefdescription>
        <detaileddescription>
<para>This will use the existing model parameters as a starting point for the optimization. If this is not what you want, then you should access the parameters vector directly with <ref refid="classmlpack_1_1ann_1_1RBM_1ab2414685b4049c8d634fe67103f283a6" kindref="member">Parameters()</ref> and modify it as desired.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OptimizerType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of optimizer to use to train the model. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CallbackTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>Types of Callback functions. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>optimizer</parametername>
</parameternamelist>
<parameterdescription>
<para>Optimizer type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback Functions for ensmallen optimizer <computeroutput>OptimizerType</computeroutput>. See <ulink url="https://www.ensmallen.org/docs.html#callback-documentation">https://www.ensmallen.org/docs.html#callback-documentation</ulink>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The final objective of the trained model (NaN or Inf on error). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1ac59ec2d09be158222c9d8b066bba3863" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType const  &amp;</type>
        <definition>DataType const&amp; VisibleBias</definition>
        <argsstring>() const</argsstring>
        <name>VisibleBias</name>
        <briefdescription>
<para>Return the visible bias of the network. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="349" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="349" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1aba4315371cc80605143f0e33bfb87b49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType &amp;</type>
        <definition>DataType&amp; VisibleBias</definition>
        <argsstring>()</argsstring>
        <name>VisibleBias</name>
        <briefdescription>
<para>Modify the visible bias of the network. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="351" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="351" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1ad4e15de67ce77ed051eab4992264ab07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1BinaryRBM" kindref="compound">BinaryRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, BinaryRBM&gt;::value, void&gt;::type VisibleMean</definition>
        <argsstring>(InputType &amp;input, DataType &amp;output)</argsstring>
        <name>VisibleMean</name>
        <param>
          <type>InputType &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>The function calculates the mean for the visible layer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Hidden neurons from the hidden layer of the network. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Visible neuron activations. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a96052dddc0a395306fd3777af9bee007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Policy</type>
            <defval>PolicyType</defval>
          </param>
          <param>
            <type>typename InputType</type>
            <defval>DataType</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_same&lt; Policy, <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref> &gt;::value, void &gt;::type</type>
        <definition>std::enable_if&lt;std::is_same&lt;Policy, SpikeSlabRBM&gt;::value, void&gt;::type VisibleMean</definition>
        <argsstring>(InputType &amp;input, DataType &amp;output)</argsstring>
        <name>VisibleMean</name>
        <param>
          <type>InputType &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>The function calculates the mean of the Normal distribution of P(v|s, h). </para>        </briefdescription>
        <detaileddescription>
<para>The mean is given by: <formula id="139">$ \Lambda^{-1} \sum_{i=1}^N W_i * s_i * h_i $</formula></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Consists of both the spike and slab variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean of the of the Normal distribution. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1ad6b6a25a3d7f8ece8bb5946a2572f008" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType const  &amp;</type>
        <definition>DataType const&amp; VisiblePenalty</definition>
        <argsstring>() const</argsstring>
        <name>VisiblePenalty</name>
        <briefdescription>
<para>Get the regularizer associated with visible variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="367" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="367" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a0511c3420378ba5d12459aa782541f0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType &amp;</type>
        <definition>DataType&amp; VisiblePenalty</definition>
        <argsstring>()</argsstring>
        <name>VisiblePenalty</name>
        <briefdescription>
<para>Modify the regularizer associated with visible variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="369" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="369" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a993e0e378ebed9812bfe629c11d16638" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t const  &amp;</type>
        <definition>size_t const&amp; VisibleSize</definition>
        <argsstring>() const</argsstring>
        <name>VisibleSize</name>
        <briefdescription>
<para>Get the visible size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="372" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="372" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a3f58eb63c1d08b5066089ec90c3a48e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>arma::Cube&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; const  &amp;</type>
        <definition>arma::Cube&lt;ElemType&gt; const&amp; Weight</definition>
        <argsstring>() const</argsstring>
        <name>Weight</name>
        <briefdescription>
<para>Get the weights of the network. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="344" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="344" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1RBM_1a8307fcd9b76dafd62b60094a1a5f585d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>arma::Cube&lt; <ref refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" kindref="member">ElemType</ref> &gt; &amp;</type>
        <definition>arma::Cube&lt;ElemType&gt;&amp; Weight</definition>
        <argsstring>()</argsstring>
        <name>Weight</name>
        <briefdescription>
<para>Modify the weights of the network. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="346" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="346" bodyend="346"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The implementation of the <ref refid="classmlpack_1_1ann_1_1RBM" kindref="compound">RBM</ref> module. </para>    </briefdescription>
    <detaileddescription>
<para>A Restricted Boltzmann Machines (<ref refid="classmlpack_1_1ann_1_1RBM" kindref="compound">RBM</ref>) is a generative stochastic artificial neural network that can learn a probability distribution over its set of inputs. RBMs have found applications in dimensionality reduction, classification, collaborative filtering, feature learning and topic modelling. They can be trained in either supervised or unsupervised ways, depending on the task. They are a variant of Boltzmann machines, with the restriction that the neurons must form a bipartite graph.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InitializationRuleType</parametername>
</parameternamelist>
<parameterdescription>
<para>Rule used to initialize the network. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DataType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of matrix to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PolicyType</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classmlpack_1_1ann_1_1RBM" kindref="compound">RBM</ref> variant to be used (<ref refid="classmlpack_1_1ann_1_1BinaryRBM" kindref="compound">BinaryRBM</ref> or <ref refid="classmlpack_1_1ann_1_1SpikeSlabRBM" kindref="compound">SpikeSlabRBM</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" line="39" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp" bodystart="38" bodyend="449"/>
    <listofallmembers>
      <member refid="classmlpack_1_1ann_1_1RBM_1acc8b6b6879b002e34f544046de374ce8" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>batchSize</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1aeb15e37d26993b88da027a0b8247ee55" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>ElemType</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a0bcf0739f699f1147677f759067127eb" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a7dffa97022d69b63dea8fd67c2dcec63" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>FreeEnergy</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a1af63b5755f3a0fbb92a4472987cbd15" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>FreeEnergy</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a918883c908d730e9790e49dd16ecf8d7" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Gibbs</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a444befef16cc041880176a8e112de356" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>gibbsTemporary</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1aab9fd0b4b53e35da7c2e5c5e1ade7bc2" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Gradient</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a65affc6f87f4bd63497a5f07ffbdc579" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>hiddenBias</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a7834c6befe9e3b5bd950ed64bfc24225" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>HiddenBias</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a95ee1068552bc1e1f05438ed13786ab3" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>HiddenBias</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1afe74913f93a425c688e018c8bf5a7cd9" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>HiddenMean</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1acffebca1b9b134cc908c85afdf125e74" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>HiddenMean</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a79f7da02074421432c510326ff61ce30" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>hiddenReconstruction</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ad807388d5d1fc99793b27be860a1a204" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>hiddenSize</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a2b00f48e3f5906e07a24615a572bf440" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>HiddenSize</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1afe2a6ce1565af9e715f04dc42338e439" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>initializeRule</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a5b57091a9651ad2dc3a953956aeb8952" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>negativeGradient</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a7465ff683ea54b2abea7865483e03e85" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>negativeSamples</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a517e637abac589740a964468701c4dd6" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>negSteps</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a1222e7405946cb6c406b8ab61b88950a" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>NetworkType</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1aaab494c30f729e32dc742dc5f65ecddb" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>numFunctions</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a1fa76af34a6e3ea927b307f0c318ee4b" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>NumFunctions</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1abb00e40320f1cfd547dce27485769773" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>numSteps</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1adbc0b25e9e3d013f7886ea72998f9d8d" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>NumSteps</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1acf03001a1a84765a566b240ca88cc727" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>parameter</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ab1b2789fef2a390f863d39250c209a43" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Parameters</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ab2414685b4049c8d634fe67103f283a6" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Parameters</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a8eb4345be1fa2163bda7389dfa842b5b" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>persistence</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ae41b770114d774a34e87a91e0389cd7f" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Phase</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a3d36e3403c6150b8d705e08bf64ffd4a" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Phase</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ac94d648f4d497a1197361acf2ab0a590" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>PoolSize</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a5017b145458a6f08fdc754f3ea38fc9b" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>poolSize</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a64d10b1fa1540d2abe2cd0836b4e9699" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>positiveGradient</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a96d59246762eb9b80a31cf0adce56cc1" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>preActivation</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a25c768fa22bf29d6e15250440221315b" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>predictors</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a4956d6265055d21651f82b0de1fc8fb4" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>radius</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1af96c1d7469e25128c1391dee9da7fcd8" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>RBM</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a8409a0d351d4fba2eeef26a7dcc585a8" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>reset</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a63597e688935e6e1625379a24df8a1d8" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Reset</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1abc35221dab70db439425de807c4799d3" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Reset</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a178a35402811647b0d91a8d86a17cad7" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>SampleHidden</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ac8a5a85863a4e0259149223df8207aa7" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>SampleHidden</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a178154b1972a70ccb122f9f5b23d9c9f" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>SampleSlab</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a1edd2a46befde0cb93d28b3217411de8" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>SampleSpike</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1aa7e2df3a068c8fdcde1ecb5c16a5b3ec" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>SampleVisible</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a41a2c78c98511526e05f3e5437383a92" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>SampleVisible</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a2697cc8b37d7bca7c055228382a9b208" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Shuffle</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a2678db9cde48206d923338bad609c606" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>SlabMean</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a7861c0ce606366ab430fd35edbbbee0c" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>slabMean</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a07ab6ecee9867e768e8da55d021e14fd" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>slabPenalty</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a6f1cf88e0f2a58c078ea435c94d1b055" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>SlabPenalty</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a6e0e561b035221128bcf78d1a7e84f88" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>SpikeBias</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ac3151aa09f96f582e7ebc29cbf235e47" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>SpikeBias</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a2c4200c9878af7ca378dd4426b5d0a5f" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>spikeBias</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1af2d04012af8a4e98a1617b4675d8dc14" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>spikeMean</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a05a33a8b30ea231d1f9e885861e31c74" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>SpikeMean</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a4e31bedbfc34a7b8ff34271b8ada87b5" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>spikeSamples</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a1b901f8e3a37fe08ce7f255fe4d61f58" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>state</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a2a30a0fc4077aef1e55c562ac2586c65" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>steps</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a5d2846196b1dfe00b0b0efeba72e7132" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>tempNegativeGradient</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a179f2b52999c7885ec3799c32ef0c35d" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Train</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ad3d079e92a79857a39b4f3d6936f856b" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>visibleBias</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ac59ec2d09be158222c9d8b066bba3863" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>VisibleBias</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1aba4315371cc80605143f0e33bfb87b49" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>VisibleBias</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ab4d03d053a7348dc87c8844fccf408ca" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>visibleMean</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ad4e15de67ce77ed051eab4992264ab07" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>VisibleMean</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a96052dddc0a395306fd3777af9bee007" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>VisibleMean</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ad46687f3ee66fc7247aa640281a52b2a" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>visiblePenalty</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1ad6b6a25a3d7f8ece8bb5946a2572f008" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>VisiblePenalty</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a0511c3420378ba5d12459aa782541f0f" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>VisiblePenalty</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a3ed03202f7a3d8cfe18cdb77aa506ac0" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>visibleReconstruction</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a0381a080118c46d9bd4177072d1e646c" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>visibleSize</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a993e0e378ebed9812bfe629c11d16638" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>VisibleSize</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a806b6d8540cd1378e9b34a4eb76889dd" prot="private" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>weight</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a3f58eb63c1d08b5066089ec90c3a48e7" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Weight</name></member>
      <member refid="classmlpack_1_1ann_1_1RBM_1a8307fcd9b76dafd62b60094a1a5f585d" prot="public" virt="non-virtual"><scope>mlpack::ann::RBM</scope><name>Weight</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
