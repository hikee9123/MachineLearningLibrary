<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1tree_1_1SpillTree" kind="class" language="C++" prot="public">
    <compoundname>mlpack::tree::SpillTree</compoundname>
    <includes refid="spill__tree_2spill__tree_8hpp" local="no">spill_tree.hpp</includes>
    <innerclass refid="classmlpack_1_1tree_1_1SpillTree_1_1SpillDualTreeTraverser" prot="public">mlpack::tree::SpillTree::SpillDualTreeTraverser</innerclass>
    <innerclass refid="classmlpack_1_1tree_1_1SpillTree_1_1SpillSingleTreeTraverser" prot="public">mlpack::tree::SpillTree::SpillSingleTreeTraverser</innerclass>
    <templateparamlist>
      <param>
        <type>typename MetricType</type>
      </param>
      <param>
        <type>typename StatisticType</type>
        <defval><ref refid="classmlpack_1_1tree_1_1EmptyStatistic" kindref="compound">EmptyStatistic</ref></defval>
      </param>
      <param>
        <type>typename MatType</type>
        <defval>arma::mat</defval>
      </param>
      <param>
        <type>template&lt; typename HyperplaneMetricType &gt; class</type>
        <declname>HyperplaneType</declname>
        <defname>HyperplaneType</defname>
        <defval><ref refid="namespacemlpack_1_1tree_1afa85d70df69e258859143d448fbe0553" kindref="member">AxisOrthogonalHyperplane</ref></defval>
      </param>
      <param>
        <type>template&lt; typename SplitMetricType, typename SplitMatType &gt; class</type>
        <declname>SplitType</declname>
        <defname>SplitType</defname>
        <defval><ref refid="classmlpack_1_1tree_1_1MidpointSpaceSplit" kindref="compound">MidpointSpaceSplit</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1SpillTree_1afb7ac4d7ba253be481b886d3ae52cf81" prot="public" static="no">
        <type>HyperplaneType&lt; MetricType &gt;::<ref refid="classmlpack_1_1tree_1_1SpillTree_1afb7ac4d7ba253be481b886d3ae52cf81" kindref="member">BoundType</ref></type>
        <definition>typedef HyperplaneType&lt;MetricType&gt;::BoundType BoundType</definition>
        <argsstring></argsstring>
        <name>BoundType</name>
        <briefdescription>
<para>The bound type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="81" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1SpillTree_1a1ed327205f09a5f798f411a41ed94ce3" prot="public" static="no">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1_1SpillDualTreeTraverser" kindref="compound">SpillDualTreeTraverser</ref>&lt; RuleType, true &gt;</type>
        <definition>using DefeatistDualTreeTraverser =  SpillDualTreeTraverser&lt;RuleType, true&gt;</definition>
        <argsstring></argsstring>
        <name>DefeatistDualTreeTraverser</name>
        <briefdescription>
<para>A defeatist dual-tree traverser for hybrid spill trees. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="146" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1SpillTree_1a70567cc69a2425783765a87845ec9e03" prot="public" static="no">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1_1SpillSingleTreeTraverser" kindref="compound">SpillSingleTreeTraverser</ref>&lt; RuleType, true &gt;</type>
        <definition>using DefeatistSingleTreeTraverser =  SpillSingleTreeTraverser&lt;RuleType, true&gt;</definition>
        <argsstring></argsstring>
        <name>DefeatistSingleTreeTraverser</name>
        <briefdescription>
<para>A defeatist single-tree traverser for hybrid spill trees. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="138" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1SpillTree_1a63f559cd634d9be24db5b041e74169db" prot="public" static="no">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1_1SpillDualTreeTraverser" kindref="compound">SpillDualTreeTraverser</ref>&lt; RuleType, false &gt;</type>
        <definition>using DualTreeTraverser =  SpillDualTreeTraverser&lt;RuleType, false&gt;</definition>
        <argsstring></argsstring>
        <name>DualTreeTraverser</name>
        <briefdescription>
<para>A dual-tree traverser for hybrid spill trees. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="142" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" prot="public" static="no">
        <type>MatType::elem_type</type>
        <definition>typedef MatType::elem_type ElemType</definition>
        <argsstring></argsstring>
        <name>ElemType</name>
        <briefdescription>
<para>The type of element held in MatType. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="79" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1SpillTree_1a57758caa2e58c3fe05d1284eeabae523" prot="public" static="no">
        <type>MatType</type>
        <definition>typedef MatType Mat</definition>
        <argsstring></argsstring>
        <name>Mat</name>
        <briefdescription>
<para>So other classes can use TreeType::Mat. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="77" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1SpillTree_1ae95fd7c19ba7e882936c55b022384887" prot="public" static="no">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1_1SpillSingleTreeTraverser" kindref="compound">SpillSingleTreeTraverser</ref>&lt; RuleType, false &gt;</type>
        <definition>using SingleTreeTraverser =  SpillSingleTreeTraverser&lt;RuleType, false&gt;</definition>
        <argsstring></argsstring>
        <name>SingleTreeTraverser</name>
        <briefdescription>
<para>A single-tree traverser for hybrid spill trees. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="134" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1aa8550f27ce7384c3d4846b94cd05d7ad" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1afb7ac4d7ba253be481b886d3ae52cf81" kindref="member">BoundType</ref></type>
        <definition>BoundType bound</definition>
        <argsstring></argsstring>
        <name>bound</name>
        <briefdescription>
<para>The bound object for this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="101" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1a76d971a3c552bc58ba9f0d5fceae9806" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <briefdescription>
<para>The number of points of the dataset contained in this node (and its children). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="92" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1a829bf4b7b37982e2743e9d6452ebee43" prot="private" static="no" mutable="no">
        <type>const MatType *</type>
        <definition>const MatType* dataset</definition>
        <argsstring></argsstring>
        <name>dataset</name>
        <briefdescription>
<para>The dataset. </para>        </briefdescription>
        <detaileddescription>
<para>If we are the root of the tree, we own the dataset and must delete it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="113" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1abac6d3189ea06ff1b589cbf2e736568b" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType furthestDescendantDistance</definition>
        <argsstring></argsstring>
        <name>furthestDescendantDistance</name>
        <briefdescription>
<para>The worst possible distance to the furthest descendant, cached to speed things up. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="108" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1ae16d124345c715ba082bed007ee4e73f" prot="private" static="no" mutable="no">
        <type>HyperplaneType&lt; MetricType &gt;</type>
        <definition>HyperplaneType&lt;MetricType&gt; hyperplane</definition>
        <argsstring></argsstring>
        <name>hyperplane</name>
        <briefdescription>
<para>Splitting hyperplane represented by this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="99" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1a5834f622dd9f1f37597464ef06e008b1" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> *</type>
        <definition>SpillTree* left</definition>
        <argsstring></argsstring>
        <name>left</name>
        <briefdescription>
<para>The left child node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="85" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1a45317126bc67aa54aa15296b4facd2b9" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool localDataset</definition>
        <argsstring></argsstring>
        <name>localDataset</name>
        <briefdescription>
<para>If true, we own the dataset and need to destroy it in the destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="115" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1afd64f326a495af18e10a5e71e7b02143" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType minimumBoundDistance</definition>
        <argsstring></argsstring>
        <name>minimumBoundDistance</name>
        <briefdescription>
<para>The minimum distance from the center to any edge of the bound. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="110" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1a917687d852ae96692cc1dce1747f5a0f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool overlappingNode</definition>
        <argsstring></argsstring>
        <name>overlappingNode</name>
        <briefdescription>
<para>Flag to distinguish overlapping nodes from non-overlapping nodes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="97" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1ad6e9b41894c55bdbd47ad1858b33e1d4" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> *</type>
        <definition>SpillTree* parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <briefdescription>
<para>The parent node (NULL if this is the root of the tree). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="89" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1a110be38965cb624d9e3b4d335f962806" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType parentDistance</definition>
        <argsstring></argsstring>
        <name>parentDistance</name>
        <briefdescription>
<para>The distance from the centroid of this node to the centroid of the parent. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="105" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1a5e466c9f0b43af76aee34089941fbb93" prot="private" static="no" mutable="no">
        <type>arma::Col&lt; size_t &gt; *</type>
        <definition>arma::Col&lt;size_t&gt;* pointsIndex</definition>
        <argsstring></argsstring>
        <name>pointsIndex</name>
        <briefdescription>
<para>The list of indexes of points contained in this node (non-NULL if the node is a leaf or if overlappingNode is true). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="95" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1a0ae1963c14a3616a2cf170a29fccdf0c" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> *</type>
        <definition>SpillTree* right</definition>
        <argsstring></argsstring>
        <name>right</name>
        <briefdescription>
<para>The right child node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="87" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1SpillTree_1a3bb6957cc0ee042b639ebc4b8b45fd37" prot="private" static="no" mutable="no">
        <type>StatisticType</type>
        <definition>StatisticType stat</definition>
        <argsstring></argsstring>
        <name>stat</name>
        <briefdescription>
<para>Any extra data contained in the node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="103" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmlpack_1_1tree_1_1SpillTree_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class cereal::access</definition>
        <argsstring></argsstring>
        <name>cereal::access</name>
        <briefdescription>
<para>Friend access is given for the default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="479" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="479" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1af01ea5b8618874348c074c5cedfbfef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SpillTree</definition>
        <argsstring>(const MatType &amp;data, const double tau=0, const size_t maxLeafSize=20, const double rho=0.7)</argsstring>
        <name>SpillTree</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tau</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
          <defval>0.7</defval>
        </param>
        <briefdescription>
<para>Construct this as the root node of a hybrid spill tree using the given dataset. </para>        </briefdescription>
        <detaileddescription>
<para>The dataset will not be modified during the building procedure (unlike <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Dataset to create tree from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>Overlapping size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rho</parametername>
</parameternamelist>
<parameterdescription>
<para>Balance threshold. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a5e77cfea45b36b3769f9b7f3883f3e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SpillTree</definition>
        <argsstring>(MatType &amp;&amp;data, const double tau=0, const size_t maxLeafSize=20, const double rho=0.7)</argsstring>
        <name>SpillTree</name>
        <param>
          <type>MatType &amp;&amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tau</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
          <defval>0.7</defval>
        </param>
        <briefdescription>
<para>Construct this as the root node of a hybrid spill tree using the given dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This will take ownership of the data matrix; if you don&apos;t want this, consider using the constructor that takes a const reference to a dataset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Dataset to create tree from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>Overlapping size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rho</parametername>
</parameternamelist>
<parameterdescription>
<para>Balance threshold. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a949c2bc414a1e1c0b51b098d2c1be253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SpillTree</definition>
        <argsstring>(SpillTree *parent, arma::Col&lt; size_t &gt; &amp;points, const double tau=0, const size_t maxLeafSize=20, const double rho=0.7)</argsstring>
        <name>SpillTree</name>
        <param>
          <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>arma::Col&lt; size_t &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tau</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
          <defval>0.7</defval>
        </param>
        <briefdescription>
<para>Construct this node as a child of the given parent, including the given list of points. </para>        </briefdescription>
        <detaileddescription>
<para>This is used for recursive tree-building by the other constructors which don&apos;t specify point indices.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent of this node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of indexes of points to be included in this node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>Overlapping size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rho</parametername>
</parameternamelist>
<parameterdescription>
<para>Balance threshold. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1afb0f5c8da31c35c67546288cfa36efd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SpillTree</definition>
        <argsstring>(const SpillTree &amp;other)</argsstring>
        <name>SpillTree</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Create a hybrid spill tree by copying the other tree. </para>        </briefdescription>
        <detaileddescription>
<para>Be careful! This can take a long time and use a lot of memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>tree to be replicated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a0cc2e96cef9427b420d16439505cdb0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SpillTree</definition>
        <argsstring>(SpillTree &amp;&amp;other)</argsstring>
        <name>SpillTree</name>
        <param>
          <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor for a <ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref>; possess all the members of the given tree. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>tree to be moved. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a907d16b2dbd703629792a929db296567" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>SpillTree</definition>
        <argsstring>(Archive &amp;ar, const typename std::enable_if_t&lt; cereal::is_loading&lt; Archive &gt;()&gt; *=0)</argsstring>
        <name>SpillTree</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="namespacecereal_1ad79f9b690399d7e8aad9e7fc9ef3b797" kindref="member">cereal::is_loading</ref>&lt; Archive &gt;()&gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Initialize the tree from a cereal archive. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ar</parametername>
</parameternamelist>
<parameterdescription>
<para>Archive to load tree from. Must be an iarchive, not an oarchive. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a61630a42d6ba37cb1b0f38126443795e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~SpillTree</definition>
        <argsstring>()</argsstring>
        <name>~SpillTree</name>
        <briefdescription>
<para>Deletes this node, deallocating the memory for the children and calling their destructors in turn. </para>        </briefdescription>
        <detaileddescription>
<para>This will invalidate any pointers or references to any nodes which are children of this one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1ad8aa68339c34c1ac00dc24012e2904ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classmlpack_1_1tree_1_1SpillTree_1afb7ac4d7ba253be481b886d3ae52cf81" kindref="member">BoundType</ref> &amp;</type>
        <definition>const BoundType&amp; Bound</definition>
        <argsstring>() const</argsstring>
        <name>Bound</name>
        <briefdescription>
<para>Return the bound object for this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="244" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="244" bodyend="244"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1a750cfba0005bdde7bec9a0b38727e987" compoundref="spill__tree_2spill__tree_8hpp" startline="396" endline="399">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::MaxDistance</referencedby>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1a11831de21b4ea2d02761cdd869efddee" compoundref="spill__tree_2spill__tree_8hpp" startline="390" endline="393">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::MinDistance</referencedby>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1afeaa6c846c856693e5f73272b94bd8b8" compoundref="spill__tree_2spill__tree_8hpp" startline="402" endline="405">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::RangeDistance</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a10137711613ed872f3efef934e0ee069" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1afb7ac4d7ba253be481b886d3ae52cf81" kindref="member">BoundType</ref> &amp;</type>
        <definition>BoundType&amp; Bound</definition>
        <argsstring>()</argsstring>
        <name>Bound</name>
        <briefdescription>
<para>Return the bound object for this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="246" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a16e556777ca3125ab3cdc16aed9e7885" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Center</definition>
        <argsstring>(arma::vec &amp;center)</argsstring>
        <name>Center</name>
        <param>
          <type>arma::vec &amp;</type>
          <declname>center</declname>
        </param>
        <briefdescription>
<para>Store the center of the bounding region in the given vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="438" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="438" bodyend="438"/>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1afa475b761ce701406b530e35bf30e5d9">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::SpillTree</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a2bd6ef4c06f38a780238a8dd74e590b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;</type>
        <definition>SpillTree&amp; Child</definition>
        <argsstring>(const size_t child) const</argsstring>
        <name>Child</name>
        <param>
          <type>const size_t</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Return the specified child (0 will be left, 1 will be right). </para>        </briefdescription>
        <detaileddescription>
<para>If the index is greater than 1, this will return the right child.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of child to return. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="355" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1aa22ead21ac809efb970b90ec014dc318" compoundref="spill__tree_2spill__tree_8hpp" startline="347" endline="347">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::ParentDistance</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1ae6b405ea3bdeaf218e90ebb324bd012b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> *&amp;</type>
        <definition>SpillTree*&amp; ChildPtr</definition>
        <argsstring>(const size_t child)</argsstring>
        <name>ChildPtr</name>
        <param>
          <type>const size_t</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="357" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="357" bodyend="358"/>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1aa732ea3eeb38529c549fd4d15d8655be">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Descendant</references>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1a2a85eb34222f1fc073940e8c89274e81">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::NumDescendants</references>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1a352077c26368da0ee570c0b7f062b1e3">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::NumPoints</references>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1a559eede5ea60f68634f8e7e72c3c68d2">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Point</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a4c3764c98d5804083a9ec2c867eb9366" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const MatType &amp;</type>
        <definition>const MatType&amp; Dataset</definition>
        <argsstring>() const</argsstring>
        <name>Dataset</name>
        <briefdescription>
<para>Get the dataset which the tree is built on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="272" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="272" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1aa732ea3eeb38529c549fd4d15d8655be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Descendant</definition>
        <argsstring>(const size_t index) const</argsstring>
        <name>Descendant</name>
        <param>
          <type>const size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return the index (with reference to the dataset) of a particular descendant of this node. </para>        </briefdescription>
        <detaileddescription>
<para>The index should be greater than zero but less than the number of descendants.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the descendant. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="377" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1ae6b405ea3bdeaf218e90ebb324bd012b" compoundref="spill__tree_2spill__tree_8hpp" startline="357" endline="358">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::ChildPtr</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1adc597088eadfcfa3060336d0484ab573" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType FurthestDescendantDistance</definition>
        <argsstring>() const</argsstring>
        <name>FurthestDescendantDistance</name>
        <briefdescription>
<para>Return the furthest possible descendant distance. </para>        </briefdescription>
        <detaileddescription>
<para>This returns the maximum distance from the centroid to the edge of the bound and not the empirical quantity which is the actual furthest descendant distance. So the actual furthest descendant distance may be less than what this method returns (but it will never be greater than this). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="337" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="spill__tree_2spill__tree_8hpp" startline="281" endline="281">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1acbe82a6439f71405b5801ca7d941cbfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType FurthestPointDistance</definition>
        <argsstring>() const</argsstring>
        <name>FurthestPointDistance</name>
        <briefdescription>
<para>Return the furthest distance to a point held in this node. </para>        </briefdescription>
        <detaileddescription>
<para>If this is not a leaf node, then the distance is 0 because the node holds no points. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="328" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="spill__tree_2spill__tree_8hpp" startline="281" endline="281">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a0257281722537c7916db7763623f67f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t GetFurthestChild</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0)</argsstring>
        <name>GetFurthestChild</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the index of the furthest child node to the given query point (this is an efficient estimation based on the splitting hyperplane, the node returned is not necessarily the furthest). </para>        </briefdescription>
        <detaileddescription>
<para>If this is a leaf node, it will return <ref refid="classmlpack_1_1tree_1_1SpillTree_1a1f7ec083be66d58a3e02e12956bf005e" kindref="member">NumChildren()</ref> (invalid index). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="304" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="spill__tree_2spill__tree_8hpp" startline="281" endline="281">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a12e43f9076ca004912461d442cf5158f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetFurthestChild</definition>
        <argsstring>(const SpillTree &amp;queryNode)</argsstring>
        <name>GetFurthestChild</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;</type>
          <declname>queryNode</declname>
        </param>
        <briefdescription>
<para>Return the index of the furthest child node to the given query node (this is an efficient estimation based on the splitting hyperplane, the node returned is not necessarily the furthest). </para>        </briefdescription>
        <detaileddescription>
<para>If it can&apos;t decide it will return <ref refid="classmlpack_1_1tree_1_1SpillTree_1a1f7ec083be66d58a3e02e12956bf005e" kindref="member">NumChildren()</ref> (invalid index). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a19b9a5fd41d8e192b62effb1445bd410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t GetNearestChild</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0)</argsstring>
        <name>GetNearestChild</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the index of the nearest child node to the given query point (this is an efficient estimation based on the splitting hyperplane, the node returned is not necessarily the nearest). </para>        </briefdescription>
        <detaileddescription>
<para>If this is a leaf node, it will return <ref refid="classmlpack_1_1tree_1_1SpillTree_1a1f7ec083be66d58a3e02e12956bf005e" kindref="member">NumChildren()</ref> (invalid index). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="293" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="spill__tree_2spill__tree_8hpp" startline="281" endline="281">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1ae84607913e07294e74fe0f238af7abad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetNearestChild</definition>
        <argsstring>(const SpillTree &amp;queryNode)</argsstring>
        <name>GetNearestChild</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;</type>
          <declname>queryNode</declname>
        </param>
        <briefdescription>
<para>Return the index of the nearest child node to the given query node (this is an efficient estimation based on the splitting hyperplane, the node returned is not necessarily the nearest). </para>        </briefdescription>
        <detaileddescription>
<para>If it can&apos;t decide it will return <ref refid="classmlpack_1_1tree_1_1SpillTree_1a1f7ec083be66d58a3e02e12956bf005e" kindref="member">NumChildren()</ref> (invalid index). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a8634496d0672235fadbd9a9a47b2d344" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const HyperplaneType&lt; MetricType &gt; &amp;</type>
        <definition>const HyperplaneType&lt;MetricType&gt;&amp; Hyperplane</definition>
        <argsstring>() const</argsstring>
        <name>Hyperplane</name>
        <briefdescription>
<para>Get the Hyperplane instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="278" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="278" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1aa0f4813924e6cdee43b45050bb947abe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsLeaf</definition>
        <argsstring>() const</argsstring>
        <name>IsLeaf</name>
        <briefdescription>
<para>Return whether or not this node is a leaf (true if it has no children). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="254" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1aac2d3c104b89109f3df4a9a8cad244da" compoundref="spill__tree_2spill__tree_8hpp" startline="251" endline="251">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Stat</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1aa843b534cdaa91d21da8da06233436e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> *</type>
        <definition>SpillTree* Left</definition>
        <argsstring>() const</argsstring>
        <name>Left</name>
        <briefdescription>
<para>Gets the left child of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="257" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a3791d521a3b192caee1551195af1a45b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> *&amp;</type>
        <definition>SpillTree*&amp; Left</definition>
        <argsstring>()</argsstring>
        <name>Left</name>
        <briefdescription>
<para>Modify the left child of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="259" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="259" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a750cfba0005bdde7bec9a0b38727e987" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType MaxDistance</definition>
        <argsstring>(const SpillTree &amp;other) const</argsstring>
        <name>MaxDistance</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return the maximum distance to another node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="396" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="396" bodyend="399"/>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1ad8aa68339c34c1ac00dc24012e2904ca" compoundref="spill__tree_2spill__tree_8hpp" startline="244" endline="244">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Bound</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1ae764d88483236cc470f5abe0273df4c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType MaxDistance</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0) const</argsstring>
        <name>MaxDistance</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the maximum distance to another point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="418" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="418" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MetricType</type>
        <definition>MetricType Metric</definition>
        <argsstring>() const</argsstring>
        <name>Metric</name>
        <briefdescription>
<para>Get the metric that the tree uses. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="281" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="281" bodyend="281"/>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1adc597088eadfcfa3060336d0484ab573">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::FurthestDescendantDistance</references>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1acbe82a6439f71405b5801ca7d941cbfb">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::FurthestPointDistance</references>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1a0257281722537c7916db7763623f67f7">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::GetFurthestChild</references>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1a19b9a5fd41d8e192b62effb1445bd410">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::GetNearestChild</references>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1a20a4e92da6066eb335a576b7f9cd0415">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::MinimumBoundDistance</references>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1a1f7ec083be66d58a3e02e12956bf005e">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::NumChildren</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a11831de21b4ea2d02761cdd869efddee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType MinDistance</definition>
        <argsstring>(const SpillTree &amp;other) const</argsstring>
        <name>MinDistance</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return the minimum distance to another node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="390" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="390" bodyend="393"/>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1ad8aa68339c34c1ac00dc24012e2904ca" compoundref="spill__tree_2spill__tree_8hpp" startline="244" endline="244">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Bound</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a73bf99a433e88a31d98b46bf4c0da147" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType MinDistance</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0) const</argsstring>
        <name>MinDistance</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the minimum distance to another point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="409" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="409" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a20a4e92da6066eb335a576b7f9cd0415" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType MinimumBoundDistance</definition>
        <argsstring>() const</argsstring>
        <name>MinimumBoundDistance</name>
        <briefdescription>
<para>Return the minimum distance from the center of the node to any bound edge. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="340" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="spill__tree_2spill__tree_8hpp" startline="281" endline="281">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a1f7ec083be66d58a3e02e12956bf005e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t NumChildren</definition>
        <argsstring>() const</argsstring>
        <name>NumChildren</name>
        <briefdescription>
<para>Return the number of children in this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="284" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="spill__tree_2spill__tree_8hpp" startline="281" endline="281">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a2a85eb34222f1fc073940e8c89274e81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t NumDescendants</definition>
        <argsstring>() const</argsstring>
        <name>NumDescendants</name>
        <briefdescription>
<para>Return the number of descendants of this node. </para>        </briefdescription>
        <detaileddescription>
<para>For a non-leaf spill tree, this is the number of points at the descendant leaves. For a leaf, this is the number of points in the leaf. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="368" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1ae6b405ea3bdeaf218e90ebb324bd012b" compoundref="spill__tree_2spill__tree_8hpp" startline="357" endline="358">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::ChildPtr</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a352077c26368da0ee570c0b7f062b1e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t NumPoints</definition>
        <argsstring>() const</argsstring>
        <name>NumPoints</name>
        <briefdescription>
<para>Return the number of points in this node (0 if not a leaf). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="361" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1ae6b405ea3bdeaf218e90ebb324bd012b" compoundref="spill__tree_2spill__tree_8hpp" startline="357" endline="358">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::ChildPtr</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1ab792f299d368b4dd0e01cfd170f7d9b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;</type>
        <definition>SpillTree&amp; operator=</definition>
        <argsstring>(const SpillTree &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy the given Spill Tree. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree to be copied. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a27764d50c5cd303dc3101957f7ee8672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;</type>
        <definition>SpillTree&amp; operator=</definition>
        <argsstring>(SpillTree &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Take ownership of the given Spill Tree. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree to take ownership of. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a3a882fb5101c0772a7e49762fac0ebd0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Overlap</definition>
        <argsstring>() const</argsstring>
        <name>Overlap</name>
        <briefdescription>
<para>Distinguish overlapping nodes from non-overlapping nodes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="275" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a95f7cd8e2d7f028a2f0f409f3ab7d4b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> *</type>
        <definition>SpillTree* Parent</definition>
        <argsstring>() const</argsstring>
        <name>Parent</name>
        <briefdescription>
<para>Gets the parent of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="267" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a1cbf92ac63899f610e6b4cd28008e7bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> *&amp;</type>
        <definition>SpillTree*&amp; Parent</definition>
        <argsstring>()</argsstring>
        <name>Parent</name>
        <briefdescription>
<para>Modify the parent of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="269" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="269" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1af44ed4e7bfea088689caed082da67e17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType ParentDistance</definition>
        <argsstring>() const</argsstring>
        <name>ParentDistance</name>
        <briefdescription>
<para>Return the distance from the center of this node to the center of the parent node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="344" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="344" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1aa22ead21ac809efb970b90ec014dc318" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref> &amp;</type>
        <definition>ElemType&amp; ParentDistance</definition>
        <argsstring>()</argsstring>
        <name>ParentDistance</name>
        <briefdescription>
<para>Modify the distance from the center of this node to the center of the parent node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="347" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="347" bodyend="347"/>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1a2bd6ef4c06f38a780238a8dd74e590b5">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Child</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a559eede5ea60f68634f8e7e72c3c68d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Point</definition>
        <argsstring>(const size_t index) const</argsstring>
        <name>Point</name>
        <param>
          <type>const size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return the index (with reference to the dataset) of a particular point in this node. </para>        </briefdescription>
        <detaileddescription>
<para>This will happily return invalid indices if the given index is greater than the number of points in this node (obtained with <ref refid="classmlpack_1_1tree_1_1SpillTree_1a352077c26368da0ee570c0b7f062b1e3" kindref="member">NumPoints()</ref>) <ndash/> be careful.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of point for which a dataset index is wanted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="387" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1ae6b405ea3bdeaf218e90ebb324bd012b" compoundref="spill__tree_2spill__tree_8hpp" startline="357" endline="358">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::ChildPtr</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1afeaa6c846c856693e5f73272b94bd8b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>math::RangeType&lt; <ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref> &gt;</type>
        <definition>math::RangeType&lt;ElemType&gt; RangeDistance</definition>
        <argsstring>(const SpillTree &amp;other) const</argsstring>
        <name>RangeDistance</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return the minimum and maximum distance to another node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="402" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="402" bodyend="405"/>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1ad8aa68339c34c1ac00dc24012e2904ca" compoundref="spill__tree_2spill__tree_8hpp" startline="244" endline="244">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Bound</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a60a550bf46aa1d7b858134ce41fd5a3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type>math::RangeType&lt; <ref refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref> &gt;</type>
        <definition>math::RangeType&lt;ElemType&gt; RangeDistance</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0) const</argsstring>
        <name>RangeDistance</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the minimum and maximum distance to another point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="428" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="428" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1af26c4d9ed44411f6d8de9a6186b53406" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> *</type>
        <definition>SpillTree* Right</definition>
        <argsstring>() const</argsstring>
        <name>Right</name>
        <briefdescription>
<para>Gets the right child of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="262" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="262" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1ad165dc6342ee5b3bc02c90faa9d787ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1SpillTree" kindref="compound">SpillTree</ref> *&amp;</type>
        <definition>SpillTree*&amp; Right</definition>
        <argsstring>()</argsstring>
        <name>Right</name>
        <briefdescription>
<para>Modify the right child of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="264" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t version)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Serialize the tree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1ad8b29c84ac793742cd15834f9f4c4f31" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const StatisticType &amp;</type>
        <definition>const StatisticType&amp; Stat</definition>
        <argsstring>() const</argsstring>
        <name>Stat</name>
        <briefdescription>
<para>Return the statistic object for this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="249" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1aac2d3c104b89109f3df4a9a8cad244da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>StatisticType &amp;</type>
        <definition>StatisticType&amp; Stat</definition>
        <argsstring>()</argsstring>
        <name>Stat</name>
        <briefdescription>
<para>Return the statistic object for this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="251" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="251" bodyend="251"/>
        <references refid="classmlpack_1_1tree_1_1SpillTree_1aa0f4813924e6cdee43b45050bb947abe">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::IsLeaf</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1a550caa440c5847505a0065dfe4c67724" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool HasSelfChildren</definition>
        <argsstring>()</argsstring>
        <name>HasSelfChildren</name>
        <briefdescription>
<para>Returns false: this tree type does not have self children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="435" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="435" bodyend="435"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1acfab898310b6a92010730e1113b64fd3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SplitNode</definition>
        <argsstring>(arma::Col&lt; size_t &gt; &amp;points, const size_t maxLeafSize, const double tau, const double rho)</argsstring>
        <name>SplitNode</name>
        <param>
          <type>arma::Col&lt; size_t &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tau</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <briefdescription>
<para>Splits the current node, assigning its left and right children recursively. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of indexes of points to be included in this node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of points held in a leaf. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>Overlapping size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rho</parametername>
</parameternamelist>
<parameterdescription>
<para>Balance threshold. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1ac8cd69ba3afa57a35d370db4b7a3f939" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SplitPoints</definition>
        <argsstring>(const double tau, const double rho, const arma::Col&lt; size_t &gt; &amp;points, arma::Col&lt; size_t &gt; &amp;leftPoints, arma::Col&lt; size_t &gt; &amp;rightPoints)</argsstring>
        <name>SplitPoints</name>
        <param>
          <type>const double</type>
          <declname>tau</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>const arma::Col&lt; size_t &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>arma::Col&lt; size_t &gt; &amp;</type>
          <declname>leftPoints</declname>
        </param>
        <param>
          <type>arma::Col&lt; size_t &gt; &amp;</type>
          <declname>rightPoints</declname>
        </param>
        <briefdescription>
<para>Split the list of points. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>Overlapping size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rho</parametername>
</parameternamelist>
<parameterdescription>
<para>Balance threshold. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of indexes of points to be included. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leftPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Indexes of points to be included in left child. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rightPoints</parametername>
</parameternamelist>
<parameterdescription>
<para>Indexes of points to be included in right child. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag to know if the overlapping buffer was included. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="464" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmlpack_1_1tree_1_1SpillTree_1afa475b761ce701406b530e35bf30e5d9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SpillTree</definition>
        <argsstring>()</argsstring>
        <name>SpillTree</name>
        <briefdescription>
<para>A default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>This is meant to only be used with cereal, which is allowed with the friend declaration below. This does not return a valid tree! The method must be protected, so that the serialization shim can work with the default constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="476" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1SpillTree_1a16e556777ca3125ab3cdc16aed9e7885" compoundref="spill__tree_2spill__tree_8hpp" startline="438" endline="438">SpillTree&lt; MetricType, StatisticType, MatType, HyperplaneType, SplitType &gt;::Center</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A hybrid spill tree is a variant of binary space trees in which the children of a node can &quot;spill over&quot; each other, and contain shared datapoints. </para>    </briefdescription>
    <detaileddescription>
<para>Two new separating planes lplane and rplane are defined, both of which are parallel to the original decision boundary and at a distance tau from it. The region between lplane and rplane is called &quot;overlapping buffer&quot;.</para><para>For each node, we first split the points considering the overlapping buffer. If either of its children contains more than rho fraction of the total points we undo the overlapping splitting. Instead a conventional partition is used. In this way, we can ensure that each split reduces the number of points of a node by at least a constant factor.</para><para>This particular tree does not allow growth, so you cannot add or delete nodes from it. If you need to add or delete a node, the better procedure is to rebuild the tree entirely.</para><para>Three runtime parameters are required in the constructor:<itemizedlist>
<listitem><para>maxLeafSize: Max leaf size to be used.</para></listitem><listitem><para>tau: Overlapping size.</para></listitem><listitem><para>rho: Balance threshold.</para></listitem></itemizedlist>
</para><para>For more information on spill trees, see</para><para><programlisting><codeline><highlight class="normal">@inproceedings{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author<sp/>=<sp/>{Ting<sp/>Liu,<sp/>Andrew<sp/>W.<sp/>Moore,<sp/>Alexander<sp/>Gray<sp/>and<sp/>Ke<sp/>Yang},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title<sp/>=<sp/>{An<sp/>Investigation<sp/>of<sp/>Practical<sp/>Approximate<sp/>Nearest<sp/>Neighbor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Algorithms},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>booktitle<sp/>=<sp/>{Advances<sp/>in<sp/>Neural<sp/>Information<sp/>Processing<sp/>Systems<sp/>17},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year<sp/>=<sp/>{2005},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages<sp/>=<sp/>{825--832}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MetricType</parametername>
</parameternamelist>
<parameterdescription>
<para>The metric used for tree-building. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StatisticType</parametername>
</parameternamelist>
<parameterdescription>
<para>Extra data contained in the node. See <ref refid="statistic_8hpp" kindref="compound">statistic.hpp</ref> for the necessary skeleton interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MatType</parametername>
</parameternamelist>
<parameterdescription>
<para>The dataset class. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HyperplaneType</parametername>
</parameternamelist>
<parameterdescription>
<para>The splitting hyperplane class. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SplitType</parametername>
</parameternamelist>
<parameterdescription>
<para>The class that partitions the dataset/points at a particular node into two parts. Its definition decides the way this split is done. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" line="74" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/spill_tree/spill_tree.hpp" bodystart="73" bodyend="487"/>
    <listofallmembers>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1aa8550f27ce7384c3d4846b94cd05d7ad" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>bound</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ad8aa68339c34c1ac00dc24012e2904ca" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Bound</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a10137711613ed872f3efef934e0ee069" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Bound</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1afb7ac4d7ba253be481b886d3ae52cf81" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>BoundType</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a16e556777ca3125ab3cdc16aed9e7885" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Center</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a2bd6ef4c06f38a780238a8dd74e590b5" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Child</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ae6b405ea3bdeaf218e90ebb324bd012b" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>ChildPtr</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a76d971a3c552bc58ba9f0d5fceae9806" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>count</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a829bf4b7b37982e2743e9d6452ebee43" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>dataset</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a4c3764c98d5804083a9ec2c867eb9366" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Dataset</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a1ed327205f09a5f798f411a41ed94ce3" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>DefeatistDualTreeTraverser</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a70567cc69a2425783765a87845ec9e03" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>DefeatistSingleTreeTraverser</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1aa732ea3eeb38529c549fd4d15d8655be" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Descendant</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a63f559cd634d9be24db5b041e74169db" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>DualTreeTraverser</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a227d0c7e23e98fcd6c81ecab357a791f" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>ElemType</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1abac6d3189ea06ff1b589cbf2e736568b" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>furthestDescendantDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1adc597088eadfcfa3060336d0484ab573" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>FurthestDescendantDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1acbe82a6439f71405b5801ca7d941cbfb" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>FurthestPointDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a0257281722537c7916db7763623f67f7" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>GetFurthestChild</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a12e43f9076ca004912461d442cf5158f" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>GetFurthestChild</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a19b9a5fd41d8e192b62effb1445bd410" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>GetNearestChild</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ae84607913e07294e74fe0f238af7abad" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>GetNearestChild</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a550caa440c5847505a0065dfe4c67724" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>HasSelfChildren</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a8634496d0672235fadbd9a9a47b2d344" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Hyperplane</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ae16d124345c715ba082bed007ee4e73f" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>hyperplane</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1aa0f4813924e6cdee43b45050bb947abe" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>IsLeaf</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a5834f622dd9f1f37597464ef06e008b1" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>left</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1aa843b534cdaa91d21da8da06233436e3" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Left</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a3791d521a3b192caee1551195af1a45b" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Left</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a45317126bc67aa54aa15296b4facd2b9" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>localDataset</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a57758caa2e58c3fe05d1284eeabae523" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Mat</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a750cfba0005bdde7bec9a0b38727e987" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>MaxDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ae764d88483236cc470f5abe0273df4c5" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>MaxDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Metric</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a11831de21b4ea2d02761cdd869efddee" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>MinDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a73bf99a433e88a31d98b46bf4c0da147" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>MinDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1afd64f326a495af18e10a5e71e7b02143" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>minimumBoundDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a20a4e92da6066eb335a576b7f9cd0415" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>MinimumBoundDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a1f7ec083be66d58a3e02e12956bf005e" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>NumChildren</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a2a85eb34222f1fc073940e8c89274e81" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>NumDescendants</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a352077c26368da0ee570c0b7f062b1e3" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>NumPoints</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ab792f299d368b4dd0e01cfd170f7d9b0" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>operator=</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a27764d50c5cd303dc3101957f7ee8672" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>operator=</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a3a882fb5101c0772a7e49762fac0ebd0" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Overlap</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a917687d852ae96692cc1dce1747f5a0f" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>overlappingNode</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ad6e9b41894c55bdbd47ad1858b33e1d4" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>parent</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a95f7cd8e2d7f028a2f0f409f3ab7d4b8" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Parent</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a1cbf92ac63899f610e6b4cd28008e7bf" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Parent</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a110be38965cb624d9e3b4d335f962806" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>parentDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1af44ed4e7bfea088689caed082da67e17" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>ParentDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1aa22ead21ac809efb970b90ec014dc318" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>ParentDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a559eede5ea60f68634f8e7e72c3c68d2" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Point</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a5e466c9f0b43af76aee34089941fbb93" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>pointsIndex</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1afeaa6c846c856693e5f73272b94bd8b8" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>RangeDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a60a550bf46aa1d7b858134ce41fd5a3a" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>RangeDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a0ae1963c14a3616a2cf170a29fccdf0c" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>right</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1af26c4d9ed44411f6d8de9a6186b53406" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Right</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ad165dc6342ee5b3bc02c90faa9d787ee" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Right</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ae95fd7c19ba7e882936c55b022384887" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>SingleTreeTraverser</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1af01ea5b8618874348c074c5cedfbfef6" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>SpillTree</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a5e77cfea45b36b3769f9b7f3883f3e82" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>SpillTree</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a949c2bc414a1e1c0b51b098d2c1be253" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>SpillTree</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1afb0f5c8da31c35c67546288cfa36efd5" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>SpillTree</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a0cc2e96cef9427b420d16439505cdb0b" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>SpillTree</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a907d16b2dbd703629792a929db296567" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>SpillTree</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1afa475b761ce701406b530e35bf30e5d9" prot="protected" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>SpillTree</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1acfab898310b6a92010730e1113b64fd3" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>SplitNode</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ac8cd69ba3afa57a35d370db4b7a3f939" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>SplitPoints</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1ad8b29c84ac793742cd15834f9f4c4f31" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Stat</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1aac2d3c104b89109f3df4a9a8cad244da" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>Stat</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a3bb6957cc0ee042b639ebc4b8b45fd37" prot="private" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>stat</name></member>
      <member refid="classmlpack_1_1tree_1_1SpillTree_1a61630a42d6ba37cb1b0f38126443795e" prot="public" virt="non-virtual"><scope>mlpack::tree::SpillTree</scope><name>~SpillTree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
