<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="prefixedoutstream_8hpp" kind="file" language="C++">
    <compoundname>prefixedoutstream.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <includes local="yes">prefixedoutstream_impl.hpp</includes>
    <incdepgraph>
      <node id="20893">
        <label>list</label>
      </node>
      <node id="20890">
        <label>atomic</label>
      </node>
      <node id="20880">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="20856">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="20892">
        <label>iomanip</label>
      </node>
      <node id="20865">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="20866" relation="include">
        </childnode>
        <childnode refid="20868" relation="include">
        </childnode>
      </node>
      <node id="20848">
        <label>cstdint</label>
      </node>
      <node id="20857">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="20864">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="20887">
        <label>arma_config.hpp</label>
      </node>
      <node id="20877">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="20844">
        <label>cmath</label>
      </node>
      <node id="20863">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="20852">
        <label>stdexcept</label>
      </node>
      <node id="20872">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="20857" relation="include">
        </childnode>
        <childnode refid="20859" relation="include">
        </childnode>
        <childnode refid="20860" relation="include">
        </childnode>
        <childnode refid="20858" relation="include">
        </childnode>
      </node>
      <node id="20896">
        <label>string</label>
      </node>
      <node id="20884">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="20885" relation="include">
        </childnode>
        <childnode refid="20851" relation="include">
        </childnode>
      </node>
      <node id="20894">
        <label>map</label>
      </node>
      <node id="20846">
        <label>cfloat</label>
      </node>
      <node id="20876">
        <label>boost/variant.hpp</label>
      </node>
      <node id="20900">
        <label>prefixedoutstream_impl.hpp</label>
      </node>
      <node id="20898">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="20860">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="20883">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="20884" relation="include">
        </childnode>
        <childnode refid="20860" relation="include">
        </childnode>
        <childnode refid="20867" relation="include">
        </childnode>
        <childnode refid="20885" relation="include">
        </childnode>
      </node>
      <node id="20873">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="20871">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="20857" relation="include">
        </childnode>
        <childnode refid="20859" relation="include">
        </childnode>
        <childnode refid="20860" relation="include">
        </childnode>
        <childnode refid="20858" relation="include">
        </childnode>
      </node>
      <node id="20874">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="20857" relation="include">
        </childnode>
        <childnode refid="20859" relation="include">
        </childnode>
        <childnode refid="20860" relation="include">
        </childnode>
        <childnode refid="20858" relation="include">
        </childnode>
      </node>
      <node id="20862">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="20882">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="20858" relation="include">
        </childnode>
        <childnode refid="20859" relation="include">
        </childnode>
        <childnode refid="20860" relation="include">
        </childnode>
        <childnode refid="20870" relation="include">
        </childnode>
        <childnode refid="20879" relation="include">
        </childnode>
      </node>
      <node id="20886">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="20887" relation="include">
        </childnode>
      </node>
      <node id="20888">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="20843">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="20844" relation="include">
        </childnode>
        <childnode refid="20845" relation="include">
        </childnode>
        <childnode refid="20846" relation="include">
        </childnode>
        <childnode refid="20847" relation="include">
        </childnode>
        <childnode refid="20848" relation="include">
        </childnode>
        <childnode refid="20849" relation="include">
        </childnode>
        <childnode refid="20850" relation="include">
        </childnode>
        <childnode refid="20851" relation="include">
        </childnode>
        <childnode refid="20852" relation="include">
        </childnode>
        <childnode refid="20853" relation="include">
        </childnode>
        <childnode refid="20854" relation="include">
        </childnode>
        <childnode refid="20855" relation="include">
        </childnode>
        <childnode refid="20856" relation="include">
        </childnode>
        <childnode refid="20857" relation="include">
        </childnode>
        <childnode refid="20858" relation="include">
        </childnode>
        <childnode refid="20859" relation="include">
        </childnode>
        <childnode refid="20860" relation="include">
        </childnode>
        <childnode refid="20861" relation="include">
        </childnode>
        <childnode refid="20862" relation="include">
        </childnode>
        <childnode refid="20863" relation="include">
        </childnode>
        <childnode refid="20864" relation="include">
        </childnode>
        <childnode refid="20865" relation="include">
        </childnode>
        <childnode refid="20869" relation="include">
        </childnode>
        <childnode refid="20870" relation="include">
        </childnode>
        <childnode refid="20871" relation="include">
        </childnode>
        <childnode refid="20872" relation="include">
        </childnode>
        <childnode refid="20873" relation="include">
        </childnode>
        <childnode refid="20874" relation="include">
        </childnode>
        <childnode refid="20875" relation="include">
        </childnode>
        <childnode refid="20881" relation="include">
        </childnode>
        <childnode refid="20882" relation="include">
        </childnode>
        <childnode refid="20879" relation="include">
        </childnode>
        <childnode refid="20883" relation="include">
        </childnode>
        <childnode refid="20886" relation="include">
        </childnode>
        <childnode refid="20888" relation="include">
        </childnode>
        <childnode refid="20889" relation="include">
        </childnode>
        <childnode refid="20898" relation="include">
        </childnode>
        <childnode refid="20899" relation="include">
        </childnode>
      </node>
      <node id="20849">
        <label>cstdio</label>
      </node>
      <node id="20853">
        <label>tuple</label>
      </node>
      <node id="20858">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="20875">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="20858" relation="include">
        </childnode>
        <childnode refid="20859" relation="include">
        </childnode>
        <childnode refid="20860" relation="include">
        </childnode>
        <childnode refid="20862" relation="include">
        </childnode>
        <childnode refid="20876" relation="include">
        </childnode>
        <childnode refid="20877" relation="include">
        </childnode>
        <childnode refid="20878" relation="include">
        </childnode>
        <childnode refid="20879" relation="include">
        </childnode>
      </node>
      <node id="20842">
        <label>/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp</label>
        <link refid="prefixedoutstream_8hpp"/>
        <childnode refid="20843" relation="include">
        </childnode>
        <childnode refid="20900" relation="include">
        </childnode>
      </node>
      <node id="20854">
        <label>utility</label>
      </node>
      <node id="20878">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="20869">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="20866">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="20867" relation="include">
        </childnode>
      </node>
      <node id="20889">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="20890" relation="include">
        </childnode>
        <childnode refid="20891" relation="include">
        </childnode>
        <childnode refid="20892" relation="include">
        </childnode>
        <childnode refid="20893" relation="include">
        </childnode>
        <childnode refid="20894" relation="include">
        </childnode>
        <childnode refid="20895" relation="include">
        </childnode>
        <childnode refid="20896" relation="include">
        </childnode>
        <childnode refid="20897" relation="include">
        </childnode>
      </node>
      <node id="20867">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="20881">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="20879" relation="include">
        </childnode>
        <childnode refid="20875" relation="include">
        </childnode>
        <childnode refid="20882" relation="include">
        </childnode>
      </node>
      <node id="20850">
        <label>cstdlib</label>
      </node>
      <node id="20845">
        <label>cctype</label>
      </node>
      <node id="20868">
        <label>unordered_map</label>
      </node>
      <node id="20847">
        <label>climits</label>
      </node>
      <node id="20895">
        <label>mutex</label>
      </node>
      <node id="20891">
        <label>chrono</label>
      </node>
      <node id="20899">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="20897">
        <label>thread</label>
      </node>
      <node id="20885">
        <label>type_traits</label>
      </node>
      <node id="20861">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="20855">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="20879">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="20857" relation="include">
        </childnode>
        <childnode refid="20858" relation="include">
        </childnode>
        <childnode refid="20859" relation="include">
        </childnode>
        <childnode refid="20860" relation="include">
        </childnode>
        <childnode refid="20880" relation="include">
        </childnode>
      </node>
      <node id="20851">
        <label>cstring</label>
      </node>
      <node id="20870">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="20859">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmlpack_1_1util_1_1PrefixedOutStream" prot="public">mlpack::util::PrefixedOutStream</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1util">mlpack::util</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin </para></simplesect>
<simplesect kind="author"><para>Matthew Amidon</para></simplesect>
Declaration of the PrefixedOutStream class.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#ifndef<sp/>MLPACK_CORE_UTIL_PREFIXEDOUTSTREAM_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_CORE_UTIL_PREFIXEDOUTSTREAM_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classmlpack_1_1util_1_1PrefixedOutStream" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60" refid="classmlpack_1_1util_1_1PrefixedOutStream_1a700972d87f6b85809b694bc1f747936d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a700972d87f6b85809b694bc1f747936d" kindref="member">PrefixedOutStream</ref>(std::ostream&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2defe63eb7e6955facd67869f63692c8" kindref="member">destination</ref>,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1afd382e0526bef760552ccae39559116a" kindref="member">ignoreInput</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fatal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1abb536618767706a6154fb1f159122eb2" kindref="member">backtrace</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>destination(destination),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1afd382e0526bef760552ccae39559116a" kindref="member">ignoreInput</ref>(<ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1afd382e0526bef760552ccae39559116a" kindref="member">ignoreInput</ref>),</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1abb536618767706a6154fb1f159122eb2" kindref="member">backtrace</ref>(<ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1abb536618767706a6154fb1f159122eb2" kindref="member">backtrace</ref>),</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prefix(prefix),</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>the<sp/>first<sp/>call<sp/>to<sp/>operator&lt;&lt;<sp/>to<sp/>prefix<sp/>the<sp/>prefix<sp/>so<sp/>we<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>carriageReturned<sp/>to<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>carriageReturned(true),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fatal(fatal)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>nothing<sp/>to<sp/>do<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>val);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(std::string&amp;<sp/>str);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(std::streambuf*<sp/>sb);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>(*pf)(std::ostream&amp;));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(std::ios&amp;<sp/>(*pf)(std::ios&amp;));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(std::ios_base&amp;<sp/>(*pf)(std::ios_base&amp;));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>s);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2defe63eb7e6955facd67869f63692c8" refkind="member"><highlight class="normal"><sp/><sp/>std::ostream&amp;<sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2defe63eb7e6955facd67869f63692c8" kindref="member">destination</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classmlpack_1_1util_1_1PrefixedOutStream_1afd382e0526bef760552ccae39559116a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1afd382e0526bef760552ccae39559116a" kindref="member">ignoreInput</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="classmlpack_1_1util_1_1PrefixedOutStream_1abb536618767706a6154fb1f159122eb2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1util_1_1PrefixedOutStream_1abb536618767706a6154fb1f159122eb2" kindref="member">backtrace</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!arma::is_arma_type&lt;T&gt;::value&gt;::type</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>BaseLogic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;arma::is_arma_type&lt;T&gt;::value&gt;::type</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>BaseLogic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrefixIfNeeded();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>std::string<sp/>prefix;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>carriageReturned;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fatal;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>util</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Template<sp/>definitions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;prefixedoutstream_impl.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp"/>
  </compounddef>
</doxygen>
