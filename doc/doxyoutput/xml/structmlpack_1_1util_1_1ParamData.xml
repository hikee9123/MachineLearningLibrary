<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structmlpack_1_1util_1_1ParamData" kind="struct" language="C++" prot="public">
    <compoundname>mlpack::util::ParamData</compoundname>
    <includes refid="param__data_8hpp" local="no">param_data.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structmlpack_1_1util_1_1ParamData_1a367d2c852ad5beb11758c57d8ece7316" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char alias</definition>
        <argsstring></argsstring>
        <name>alias</name>
        <briefdescription>
<para>Alias for this parameter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="63" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string cppType</definition>
        <argsstring></argsstring>
        <name>cppType</name>
        <briefdescription>
<para>The true name of the type, as it would be written in C++. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="81" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmlpack_1_1util_1_1ParamData_1a378e4473b8cd1fccf534804887f2bc85" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string desc</definition>
        <argsstring></argsstring>
        <name>desc</name>
        <briefdescription>
<para>Description of this parameter, if any. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="58" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmlpack_1_1util_1_1ParamData_1a8ababadb8dc64acf8792317844e562ba" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool input</definition>
        <argsstring></argsstring>
        <name>input</name>
        <briefdescription>
<para>True if this option is an input option (otherwise, it is output). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="73" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmlpack_1_1util_1_1ParamData_1a992c70a16169035bc9e2e8f9953d91ed" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool loaded</definition>
        <argsstring></argsstring>
        <name>loaded</name>
        <briefdescription>
<para>If this is an input parameter that needs extra loading, this indicates whether or not it has been loaded. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="76" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>Name of this parameter. </para>        </briefdescription>
        <detaileddescription>
<para>This is the name used for HasParam() and GetParam(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="56" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmlpack_1_1util_1_1ParamData_1a203e71e5671737f2e7d33147dd19f391" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool noTranspose</definition>
        <argsstring></argsstring>
        <name>noTranspose</name>
        <briefdescription>
<para>True if this is a matrix that should not be transposed. </para>        </briefdescription>
        <detaileddescription>
<para>Ignored if the parameter is not a matrix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="69" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool required</definition>
        <argsstring></argsstring>
        <name>required</name>
        <briefdescription>
<para>True if this option is required. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="71" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmlpack_1_1util_1_1ParamData_1a87a03c93b016f6878e3a0609835b426e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string tname</definition>
        <argsstring></argsstring>
        <name>tname</name>
        <briefdescription>
<para>Type information of this parameter. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this is <ref refid="param__data_8hpp_1ac909d914008cce49fa42ddd10b9b36c5" kindref="member">TYPENAME()</ref> of the user-visible parameter type, not whatever is given by ParameterType&lt;&gt;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="61" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" prot="public" static="no" mutable="no">
        <type>boost::any</type>
        <definition>boost::any value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
<para>The actual value that is held. </para>        </briefdescription>
        <detaileddescription>
<para>If the user has passed a different type, this may be a tuple containing multiple values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="79" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmlpack_1_1util_1_1ParamData_1a5afa034ef66e23047379bcba2eb70b8d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool wasPassed</definition>
        <argsstring></argsstring>
        <name>wasPassed</name>
        <briefdescription>
<para>True if the option was passed to the program. </para>        </briefdescription>
        <detaileddescription>
<para>Note that wasPassed may be set by either ParseCommandLine() or SetPassed(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="66" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This structure holds all of the information about a single parameter, including its value (which is set when ParseCommandLine() is called). </para>    </briefdescription>
    <detaileddescription>
<para>It does not hold any information about whether or not it was passed<mdash/>that is handled elsewhere. A <ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">ParamData</ref> struct is only useful in order to get &quot;static&quot; information about a parameter. Note that some parameter types have internal types but also different types that are used by CLI11 (specifically, matrix and model types map to strings).</para><para>This structure is somewhat unwieldy and is likely to be refactored at some point in the future, but for now it does the job fine. </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" line="53" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/param_data.hpp" bodystart="52" bodyend="82"/>
    <listofallmembers>
      <member refid="structmlpack_1_1util_1_1ParamData_1a367d2c852ad5beb11758c57d8ece7316" prot="public" virt="non-virtual"><scope>mlpack::util::ParamData</scope><name>alias</name></member>
      <member refid="structmlpack_1_1util_1_1ParamData_1ac31602a050d4b0bea81380c312d320b6" prot="public" virt="non-virtual"><scope>mlpack::util::ParamData</scope><name>cppType</name></member>
      <member refid="structmlpack_1_1util_1_1ParamData_1a378e4473b8cd1fccf534804887f2bc85" prot="public" virt="non-virtual"><scope>mlpack::util::ParamData</scope><name>desc</name></member>
      <member refid="structmlpack_1_1util_1_1ParamData_1a8ababadb8dc64acf8792317844e562ba" prot="public" virt="non-virtual"><scope>mlpack::util::ParamData</scope><name>input</name></member>
      <member refid="structmlpack_1_1util_1_1ParamData_1a992c70a16169035bc9e2e8f9953d91ed" prot="public" virt="non-virtual"><scope>mlpack::util::ParamData</scope><name>loaded</name></member>
      <member refid="structmlpack_1_1util_1_1ParamData_1a9b45b3e13bd9167aab02e17e08916231" prot="public" virt="non-virtual"><scope>mlpack::util::ParamData</scope><name>name</name></member>
      <member refid="structmlpack_1_1util_1_1ParamData_1a203e71e5671737f2e7d33147dd19f391" prot="public" virt="non-virtual"><scope>mlpack::util::ParamData</scope><name>noTranspose</name></member>
      <member refid="structmlpack_1_1util_1_1ParamData_1a89ebe0265f74c9919a622df7dccbfe5c" prot="public" virt="non-virtual"><scope>mlpack::util::ParamData</scope><name>required</name></member>
      <member refid="structmlpack_1_1util_1_1ParamData_1a87a03c93b016f6878e3a0609835b426e" prot="public" virt="non-virtual"><scope>mlpack::util::ParamData</scope><name>tname</name></member>
      <member refid="structmlpack_1_1util_1_1ParamData_1a5f3b0aadfd9d42a5574b7f3a0565cb52" prot="public" virt="non-virtual"><scope>mlpack::util::ParamData</scope><name>value</name></member>
      <member refid="structmlpack_1_1util_1_1ParamData_1a5afa034ef66e23047379bcba2eb70b8d" prot="public" virt="non-virtual"><scope>mlpack::util::ParamData</scope><name>wasPassed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
