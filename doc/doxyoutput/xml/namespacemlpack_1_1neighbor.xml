<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacemlpack_1_1neighbor" kind="namespace" language="C++">
    <compoundname>mlpack::neighbor</compoundname>
    <innerclass refid="classmlpack_1_1neighbor_1_1DrusillaSelect" prot="public">mlpack::neighbor::DrusillaSelect</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1FurthestNS" prot="public">mlpack::neighbor::FurthestNS</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1LeafSizeNSWrapper" prot="public">mlpack::neighbor::LeafSizeNSWrapper</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1LeafSizeRAWrapper" prot="public">mlpack::neighbor::LeafSizeRAWrapper</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1LSHSearch" prot="public">mlpack::neighbor::LSHSearch</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1NearestNS" prot="public">mlpack::neighbor::NearestNS</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1NeighborSearch" prot="public">mlpack::neighbor::NeighborSearch</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1NeighborSearchRules" prot="public">mlpack::neighbor::NeighborSearchRules</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1NeighborSearchStat" prot="public">mlpack::neighbor::NeighborSearchStat</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1NSModel" prot="public">mlpack::neighbor::NSModel</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1NSWrapper" prot="public">mlpack::neighbor::NSWrapper</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1NSWrapperBase" prot="public">mlpack::neighbor::NSWrapperBase</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1QDAFN" prot="public">mlpack::neighbor::QDAFN</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1RAModel" prot="public">mlpack::neighbor::RAModel</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1RAQueryStat" prot="public">mlpack::neighbor::RAQueryStat</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1RASearch" prot="public">mlpack::neighbor::RASearch</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1RASearchRules" prot="public">mlpack::neighbor::RASearchRules</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1RAUtil" prot="public">mlpack::neighbor::RAUtil</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1RAWrapper" prot="public">mlpack::neighbor::RAWrapper</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1RAWrapperBase" prot="public">mlpack::neighbor::RAWrapperBase</innerclass>
    <innerclass refid="classmlpack_1_1neighbor_1_1SpillNSWrapper" prot="public">mlpack::neighbor::SpillNSWrapper</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacemlpack_1_1neighbor_1a1a65d2ce978562ab36affdc59938ef15" prot="public" static="no">
        <name>NeighborSearchMode</name>
        <enumvalue id="namespacemlpack_1_1neighbor_1a1a65d2ce978562ab36affdc59938ef15a84b6e9858a8a0186de25e6ac1b95fce9" prot="public">
          <name>NAIVE_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemlpack_1_1neighbor_1a1a65d2ce978562ab36affdc59938ef15a4963da1562f5c21be0ed6f3b4e438f12" prot="public">
          <name>SINGLE_TREE_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemlpack_1_1neighbor_1a1a65d2ce978562ab36affdc59938ef15a902f8ca27975735ab2151d26152c6d2a" prot="public">
          <name>DUAL_TREE_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacemlpack_1_1neighbor_1a1a65d2ce978562ab36affdc59938ef15a21392e2b53181ee5d4d3402fba104846" prot="public">
          <name>GREEDY_SINGLE_TREE_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NeighborSearchMode represents the different neighbor search modes available. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/neighbor_search.hpp" line="44" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/neighbor_search.hpp" bodystart="43" bodyend="49"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacemlpack_1_1neighbor_1afbd38e2fcbd26067f08c2e5cabbcb232" prot="public" static="no">
        <type><ref refid="classmlpack_1_1neighbor_1_1NeighborSearch" kindref="compound">NeighborSearch</ref>&lt; <ref refid="namespacemlpack_1_1neighbor_1af3f11fce33c041aa26b1c91107f71b0f" kindref="member">NearestNeighborSort</ref>, <ref refid="namespacemlpack_1_1metric_1a0306f114fdf32dcdfa8f015408cfc37d" kindref="member">metric::EuclideanDistance</ref>, arma::mat, TreeType, TreeType&lt; <ref refid="namespacemlpack_1_1metric_1a0306f114fdf32dcdfa8f015408cfc37d" kindref="member">metric::EuclideanDistance</ref>, <ref refid="classmlpack_1_1neighbor_1_1NeighborSearchStat" kindref="compound">NeighborSearchStat</ref>&lt; <ref refid="namespacemlpack_1_1neighbor_1af3f11fce33c041aa26b1c91107f71b0f" kindref="member">NearestNeighborSort</ref> &gt;, arma::mat &gt;::template DefeatistDualTreeTraverser, TreeType&lt; <ref refid="namespacemlpack_1_1metric_1a0306f114fdf32dcdfa8f015408cfc37d" kindref="member">metric::EuclideanDistance</ref>, <ref refid="classmlpack_1_1neighbor_1_1NeighborSearchStat" kindref="compound">NeighborSearchStat</ref>&lt; <ref refid="namespacemlpack_1_1neighbor_1af3f11fce33c041aa26b1c91107f71b0f" kindref="member">NearestNeighborSort</ref> &gt;, arma::mat &gt;::template DefeatistSingleTreeTraverser &gt;</type>
        <definition>using DefeatistKNN =  NeighborSearch&lt; NearestNeighborSort, metric::EuclideanDistance, arma::mat, TreeType, TreeType&lt;metric::EuclideanDistance, NeighborSearchStat&lt;NearestNeighborSort&gt;, arma::mat&gt;::template DefeatistDualTreeTraverser, TreeType&lt;metric::EuclideanDistance, NeighborSearchStat&lt;NearestNeighborSort&gt;, arma::mat&gt;::template DefeatistSingleTreeTraverser&gt;</definition>
        <argsstring></argsstring>
        <name>DefeatistKNN</name>
        <briefdescription>
<para>The DefeatistKNN class is the k-nearest-neighbors method considering defeatist search. </para>        </briefdescription>
        <detaileddescription>
<para>It returns L2 distances (Euclidean distances) for each of the k nearest neighbors found. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TreeType</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree type to use; must adhere to the TreeType API, and implement Defeatist Traversers. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/typedef.hpp" line="50" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/typedef.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacemlpack_1_1neighbor_1a690bbbab38fc719071a5c019acd2f947" prot="public" static="no">
        <type><ref refid="classmlpack_1_1neighbor_1_1FurthestNS" kindref="compound">FurthestNS</ref></type>
        <definition>using FurthestNeighborSort =  FurthestNS</definition>
        <argsstring></argsstring>
        <name>FurthestNeighborSort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/sort_policies/furthest_neighbor_sort.hpp" line="201" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/sort_policies/furthest_neighbor_sort.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacemlpack_1_1neighbor_1abfddff6c92a37aaa0b80d2193ccd71da" prot="public" static="no">
        <type><ref refid="classmlpack_1_1neighbor_1_1NeighborSearch" kindref="compound">NeighborSearch</ref>&lt; <ref refid="namespacemlpack_1_1neighbor_1a690bbbab38fc719071a5c019acd2f947" kindref="member">FurthestNeighborSort</ref>, <ref refid="namespacemlpack_1_1metric_1a0306f114fdf32dcdfa8f015408cfc37d" kindref="member">metric::EuclideanDistance</ref> &gt;</type>
        <definition>typedef NeighborSearch&lt;FurthestNeighborSort, metric::EuclideanDistance&gt; KFN</definition>
        <argsstring></argsstring>
        <name>KFN</name>
        <briefdescription>
<para>The KFN class is the k-furthest-neighbors method. </para>        </briefdescription>
        <detaileddescription>
<para>It returns L2 distances (Euclidean distances) for each of the k furthest neighbors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/typedef.hpp" line="38" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/typedef.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacemlpack_1_1neighbor_1ac8d70069e8acb12c5ba9a8536ae6ace4" prot="public" static="no">
        <type><ref refid="classmlpack_1_1neighbor_1_1NeighborSearch" kindref="compound">NeighborSearch</ref>&lt; <ref refid="namespacemlpack_1_1neighbor_1af3f11fce33c041aa26b1c91107f71b0f" kindref="member">NearestNeighborSort</ref>, <ref refid="namespacemlpack_1_1metric_1a0306f114fdf32dcdfa8f015408cfc37d" kindref="member">metric::EuclideanDistance</ref> &gt;</type>
        <definition>typedef NeighborSearch&lt;NearestNeighborSort, metric::EuclideanDistance&gt; KNN</definition>
        <argsstring></argsstring>
        <name>KNN</name>
        <briefdescription>
<para>The KNN class is the k-nearest-neighbors method. </para>        </briefdescription>
        <detaileddescription>
<para>It returns L2 distances (Euclidean distances) for each of the k nearest neighbors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/typedef.hpp" line="32" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/typedef.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacemlpack_1_1neighbor_1ad9d67c2e8bcffa41c9be915d6face6f8" prot="public" static="no">
        <type><ref refid="classmlpack_1_1neighbor_1_1RASearch" kindref="compound">RASearch</ref>&lt; <ref refid="namespacemlpack_1_1neighbor_1a690bbbab38fc719071a5c019acd2f947" kindref="member">FurthestNeighborSort</ref> &gt;</type>
        <definition>typedef RASearch&lt;FurthestNeighborSort&gt; KRAFN</definition>
        <argsstring></argsstring>
        <name>KRAFN</name>
        <briefdescription>
<para>The KRAFN class is the k-rank-approximate-farthest-neighbors method. </para>        </briefdescription>
        <detaileddescription>
<para>It returns L2 distances for each of the k rank-approximate farthest-neighbors.</para><para>The approximation is controlled with two parameters (see allkrann_main.cpp) which can be specified at search time. So the tree building is done only once while the search can be performed multiple times with different approximation levels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_typedef.hpp" line="47" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_typedef.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacemlpack_1_1neighbor_1aa72b1c4d0ff59f61a03c7b263a6a02d8" prot="public" static="no">
        <type><ref refid="classmlpack_1_1neighbor_1_1RASearch" kindref="compound">RASearch</ref></type>
        <definition>typedef RASearch KRANN</definition>
        <argsstring></argsstring>
        <name>KRANN</name>
        <briefdescription>
<para>The KRANN class is the k-rank-approximate-nearest-neighbors method. </para>        </briefdescription>
        <detaileddescription>
<para>It returns L2 distances for each of the k rank-approximate nearest-neighbors.</para><para>The approximation is controlled with two parameters (see allkrann_main.cpp) which can be specified at search time. So the tree building is done only once while the search can be performed multiple times with different approximation levels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_typedef.hpp" line="36" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_typedef.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacemlpack_1_1neighbor_1af3f11fce33c041aa26b1c91107f71b0f" prot="public" static="no">
        <type><ref refid="classmlpack_1_1neighbor_1_1NearestNS" kindref="compound">NearestNS</ref></type>
        <definition>using NearestNeighborSort =  NearestNS</definition>
        <argsstring></argsstring>
        <name>NearestNeighborSort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/sort_policies/nearest_neighbor_sort.hpp" line="200" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/sort_policies/nearest_neighbor_sort.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacemlpack_1_1neighbor_1a8145bada084a13663f9e7707f91db6ff" prot="public" static="no">
        <type><ref refid="namespacemlpack_1_1neighbor_1afbd38e2fcbd26067f08c2e5cabbcb232" kindref="member">DefeatistKNN</ref>&lt; <ref refid="namespacemlpack_1_1tree_1af141bd85a0c63728935fff9f5f8dd587" kindref="member">tree::SPTree</ref> &gt;</type>
        <definition>typedef DefeatistKNN&lt;tree::SPTree&gt; SpillKNN</definition>
        <argsstring></argsstring>
        <name>SpillKNN</name>
        <briefdescription>
<para>The SpillKNN class is the k-nearest-neighbors method considering defeatist search on SPTree. </para>        </briefdescription>
        <detaileddescription>
<para>It returns L2 distances (Euclidean distances) for each of the k nearest neighbors found. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/typedef.hpp" line="67" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/typedef.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacemlpack_1_1neighbor_1a841bafc12b36517208ff283b095dec2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::neighbor::Unmap</definition>
        <argsstring>(const arma::Mat&lt; size_t &gt; &amp;neighbors, const arma::mat &amp;distances, const std::vector&lt; size_t &gt; &amp;referenceMap, const std::vector&lt; size_t &gt; &amp;queryMap, arma::Mat&lt; size_t &gt; &amp;neighborsOut, arma::mat &amp;distancesOut, const bool squareRoot=false)</argsstring>
        <name>Unmap</name>
        <param>
          <type>const arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>neighbors</declname>
        </param>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>referenceMap</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>queryMap</declname>
        </param>
        <param>
          <type>arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>neighborsOut</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>distancesOut</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>squareRoot</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Assuming that the datasets have been mapped using the referenceMap and the queryMap (such as during kd-tree construction), unmap the columns of the distances and neighbors matrices into neighborsOut and distancesOut, and also unmap the entries in each row of neighbors. </para>        </briefdescription>
        <detaileddescription>
<para>This is useful for the dual-tree case.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>neighbors</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of neighbors resulting from neighbor search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of distances resulting from neighbor search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Mapping of reference set to old points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queryMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Mapping of query set to old points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighborsOut</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to store unmapped neighbors into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distancesOut</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to store unmapped distances into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>squareRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, take the square root of the distances. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/unmap.hpp" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1_1neighbor_1acc225558031fe27e3336544c50dd642d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::neighbor::Unmap</definition>
        <argsstring>(const arma::Mat&lt; size_t &gt; &amp;neighbors, const arma::mat &amp;distances, const std::vector&lt; size_t &gt; &amp;referenceMap, arma::Mat&lt; size_t &gt; &amp;neighborsOut, arma::mat &amp;distancesOut, const bool squareRoot=false)</argsstring>
        <name>Unmap</name>
        <param>
          <type>const arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>neighbors</declname>
        </param>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>const std::vector&lt; size_t &gt; &amp;</type>
          <declname>referenceMap</declname>
        </param>
        <param>
          <type>arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>neighborsOut</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>distancesOut</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>squareRoot</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Assuming that the datasets have been mapped using referenceMap (such as during kd-tree construction), unmap the columns of the distances and neighbors matrices into neighborsOut and distancesOut, and also unmap the entries in each row of neighbors. </para>        </briefdescription>
        <detaileddescription>
<para>This is useful for the single-tree case.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>neighbors</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of neighbors resulting from neighbor search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of distances resulting from neighbor search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceMap</parametername>
</parameternamelist>
<parameterdescription>
<para>Mapping of reference set to old points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighborsOut</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to store unmapped neighbors into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distancesOut</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to store unmapped distances into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>squareRoot</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, take the square root of the distances. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/neighbor_search/unmap.hpp" line="56" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/approx_kfn/drusilla_select.hpp" line="36" column="1"/>
  </compounddef>
</doxygen>
