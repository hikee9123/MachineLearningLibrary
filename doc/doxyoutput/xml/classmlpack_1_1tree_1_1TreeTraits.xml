<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1tree_1_1TreeTraits" kind="class" language="C++" prot="public">
    <compoundname>mlpack::tree::TreeTraits</compoundname>
    <includes refid="tree__traits_8hpp" local="no">tree_traits.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename TreeType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1TreeTraits_1ae435fd522971cd7cfd3064636aad08f8" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool BinaryTree</definition>
        <argsstring></argsstring>
        <name>BinaryTree</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>This is true if the tree always has only two children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" line="110" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1TreeTraits_1a74d33aa1842a86c50e913427bce29f04" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool FirstPointIsCentroid</definition>
        <argsstring></argsstring>
        <name>FirstPointIsCentroid</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>This is true if the first point of each node is the centroid of its bound. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" line="94" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1TreeTraits_1af080c27547c6b45c37173e0df36d63be" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool HasDuplicatedPoints</definition>
        <argsstring></argsstring>
        <name>HasDuplicatedPoints</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>This is true if a point can be included in more than one node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" line="89" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1TreeTraits_1aace4b7477b18c336612f4f4d3046eb37" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool HasOverlappingChildren</definition>
        <argsstring></argsstring>
        <name>HasOverlappingChildren</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>This is true if the subspaces represented by the children of a node can overlap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" line="84" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1TreeTraits_1ad3cb9cb573f3b0e51f99664fb8d29fef" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool HasSelfChildren</definition>
        <argsstring></argsstring>
        <name>HasSelfChildren</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>This is true if the points contained in the first child of a node (Child(0)) are also contained in that node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" line="100" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1TreeTraits_1aba7aca795787a6fe3e8bbdae13edc70b" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool RearrangesDataset</definition>
        <argsstring></argsstring>
        <name>RearrangesDataset</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>This is true if the tree rearranges points in the dataset when it is built. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" line="105" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1TreeTraits_1a416bd78d7883fd5c3bc22b858f7d7064" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool UniqueNumDescendants</definition>
        <argsstring></argsstring>
        <name>UniqueNumDescendants</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>This is true if the NumDescendants() method doesn&apos;t include duplicated points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" line="116" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classmlpack_1_1tree_1_1TreeTraits" kindref="compound">TreeTraits</ref> class provides compile-time information on the characteristics of a given tree type. </para>    </briefdescription>
    <detaileddescription>
<para>These include traits such as whether or not a node knows the distance to its parent node, or whether or not the subspaces represented by children can overlap.</para><para>These traits can be used for static compile-time optimization:</para><para><programlisting><codeline><highlight class="normal">//<sp/>This<sp/>if<sp/>statement<sp/>will<sp/>be<sp/>optimized<sp/>out<sp/>at<sp/>compile<sp/>time!</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(TreeTraits&lt;TreeType&gt;::HasOverlappingChildren<sp/>==<sp/>false)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>a<sp/>simpler<sp/>computation<sp/>because<sp/>no<sp/>children<sp/>overlap.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>the<sp/>full,<sp/>complex<sp/>calculation.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The traits can also be used in conjunction with SFINAE to write specialized versions of functions:</para><para><programlisting><codeline><highlight class="normal">template&lt;typename<sp/>TreeType&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Compute(TreeType&amp;<sp/>node,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::enable_if_t&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TreeTraits&lt;TreeType&gt;::RearrangesDataset&gt;*)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Computation<sp/>where<sp/>special<sp/>dataset-rearranging<sp/>tree<sp/>constructor<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>called.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>TreeType&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Compute(TreeType&amp;<sp/>node,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::enable_if_t&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!TreeTraits&lt;TreeType&gt;::RearrangesDataset&gt;*)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Computation<sp/>where<sp/>normal<sp/>tree<sp/>constructor<sp/>is<sp/>called.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>In those two examples, the <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t&lt;&gt;</ref> class takes a boolean template parameter which allows that function to be called when the boolean is true.</para><para>Each trait must be a static const value and not a function; only const values can be used as template parameters (or constexprs can be used too). By default (the unspecialized implementation of <ref refid="classmlpack_1_1tree_1_1TreeTraits" kindref="compound">TreeTraits</ref>), each parameter is set to make as few assumptions about the tree as possible; so, even if <ref refid="classmlpack_1_1tree_1_1TreeTraits" kindref="compound">TreeTraits</ref> is not specialized for a particular tree type, tree-based algorithms should still work.</para><para>When you write your own tree, you must specialize the <ref refid="classmlpack_1_1tree_1_1TreeTraits" kindref="compound">TreeTraits</ref> class to your tree type and set the corresponding values appropriately. See <ref refid="binary__space__tree_2traits_8hpp" kindref="compound">mlpack/core/tree/binary_space_tree/traits.hpp</ref> for an example. </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" line="78" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/tree_traits.hpp" bodystart="77" bodyend="117"/>
    <listofallmembers>
      <member refid="classmlpack_1_1tree_1_1TreeTraits_1ae435fd522971cd7cfd3064636aad08f8" prot="public" virt="non-virtual"><scope>mlpack::tree::TreeTraits</scope><name>BinaryTree</name></member>
      <member refid="classmlpack_1_1tree_1_1TreeTraits_1a74d33aa1842a86c50e913427bce29f04" prot="public" virt="non-virtual"><scope>mlpack::tree::TreeTraits</scope><name>FirstPointIsCentroid</name></member>
      <member refid="classmlpack_1_1tree_1_1TreeTraits_1af080c27547c6b45c37173e0df36d63be" prot="public" virt="non-virtual"><scope>mlpack::tree::TreeTraits</scope><name>HasDuplicatedPoints</name></member>
      <member refid="classmlpack_1_1tree_1_1TreeTraits_1aace4b7477b18c336612f4f4d3046eb37" prot="public" virt="non-virtual"><scope>mlpack::tree::TreeTraits</scope><name>HasOverlappingChildren</name></member>
      <member refid="classmlpack_1_1tree_1_1TreeTraits_1ad3cb9cb573f3b0e51f99664fb8d29fef" prot="public" virt="non-virtual"><scope>mlpack::tree::TreeTraits</scope><name>HasSelfChildren</name></member>
      <member refid="classmlpack_1_1tree_1_1TreeTraits_1aba7aca795787a6fe3e8bbdae13edc70b" prot="public" virt="non-virtual"><scope>mlpack::tree::TreeTraits</scope><name>RearrangesDataset</name></member>
      <member refid="classmlpack_1_1tree_1_1TreeTraits_1a416bd78d7883fd5c3bc22b858f7d7064" prot="public" virt="non-virtual"><scope>mlpack::tree::TreeTraits</scope><name>UniqueNumDescendants</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
