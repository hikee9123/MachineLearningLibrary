<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="binary__numeric__split_8hpp" kind="file" language="C++">
    <compoundname>binary_numeric_split.hpp</compoundname>
    <includes refid="binary__numeric__split__info_8hpp" local="yes">binary_numeric_split_info.hpp</includes>
    <includes local="yes">binary_numeric_split_impl.hpp</includes>
    <includedby refid="hoeffding__tree__model_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/hoeffding_tree_model.hpp</includedby>
    <incdepgraph>
      <node id="50653">
        <label>list</label>
      </node>
      <node id="50650">
        <label>atomic</label>
      </node>
      <node id="50640">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="50616">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="50652">
        <label>iomanip</label>
      </node>
      <node id="50625">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="50626" relation="include">
        </childnode>
        <childnode refid="50628" relation="include">
        </childnode>
      </node>
      <node id="50608">
        <label>cstdint</label>
      </node>
      <node id="50617">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="50624">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="50660">
        <label>binary_numeric_split_impl.hpp</label>
      </node>
      <node id="50647">
        <label>arma_config.hpp</label>
      </node>
      <node id="50637">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="50604">
        <label>cmath</label>
      </node>
      <node id="50623">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="50612">
        <label>stdexcept</label>
      </node>
      <node id="50632">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="50617" relation="include">
        </childnode>
        <childnode refid="50619" relation="include">
        </childnode>
        <childnode refid="50620" relation="include">
        </childnode>
        <childnode refid="50618" relation="include">
        </childnode>
      </node>
      <node id="50656">
        <label>string</label>
      </node>
      <node id="50644">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="50645" relation="include">
        </childnode>
        <childnode refid="50611" relation="include">
        </childnode>
      </node>
      <node id="50654">
        <label>map</label>
      </node>
      <node id="50606">
        <label>cfloat</label>
      </node>
      <node id="50636">
        <label>boost/variant.hpp</label>
      </node>
      <node id="50658">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="50620">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="50643">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="50644" relation="include">
        </childnode>
        <childnode refid="50620" relation="include">
        </childnode>
        <childnode refid="50627" relation="include">
        </childnode>
        <childnode refid="50645" relation="include">
        </childnode>
      </node>
      <node id="50633">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="50631">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="50617" relation="include">
        </childnode>
        <childnode refid="50619" relation="include">
        </childnode>
        <childnode refid="50620" relation="include">
        </childnode>
        <childnode refid="50618" relation="include">
        </childnode>
      </node>
      <node id="50634">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="50617" relation="include">
        </childnode>
        <childnode refid="50619" relation="include">
        </childnode>
        <childnode refid="50620" relation="include">
        </childnode>
        <childnode refid="50618" relation="include">
        </childnode>
      </node>
      <node id="50622">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="50642">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="50618" relation="include">
        </childnode>
        <childnode refid="50619" relation="include">
        </childnode>
        <childnode refid="50620" relation="include">
        </childnode>
        <childnode refid="50630" relation="include">
        </childnode>
        <childnode refid="50639" relation="include">
        </childnode>
      </node>
      <node id="50646">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="50647" relation="include">
        </childnode>
      </node>
      <node id="50648">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="50603">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="50604" relation="include">
        </childnode>
        <childnode refid="50605" relation="include">
        </childnode>
        <childnode refid="50606" relation="include">
        </childnode>
        <childnode refid="50607" relation="include">
        </childnode>
        <childnode refid="50608" relation="include">
        </childnode>
        <childnode refid="50609" relation="include">
        </childnode>
        <childnode refid="50610" relation="include">
        </childnode>
        <childnode refid="50611" relation="include">
        </childnode>
        <childnode refid="50612" relation="include">
        </childnode>
        <childnode refid="50613" relation="include">
        </childnode>
        <childnode refid="50614" relation="include">
        </childnode>
        <childnode refid="50615" relation="include">
        </childnode>
        <childnode refid="50616" relation="include">
        </childnode>
        <childnode refid="50617" relation="include">
        </childnode>
        <childnode refid="50618" relation="include">
        </childnode>
        <childnode refid="50619" relation="include">
        </childnode>
        <childnode refid="50620" relation="include">
        </childnode>
        <childnode refid="50621" relation="include">
        </childnode>
        <childnode refid="50622" relation="include">
        </childnode>
        <childnode refid="50623" relation="include">
        </childnode>
        <childnode refid="50624" relation="include">
        </childnode>
        <childnode refid="50625" relation="include">
        </childnode>
        <childnode refid="50629" relation="include">
        </childnode>
        <childnode refid="50630" relation="include">
        </childnode>
        <childnode refid="50631" relation="include">
        </childnode>
        <childnode refid="50632" relation="include">
        </childnode>
        <childnode refid="50633" relation="include">
        </childnode>
        <childnode refid="50634" relation="include">
        </childnode>
        <childnode refid="50635" relation="include">
        </childnode>
        <childnode refid="50641" relation="include">
        </childnode>
        <childnode refid="50642" relation="include">
        </childnode>
        <childnode refid="50639" relation="include">
        </childnode>
        <childnode refid="50643" relation="include">
        </childnode>
        <childnode refid="50646" relation="include">
        </childnode>
        <childnode refid="50648" relation="include">
        </childnode>
        <childnode refid="50649" relation="include">
        </childnode>
        <childnode refid="50658" relation="include">
        </childnode>
        <childnode refid="50659" relation="include">
        </childnode>
      </node>
      <node id="50609">
        <label>cstdio</label>
      </node>
      <node id="50613">
        <label>tuple</label>
      </node>
      <node id="50618">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="50635">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="50618" relation="include">
        </childnode>
        <childnode refid="50619" relation="include">
        </childnode>
        <childnode refid="50620" relation="include">
        </childnode>
        <childnode refid="50622" relation="include">
        </childnode>
        <childnode refid="50636" relation="include">
        </childnode>
        <childnode refid="50637" relation="include">
        </childnode>
        <childnode refid="50638" relation="include">
        </childnode>
        <childnode refid="50639" relation="include">
        </childnode>
      </node>
      <node id="50614">
        <label>utility</label>
      </node>
      <node id="50638">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="50629">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="50626">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="50627" relation="include">
        </childnode>
      </node>
      <node id="50649">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="50650" relation="include">
        </childnode>
        <childnode refid="50651" relation="include">
        </childnode>
        <childnode refid="50652" relation="include">
        </childnode>
        <childnode refid="50653" relation="include">
        </childnode>
        <childnode refid="50654" relation="include">
        </childnode>
        <childnode refid="50655" relation="include">
        </childnode>
        <childnode refid="50656" relation="include">
        </childnode>
        <childnode refid="50657" relation="include">
        </childnode>
      </node>
      <node id="50627">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="50641">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="50639" relation="include">
        </childnode>
        <childnode refid="50635" relation="include">
        </childnode>
        <childnode refid="50642" relation="include">
        </childnode>
      </node>
      <node id="50601">
        <label>/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/binary_numeric_split.hpp</label>
        <link refid="binary__numeric__split_8hpp"/>
        <childnode refid="50602" relation="include">
        </childnode>
        <childnode refid="50660" relation="include">
        </childnode>
      </node>
      <node id="50610">
        <label>cstdlib</label>
      </node>
      <node id="50605">
        <label>cctype</label>
      </node>
      <node id="50628">
        <label>unordered_map</label>
      </node>
      <node id="50607">
        <label>climits</label>
      </node>
      <node id="50655">
        <label>mutex</label>
      </node>
      <node id="50651">
        <label>chrono</label>
      </node>
      <node id="50602">
        <label>binary_numeric_split_info.hpp</label>
        <link refid="binary__numeric__split__info_8hpp"/>
        <childnode refid="50603" relation="include">
        </childnode>
      </node>
      <node id="50659">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="50657">
        <label>thread</label>
      </node>
      <node id="50645">
        <label>type_traits</label>
      </node>
      <node id="50621">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="50615">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="50639">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="50617" relation="include">
        </childnode>
        <childnode refid="50618" relation="include">
        </childnode>
        <childnode refid="50619" relation="include">
        </childnode>
        <childnode refid="50620" relation="include">
        </childnode>
        <childnode refid="50640" relation="include">
        </childnode>
      </node>
      <node id="50611">
        <label>cstring</label>
      </node>
      <node id="50630">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="50619">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="50661">
        <label>/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/binary_numeric_split.hpp</label>
        <link refid="binary__numeric__split_8hpp"/>
        <childnode refid="50662" relation="include">
        </childnode>
      </node>
      <node id="50662">
        <label>/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/hoeffding_tree_model.hpp</label>
        <link refid="hoeffding__tree__model_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmlpack_1_1tree_1_1BinaryNumericSplit" prot="public">mlpack::tree::BinaryNumericSplit</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1tree">mlpack::tree</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin</para></simplesect>
An implementation of the binary-tree-based numeric splitting procedure described by Gama, Rocha, and Medas in their KDD 2003 paper.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#ifndef<sp/>MLPACK_METHODS_HOEFFDING_SPLIT_BINARY_NUMERIC_SPLIT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_METHODS_HOEFFDING_SPLIT_BINARY_NUMERIC_SPLIT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="binary__numeric__split__info_8hpp" kindref="compound">binary_numeric_split_info.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tree<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FitnessFunction,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ObservationType<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="47" refid="classmlpack_1_1tree_1_1BinaryNumericSplit" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit" kindref="compound">BinaryNumericSplit</ref></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="51" refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1aef8eaa3db891d05ca25d008e036b316f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplitInfo" kindref="compound">BinaryNumericSplitInfo&lt;ObservationType&gt;</ref><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1aef8eaa3db891d05ca25d008e036b316f" kindref="member">SplitInfo</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1a29e8da5da497548c3aea17d8ec3b48f9" kindref="member">BinaryNumericSplit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numClasses<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1a29e8da5da497548c3aea17d8ec3b48f9" kindref="member">BinaryNumericSplit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numClasses,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit" kindref="compound">BinaryNumericSplit</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1a4c204ab8547c9493c8c3cca15131e9c5" kindref="member">Train</ref>(ObservationType<sp/>value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>label);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1afe419c8ff831af9ea91047e3de487609" kindref="member">EvaluateFitnessFunction</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>bestFitness,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>secondBestFitness);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>number<sp/>of<sp/>children<sp/>if<sp/>this<sp/>node<sp/>were<sp/>to<sp/>split<sp/>on<sp/>this<sp/>feature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1a1f7ec083be66d58a3e02e12956bf005e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1a1f7ec083be66d58a3e02e12956bf005e" kindref="member">NumChildren</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1a12faa9838c740b8383130fee17c108b6" kindref="member">Split</ref>(arma::Col&lt;size_t&gt;&amp;<sp/>childMajorities,<sp/>SplitInfo&amp;<sp/>splitInfo);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1a2fbf818eb68075c92655a22904b7ee1a" kindref="member">MajorityClass</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1a68e5f5a4d8c6194482a83440619be83b" kindref="member">MajorityProbability</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit_1a65cba07328997659bec80b9879b15a51" kindref="member">serialize</ref>(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="comment">/*<sp/>version<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>std::multimap&lt;ObservationType,<sp/>size_t&gt;<sp/>sortedElements;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>arma::Col&lt;size_t&gt;<sp/>classCounts;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>ObservationType<sp/>bestSplit;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAccurate;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">};</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convenience<sp/>typedef.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FitnessFunction&gt;</highlight></codeline>
<codeline lineno="128" refid="namespacemlpack_1_1tree_1aa1c709206789f8ef16cf826bf965498e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit" kindref="compound">BinaryDoubleNumericSplit</ref><sp/>=<sp/><ref refid="classmlpack_1_1tree_1_1BinaryNumericSplit" kindref="compound">BinaryNumericSplit&lt;FitnessFunction, double&gt;</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;binary_numeric_split_impl.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/binary_numeric_split.hpp"/>
  </compounddef>
</doxygen>
