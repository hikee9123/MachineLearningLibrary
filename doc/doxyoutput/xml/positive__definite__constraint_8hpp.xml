<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="positive__definite__constraint_8hpp" kind="file" language="C++">
    <compoundname>positive_definite_constraint.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <includedby refid="em__fit_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp</includedby>
    <incdepgraph>
      <node id="48784">
        <label>list</label>
      </node>
      <node id="48781">
        <label>atomic</label>
      </node>
      <node id="48771">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="48747">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="48783">
        <label>iomanip</label>
      </node>
      <node id="48756">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="48757" relation="include">
        </childnode>
        <childnode refid="48759" relation="include">
        </childnode>
      </node>
      <node id="48739">
        <label>cstdint</label>
      </node>
      <node id="48748">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="48755">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="48778">
        <label>arma_config.hpp</label>
      </node>
      <node id="48768">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="48735">
        <label>cmath</label>
      </node>
      <node id="48754">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="48743">
        <label>stdexcept</label>
      </node>
      <node id="48763">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="48748" relation="include">
        </childnode>
        <childnode refid="48750" relation="include">
        </childnode>
        <childnode refid="48751" relation="include">
        </childnode>
        <childnode refid="48749" relation="include">
        </childnode>
      </node>
      <node id="48787">
        <label>string</label>
      </node>
      <node id="48775">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="48776" relation="include">
        </childnode>
        <childnode refid="48742" relation="include">
        </childnode>
      </node>
      <node id="48785">
        <label>map</label>
      </node>
      <node id="48737">
        <label>cfloat</label>
      </node>
      <node id="48767">
        <label>boost/variant.hpp</label>
      </node>
      <node id="48789">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="48751">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="48774">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="48775" relation="include">
        </childnode>
        <childnode refid="48751" relation="include">
        </childnode>
        <childnode refid="48758" relation="include">
        </childnode>
        <childnode refid="48776" relation="include">
        </childnode>
      </node>
      <node id="48764">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="48733">
        <label>/home/aakash/mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp</label>
        <link refid="positive__definite__constraint_8hpp"/>
        <childnode refid="48734" relation="include">
        </childnode>
      </node>
      <node id="48762">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="48748" relation="include">
        </childnode>
        <childnode refid="48750" relation="include">
        </childnode>
        <childnode refid="48751" relation="include">
        </childnode>
        <childnode refid="48749" relation="include">
        </childnode>
      </node>
      <node id="48765">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="48748" relation="include">
        </childnode>
        <childnode refid="48750" relation="include">
        </childnode>
        <childnode refid="48751" relation="include">
        </childnode>
        <childnode refid="48749" relation="include">
        </childnode>
      </node>
      <node id="48753">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="48773">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="48749" relation="include">
        </childnode>
        <childnode refid="48750" relation="include">
        </childnode>
        <childnode refid="48751" relation="include">
        </childnode>
        <childnode refid="48761" relation="include">
        </childnode>
        <childnode refid="48770" relation="include">
        </childnode>
      </node>
      <node id="48777">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="48778" relation="include">
        </childnode>
      </node>
      <node id="48779">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="48734">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="48735" relation="include">
        </childnode>
        <childnode refid="48736" relation="include">
        </childnode>
        <childnode refid="48737" relation="include">
        </childnode>
        <childnode refid="48738" relation="include">
        </childnode>
        <childnode refid="48739" relation="include">
        </childnode>
        <childnode refid="48740" relation="include">
        </childnode>
        <childnode refid="48741" relation="include">
        </childnode>
        <childnode refid="48742" relation="include">
        </childnode>
        <childnode refid="48743" relation="include">
        </childnode>
        <childnode refid="48744" relation="include">
        </childnode>
        <childnode refid="48745" relation="include">
        </childnode>
        <childnode refid="48746" relation="include">
        </childnode>
        <childnode refid="48747" relation="include">
        </childnode>
        <childnode refid="48748" relation="include">
        </childnode>
        <childnode refid="48749" relation="include">
        </childnode>
        <childnode refid="48750" relation="include">
        </childnode>
        <childnode refid="48751" relation="include">
        </childnode>
        <childnode refid="48752" relation="include">
        </childnode>
        <childnode refid="48753" relation="include">
        </childnode>
        <childnode refid="48754" relation="include">
        </childnode>
        <childnode refid="48755" relation="include">
        </childnode>
        <childnode refid="48756" relation="include">
        </childnode>
        <childnode refid="48760" relation="include">
        </childnode>
        <childnode refid="48761" relation="include">
        </childnode>
        <childnode refid="48762" relation="include">
        </childnode>
        <childnode refid="48763" relation="include">
        </childnode>
        <childnode refid="48764" relation="include">
        </childnode>
        <childnode refid="48765" relation="include">
        </childnode>
        <childnode refid="48766" relation="include">
        </childnode>
        <childnode refid="48772" relation="include">
        </childnode>
        <childnode refid="48773" relation="include">
        </childnode>
        <childnode refid="48770" relation="include">
        </childnode>
        <childnode refid="48774" relation="include">
        </childnode>
        <childnode refid="48777" relation="include">
        </childnode>
        <childnode refid="48779" relation="include">
        </childnode>
        <childnode refid="48780" relation="include">
        </childnode>
        <childnode refid="48789" relation="include">
        </childnode>
        <childnode refid="48790" relation="include">
        </childnode>
      </node>
      <node id="48740">
        <label>cstdio</label>
      </node>
      <node id="48744">
        <label>tuple</label>
      </node>
      <node id="48749">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="48766">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="48749" relation="include">
        </childnode>
        <childnode refid="48750" relation="include">
        </childnode>
        <childnode refid="48751" relation="include">
        </childnode>
        <childnode refid="48753" relation="include">
        </childnode>
        <childnode refid="48767" relation="include">
        </childnode>
        <childnode refid="48768" relation="include">
        </childnode>
        <childnode refid="48769" relation="include">
        </childnode>
        <childnode refid="48770" relation="include">
        </childnode>
      </node>
      <node id="48745">
        <label>utility</label>
      </node>
      <node id="48769">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="48760">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="48757">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="48758" relation="include">
        </childnode>
      </node>
      <node id="48780">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="48781" relation="include">
        </childnode>
        <childnode refid="48782" relation="include">
        </childnode>
        <childnode refid="48783" relation="include">
        </childnode>
        <childnode refid="48784" relation="include">
        </childnode>
        <childnode refid="48785" relation="include">
        </childnode>
        <childnode refid="48786" relation="include">
        </childnode>
        <childnode refid="48787" relation="include">
        </childnode>
        <childnode refid="48788" relation="include">
        </childnode>
      </node>
      <node id="48758">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="48772">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="48770" relation="include">
        </childnode>
        <childnode refid="48766" relation="include">
        </childnode>
        <childnode refid="48773" relation="include">
        </childnode>
      </node>
      <node id="48741">
        <label>cstdlib</label>
      </node>
      <node id="48736">
        <label>cctype</label>
      </node>
      <node id="48759">
        <label>unordered_map</label>
      </node>
      <node id="48738">
        <label>climits</label>
      </node>
      <node id="48786">
        <label>mutex</label>
      </node>
      <node id="48782">
        <label>chrono</label>
      </node>
      <node id="48790">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="48788">
        <label>thread</label>
      </node>
      <node id="48776">
        <label>type_traits</label>
      </node>
      <node id="48752">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="48746">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="48770">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="48748" relation="include">
        </childnode>
        <childnode refid="48749" relation="include">
        </childnode>
        <childnode refid="48750" relation="include">
        </childnode>
        <childnode refid="48751" relation="include">
        </childnode>
        <childnode refid="48771" relation="include">
        </childnode>
      </node>
      <node id="48742">
        <label>cstring</label>
      </node>
      <node id="48761">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="48750">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="48795">
        <label>/home/aakash/mlpack/src/mlpack/methods/gmm/gmm.hpp</label>
        <link refid="gmm_8hpp"/>
        <childnode refid="48794" relation="include">
        </childnode>
      </node>
      <node id="48791">
        <label>/home/aakash/mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp</label>
        <link refid="positive__definite__constraint_8hpp"/>
        <childnode refid="48792" relation="include">
        </childnode>
      </node>
      <node id="48793">
        <label>/home/aakash/mlpack/src/mlpack/methods/gmm/diagonal_gmm.hpp</label>
        <link refid="diagonal__gmm_8hpp"/>
        <childnode refid="48794" relation="include">
        </childnode>
      </node>
      <node id="48792">
        <label>/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp</label>
        <link refid="em__fit_8hpp"/>
        <childnode refid="48793" relation="include">
        </childnode>
        <childnode refid="48795" relation="include">
        </childnode>
      </node>
      <node id="48794">
        <label>/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_model.hpp</label>
        <link refid="hmm__model_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint" prot="public">mlpack::gmm::PositiveDefiniteConstraint</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1gmm">mlpack::gmm</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin</para></simplesect>
Restricts a covariance matrix to being positive definite.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#ifndef<sp/>MLPACK_METHODS_GMM_POSITIVE_DEFINITE_CONSTRAINT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_METHODS_GMM_POSITIVE_DEFINITE_CONSTRAINT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmm<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint" kindref="compound">PositiveDefiniteConstraint</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36" refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a1e68c9489180b84b3a8d1e265a3d8a8f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a1e68c9489180b84b3a8d1e265a3d8a8f" kindref="member">ApplyConstraint</ref>(arma::mat&amp;<sp/>covariance)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>we<sp/>want<sp/>to<sp/>do<sp/>is<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>matrix<sp/>is<sp/>positive<sp/>definite<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>condition<sp/>number<sp/>isn&apos;t<sp/>too<sp/>large.<sp/><sp/>We<sp/>also<sp/>need<sp/>to<sp/>ensure<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>covariance<sp/>matrix<sp/>is<sp/>not<sp/>too<sp/>close<sp/>to<sp/>zero<sp/>(hence,<sp/>we<sp/>ensure<sp/>that<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eigenvalues<sp/>are<sp/>at<sp/>least<sp/>1e-50).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>arma::vec<sp/>eigval;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>arma::mat<sp/>eigvec;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>covariance<sp/>=<sp/>arma::symmatu(covariance);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arma::eig_sym(eigval,<sp/>eigvec,<sp/>covariance))</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Log::Fatal<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;applying<sp/>to<sp/>constraint<sp/>could<sp/>not<sp/>be<sp/>accomplished.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>matrix<sp/>is<sp/>not<sp/>positive<sp/>definite<sp/>or<sp/>if<sp/>the<sp/>condition<sp/>number<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>large,<sp/>we<sp/>must<sp/>project<sp/>it<sp/>back<sp/>onto<sp/>the<sp/>cone<sp/>of<sp/>positive<sp/>definite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matrices<sp/>with<sp/>reasonable<sp/>condition<sp/>number<sp/>(I&apos;m<sp/>picking<sp/>1e5<sp/>here,<sp/>not<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>particular<sp/>reason).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((eigval[0]<sp/>&lt;<sp/>0.0)<sp/>||<sp/>((eigval[eigval.n_elem<sp/>-<sp/>1]<sp/>/<sp/>eigval[0])<sp/>&gt;<sp/>1e5)<sp/>||</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eigval[eigval.n_elem<sp/>-<sp/>1]<sp/>&lt;<sp/>1e-50))</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Project<sp/>any<sp/>negative<sp/>eigenvalues<sp/>back<sp/>to<sp/>non-negative,<sp/>and<sp/>project<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>too-small<sp/>eigenvalues<sp/>to<sp/>a<sp/>large<sp/>enough<sp/>value.<sp/><sp/>Make<sp/>them<sp/>as<sp/>small<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>possible<sp/>to<sp/>satisfy<sp/>our<sp/>constraint<sp/>on<sp/>the<sp/>condition<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minEigval<sp/>=<sp/>std::max(eigval[eigval.n_elem<sp/>-<sp/>1]<sp/>/<sp/>1e5,<sp/>1e-50);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>eigval.n_elem;<sp/>++i)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigval[i]<sp/>=<sp/>std::max(eigval[i],<sp/>minEigval);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>reassemble<sp/>the<sp/>covariance<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>covariance<sp/>=<sp/>eigvec<sp/>*<sp/>arma::diagmat(eigval)<sp/>*<sp/>eigvec.t();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a5262e4a927a389167cfc7714de4df883" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a5262e4a927a389167cfc7714de4df883" kindref="member">ApplyConstraint</ref>(arma::vec&amp;<sp/>diagCovariance)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>matrix<sp/>is<sp/>not<sp/>positive<sp/>definite<sp/>or<sp/>if<sp/>the<sp/>condition<sp/>number<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>large,<sp/>we<sp/>must<sp/>project<sp/>it<sp/>back<sp/>onto<sp/>the<sp/>cone<sp/>of<sp/>positive<sp/>definite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matrices<sp/>with<sp/>reasonable<sp/>condition<sp/>number<sp/>(I&apos;m<sp/>picking<sp/>1e5<sp/>here,<sp/>not<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>particular<sp/>reason).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxEigval<sp/>=<sp/>-DBL_MAX;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>diagCovariance.n_elem;<sp/>++i)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diagCovariance[i]<sp/>&gt;<sp/>maxEigval)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxEigval<sp/>=<sp/>diagCovariance[i];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>diagCovariance.n_elem;<sp/>++i)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((diagCovariance[i]<sp/>&lt;<sp/>0.0)<sp/>||<sp/>((maxEigval<sp/>/<sp/>diagCovariance[i])<sp/>&gt;<sp/>1e5)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(maxEigval<sp/>&lt;<sp/>1e-50))</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diagCovariance[i]<sp/>=<sp/>std::max(maxEigval<sp/>/<sp/>1e5,<sp/>1e-50);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="100" refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a408eb4ebf27591742383f36e84641a80" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint_1a408eb4ebf27591742383f36e84641a80" kindref="member">serialize</ref>(Archive&amp;<sp/></highlight><highlight class="comment">/*<sp/>ar<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="comment">/*<sp/>version<sp/>*/</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp"/>
  </compounddef>
</doxygen>
