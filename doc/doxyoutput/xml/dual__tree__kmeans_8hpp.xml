<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="dual__tree__kmeans_8hpp" kind="file" language="C++">
    <compoundname>dual_tree_kmeans.hpp</compoundname>
    <includes refid="binary__space__tree_8hpp" local="no">mlpack/core/tree/binary_space_tree.hpp</includes>
    <includes refid="neighbor__search_8hpp" local="no">mlpack/methods/neighbor_search/neighbor_search.hpp</includes>
    <includes refid="cover__tree_8hpp" local="no">mlpack/core/tree/cover_tree.hpp</includes>
    <includes refid="dual__tree__kmeans__statistic_8hpp" local="yes">dual_tree_kmeans_statistic.hpp</includes>
    <includes local="yes">dual_tree_kmeans_impl.hpp</includes>
    <incdepgraph>
      <node id="50481">
        <label>list</label>
      </node>
      <node id="50531">
        <label>breadth_first_dual_tree_traverser_impl.hpp</label>
      </node>
      <node id="50523">
        <label>binary_space_tree/single_tree_traverser.hpp</label>
        <link refid="binary__space__tree_2single__tree__traverser_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50520" relation="include">
        </childnode>
        <childnode refid="50524" relation="include">
        </childnode>
      </node>
      <node id="50533">
        <label>binary_space_tree/traits.hpp</label>
        <link refid="binary__space__tree_2traits_8hpp"/>
        <childnode refid="50534" relation="include">
        </childnode>
        <childnode refid="50495" relation="include">
        </childnode>
      </node>
      <node id="50478">
        <label>atomic</label>
      </node>
      <node id="50468">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="50444">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="50480">
        <label>iomanip</label>
      </node>
      <node id="50530">
        <label>queue</label>
      </node>
      <node id="50546">
        <label>typedef.hpp</label>
        <link refid="methods_2neighbor__search_2typedef_8hpp"/>
        <childnode refid="50536" relation="include">
        </childnode>
        <childnode refid="50490" relation="include">
        </childnode>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50547" relation="include">
        </childnode>
      </node>
      <node id="50542">
        <label>neighbor_search_rules.hpp</label>
        <link refid="neighbor__search__rules_8hpp"/>
        <childnode refid="50543" relation="include">
        </childnode>
        <childnode refid="50530" relation="include">
        </childnode>
        <childnode refid="50544" relation="include">
        </childnode>
      </node>
      <node id="50492">
        <label>bound_traits.hpp</label>
        <link refid="bound__traits_8hpp"/>
      </node>
      <node id="50505">
        <label>binary_space_tree/mean_split.hpp</label>
        <link refid="mean__split_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50503" relation="include">
        </childnode>
        <childnode refid="50506" relation="include">
        </childnode>
      </node>
      <node id="50491">
        <label>lmetric_impl.hpp</label>
      </node>
      <node id="50538">
        <label>mlpack/core/tree/rectangle_tree.hpp</label>
      </node>
      <node id="50453">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="50454" relation="include">
        </childnode>
        <childnode refid="50456" relation="include">
        </childnode>
      </node>
      <node id="50436">
        <label>cstdint</label>
      </node>
      <node id="50445">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="50452">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="50532">
        <label>binary_space_tree/breadth_first_dual_tree_traverser_impl.hpp</label>
      </node>
      <node id="50541">
        <label>nearest_neighbor_sort_impl.hpp</label>
      </node>
      <node id="50509">
        <label>mlpack/mlpack_export.hpp</label>
      </node>
      <node id="50506">
        <label>mean_split_impl.hpp</label>
      </node>
      <node id="50475">
        <label>arma_config.hpp</label>
      </node>
      <node id="50497">
        <label>hollow_ball_bound.hpp</label>
        <link refid="hollow__ball__bound_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50490" relation="include">
        </childnode>
        <childnode refid="50492" relation="include">
        </childnode>
        <childnode refid="50498" relation="include">
        </childnode>
      </node>
      <node id="50521">
        <label>../statistic.hpp</label>
        <link refid="statistic_8hpp"/>
      </node>
      <node id="50539">
        <label>neighbor_search_stat.hpp</label>
        <link refid="neighbor__search__stat_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
      </node>
      <node id="50516">
        <label>lin_alg_impl.hpp</label>
      </node>
      <node id="50465">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="50559">
        <label>dual_tree_kmeans_statistic.hpp</label>
        <link refid="dual__tree__kmeans__statistic_8hpp"/>
        <childnode refid="50539" relation="include">
        </childnode>
      </node>
      <node id="50432">
        <label>cmath</label>
      </node>
      <node id="50488">
        <label>bounds.hpp</label>
        <link refid="bounds_8hpp"/>
        <childnode refid="50489" relation="include">
        </childnode>
        <childnode refid="50490" relation="include">
        </childnode>
        <childnode refid="50492" relation="include">
        </childnode>
        <childnode refid="50493" relation="include">
        </childnode>
        <childnode refid="50495" relation="include">
        </childnode>
        <childnode refid="50497" relation="include">
        </childnode>
        <childnode refid="50499" relation="include">
        </childnode>
      </node>
      <node id="50451">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="50440">
        <label>stdexcept</label>
      </node>
      <node id="50526">
        <label>binary_space_tree/dual_tree_traverser.hpp</label>
        <link refid="binary__space__tree_2dual__tree__traverser_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50520" relation="include">
        </childnode>
        <childnode refid="50527" relation="include">
        </childnode>
      </node>
      <node id="50460">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="50445" relation="include">
        </childnode>
        <childnode refid="50447" relation="include">
        </childnode>
        <childnode refid="50448" relation="include">
        </childnode>
        <childnode refid="50446" relation="include">
        </childnode>
      </node>
      <node id="50489">
        <label>mlpack/core/math/range.hpp</label>
      </node>
      <node id="50558">
        <label>cover_tree/typedef.hpp</label>
        <link refid="core_2tree_2cover__tree_2typedef_8hpp"/>
        <childnode refid="50551" relation="include">
        </childnode>
      </node>
      <node id="50484">
        <label>string</label>
      </node>
      <node id="50512">
        <label>binary_space_tree/rp_tree_max_split.hpp</label>
        <link refid="rp__tree__max__split_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50503" relation="include">
        </childnode>
        <childnode refid="50513" relation="include">
        </childnode>
      </node>
      <node id="50504">
        <label>midpoint_split_impl.hpp</label>
      </node>
      <node id="50472">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="50473" relation="include">
        </childnode>
        <childnode refid="50439" relation="include">
        </childnode>
      </node>
      <node id="50482">
        <label>map</label>
      </node>
      <node id="50527">
        <label>dual_tree_traverser_impl.hpp</label>
      </node>
      <node id="50515">
        <label>mlpack/core/math/lin_alg.hpp</label>
        <link refid="lin__alg_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50516" relation="include">
        </childnode>
      </node>
      <node id="50434">
        <label>cfloat</label>
      </node>
      <node id="50464">
        <label>boost/variant.hpp</label>
      </node>
      <node id="50486">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="50560">
        <label>dual_tree_kmeans_impl.hpp</label>
      </node>
      <node id="50555">
        <label>cover_tree/dual_tree_traverser.hpp</label>
        <link refid="cover__tree_2dual__tree__traverser_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50530" relation="include">
        </childnode>
        <childnode refid="50527" relation="include">
        </childnode>
      </node>
      <node id="50429">
        <label>/home/aakash/mlpack/src/mlpack/methods/kmeans/dual_tree_kmeans.hpp</label>
        <link refid="dual__tree__kmeans_8hpp"/>
        <childnode refid="50430" relation="include">
        </childnode>
        <childnode refid="50536" relation="include">
        </childnode>
        <childnode refid="50549" relation="include">
        </childnode>
        <childnode refid="50559" relation="include">
        </childnode>
        <childnode refid="50560" relation="include">
        </childnode>
      </node>
      <node id="50448">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="50471">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="50472" relation="include">
        </childnode>
        <childnode refid="50448" relation="include">
        </childnode>
        <childnode refid="50455" relation="include">
        </childnode>
        <childnode refid="50473" relation="include">
        </childnode>
      </node>
      <node id="50461">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="50551">
        <label>cover_tree/cover_tree.hpp</label>
        <link refid="cover__tree_2cover__tree_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50489" relation="include">
        </childnode>
        <childnode refid="50521" relation="include">
        </childnode>
        <childnode refid="50550" relation="include">
        </childnode>
        <childnode refid="50552" relation="include">
        </childnode>
        <childnode refid="50549" relation="include">
        </childnode>
      </node>
      <node id="50459">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="50445" relation="include">
        </childnode>
        <childnode refid="50447" relation="include">
        </childnode>
        <childnode refid="50448" relation="include">
        </childnode>
        <childnode refid="50446" relation="include">
        </childnode>
      </node>
      <node id="50462">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="50445" relation="include">
        </childnode>
        <childnode refid="50447" relation="include">
        </childnode>
        <childnode refid="50448" relation="include">
        </childnode>
        <childnode refid="50446" relation="include">
        </childnode>
      </node>
      <node id="50522">
        <label>binary_space_tree_impl.hpp</label>
      </node>
      <node id="50450">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="50470">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="50446" relation="include">
        </childnode>
        <childnode refid="50447" relation="include">
        </childnode>
        <childnode refid="50448" relation="include">
        </childnode>
        <childnode refid="50458" relation="include">
        </childnode>
        <childnode refid="50467" relation="include">
        </childnode>
      </node>
      <node id="50474">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="50475" relation="include">
        </childnode>
      </node>
      <node id="50528">
        <label>binary_space_tree/dual_tree_traverser_impl.hpp</label>
      </node>
      <node id="50544">
        <label>neighbor_search_rules_impl.hpp</label>
      </node>
      <node id="50476">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="50431">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="50432" relation="include">
        </childnode>
        <childnode refid="50433" relation="include">
        </childnode>
        <childnode refid="50434" relation="include">
        </childnode>
        <childnode refid="50435" relation="include">
        </childnode>
        <childnode refid="50436" relation="include">
        </childnode>
        <childnode refid="50437" relation="include">
        </childnode>
        <childnode refid="50438" relation="include">
        </childnode>
        <childnode refid="50439" relation="include">
        </childnode>
        <childnode refid="50440" relation="include">
        </childnode>
        <childnode refid="50441" relation="include">
        </childnode>
        <childnode refid="50442" relation="include">
        </childnode>
        <childnode refid="50443" relation="include">
        </childnode>
        <childnode refid="50444" relation="include">
        </childnode>
        <childnode refid="50445" relation="include">
        </childnode>
        <childnode refid="50446" relation="include">
        </childnode>
        <childnode refid="50447" relation="include">
        </childnode>
        <childnode refid="50448" relation="include">
        </childnode>
        <childnode refid="50449" relation="include">
        </childnode>
        <childnode refid="50450" relation="include">
        </childnode>
        <childnode refid="50451" relation="include">
        </childnode>
        <childnode refid="50452" relation="include">
        </childnode>
        <childnode refid="50453" relation="include">
        </childnode>
        <childnode refid="50457" relation="include">
        </childnode>
        <childnode refid="50458" relation="include">
        </childnode>
        <childnode refid="50459" relation="include">
        </childnode>
        <childnode refid="50460" relation="include">
        </childnode>
        <childnode refid="50461" relation="include">
        </childnode>
        <childnode refid="50462" relation="include">
        </childnode>
        <childnode refid="50463" relation="include">
        </childnode>
        <childnode refid="50469" relation="include">
        </childnode>
        <childnode refid="50470" relation="include">
        </childnode>
        <childnode refid="50467" relation="include">
        </childnode>
        <childnode refid="50471" relation="include">
        </childnode>
        <childnode refid="50474" relation="include">
        </childnode>
        <childnode refid="50476" relation="include">
        </childnode>
        <childnode refid="50477" relation="include">
        </childnode>
        <childnode refid="50486" relation="include">
        </childnode>
        <childnode refid="50487" relation="include">
        </childnode>
      </node>
      <node id="50524">
        <label>single_tree_traverser_impl.hpp</label>
      </node>
      <node id="50548">
        <label>furthest_neighbor_sort_impl.hpp</label>
      </node>
      <node id="50502">
        <label>binary_space_tree/midpoint_split.hpp</label>
        <link refid="midpoint__split_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50503" relation="include">
        </childnode>
        <childnode refid="50504" relation="include">
        </childnode>
      </node>
      <node id="50549">
        <label>mlpack/core/tree/cover_tree.hpp</label>
        <link refid="cover__tree_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50550" relation="include">
        </childnode>
        <childnode refid="50551" relation="include">
        </childnode>
        <childnode refid="50553" relation="include">
        </childnode>
        <childnode refid="50554" relation="include">
        </childnode>
        <childnode refid="50555" relation="include">
        </childnode>
        <childnode refid="50556" relation="include">
        </childnode>
        <childnode refid="50557" relation="include">
        </childnode>
        <childnode refid="50558" relation="include">
        </childnode>
      </node>
      <node id="50510">
        <label>random</label>
      </node>
      <node id="50496">
        <label>ballbound_impl.hpp</label>
      </node>
      <node id="50525">
        <label>binary_space_tree/single_tree_traverser_impl.hpp</label>
      </node>
      <node id="50437">
        <label>cstdio</label>
      </node>
      <node id="50500">
        <label>address.hpp</label>
        <link refid="address_8hpp"/>
      </node>
      <node id="50534">
        <label>mlpack/core/tree/tree_traits.hpp</label>
        <link refid="tree__traits_8hpp"/>
      </node>
      <node id="50441">
        <label>tuple</label>
      </node>
      <node id="50446">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="50518">
        <label>binary_space_tree/ub_tree_split.hpp</label>
        <link refid="ub__tree__split_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50500" relation="include">
        </childnode>
        <childnode refid="50519" relation="include">
        </childnode>
      </node>
      <node id="50463">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="50446" relation="include">
        </childnode>
        <childnode refid="50447" relation="include">
        </childnode>
        <childnode refid="50448" relation="include">
        </childnode>
        <childnode refid="50450" relation="include">
        </childnode>
        <childnode refid="50464" relation="include">
        </childnode>
        <childnode refid="50465" relation="include">
        </childnode>
        <childnode refid="50466" relation="include">
        </childnode>
        <childnode refid="50467" relation="include">
        </childnode>
      </node>
      <node id="50520">
        <label>binary_space_tree/binary_space_tree.hpp</label>
        <link refid="binary__space__tree_2binary__space__tree_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50521" relation="include">
        </childnode>
        <childnode refid="50502" relation="include">
        </childnode>
        <childnode refid="50522" relation="include">
        </childnode>
        <childnode refid="50430" relation="include">
        </childnode>
      </node>
      <node id="50493">
        <label>hrectbound.hpp</label>
        <link refid="hrectbound_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50489" relation="include">
        </childnode>
        <childnode refid="50490" relation="include">
        </childnode>
        <childnode refid="50492" relation="include">
        </childnode>
        <childnode refid="50494" relation="include">
        </childnode>
      </node>
      <node id="50550">
        <label>cover_tree/first_point_is_root.hpp</label>
        <link refid="first__point__is__root_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
      </node>
      <node id="50537">
        <label>vector</label>
      </node>
      <node id="50517">
        <label>rp_tree_mean_split_impl.hpp</label>
      </node>
      <node id="50553">
        <label>cover_tree/single_tree_traverser.hpp</label>
        <link refid="cover__tree_2single__tree__traverser_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50551" relation="include">
        </childnode>
        <childnode refid="50524" relation="include">
        </childnode>
      </node>
      <node id="50508">
        <label>mlpack/core/math/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50509" relation="include">
        </childnode>
        <childnode refid="50510" relation="include">
        </childnode>
      </node>
      <node id="50442">
        <label>utility</label>
      </node>
      <node id="50466">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="50457">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="50430">
        <label>mlpack/core/tree/binary_space_tree.hpp</label>
        <link refid="binary__space__tree_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50488" relation="include">
        </childnode>
        <childnode refid="50502" relation="include">
        </childnode>
        <childnode refid="50505" relation="include">
        </childnode>
        <childnode refid="50507" relation="include">
        </childnode>
        <childnode refid="50512" relation="include">
        </childnode>
        <childnode refid="50514" relation="include">
        </childnode>
        <childnode refid="50518" relation="include">
        </childnode>
        <childnode refid="50520" relation="include">
        </childnode>
        <childnode refid="50523" relation="include">
        </childnode>
        <childnode refid="50525" relation="include">
        </childnode>
        <childnode refid="50526" relation="include">
        </childnode>
        <childnode refid="50528" relation="include">
        </childnode>
        <childnode refid="50529" relation="include">
        </childnode>
        <childnode refid="50532" relation="include">
        </childnode>
        <childnode refid="50533" relation="include">
        </childnode>
        <childnode refid="50535" relation="include">
        </childnode>
      </node>
      <node id="50540">
        <label>sort_policies/nearest_neighbor_sort.hpp</label>
        <link refid="nearest__neighbor__sort_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50541" relation="include">
        </childnode>
      </node>
      <node id="50454">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="50455" relation="include">
        </childnode>
      </node>
      <node id="50556">
        <label>cover_tree/dual_tree_traverser_impl.hpp</label>
      </node>
      <node id="50552">
        <label>cover_tree_impl.hpp</label>
      </node>
      <node id="50477">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="50478" relation="include">
        </childnode>
        <childnode refid="50479" relation="include">
        </childnode>
        <childnode refid="50480" relation="include">
        </childnode>
        <childnode refid="50481" relation="include">
        </childnode>
        <childnode refid="50482" relation="include">
        </childnode>
        <childnode refid="50483" relation="include">
        </childnode>
        <childnode refid="50484" relation="include">
        </childnode>
        <childnode refid="50485" relation="include">
        </childnode>
      </node>
      <node id="50455">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="50536">
        <label>mlpack/methods/neighbor_search/neighbor_search.hpp</label>
        <link refid="neighbor__search_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50537" relation="include">
        </childnode>
        <childnode refid="50484" relation="include">
        </childnode>
        <childnode refid="50430" relation="include">
        </childnode>
        <childnode refid="50538" relation="include">
        </childnode>
        <childnode refid="50520" relation="include">
        </childnode>
        <childnode refid="50539" relation="include">
        </childnode>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50542" relation="include">
        </childnode>
        <childnode refid="50545" relation="include">
        </childnode>
        <childnode refid="50546" relation="include">
        </childnode>
      </node>
      <node id="50469">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="50467" relation="include">
        </childnode>
        <childnode refid="50463" relation="include">
        </childnode>
        <childnode refid="50470" relation="include">
        </childnode>
      </node>
      <node id="50438">
        <label>cstdlib</label>
      </node>
      <node id="50545">
        <label>neighbor_search_impl.hpp</label>
      </node>
      <node id="50433">
        <label>cctype</label>
      </node>
      <node id="50547">
        <label>sort_policies/furthest_neighbor_sort.hpp</label>
        <link refid="furthest__neighbor__sort_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50548" relation="include">
        </childnode>
      </node>
      <node id="50456">
        <label>unordered_map</label>
      </node>
      <node id="50554">
        <label>cover_tree/single_tree_traverser_impl.hpp</label>
      </node>
      <node id="50435">
        <label>climits</label>
      </node>
      <node id="50483">
        <label>mutex</label>
      </node>
      <node id="50479">
        <label>chrono</label>
      </node>
      <node id="50543">
        <label>mlpack/core/tree/traversal_info.hpp</label>
        <link refid="traversal__info_8hpp"/>
      </node>
      <node id="50494">
        <label>hrectbound_impl.hpp</label>
      </node>
      <node id="50487">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="50514">
        <label>binary_space_tree/rp_tree_mean_split.hpp</label>
        <link refid="rp__tree__mean__split_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50512" relation="include">
        </childnode>
        <childnode refid="50503" relation="include">
        </childnode>
        <childnode refid="50515" relation="include">
        </childnode>
        <childnode refid="50517" relation="include">
        </childnode>
      </node>
      <node id="50511">
        <label>vantage_point_split_impl.hpp</label>
      </node>
      <node id="50485">
        <label>thread</label>
      </node>
      <node id="50495">
        <label>ballbound.hpp</label>
        <link refid="ballbound_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50490" relation="include">
        </childnode>
        <childnode refid="50492" relation="include">
        </childnode>
        <childnode refid="50496" relation="include">
        </childnode>
      </node>
      <node id="50513">
        <label>rp_tree_max_split_impl.hpp</label>
      </node>
      <node id="50503">
        <label>mlpack/core/tree/perform_split.hpp</label>
        <link refid="perform__split_8hpp"/>
      </node>
      <node id="50473">
        <label>type_traits</label>
      </node>
      <node id="50529">
        <label>binary_space_tree/breadth_first_dual_tree_traverser.hpp</label>
        <link refid="breadth__first__dual__tree__traverser_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50530" relation="include">
        </childnode>
        <childnode refid="50430" relation="include">
        </childnode>
        <childnode refid="50531" relation="include">
        </childnode>
      </node>
      <node id="50449">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="50535">
        <label>binary_space_tree/typedef.hpp</label>
        <link refid="core_2tree_2binary__space__tree_2typedef_8hpp"/>
        <childnode refid="50430" relation="include">
        </childnode>
      </node>
      <node id="50443">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="50467">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="50445" relation="include">
        </childnode>
        <childnode refid="50446" relation="include">
        </childnode>
        <childnode refid="50447" relation="include">
        </childnode>
        <childnode refid="50448" relation="include">
        </childnode>
        <childnode refid="50468" relation="include">
        </childnode>
      </node>
      <node id="50498">
        <label>hollow_ball_bound_impl.hpp</label>
      </node>
      <node id="50439">
        <label>cstring</label>
      </node>
      <node id="50458">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="50501">
        <label>cellbound_impl.hpp</label>
      </node>
      <node id="50519">
        <label>ub_tree_split_impl.hpp</label>
      </node>
      <node id="50499">
        <label>cellbound.hpp</label>
        <link refid="cellbound_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50489" relation="include">
        </childnode>
        <childnode refid="50490" relation="include">
        </childnode>
        <childnode refid="50492" relation="include">
        </childnode>
        <childnode refid="50500" relation="include">
        </childnode>
        <childnode refid="50501" relation="include">
        </childnode>
      </node>
      <node id="50447">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
      <node id="50490">
        <label>mlpack/core/metrics/lmetric.hpp</label>
        <link refid="lmetric_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50491" relation="include">
        </childnode>
      </node>
      <node id="50507">
        <label>binary_space_tree/vantage_point_split.hpp</label>
        <link refid="vantage__point__split_8hpp"/>
        <childnode refid="50431" relation="include">
        </childnode>
        <childnode refid="50503" relation="include">
        </childnode>
        <childnode refid="50508" relation="include">
        </childnode>
        <childnode refid="50511" relation="include">
        </childnode>
      </node>
      <node id="50557">
        <label>cover_tree/traits.hpp</label>
        <link refid="cover__tree_2traits_8hpp"/>
        <childnode refid="50534" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classmlpack_1_1kmeans_1_1DualTreeKMeans" prot="public">mlpack::kmeans::DualTreeKMeans</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1kmeans">mlpack::kmeans</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin</para></simplesect>
An implementation of a Lloyd iteration which uses dual-tree nearest neighbor search as a black box. The conditions under which this will perform best are probably limited to the case where k is close to the number of points in the dataset, and the number of iterations of the k-means algorithm will be few.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="15"><highlight class="preprocessor">#ifndef<sp/>MLPACK_METHODS_KMEANS_DUAL_TREE_KMEANS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_METHODS_KMEANS_DUAL_TREE_KMEANS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="binary__space__tree_8hpp" kindref="compound">mlpack/core/tree/binary_space_tree.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="neighbor__search_8hpp" kindref="compound">mlpack/methods/neighbor_search/neighbor_search.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cover__tree_8hpp" kindref="compound">mlpack/core/tree/cover_tree.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dual__tree__kmeans__statistic_8hpp" kindref="compound">dual_tree_kmeans_statistic.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="25" refid="namespacemlpack_1_1kmeans" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">kmeans<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MetricType,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TreeMetricType,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TreeStatType,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TreeMatType&gt;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TreeType<sp/>=<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">tree::KDTree</ref>&gt;</highlight></codeline>
<codeline lineno="41" refid="classmlpack_1_1kmeans_1_1DualTreeKMeans" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans" kindref="compound">DualTreeKMeans</ref></highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45" refid="classmlpack_1_1kmeans_1_1DualTreeKMeans_1acaad795a6a26818330dd2476ec5e8731" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>TreeType&lt;MetricType,<sp/>DualTreeKMeansStatistic,<sp/>MatType&gt;<sp/><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans_1acaad795a6a26818330dd2476ec5e8731" kindref="member">Tree</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TreeMetricType,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IgnoredStatType,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TreeMatType&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans_1a5b3ef294d06f18f1075d54975f0e7aad" kindref="member">NNSTreeType</ref><sp/>=</highlight></codeline>
<codeline lineno="51" refid="classmlpack_1_1kmeans_1_1DualTreeKMeans_1a5b3ef294d06f18f1075d54975f0e7aad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TreeType&lt;TreeMetricType,<sp/>DualTreeKMeansStatistic,<sp/>TreeMatType&gt;;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans_1a6c9ca881ce3156575e49ee41509c9e84" kindref="member">DualTreeKMeans</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>dataset,<sp/>MetricType&amp;<sp/>metric);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans_1a41aea8db220102203364a89819766541" kindref="member">~DualTreeKMeans</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans_1a1618db5fb0d2893a50f0c8614d970453" kindref="member">Iterate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::mat&amp;<sp/>centroids,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::mat&amp;<sp/>newCentroids,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::Col&lt;size_t&gt;&amp;<sp/>counts);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classmlpack_1_1kmeans_1_1DualTreeKMeans_1a6ab05a40f496b49e405530a1d39120ef" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans_1a6ab05a40f496b49e405530a1d39120ef" kindref="member">DistanceCalculations</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distanceCalculations;<sp/>}</highlight></codeline>
<codeline lineno="79" refid="classmlpack_1_1kmeans_1_1DualTreeKMeans_1a7fd6d18544595d62025c4b740f8664ab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans_1a7fd6d18544595d62025c4b740f8664ab" kindref="member">DistanceCalculations</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distanceCalculations;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>datasetOrig;<sp/></highlight><highlight class="comment">//<sp/>Maybe<sp/>not<sp/>necessary.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>Tree*<sp/>tree;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>dataset;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>MetricType<sp/>metric;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>distanceCalculations;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iteration;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>arma::vec<sp/>upperBounds;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>arma::vec<sp/>lowerBounds;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>prunedPoints;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>arma::Row&lt;size_t&gt;<sp/>assignments;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>visited;<sp/></highlight><highlight class="comment">//<sp/>Was<sp/>the<sp/>point<sp/>visited<sp/>this<sp/>iteration?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>arma::mat<sp/>lastIterationCentroids;<sp/></highlight><highlight class="comment">//<sp/>For<sp/>sanity<sp/>checks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>arma::vec<sp/>clusterDistances;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>amount<sp/>the<sp/>clusters<sp/>moved<sp/>last<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>arma::mat<sp/>interclusterDistances;<sp/></highlight><highlight class="comment">//<sp/>Static<sp/>storage<sp/>for<sp/>intercluster<sp/>distances.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateTree(Tree&amp;<sp/>node,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::mat&amp;<sp/>centroids,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>parentUpperBound<sp/>=<sp/>0.0,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>adjustedParentUpperBound<sp/>=<sp/>DBL_MAX,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>parentLowerBound<sp/>=<sp/>DBL_MAX,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>adjustedParentLowerBound<sp/>=<sp/>0.0);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExtractCentroids(Tree&amp;<sp/>node,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::mat&amp;<sp/>newCentroids,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::Col&lt;size_t&gt;&amp;<sp/>newCounts,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::mat&amp;<sp/>centroids);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CoalesceTree(Tree&amp;<sp/>node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>child<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DecoalesceTree(Tree&amp;<sp/>node);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TreeType&gt;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemlpack_1_1kmeans_1ae824715a9723b95291ede5396d7ec48a" kindref="member">HideChild</ref>(TreeType&amp;<sp/>node,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>child,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="classmlpack_1_1tree_1_1TreeTraits" kindref="compound">tree::TreeTraits&lt;TreeType&gt;::BinaryTree</ref>&gt;*<sp/>junk<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TreeType&gt;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemlpack_1_1kmeans_1ae824715a9723b95291ede5396d7ec48a" kindref="member">HideChild</ref>(TreeType&amp;<sp/>node,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>child,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1tree_1_1TreeTraits" kindref="compound">tree::TreeTraits&lt;TreeType&gt;::BinaryTree</ref>&gt;*<sp/>junk<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TreeType&gt;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemlpack_1_1kmeans_1ab8a2dc63dd61b947e7b90e03d31d64c0" kindref="member">RestoreChildren</ref>(TreeType&amp;<sp/>node,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;!<ref refid="classmlpack_1_1tree_1_1TreeTraits" kindref="compound">tree::TreeTraits</ref>&lt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TreeType&gt;::BinaryTree&gt;*<sp/>junk<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TreeType&gt;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemlpack_1_1kmeans_1ab8a2dc63dd61b947e7b90e03d31d64c0" kindref="member">RestoreChildren</ref>(TreeType&amp;<sp/>node,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;<ref refid="classmlpack_1_1tree_1_1TreeTraits" kindref="compound">tree::TreeTraits</ref>&lt;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TreeType&gt;::BinaryTree&gt;*<sp/>junk<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MetricType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType&gt;</highlight></codeline>
<codeline lineno="164" refid="namespacemlpack_1_1kmeans_1a3d8c82eb428be782996066d70afc122b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans" kindref="compound">DefaultDualTreeKMeans</ref><sp/>=<sp/><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans" kindref="compound">DualTreeKMeans&lt;MetricType, MatType&gt;</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MetricType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType&gt;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans" kindref="compound">CoverTreeDualTreeKMeans</ref><sp/>=<sp/><ref refid="classmlpack_1_1kmeans_1_1DualTreeKMeans" kindref="compound">DualTreeKMeans</ref>&lt;MetricType,<sp/>MatType,</highlight></codeline>
<codeline lineno="170" refid="namespacemlpack_1_1kmeans_1a050f8eba1b8d0c72e990a9ee3b7ed775" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1tree_1_1CoverTree" kindref="compound">tree::StandardCoverTree</ref>&gt;;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>kmeans</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dual_tree_kmeans_impl.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/methods/kmeans/dual_tree_kmeans.hpp"/>
  </compounddef>
</doxygen>
