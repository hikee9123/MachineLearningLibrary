<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="is__naninf_8hpp" kind="file" language="C++">
    <compoundname>is_naninf.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <incdepgraph>
      <node id="7684">
        <label>list</label>
      </node>
      <node id="7681">
        <label>atomic</label>
      </node>
      <node id="7671">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="7647">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="7683">
        <label>iomanip</label>
      </node>
      <node id="7656">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="7657" relation="include">
        </childnode>
        <childnode refid="7659" relation="include">
        </childnode>
      </node>
      <node id="7639">
        <label>cstdint</label>
      </node>
      <node id="7648">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="7655">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="7678">
        <label>arma_config.hpp</label>
      </node>
      <node id="7668">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="7635">
        <label>cmath</label>
      </node>
      <node id="7654">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="7643">
        <label>stdexcept</label>
      </node>
      <node id="7663">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="7648" relation="include">
        </childnode>
        <childnode refid="7650" relation="include">
        </childnode>
        <childnode refid="7651" relation="include">
        </childnode>
        <childnode refid="7649" relation="include">
        </childnode>
      </node>
      <node id="7687">
        <label>string</label>
      </node>
      <node id="7675">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="7676" relation="include">
        </childnode>
        <childnode refid="7642" relation="include">
        </childnode>
      </node>
      <node id="7685">
        <label>map</label>
      </node>
      <node id="7637">
        <label>cfloat</label>
      </node>
      <node id="7667">
        <label>boost/variant.hpp</label>
      </node>
      <node id="7689">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="7651">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="7674">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="7675" relation="include">
        </childnode>
        <childnode refid="7651" relation="include">
        </childnode>
        <childnode refid="7658" relation="include">
        </childnode>
        <childnode refid="7676" relation="include">
        </childnode>
      </node>
      <node id="7664">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="7662">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="7648" relation="include">
        </childnode>
        <childnode refid="7650" relation="include">
        </childnode>
        <childnode refid="7651" relation="include">
        </childnode>
        <childnode refid="7649" relation="include">
        </childnode>
      </node>
      <node id="7665">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="7648" relation="include">
        </childnode>
        <childnode refid="7650" relation="include">
        </childnode>
        <childnode refid="7651" relation="include">
        </childnode>
        <childnode refid="7649" relation="include">
        </childnode>
      </node>
      <node id="7653">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="7673">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="7649" relation="include">
        </childnode>
        <childnode refid="7650" relation="include">
        </childnode>
        <childnode refid="7651" relation="include">
        </childnode>
        <childnode refid="7661" relation="include">
        </childnode>
        <childnode refid="7670" relation="include">
        </childnode>
      </node>
      <node id="7677">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="7678" relation="include">
        </childnode>
      </node>
      <node id="7679">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="7634">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="7635" relation="include">
        </childnode>
        <childnode refid="7636" relation="include">
        </childnode>
        <childnode refid="7637" relation="include">
        </childnode>
        <childnode refid="7638" relation="include">
        </childnode>
        <childnode refid="7639" relation="include">
        </childnode>
        <childnode refid="7640" relation="include">
        </childnode>
        <childnode refid="7641" relation="include">
        </childnode>
        <childnode refid="7642" relation="include">
        </childnode>
        <childnode refid="7643" relation="include">
        </childnode>
        <childnode refid="7644" relation="include">
        </childnode>
        <childnode refid="7645" relation="include">
        </childnode>
        <childnode refid="7646" relation="include">
        </childnode>
        <childnode refid="7647" relation="include">
        </childnode>
        <childnode refid="7648" relation="include">
        </childnode>
        <childnode refid="7649" relation="include">
        </childnode>
        <childnode refid="7650" relation="include">
        </childnode>
        <childnode refid="7651" relation="include">
        </childnode>
        <childnode refid="7652" relation="include">
        </childnode>
        <childnode refid="7653" relation="include">
        </childnode>
        <childnode refid="7654" relation="include">
        </childnode>
        <childnode refid="7655" relation="include">
        </childnode>
        <childnode refid="7656" relation="include">
        </childnode>
        <childnode refid="7660" relation="include">
        </childnode>
        <childnode refid="7661" relation="include">
        </childnode>
        <childnode refid="7662" relation="include">
        </childnode>
        <childnode refid="7663" relation="include">
        </childnode>
        <childnode refid="7664" relation="include">
        </childnode>
        <childnode refid="7665" relation="include">
        </childnode>
        <childnode refid="7666" relation="include">
        </childnode>
        <childnode refid="7672" relation="include">
        </childnode>
        <childnode refid="7673" relation="include">
        </childnode>
        <childnode refid="7670" relation="include">
        </childnode>
        <childnode refid="7674" relation="include">
        </childnode>
        <childnode refid="7677" relation="include">
        </childnode>
        <childnode refid="7679" relation="include">
        </childnode>
        <childnode refid="7680" relation="include">
        </childnode>
        <childnode refid="7689" relation="include">
        </childnode>
        <childnode refid="7690" relation="include">
        </childnode>
      </node>
      <node id="7640">
        <label>cstdio</label>
      </node>
      <node id="7644">
        <label>tuple</label>
      </node>
      <node id="7649">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="7666">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="7649" relation="include">
        </childnode>
        <childnode refid="7650" relation="include">
        </childnode>
        <childnode refid="7651" relation="include">
        </childnode>
        <childnode refid="7653" relation="include">
        </childnode>
        <childnode refid="7667" relation="include">
        </childnode>
        <childnode refid="7668" relation="include">
        </childnode>
        <childnode refid="7669" relation="include">
        </childnode>
        <childnode refid="7670" relation="include">
        </childnode>
      </node>
      <node id="7645">
        <label>utility</label>
      </node>
      <node id="7633">
        <label>/home/aakash/mlpack/src/mlpack/core/data/is_naninf.hpp</label>
        <link refid="is__naninf_8hpp"/>
        <childnode refid="7634" relation="include">
        </childnode>
      </node>
      <node id="7669">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="7660">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="7657">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="7658" relation="include">
        </childnode>
      </node>
      <node id="7680">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="7681" relation="include">
        </childnode>
        <childnode refid="7682" relation="include">
        </childnode>
        <childnode refid="7683" relation="include">
        </childnode>
        <childnode refid="7684" relation="include">
        </childnode>
        <childnode refid="7685" relation="include">
        </childnode>
        <childnode refid="7686" relation="include">
        </childnode>
        <childnode refid="7687" relation="include">
        </childnode>
        <childnode refid="7688" relation="include">
        </childnode>
      </node>
      <node id="7658">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="7672">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="7670" relation="include">
        </childnode>
        <childnode refid="7666" relation="include">
        </childnode>
        <childnode refid="7673" relation="include">
        </childnode>
      </node>
      <node id="7641">
        <label>cstdlib</label>
      </node>
      <node id="7636">
        <label>cctype</label>
      </node>
      <node id="7659">
        <label>unordered_map</label>
      </node>
      <node id="7638">
        <label>climits</label>
      </node>
      <node id="7686">
        <label>mutex</label>
      </node>
      <node id="7682">
        <label>chrono</label>
      </node>
      <node id="7690">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="7688">
        <label>thread</label>
      </node>
      <node id="7676">
        <label>type_traits</label>
      </node>
      <node id="7652">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="7646">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="7670">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="7648" relation="include">
        </childnode>
        <childnode refid="7649" relation="include">
        </childnode>
        <childnode refid="7650" relation="include">
        </childnode>
        <childnode refid="7651" relation="include">
        </childnode>
        <childnode refid="7671" relation="include">
        </childnode>
      </node>
      <node id="7642">
        <label>cstring</label>
      </node>
      <node id="7661">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="7650">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1data">mlpack::data</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin</para></simplesect>
This is an adapted version of Conrad Sanderson&apos;s implementation of arma::diskio::convert_naninf() from Armadillo. It is here so as to avoid using Armadillo internal functionality.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="14"><highlight class="preprocessor">#ifndef<sp/>MLPACK_CORE_DATA_HAS_NANINF_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_CORE_DATA_HAS_NANINF_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">data<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="27" refid="namespacemlpack_1_1data_1a3799ea79b454b97c5f79a82db6958a1b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacemlpack_1_1data_1a3799ea79b454b97c5f79a82db6958a1b" kindref="member">IsNaNInf</ref>(T&amp;<sp/>val,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>token)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>if<sp/>the<sp/>token<sp/>represents<sp/>a<sp/>NaN<sp/>or<sp/>Inf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((token.length()<sp/>==<sp/>3)<sp/>||<sp/>(token.length()<sp/>==<sp/>4))</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>neg<sp/>=<sp/>(token[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>(token[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>((neg<sp/>||<sp/>pos)<sp/>&amp;&amp;<sp/>(token.length()<sp/>==<sp/>4))<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>token2<sp/>=<sp/>token.substr(offset,<sp/>3);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((token2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;inf&quot;</highlight><highlight class="normal">)<sp/>||<sp/>(token2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Inf&quot;</highlight><highlight class="normal">)<sp/>||<sp/>(token2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;INF&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::numeric_limits&lt;T&gt;::has_infinity)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>(!neg)<sp/>?<sp/>std::numeric_limits&lt;T&gt;::infinity()<sp/>:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1<sp/>*<sp/>std::numeric_limits&lt;T&gt;::infinity();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>(!neg)<sp/>?<sp/>std::numeric_limits&lt;T&gt;::max()<sp/>:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1<sp/>*<sp/>std::numeric_limits&lt;T&gt;::max();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((token2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nan&quot;</highlight><highlight class="normal">)<sp/>||<sp/>(token2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Nan&quot;</highlight><highlight class="normal">)<sp/>||<sp/>(token2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;NaN&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(token2<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;NAN&quot;</highlight><highlight class="normal">)<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::numeric_limits&lt;T&gt;::has_quiet_NaN)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>std::numeric_limits&lt;T&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>T(0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/core/data/is_naninf.hpp"/>
  </compounddef>
</doxygen>
