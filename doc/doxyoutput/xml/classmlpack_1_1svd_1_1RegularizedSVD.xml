<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1svd_1_1RegularizedSVD" kind="class" language="C++" prot="public">
    <compoundname>mlpack::svd::RegularizedSVD</compoundname>
    <includes refid="regularized__svd_8hpp" local="no">regularized_svd.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>OptimizerType</declname>
        <defname>OptimizerType</defname>
        <defval>ens::StandardSGD</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1svd_1_1RegularizedSVD_1a20f4c4490bc8ecbdd1ffcb79acce6035" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double alpha</definition>
        <argsstring></argsstring>
        <name>alpha</name>
        <briefdescription>
<para>Learning rate for the SGD optimizer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/regularized_svd/regularized_svd.hpp" line="92" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/regularized_svd/regularized_svd.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1svd_1_1RegularizedSVD_1a8c30486c22f07ec9373b0b3992994d58" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t iterations</definition>
        <argsstring></argsstring>
        <name>iterations</name>
        <briefdescription>
<para>Number of optimization iterations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/regularized_svd/regularized_svd.hpp" line="90" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/regularized_svd/regularized_svd.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1svd_1_1RegularizedSVD_1a3db359547eed8cfd48ca821d95f577af" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lambda</definition>
        <argsstring></argsstring>
        <name>lambda</name>
        <briefdescription>
<para>Regularization parameter for the optimization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/regularized_svd/regularized_svd.hpp" line="94" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/regularized_svd/regularized_svd.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1svd_1_1RegularizedSVD_1a9fa7f730b10a1dcceeb9257ddbfd71c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RegularizedSVD</definition>
        <argsstring>(const size_t iterations=10, const double alpha=0.01, const double lambda=0.02)</argsstring>
        <name>RegularizedSVD</name>
        <param>
          <type>const size_t</type>
          <declname>iterations</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
          <defval>0.01</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda</declname>
          <defval>0.02</defval>
        </param>
        <briefdescription>
<para>Constructor for Regularized SVD. </para>        </briefdescription>
        <detaileddescription>
<para>Obtains the user and item matrices after training on the passed data. The constructor initiates an object of class <ref refid="classmlpack_1_1svd_1_1RegularizedSVDFunction" kindref="compound">RegularizedSVDFunction</ref> for optimization. It uses the SGD optimizer by default. The optimizer uses a template specialization of Optimize().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of optimization iterations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>Learning rate for the SGD optimizer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>Regularization parameter for the optimization. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/regularized_svd/regularized_svd.hpp" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1svd_1_1RegularizedSVD_1a2a573625e4555fd5afc38af3529e07ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Apply</definition>
        <argsstring>(const arma::mat &amp;data, const size_t rank, arma::mat &amp;u, arma::mat &amp;v)</argsstring>
        <name>Apply</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Obtains the user and item matrices using the provided data and rank. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Rating data matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Rank parameter to be used for optimization. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>Item matrix obtained on decomposition. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>User matrix obtained on decomposition. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/regularized_svd/regularized_svd.hpp" line="83" column="1"/>
        <referencedby refid="classmlpack_1_1cf_1_1RegSVDPolicy_1a3b3962a80d1217a799cfab110b487cea" compoundref="regularized__svd__method_8hpp" startline="68" endline="78">RegSVDPolicy::Apply</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Regularized SVD is a matrix factorization technique that seeks to reduce the error on the training set, that is on the examples for which the ratings have been provided by the users. </para>    </briefdescription>
    <detaileddescription>
<para>It is a fairly straightforward technique where the user and item matrices are updated with the help of Stochastic Gradient Descent(SGD) updates. The updates also penalize the learning of large feature values by means of regularization. More details can be found in the following links:</para><para><ulink url="http://sifter.org/~simon/journal/20061211.html">http://sifter.org/~simon/journal/20061211.html</ulink> <ulink url="http://www.cs.uic.edu/~liub/KDD-cup-2007/proceedings/Regular-Paterek.pdf">http://www.cs.uic.edu/~liub/KDD-cup-2007/proceedings/Regular-Paterek.pdf</ulink></para><para>An example of how to use the interface is shown below:</para><para><programlisting><codeline><highlight class="normal">arma::mat<sp/>data;<sp/>//<sp/>Rating<sp/>data<sp/>in<sp/>the<sp/>form<sp/>of<sp/>coordinate<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>size_t<sp/>rank<sp/>=<sp/>20;<sp/>//<sp/>Rank<sp/>used<sp/>for<sp/>the<sp/>decomposition.</highlight></codeline>
<codeline><highlight class="normal">const<sp/>size_t<sp/>iterations<sp/>=<sp/>10;<sp/>//<sp/>Number<sp/>of<sp/>iterations<sp/>used<sp/>for<sp/>optimization.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">const<sp/>double<sp/>alpha<sp/>=<sp/>0.01<sp/>//<sp/>Learning<sp/>rate<sp/>for<sp/>the<sp/>SGD<sp/>optimizer.</highlight></codeline>
<codeline><highlight class="normal">const<sp/>double<sp/>lambda<sp/>=<sp/>0.1<sp/>//<sp/>Regularization<sp/>parameter<sp/>for<sp/>the<sp/>optimization.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Make<sp/>a<sp/>RegularizedSVD<sp/>object.</highlight></codeline>
<codeline><highlight class="normal">RegularizedSVD&lt;&gt;<sp/>rSVD(iterations,<sp/>alpha,<sp/>lambda);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">arma::mat<sp/>u,<sp/>v;<sp/>//<sp/>User<sp/>and<sp/>item<sp/>matrices.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>the<sp/>Apply()<sp/>method<sp/>to<sp/>get<sp/>a<sp/>factorization.</highlight></codeline>
<codeline><highlight class="normal">rSVD.Apply(data,<sp/>rank,<sp/>u,<sp/>v);</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/regularized_svd/regularized_svd.hpp" line="59" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/regularized_svd/regularized_svd.hpp" bodystart="58" bodyend="95"/>
    <listofallmembers>
      <member refid="classmlpack_1_1svd_1_1RegularizedSVD_1a20f4c4490bc8ecbdd1ffcb79acce6035" prot="private" virt="non-virtual"><scope>mlpack::svd::RegularizedSVD</scope><name>alpha</name></member>
      <member refid="classmlpack_1_1svd_1_1RegularizedSVD_1a2a573625e4555fd5afc38af3529e07ec" prot="public" virt="non-virtual"><scope>mlpack::svd::RegularizedSVD</scope><name>Apply</name></member>
      <member refid="classmlpack_1_1svd_1_1RegularizedSVD_1a8c30486c22f07ec9373b0b3992994d58" prot="private" virt="non-virtual"><scope>mlpack::svd::RegularizedSVD</scope><name>iterations</name></member>
      <member refid="classmlpack_1_1svd_1_1RegularizedSVD_1a3db359547eed8cfd48ca821d95f577af" prot="private" virt="non-virtual"><scope>mlpack::svd::RegularizedSVD</scope><name>lambda</name></member>
      <member refid="classmlpack_1_1svd_1_1RegularizedSVD_1a9fa7f730b10a1dcceeb9257ddbfd71c8" prot="public" virt="non-virtual"><scope>mlpack::svd::RegularizedSVD</scope><name>RegularizedSVD</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
