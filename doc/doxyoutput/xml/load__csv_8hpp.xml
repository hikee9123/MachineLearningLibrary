<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="load__csv_8hpp" kind="file" language="C++">
    <compoundname>load_csv.hpp</compoundname>
    <includes local="no">boost/spirit/include/qi.hpp</includes>
    <includes local="no">boost/algorithm/string/trim.hpp</includes>
    <includes refid="core_8hpp" local="no">mlpack/core.hpp</includes>
    <includes local="no">mlpack/core/util/log.hpp</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <includes refid="extension_8hpp" local="yes">extension.hpp</includes>
    <includes refid="format_8hpp" local="yes">format.hpp</includes>
    <includes refid="dataset__mapper_8hpp" local="yes">dataset_mapper.hpp</includes>
    <incdepgraph>
      <node id="8066">
        <label>list</label>
      </node>
      <node id="8095">
        <label>save_impl.hpp</label>
      </node>
      <node id="8063">
        <label>atomic</label>
      </node>
      <node id="8087">
        <label>dataset_mapper_impl.hpp</label>
      </node>
      <node id="8093">
        <label>load_image_impl.hpp</label>
      </node>
      <node id="8053">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="8029">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="8065">
        <label>iomanip</label>
      </node>
      <node id="8125">
        <label>mlpack/core/kernels/linear_kernel.hpp</label>
        <link refid="linear__kernel_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="8120">
        <label>mlpack/core/data/confusion_matrix.hpp</label>
        <link refid="confusion__matrix_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8121" relation="include">
        </childnode>
      </node>
      <node id="8135">
        <label>mlpack/core/kernels/laplacian_kernel.hpp</label>
        <link refid="laplacian__kernel_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="8102">
        <label>float.h</label>
      </node>
      <node id="8131">
        <label>lmetric_impl.hpp</label>
      </node>
      <node id="8038">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="8039" relation="include">
        </childnode>
        <childnode refid="8041" relation="include">
        </childnode>
      </node>
      <node id="8021">
        <label>cstdint</label>
      </node>
      <node id="8133">
        <label>epanechnikov_kernel_impl.hpp</label>
      </node>
      <node id="8124">
        <label>mlpack/core/kernels/kernel_traits.hpp</label>
        <link refid="kernel__traits_8hpp"/>
      </node>
      <node id="8030">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="8037">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="8118">
        <label>mlpack/core/dists/gamma_distribution.hpp</label>
        <link refid="gamma__distribution_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8103" relation="include">
        </childnode>
      </node>
      <node id="8082">
        <label>mlpack/core/data/load.hpp</label>
        <link refid="load_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8061" relation="include">
        </childnode>
        <childnode refid="8069" relation="include">
        </childnode>
        <childnode refid="8083" relation="include">
        </childnode>
        <childnode refid="8084" relation="include">
        </childnode>
        <childnode refid="8088" relation="include">
        </childnode>
        <childnode refid="8091" relation="include">
        </childnode>
        <childnode refid="8092" relation="include">
        </childnode>
        <childnode refid="8093" relation="include">
        </childnode>
      </node>
      <node id="8077">
        <label>program_doc.hpp</label>
        <link refid="program__doc_8hpp"/>
      </node>
      <node id="8100">
        <label>stdlib.h</label>
      </node>
      <node id="8104">
        <label>mlpack/mlpack_export.hpp</label>
      </node>
      <node id="8060">
        <label>arma_config.hpp</label>
      </node>
      <node id="8139">
        <label>mlpack/core/kernels/spherical_kernel.hpp</label>
        <link refid="spherical__kernel_8hpp"/>
        <childnode refid="8140" relation="include">
        </childnode>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="8080">
        <label>params.hpp</label>
        <link refid="params_8hpp"/>
        <childnode refid="8079" relation="include">
        </childnode>
        <childnode refid="8076" relation="include">
        </childnode>
        <childnode refid="8081" relation="include">
        </childnode>
      </node>
      <node id="8108">
        <label>lin_alg_impl.hpp</label>
      </node>
      <node id="8134">
        <label>mlpack/core/kernels/hyperbolic_tangent_kernel.hpp</label>
        <link refid="hyperbolic__tangent__kernel_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="8015">
        <label>mlpack/core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8029" relation="include">
        </childnode>
        <childnode refid="8061" relation="include">
        </childnode>
        <childnode refid="8073" relation="include">
        </childnode>
        <childnode refid="8071" relation="include">
        </childnode>
        <childnode refid="8082" relation="include">
        </childnode>
        <childnode refid="8094" relation="include">
        </childnode>
        <childnode refid="8097" relation="include">
        </childnode>
        <childnode refid="8099" relation="include">
        </childnode>
        <childnode refid="8103" relation="include">
        </childnode>
        <childnode refid="8106" relation="include">
        </childnode>
        <childnode refid="8107" relation="include">
        </childnode>
        <childnode refid="8109" relation="include">
        </childnode>
        <childnode refid="8110" relation="include">
        </childnode>
        <childnode refid="8111" relation="include">
        </childnode>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8114" relation="include">
        </childnode>
        <childnode refid="8115" relation="include">
        </childnode>
        <childnode refid="8116" relation="include">
        </childnode>
        <childnode refid="8117" relation="include">
        </childnode>
        <childnode refid="8118" relation="include">
        </childnode>
        <childnode refid="8119" relation="include">
        </childnode>
        <childnode refid="8120" relation="include">
        </childnode>
        <childnode refid="8122" relation="include">
        </childnode>
        <childnode refid="8124" relation="include">
        </childnode>
        <childnode refid="8125" relation="include">
        </childnode>
        <childnode refid="8126" relation="include">
        </childnode>
        <childnode refid="8127" relation="include">
        </childnode>
        <childnode refid="8129" relation="include">
        </childnode>
        <childnode refid="8132" relation="include">
        </childnode>
        <childnode refid="8134" relation="include">
        </childnode>
        <childnode refid="8135" relation="include">
        </childnode>
        <childnode refid="8136" relation="include">
        </childnode>
        <childnode refid="8139" relation="include">
        </childnode>
        <childnode refid="8141" relation="include">
        </childnode>
        <childnode refid="8142" relation="include">
        </childnode>
      </node>
      <node id="8096">
        <label>io_impl.hpp</label>
      </node>
      <node id="8050">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="8122">
        <label>mlpack/core/data/one_hot_encoding.hpp</label>
        <link refid="one__hot__encoding_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8015" relation="include">
        </childnode>
        <childnode refid="8123" relation="include">
        </childnode>
      </node>
      <node id="8017">
        <label>cmath</label>
      </node>
      <node id="8036">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="8025">
        <label>stdexcept</label>
      </node>
      <node id="8045">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="8030" relation="include">
        </childnode>
        <childnode refid="8032" relation="include">
        </childnode>
        <childnode refid="8033" relation="include">
        </childnode>
        <childnode refid="8031" relation="include">
        </childnode>
      </node>
      <node id="8109">
        <label>mlpack/core/math/range.hpp</label>
      </node>
      <node id="8128">
        <label>cosine_distance_impl.hpp</label>
      </node>
      <node id="8086">
        <label>mlpack/core/data/map_policies/datatype.hpp</label>
        <link refid="datatype_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="8069">
        <label>string</label>
      </node>
      <node id="8057">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="8058" relation="include">
        </childnode>
        <childnode refid="8024" relation="include">
        </childnode>
      </node>
      <node id="8127">
        <label>mlpack/core/kernels/cosine_distance.hpp</label>
        <link refid="cosine__distance_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8124" relation="include">
        </childnode>
        <childnode refid="8128" relation="include">
        </childnode>
      </node>
      <node id="8067">
        <label>map</label>
      </node>
      <node id="8014">
        <label>boost/algorithm/string/trim.hpp</label>
      </node>
      <node id="8107">
        <label>mlpack/core/math/lin_alg.hpp</label>
        <link refid="lin__alg_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8108" relation="include">
        </childnode>
      </node>
      <node id="8019">
        <label>cfloat</label>
      </node>
      <node id="8076">
        <label>binding_details.hpp</label>
        <link refid="binding__details_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8077" relation="include">
        </childnode>
      </node>
      <node id="8049">
        <label>boost/variant.hpp</label>
      </node>
      <node id="8117">
        <label>mlpack/core/dists/laplace_distribution.hpp</label>
        <link refid="laplace__distribution_8hpp"/>
      </node>
      <node id="8071">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="8033">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="8056">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="8057" relation="include">
        </childnode>
        <childnode refid="8033" relation="include">
        </childnode>
        <childnode refid="8040" relation="include">
        </childnode>
        <childnode refid="8058" relation="include">
        </childnode>
      </node>
      <node id="8046">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="8114">
        <label>mlpack/core/math/make_alias.hpp</label>
        <link refid="make__alias_8hpp"/>
      </node>
      <node id="8132">
        <label>mlpack/core/kernels/epanechnikov_kernel.hpp</label>
        <link refid="epanechnikov__kernel_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8124" relation="include">
        </childnode>
        <childnode refid="8133" relation="include">
        </childnode>
      </node>
      <node id="8119">
        <label>mlpack/core/dists/diagonal_gaussian_distribution.hpp</label>
        <link refid="diagonal__gaussian__distribution_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="8044">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="8030" relation="include">
        </childnode>
        <childnode refid="8032" relation="include">
        </childnode>
        <childnode refid="8033" relation="include">
        </childnode>
        <childnode refid="8031" relation="include">
        </childnode>
      </node>
      <node id="8047">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="8030" relation="include">
        </childnode>
        <childnode refid="8032" relation="include">
        </childnode>
        <childnode refid="8033" relation="include">
        </childnode>
        <childnode refid="8031" relation="include">
        </childnode>
      </node>
      <node id="8106">
        <label>mlpack/core/math/random_basis.hpp</label>
        <link refid="random__basis_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="8075">
        <label>boost/any.hpp</label>
      </node>
      <node id="8035">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="8055">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="8031" relation="include">
        </childnode>
        <childnode refid="8032" relation="include">
        </childnode>
        <childnode refid="8033" relation="include">
        </childnode>
        <childnode refid="8043" relation="include">
        </childnode>
        <childnode refid="8052" relation="include">
        </childnode>
      </node>
      <node id="8059">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="8060" relation="include">
        </childnode>
      </node>
      <node id="8012">
        <label>/home/aakash/mlpack/src/mlpack/core/data/load_csv.hpp</label>
        <link refid="load__csv_8hpp"/>
        <childnode refid="8013" relation="include">
        </childnode>
        <childnode refid="8014" relation="include">
        </childnode>
        <childnode refid="8015" relation="include">
        </childnode>
        <childnode refid="8061" relation="include">
        </childnode>
        <childnode refid="8143" relation="include">
        </childnode>
        <childnode refid="8069" relation="include">
        </childnode>
        <childnode refid="8089" relation="include">
        </childnode>
        <childnode refid="8083" relation="include">
        </childnode>
        <childnode refid="8084" relation="include">
        </childnode>
      </node>
      <node id="8061">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="8016">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="8017" relation="include">
        </childnode>
        <childnode refid="8018" relation="include">
        </childnode>
        <childnode refid="8019" relation="include">
        </childnode>
        <childnode refid="8020" relation="include">
        </childnode>
        <childnode refid="8021" relation="include">
        </childnode>
        <childnode refid="8022" relation="include">
        </childnode>
        <childnode refid="8023" relation="include">
        </childnode>
        <childnode refid="8024" relation="include">
        </childnode>
        <childnode refid="8025" relation="include">
        </childnode>
        <childnode refid="8026" relation="include">
        </childnode>
        <childnode refid="8027" relation="include">
        </childnode>
        <childnode refid="8028" relation="include">
        </childnode>
        <childnode refid="8029" relation="include">
        </childnode>
        <childnode refid="8030" relation="include">
        </childnode>
        <childnode refid="8031" relation="include">
        </childnode>
        <childnode refid="8032" relation="include">
        </childnode>
        <childnode refid="8033" relation="include">
        </childnode>
        <childnode refid="8034" relation="include">
        </childnode>
        <childnode refid="8035" relation="include">
        </childnode>
        <childnode refid="8036" relation="include">
        </childnode>
        <childnode refid="8037" relation="include">
        </childnode>
        <childnode refid="8038" relation="include">
        </childnode>
        <childnode refid="8042" relation="include">
        </childnode>
        <childnode refid="8043" relation="include">
        </childnode>
        <childnode refid="8044" relation="include">
        </childnode>
        <childnode refid="8045" relation="include">
        </childnode>
        <childnode refid="8046" relation="include">
        </childnode>
        <childnode refid="8047" relation="include">
        </childnode>
        <childnode refid="8048" relation="include">
        </childnode>
        <childnode refid="8054" relation="include">
        </childnode>
        <childnode refid="8055" relation="include">
        </childnode>
        <childnode refid="8052" relation="include">
        </childnode>
        <childnode refid="8056" relation="include">
        </childnode>
        <childnode refid="8059" relation="include">
        </childnode>
        <childnode refid="8061" relation="include">
        </childnode>
        <childnode refid="8062" relation="include">
        </childnode>
        <childnode refid="8071" relation="include">
        </childnode>
        <childnode refid="8072" relation="include">
        </childnode>
      </node>
      <node id="8098">
        <label>normalize_labels_impl.hpp</label>
      </node>
      <node id="8123">
        <label>one_hot_encoding_impl.hpp</label>
      </node>
      <node id="8105">
        <label>random</label>
      </node>
      <node id="8129">
        <label>mlpack/core/kernels/gaussian_kernel.hpp</label>
        <link refid="gaussian__kernel_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8130" relation="include">
        </childnode>
        <childnode refid="8124" relation="include">
        </childnode>
      </node>
      <node id="8085">
        <label>map_policies/increment_policy.hpp</label>
        <link refid="increment__policy_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8041" relation="include">
        </childnode>
        <childnode refid="8086" relation="include">
        </childnode>
      </node>
      <node id="8022">
        <label>cstdio</label>
      </node>
      <node id="8089">
        <label>extension.hpp</label>
        <link refid="extension_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="8026">
        <label>tuple</label>
      </node>
      <node id="8031">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="8048">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="8031" relation="include">
        </childnode>
        <childnode refid="8032" relation="include">
        </childnode>
        <childnode refid="8033" relation="include">
        </childnode>
        <childnode refid="8035" relation="include">
        </childnode>
        <childnode refid="8049" relation="include">
        </childnode>
        <childnode refid="8050" relation="include">
        </childnode>
        <childnode refid="8051" relation="include">
        </childnode>
        <childnode refid="8052" relation="include">
        </childnode>
      </node>
      <node id="8090">
        <label>image_info_impl.hpp</label>
      </node>
      <node id="8137">
        <label>vector</label>
      </node>
      <node id="8092">
        <label>load_vec_impl.hpp</label>
      </node>
      <node id="8078">
        <label>version.hpp</label>
        <link refid="src_2mlpack_2core_2util_2version_8hpp"/>
        <childnode refid="8069" relation="include">
        </childnode>
      </node>
      <node id="8099">
        <label>mlpack/core/math/clamp.hpp</label>
        <link refid="clamp_8hpp"/>
        <childnode refid="8100" relation="include">
        </childnode>
        <childnode refid="8101" relation="include">
        </childnode>
        <childnode refid="8102" relation="include">
        </childnode>
      </node>
      <node id="8013">
        <label>boost/spirit/include/qi.hpp</label>
      </node>
      <node id="8103">
        <label>mlpack/core/math/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8104" relation="include">
        </childnode>
        <childnode refid="8105" relation="include">
        </childnode>
      </node>
      <node id="8027">
        <label>utility</label>
      </node>
      <node id="8051">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="8091">
        <label>load_model_impl.hpp</label>
      </node>
      <node id="8042">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="8039">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="8040" relation="include">
        </childnode>
      </node>
      <node id="8136">
        <label>mlpack/core/kernels/pspectrum_string_kernel.hpp</label>
        <link refid="pspectrum__string__kernel_8hpp"/>
        <childnode refid="8067" relation="include">
        </childnode>
        <childnode refid="8069" relation="include">
        </childnode>
        <childnode refid="8137" relation="include">
        </childnode>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8061" relation="include">
        </childnode>
        <childnode refid="8138" relation="include">
        </childnode>
      </node>
      <node id="8111">
        <label>mlpack/core/math/shuffle_data.hpp</label>
        <link refid="shuffle__data_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="8097">
        <label>mlpack/core/data/normalize_labels.hpp</label>
        <link refid="normalize__labels_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8098" relation="include">
        </childnode>
      </node>
      <node id="8062">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="8063" relation="include">
        </childnode>
        <childnode refid="8064" relation="include">
        </childnode>
        <childnode refid="8065" relation="include">
        </childnode>
        <childnode refid="8066" relation="include">
        </childnode>
        <childnode refid="8067" relation="include">
        </childnode>
        <childnode refid="8068" relation="include">
        </childnode>
        <childnode refid="8069" relation="include">
        </childnode>
        <childnode refid="8070" relation="include">
        </childnode>
      </node>
      <node id="8040">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="8054">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="8052" relation="include">
        </childnode>
        <childnode refid="8048" relation="include">
        </childnode>
        <childnode refid="8055" relation="include">
        </childnode>
      </node>
      <node id="8101">
        <label>math.h</label>
      </node>
      <node id="8079">
        <label>param_data.hpp</label>
        <link refid="param__data_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8075" relation="include">
        </childnode>
      </node>
      <node id="8023">
        <label>cstdlib</label>
      </node>
      <node id="8115">
        <label>mlpack/core/dists/discrete_distribution.hpp</label>
        <link refid="discrete__distribution_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8061" relation="include">
        </childnode>
        <childnode refid="8103" relation="include">
        </childnode>
      </node>
      <node id="8018">
        <label>cctype</label>
      </node>
      <node id="8074">
        <label>iostream</label>
      </node>
      <node id="8126">
        <label>mlpack/core/kernels/polynomial_kernel.hpp</label>
        <link refid="polynomial__kernel_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="8121">
        <label>confusion_matrix_impl.hpp</label>
      </node>
      <node id="8041">
        <label>unordered_map</label>
      </node>
      <node id="8088">
        <label>image_info.hpp</label>
        <link refid="image__info_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8089" relation="include">
        </childnode>
        <childnode refid="8090" relation="include">
        </childnode>
      </node>
      <node id="8020">
        <label>climits</label>
      </node>
      <node id="8084">
        <label>dataset_mapper.hpp</label>
        <link refid="dataset__mapper_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8041" relation="include">
        </childnode>
        <childnode refid="8085" relation="include">
        </childnode>
        <childnode refid="8087" relation="include">
        </childnode>
      </node>
      <node id="8112">
        <label>mlpack/core/math/ccov.hpp</label>
        <link refid="ccov_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8113" relation="include">
        </childnode>
      </node>
      <node id="8068">
        <label>mutex</label>
      </node>
      <node id="8094">
        <label>mlpack/core/data/save.hpp</label>
        <link refid="save_8hpp"/>
        <childnode refid="8061" relation="include">
        </childnode>
        <childnode refid="8028" relation="include">
        </childnode>
        <childnode refid="8069" relation="include">
        </childnode>
        <childnode refid="8083" relation="include">
        </childnode>
        <childnode refid="8088" relation="include">
        </childnode>
        <childnode refid="8095" relation="include">
        </childnode>
      </node>
      <node id="8064">
        <label>chrono</label>
      </node>
      <node id="8072">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="8113">
        <label>ccov_impl.hpp</label>
      </node>
      <node id="8140">
        <label>boost/math/special_functions/gamma.hpp</label>
      </node>
      <node id="8070">
        <label>thread</label>
      </node>
      <node id="8142">
        <label>mlpack/core/kernels/cauchy_kernel.hpp</label>
        <link refid="cauchy__kernel_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8130" relation="include">
        </childnode>
        <childnode refid="8124" relation="include">
        </childnode>
      </node>
      <node id="8081">
        <label>params_impl.hpp</label>
      </node>
      <node id="8058">
        <label>type_traits</label>
      </node>
      <node id="8143">
        <label>set</label>
      </node>
      <node id="8034">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="8138">
        <label>pspectrum_string_kernel_impl.hpp</label>
      </node>
      <node id="8028">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="8052">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="8030" relation="include">
        </childnode>
        <childnode refid="8031" relation="include">
        </childnode>
        <childnode refid="8032" relation="include">
        </childnode>
        <childnode refid="8033" relation="include">
        </childnode>
        <childnode refid="8053" relation="include">
        </childnode>
      </node>
      <node id="8110">
        <label>mlpack/core/math/round.hpp</label>
        <link refid="round_8hpp"/>
      </node>
      <node id="8141">
        <label>mlpack/core/kernels/triangular_kernel.hpp</label>
        <link refid="triangular__kernel_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8130" relation="include">
        </childnode>
      </node>
      <node id="8024">
        <label>cstring</label>
      </node>
      <node id="8043">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="8073">
        <label>mlpack/core/util/io.hpp</label>
        <link refid="io_8hpp"/>
        <childnode refid="8074" relation="include">
        </childnode>
        <childnode refid="8066" relation="include">
        </childnode>
        <childnode refid="8067" relation="include">
        </childnode>
        <childnode refid="8069" relation="include">
        </childnode>
        <childnode refid="8075" relation="include">
        </childnode>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8062" relation="include">
        </childnode>
        <childnode refid="8076" relation="include">
        </childnode>
        <childnode refid="8077" relation="include">
        </childnode>
        <childnode refid="8078" relation="include">
        </childnode>
        <childnode refid="8079" relation="include">
        </childnode>
        <childnode refid="8080" relation="include">
        </childnode>
        <childnode refid="8082" relation="include">
        </childnode>
        <childnode refid="8094" relation="include">
        </childnode>
        <childnode refid="8096" relation="include">
        </childnode>
      </node>
      <node id="8032">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
      <node id="8116">
        <label>mlpack/core/dists/gaussian_distribution.hpp</label>
        <link refid="gaussian__distribution_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="8130">
        <label>mlpack/core/metrics/lmetric.hpp</label>
        <link refid="lmetric_8hpp"/>
        <childnode refid="8016" relation="include">
        </childnode>
        <childnode refid="8131" relation="include">
        </childnode>
      </node>
      <node id="8083">
        <label>format.hpp</label>
        <link refid="format_8hpp"/>
      </node>
    </incdepgraph>
    <innerclass refid="classmlpack_1_1data_1_1LoadCSV" prot="public">mlpack::data::LoadCSV</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1data">mlpack::data</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>ThamNgapWei</para></simplesect>
This is a csv parsers which use to parse the csv file format</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#ifndef<sp/>MLPACK_CORE_DATA_LOAD_CSV_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_CORE_DATA_LOAD_CSV_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/spirit/include/qi.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/trim.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="core_8hpp" kindref="compound">mlpack/core.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mlpack/core/util/log.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="extension_8hpp" kindref="compound">extension.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="format_8hpp" kindref="compound">format.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dataset__mapper_8hpp" kindref="compound">dataset_mapper.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">data<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classmlpack_1_1data_1_1LoadCSV" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1data_1_1LoadCSV" kindref="compound">LoadCSV</ref></highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1data_1_1LoadCSV_1a39a5511767ebc8669a67744d5f959a5e" kindref="member">LoadCSV</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>file);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PolicyType&gt;</highlight></codeline>
<codeline lineno="55" refid="classmlpack_1_1data_1_1LoadCSV_1ac274f442f96c30aebefd561936c7afb4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1LoadCSV_1ac274f442f96c30aebefd561936c7afb4" kindref="member">Load</ref>(arma::Mat&lt;T&gt;<sp/>&amp;inout,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1data_1_1DatasetMapper" kindref="compound">DatasetMapper&lt;PolicyType&gt;</ref><sp/>&amp;infoSet,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>transpose<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckOpen();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transpose)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TransposeParse(inout,<sp/>infoSet);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NonTransposeParse(inout,<sp/>infoSet);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MapPolicy&gt;</highlight></codeline>
<codeline lineno="78" refid="classmlpack_1_1data_1_1LoadCSV_1ac22f0004512d4333b29b2e685ef3a5d7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1LoadCSV_1ac22f0004512d4333b29b2e685ef3a5d7" kindref="member">GetMatrixSize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>rows,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>cols,<sp/><ref refid="classmlpack_1_1data_1_1DatasetMapper" kindref="compound">DatasetMapper&lt;MapPolicy&gt;</ref>&amp;<sp/>info)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::spirit;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>a<sp/>pass<sp/>through<sp/>the<sp/>file.<sp/><sp/>If<sp/>the<sp/>DatasetMapper<sp/>policy<sp/>requires<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>pass<sp/>everything<sp/>string<sp/>through<sp/>MapString().<sp/><sp/>This<sp/>might<sp/>be<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if,<sp/>e.g.,<sp/>the<sp/>MapPolicy<sp/>needs<sp/>to<sp/>find<sp/>which<sp/>dimensions<sp/>are<sp/>numeric<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>categorical.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>inFile.clear();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>inFile.seekg(0,<sp/>std::ios::beg);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>cols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>count<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>in<sp/>the<sp/>file<sp/>(this<sp/>is<sp/>the<sp/>dimensionality).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::getline(inFile,<sp/>line))</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++rows;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>DatasetInfo<sp/>object,<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.<ref refid="classmlpack_1_1data_1_1DatasetMapper_1a78eda6bfb9e9462afa0fc85e32abe1af" kindref="member">Dimensionality</ref>()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info.<ref refid="classmlpack_1_1data_1_1DatasetMapper_1ae0e1d3459cf5bee5e688beaadf9a4f04" kindref="member">SetDimensionality</ref>(rows);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.<ref refid="classmlpack_1_1data_1_1DatasetMapper_1a78eda6bfb9e9462afa0fc85e32abe1af" kindref="member">Dimensionality</ref>()<sp/>!=<sp/>rows)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;data::LoadCSV():<sp/>given<sp/>DatasetInfo<sp/>has<sp/>dimensionality<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>info.<ref refid="classmlpack_1_1data_1_1DatasetMapper_1a78eda6bfb9e9462afa0fc85e32abe1af" kindref="member">Dimensionality</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>data<sp/>has<sp/>dimensionality<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>rows;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(oss.str());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>jump<sp/>back<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>inFile.clear();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>inFile.seekg(0,<sp/>std::ios::beg);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::getline(inFile,<sp/>line))</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++rows;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>whitespace<sp/>from<sp/>either<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::trim(line);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>number<sp/>of<sp/>columns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>findColSize<sp/>=<sp/>[&amp;cols](iter_type)<sp/>{<sp/>++cols;<sp/>};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qi::parse(line.begin(),<sp/>line.end(),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringRule[findColSize]<sp/>%<sp/>delimiterRule);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>guess<sp/>this<sp/>is<sp/>technically<sp/>a<sp/>second<sp/>pass,<sp/>but<sp/>that&apos;s<sp/>ok...<sp/>still<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>idea...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MapPolicy::NeedsFirstPass)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>we<sp/>must<sp/>pass<sp/>everything<sp/>we<sp/>parse<sp/>to<sp/>the<sp/>MapPolicy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>firstPassMap<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iter_type&amp;<sp/>iter)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str(iter.begin(),<sp/>iter.end());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::trim(str);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.template<sp/>MapFirstPass&lt;T&gt;(std::move(str),<sp/>rows<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>parse<sp/>the<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qi::parse(line.begin(),<sp/>line.end(),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringRule[firstPassMap]<sp/>%<sp/>delimiterRule);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MapPolicy&gt;</highlight></codeline>
<codeline lineno="164" refid="classmlpack_1_1data_1_1LoadCSV_1aa47dac31ae48b7a106733cbe1937c134" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1LoadCSV_1aa47dac31ae48b7a106733cbe1937c134" kindref="member">GetTransposeMatrixSize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>rows,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>cols,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1data_1_1DatasetMapper" kindref="compound">DatasetMapper&lt;MapPolicy&gt;</ref>&amp;<sp/>info)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::spirit;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>a<sp/>pass<sp/>through<sp/>the<sp/>file.<sp/><sp/>If<sp/>the<sp/>DatasetMapper<sp/>policy<sp/>requires<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>pass<sp/>everything<sp/>string<sp/>through<sp/>MapString().<sp/><sp/>This<sp/>might<sp/>be<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if,<sp/>e.g.,<sp/>the<sp/>MapPolicy<sp/>needs<sp/>to<sp/>find<sp/>which<sp/>dimensions<sp/>are<sp/>numeric<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>categorical.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>inFile.clear();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>inFile.seekg(0,<sp/>std::ios::beg);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>rows<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>cols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::getline(inFile,<sp/>line))</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++cols;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>whitespace<sp/>from<sp/>either<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::trim(line);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cols<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>number<sp/>of<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>findRowSize<sp/>=<sp/>[&amp;rows](iter_type)<sp/>{<sp/>++rows;<sp/>};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qi::parse(line.begin(),<sp/>line.end(),</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringRule[findRowSize]<sp/>%<sp/>delimiterRule);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>DatasetInfo<sp/>object,<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.<ref refid="classmlpack_1_1data_1_1DatasetMapper_1a78eda6bfb9e9462afa0fc85e32abe1af" kindref="member">Dimensionality</ref>()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.<ref refid="classmlpack_1_1data_1_1DatasetMapper_1ae0e1d3459cf5bee5e688beaadf9a4f04" kindref="member">SetDimensionality</ref>(rows);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.<ref refid="classmlpack_1_1data_1_1DatasetMapper_1a78eda6bfb9e9462afa0fc85e32abe1af" kindref="member">Dimensionality</ref>()<sp/>!=<sp/>rows)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;data::LoadCSV():<sp/>given<sp/>DatasetInfo<sp/>has<sp/>dimensionality<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>info.<ref refid="classmlpack_1_1data_1_1DatasetMapper_1a78eda6bfb9e9462afa0fc85e32abe1af" kindref="member">Dimensionality</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>data<sp/>has<sp/>dimensionality<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>rows;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(oss.str());</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>need<sp/>to<sp/>do<sp/>a<sp/>first<sp/>pass<sp/>for<sp/>the<sp/>DatasetMapper,<sp/>do<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MapPolicy::NeedsFirstPass)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>we<sp/>must<sp/>pass<sp/>everything<sp/>we<sp/>parse<sp/>to<sp/>the<sp/>MapPolicy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>firstPassMap<sp/>=<sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iter_type&amp;<sp/>iter)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str(iter.begin(),<sp/>iter.end());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::trim(str);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.template<sp/>MapFirstPass&lt;T&gt;(std::move(str),<sp/>dim++);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>parse<sp/>the<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qi::parse(line.begin(),<sp/>line.end(),</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringRule[firstPassMap]<sp/>%<sp/>delimiterRule);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iter_type<sp/>=<sp/>boost::iterator_range&lt;std::string::iterator&gt;;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckOpen();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PolicyType&gt;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NonTransposeParse(arma::Mat&lt;T&gt;&amp;<sp/>inout,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1data_1_1DatasetMapper" kindref="compound">DatasetMapper&lt;PolicyType&gt;</ref>&amp;<sp/>infoSet)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::spirit;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>size<sp/>of<sp/>the<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/>cols;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>GetMatrixSize&lt;T&gt;(rows,<sp/>cols,<sp/>infoSet);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>output<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>inout.set_size(rows,<sp/>cols);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>file<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>inFile.clear();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>inFile.seekg(0,<sp/>std::ios::beg);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>setCharClass<sp/>=<sp/>[&amp;](iter_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;iter)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str(iter.begin(),<sp/>iter.end());</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.clear();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::trim(str);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inout(row,<sp/>col++)<sp/>=<sp/>infoSet.template<sp/>MapString&lt;T&gt;(std::move(str),<sp/>row);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::getline(inFile,<sp/>line))</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>whitespace<sp/>from<sp/>either<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::trim(line);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>the<sp/>numbers<sp/>from<sp/>a<sp/>line<sp/>(ex:<sp/>1,2,3,4);<sp/>if<sp/>the<sp/>parser<sp/>finds<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>it<sp/>will<sp/>execute<sp/>the<sp/>setNum<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>canParse<sp/>=<sp/>qi::parse(line.begin(),<sp/>line.end(),</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringRule[setCharClass]<sp/>%<sp/>delimiterRule);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we<sp/>got<sp/>the<sp/>right<sp/>number<sp/>of<sp/>rows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col<sp/>!=<sp/>cols)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LoadCSV::NonTransposeParse():<sp/>wrong<sp/>number<sp/>of<sp/>dimensions<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>col<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>on<sp/>line<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>row<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>should<sp/>be<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cols</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>dimensions.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(oss.str());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!canParse)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LoadCSV::NonTransposeParse():<sp/>parsing<sp/>error<sp/>on<sp/>line<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>col</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(oss.str());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++row;<sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PolicyType&gt;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TransposeParse(arma::Mat&lt;T&gt;&amp;<sp/>inout,<sp/><ref refid="classmlpack_1_1data_1_1DatasetMapper" kindref="compound">DatasetMapper&lt;PolicyType&gt;</ref>&amp;<sp/>infoSet)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">boost::spirit;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>matrix<sp/>size.<sp/><sp/>This<sp/>also<sp/>initializes<sp/>infoSet<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rows,<sp/>cols;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>GetTransposeMatrixSize&lt;T&gt;(rows,<sp/>cols,<sp/>infoSet);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>matrix<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>inout.set_size(rows,<sp/>cols);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>auxiliary<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>inFile.clear();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>inFile.seekg(0,<sp/>std::ios::beg);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parseString<sp/>=<sp/>[&amp;](iter_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;iter)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>parsed<sp/>values<sp/>must<sp/>be<sp/>mapped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str(iter.begin(),<sp/>iter.end());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::trim(str);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inout(row,<sp/>col)<sp/>=<sp/>infoSet.template<sp/>MapString&lt;T&gt;(std::move(str),<sp/>row);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++row;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::getline(inFile,<sp/>line))</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>whitespace<sp/>from<sp/>either<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::trim(line);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>row<sp/>we<sp/>are<sp/>looking<sp/>at.<sp/><sp/>(Remember<sp/>this<sp/>is<sp/>transposed.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>use<sp/>boost::spirit<sp/>to<sp/>parse<sp/>the<sp/>characters<sp/>of<sp/>the<sp/>line;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parseString()<sp/>will<sp/>be<sp/>called<sp/>when<sp/>a<sp/>token<sp/>is<sp/>detected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>canParse<sp/>=<sp/>qi::parse(line.begin(),<sp/>line.end(),</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringRule[parseString]<sp/>%<sp/>delimiterRule);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>we<sp/>got<sp/>the<sp/>right<sp/>number<sp/>of<sp/>rows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>!=<sp/>rows)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LoadCSV::TransposeParse():<sp/>wrong<sp/>number<sp/>of<sp/>dimensions<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>row</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>on<sp/>line<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>col<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>should<sp/>be<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rows<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>dimensions.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(oss.str());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!canParse)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LoadCSV::TransposeParse():<sp/>parsing<sp/>error<sp/>on<sp/>line<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>col</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(oss.str());</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>the<sp/>column<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++col;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>boost::spirit::qi::rule&lt;std::string::iterator,<sp/>iter_type()&gt;<sp/>stringRule;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>boost::spirit::qi::rule&lt;std::string::iterator,<sp/>iter_type()&gt;<sp/>delimiterRule;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>std::string<sp/>extension;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>std::string<sp/>filename;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>inFile;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">};</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/core/data/load_csv.hpp"/>
  </compounddef>
</doxygen>
