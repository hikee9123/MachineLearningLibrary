<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="best__binary__numeric__split_8hpp" kind="file" language="C++">
    <compoundname>best_binary_numeric_split.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <includes refid="mse__gain_8hpp" local="yes">mse_gain.hpp</includes>
    <includes refid="sfinae__utility_8hpp" local="no">mlpack/core/util/sfinae_utility.hpp</includes>
    <includes local="yes">best_binary_numeric_split_impl.hpp</includes>
    <includedby refid="decision__tree_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/methods/decision_tree/decision_tree.hpp</includedby>
    <includedby refid="decision__tree__regressor_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/methods/decision_tree/decision_tree_regressor.hpp</includedby>
    <incdepgraph>
      <node id="48234">
        <label>list</label>
      </node>
      <node id="48231">
        <label>atomic</label>
      </node>
      <node id="48183">
        <label>/home/aakash/mlpack/src/mlpack/methods/decision_tree/best_binary_numeric_split.hpp</label>
        <link refid="best__binary__numeric__split_8hpp"/>
        <childnode refid="48184" relation="include">
        </childnode>
        <childnode refid="48241" relation="include">
        </childnode>
        <childnode refid="48225" relation="include">
        </childnode>
        <childnode refid="48243" relation="include">
        </childnode>
      </node>
      <node id="48221">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="48197">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="48233">
        <label>iomanip</label>
      </node>
      <node id="48206">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="48207" relation="include">
        </childnode>
        <childnode refid="48209" relation="include">
        </childnode>
      </node>
      <node id="48189">
        <label>cstdint</label>
      </node>
      <node id="48198">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="48205">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="48228">
        <label>arma_config.hpp</label>
      </node>
      <node id="48218">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="48185">
        <label>cmath</label>
      </node>
      <node id="48204">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="48242">
        <label>utils.hpp</label>
        <link refid="utils_8hpp"/>
      </node>
      <node id="48193">
        <label>stdexcept</label>
      </node>
      <node id="48213">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="48198" relation="include">
        </childnode>
        <childnode refid="48200" relation="include">
        </childnode>
        <childnode refid="48201" relation="include">
        </childnode>
        <childnode refid="48199" relation="include">
        </childnode>
      </node>
      <node id="48237">
        <label>string</label>
      </node>
      <node id="48225">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="48226" relation="include">
        </childnode>
        <childnode refid="48192" relation="include">
        </childnode>
      </node>
      <node id="48235">
        <label>map</label>
      </node>
      <node id="48187">
        <label>cfloat</label>
      </node>
      <node id="48217">
        <label>boost/variant.hpp</label>
      </node>
      <node id="48239">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="48201">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="48224">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="48225" relation="include">
        </childnode>
        <childnode refid="48201" relation="include">
        </childnode>
        <childnode refid="48208" relation="include">
        </childnode>
        <childnode refid="48226" relation="include">
        </childnode>
      </node>
      <node id="48214">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="48212">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="48198" relation="include">
        </childnode>
        <childnode refid="48200" relation="include">
        </childnode>
        <childnode refid="48201" relation="include">
        </childnode>
        <childnode refid="48199" relation="include">
        </childnode>
      </node>
      <node id="48215">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="48198" relation="include">
        </childnode>
        <childnode refid="48200" relation="include">
        </childnode>
        <childnode refid="48201" relation="include">
        </childnode>
        <childnode refid="48199" relation="include">
        </childnode>
      </node>
      <node id="48203">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="48223">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="48199" relation="include">
        </childnode>
        <childnode refid="48200" relation="include">
        </childnode>
        <childnode refid="48201" relation="include">
        </childnode>
        <childnode refid="48211" relation="include">
        </childnode>
        <childnode refid="48220" relation="include">
        </childnode>
      </node>
      <node id="48227">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="48228" relation="include">
        </childnode>
      </node>
      <node id="48229">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="48184">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="48185" relation="include">
        </childnode>
        <childnode refid="48186" relation="include">
        </childnode>
        <childnode refid="48187" relation="include">
        </childnode>
        <childnode refid="48188" relation="include">
        </childnode>
        <childnode refid="48189" relation="include">
        </childnode>
        <childnode refid="48190" relation="include">
        </childnode>
        <childnode refid="48191" relation="include">
        </childnode>
        <childnode refid="48192" relation="include">
        </childnode>
        <childnode refid="48193" relation="include">
        </childnode>
        <childnode refid="48194" relation="include">
        </childnode>
        <childnode refid="48195" relation="include">
        </childnode>
        <childnode refid="48196" relation="include">
        </childnode>
        <childnode refid="48197" relation="include">
        </childnode>
        <childnode refid="48198" relation="include">
        </childnode>
        <childnode refid="48199" relation="include">
        </childnode>
        <childnode refid="48200" relation="include">
        </childnode>
        <childnode refid="48201" relation="include">
        </childnode>
        <childnode refid="48202" relation="include">
        </childnode>
        <childnode refid="48203" relation="include">
        </childnode>
        <childnode refid="48204" relation="include">
        </childnode>
        <childnode refid="48205" relation="include">
        </childnode>
        <childnode refid="48206" relation="include">
        </childnode>
        <childnode refid="48210" relation="include">
        </childnode>
        <childnode refid="48211" relation="include">
        </childnode>
        <childnode refid="48212" relation="include">
        </childnode>
        <childnode refid="48213" relation="include">
        </childnode>
        <childnode refid="48214" relation="include">
        </childnode>
        <childnode refid="48215" relation="include">
        </childnode>
        <childnode refid="48216" relation="include">
        </childnode>
        <childnode refid="48222" relation="include">
        </childnode>
        <childnode refid="48223" relation="include">
        </childnode>
        <childnode refid="48220" relation="include">
        </childnode>
        <childnode refid="48224" relation="include">
        </childnode>
        <childnode refid="48227" relation="include">
        </childnode>
        <childnode refid="48229" relation="include">
        </childnode>
        <childnode refid="48230" relation="include">
        </childnode>
        <childnode refid="48239" relation="include">
        </childnode>
        <childnode refid="48240" relation="include">
        </childnode>
      </node>
      <node id="48190">
        <label>cstdio</label>
      </node>
      <node id="48194">
        <label>tuple</label>
      </node>
      <node id="48199">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="48216">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="48199" relation="include">
        </childnode>
        <childnode refid="48200" relation="include">
        </childnode>
        <childnode refid="48201" relation="include">
        </childnode>
        <childnode refid="48203" relation="include">
        </childnode>
        <childnode refid="48217" relation="include">
        </childnode>
        <childnode refid="48218" relation="include">
        </childnode>
        <childnode refid="48219" relation="include">
        </childnode>
        <childnode refid="48220" relation="include">
        </childnode>
      </node>
      <node id="48195">
        <label>utility</label>
      </node>
      <node id="48219">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="48210">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="48207">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="48208" relation="include">
        </childnode>
      </node>
      <node id="48230">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="48231" relation="include">
        </childnode>
        <childnode refid="48232" relation="include">
        </childnode>
        <childnode refid="48233" relation="include">
        </childnode>
        <childnode refid="48234" relation="include">
        </childnode>
        <childnode refid="48235" relation="include">
        </childnode>
        <childnode refid="48236" relation="include">
        </childnode>
        <childnode refid="48237" relation="include">
        </childnode>
        <childnode refid="48238" relation="include">
        </childnode>
      </node>
      <node id="48208">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="48222">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="48220" relation="include">
        </childnode>
        <childnode refid="48216" relation="include">
        </childnode>
        <childnode refid="48223" relation="include">
        </childnode>
      </node>
      <node id="48191">
        <label>cstdlib</label>
      </node>
      <node id="48186">
        <label>cctype</label>
      </node>
      <node id="48209">
        <label>unordered_map</label>
      </node>
      <node id="48188">
        <label>climits</label>
      </node>
      <node id="48236">
        <label>mutex</label>
      </node>
      <node id="48232">
        <label>chrono</label>
      </node>
      <node id="48240">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="48238">
        <label>thread</label>
      </node>
      <node id="48226">
        <label>type_traits</label>
      </node>
      <node id="48202">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="48196">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="48220">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="48198" relation="include">
        </childnode>
        <childnode refid="48199" relation="include">
        </childnode>
        <childnode refid="48200" relation="include">
        </childnode>
        <childnode refid="48201" relation="include">
        </childnode>
        <childnode refid="48221" relation="include">
        </childnode>
      </node>
      <node id="48241">
        <label>mse_gain.hpp</label>
        <link refid="mse__gain_8hpp"/>
        <childnode refid="48184" relation="include">
        </childnode>
        <childnode refid="48242" relation="include">
        </childnode>
      </node>
      <node id="48243">
        <label>best_binary_numeric_split_impl.hpp</label>
      </node>
      <node id="48192">
        <label>cstring</label>
      </node>
      <node id="48211">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="48200">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="48244">
        <label>/home/aakash/mlpack/src/mlpack/methods/decision_tree/best_binary_numeric_split.hpp</label>
        <link refid="best__binary__numeric__split_8hpp"/>
        <childnode refid="48245" relation="include">
        </childnode>
        <childnode refid="48248" relation="include">
        </childnode>
      </node>
      <node id="48245">
        <label>/home/aakash/mlpack/src/mlpack/methods/decision_tree/decision_tree.hpp</label>
        <link refid="decision__tree_8hpp"/>
        <childnode refid="48246" relation="include">
        </childnode>
        <childnode refid="48247" relation="include">
        </childnode>
      </node>
      <node id="48246">
        <label>/home/aakash/mlpack/src/mlpack/methods/adaboost/adaboost.hpp</label>
        <link refid="adaboost_8hpp"/>
      </node>
      <node id="48247">
        <label>/home/aakash/mlpack/src/mlpack/methods/random_forest/random_forest.hpp</label>
        <link refid="random__forest_8hpp"/>
      </node>
      <node id="48248">
        <label>/home/aakash/mlpack/src/mlpack/methods/decision_tree/decision_tree_regressor.hpp</label>
        <link refid="decision__tree__regressor_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit" prot="public">mlpack::tree::BestBinaryNumericSplit</innerclass>
    <innerclass refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" prot="public">mlpack::tree::BestBinaryNumericSplit::AuxiliarySplitInfo</innerclass>
    <innerclass refid="structmlpack_1_1tree_1_1HasOptimizedBinarySplitForms" prot="public">mlpack::tree::HasOptimizedBinarySplitForms</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1tree">mlpack::tree</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin</para></simplesect>
A tree splitter that finds the best binary numeric split.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#ifndef<sp/>MLPACK_METHODS_DECISION_TREE_BEST_BINARY_NUMERIC_SPLIT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_METHODS_DECISION_TREE_BEST_BINARY_NUMERIC_SPLIT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mse__gain_8hpp" kindref="compound">mse_gain.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sfinae__utility_8hpp" kindref="compound">mlpack/core/util/sfinae_utility.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tree<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>gives<sp/>us<sp/>a<sp/>HasBinaryGains&lt;T,<sp/>U&gt;<sp/>type<sp/>(where<sp/>U<sp/>is<sp/>a<sp/>function<sp/>pointer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>use<sp/>with<sp/>SFINAE<sp/>to<sp/>catch<sp/>when<sp/>a<sp/>type<sp/>has<sp/>a<sp/>BinaryGains(...)<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="namespacemlpack_1_1tree_1a5a0616a02855490670d1d895a6195ac7" kindref="member">HAS_MEM_FUNC</ref>(BinaryGains,<sp/>HasBinaryGains);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>struct<sp/>will<sp/>have<sp/>`value`<sp/>set<sp/>to<sp/>`true`<sp/>if<sp/>a<sp/>BinaryGains()<sp/>function<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>right<sp/>signature<sp/>is<sp/>detected.<sp/><sp/>We<sp/>only<sp/>check<sp/>for<sp/>BinaryGains(),<sp/>and<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BinaryScanInitialize()<sp/>or<sp/>BinaryStep(),<sp/>because<sp/>those<sp/>two<sp/>are<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>members<sp/>functions<sp/>and<sp/>would<sp/>make<sp/>this<sp/>check<sp/>far<sp/>more<sp/>difficult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>unused<sp/>UseWeights<sp/>template<sp/>parameter<sp/>is<sp/>necessary<sp/>to<sp/>ensure<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler<sp/>thinks<sp/>the<sp/>result<sp/>`value`<sp/>depends<sp/>on<sp/>a<sp/>parameter<sp/>specific<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SplitIfBetter()<sp/>function<sp/>in<sp/>BestBinaryNumericSplit().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>UseWeights<sp/>*/</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="36" refid="structmlpack_1_1tree_1_1HasOptimizedBinarySplitForms" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmlpack_1_1tree_1_1HasOptimizedBinarySplitForms" kindref="compound">HasOptimizedBinarySplitForms</ref></highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38" refid="structmlpack_1_1tree_1_1HasOptimizedBinarySplitForms_1a11ddd051208250c32dc4985abcafa86d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structmlpack_1_1tree_1_1HasOptimizedBinarySplitForms_1a11ddd051208250c32dc4985abcafa86d" kindref="member">value</ref><sp/>=<sp/>HasBinaryGains&lt;T,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::tuple&lt;double,<sp/>double&gt;(T::*)()&gt;<ref refid="structmlpack_1_1tree_1_1HasOptimizedBinarySplitForms_1a11ddd051208250c32dc4985abcafa86d" kindref="member">::value</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FitnessFunction&gt;</highlight></codeline>
<codeline lineno="49" refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit" kindref="compound">BestBinaryNumericSplit</ref></highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>extra<sp/>info<sp/>needed<sp/>for<sp/>split.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" kindref="compound">AuxiliarySplitInfo</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UseWeights,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VecType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>WeightVecType&gt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SplitIfBetter(</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bestGain,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VecType&amp;<sp/>data,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Row&lt;size_t&gt;&amp;<sp/>labels,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numClasses,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WeightVecType&amp;<sp/>weights,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>minimumLeafSize,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minimumGainSplit,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec&amp;<sp/>splitInfo,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" kindref="compound">AuxiliarySplitInfo</ref>&amp;<sp/>aux);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UseWeights,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VecType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResponsesType,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>WeightVecType&gt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="structmlpack_1_1tree_1_1HasOptimizedBinarySplitForms" kindref="compound">HasOptimizedBinarySplitForms&lt;FitnessFunction, UseWeights&gt;::value</ref>,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>SplitIfBetter(</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bestGain,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VecType&amp;<sp/>data,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ResponsesType&amp;<sp/>responses,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WeightVecType&amp;<sp/>weights,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>minimumLeafSize,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minimumGainSplit,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>splitInfo,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" kindref="compound">AuxiliarySplitInfo</ref>&amp;<sp/>aux,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FitnessFunction&amp;<sp/>fitnessFunction);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>UseWeights,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VecType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResponsesType,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>WeightVecType&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structmlpack_1_1tree_1_1HasOptimizedBinarySplitForms" kindref="compound">HasOptimizedBinarySplitForms&lt;FitnessFunction, UseWeights&gt;::value</ref>,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;::type</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>SplitIfBetter(</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bestGain,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VecType&amp;<sp/>data,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ResponsesType&amp;<sp/>responses,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WeightVecType&amp;<sp/>weights,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>minimumLeafSize,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minimumGainSplit,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>splitInfo,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" kindref="compound">AuxiliarySplitInfo</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>aux<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FitnessFunction&amp;<sp/>fitnessFunction);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1a822dda54d3f80cda15f57c1bcdc45cbc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1a822dda54d3f80cda15f57c1bcdc45cbc" kindref="member">NumChildren</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="comment">/*<sp/>splitInfo<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" kindref="compound">AuxiliarySplitInfo</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>aux<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ElemType&gt;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>CalculateDirection(</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ElemType&amp;<sp/>point,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>splitInfo,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" kindref="compound">AuxiliarySplitInfo</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>aux<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal">};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;best_binary_numeric_split_impl.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/methods/decision_tree/best_binary_numeric_split.hpp"/>
  </compounddef>
</doxygen>
