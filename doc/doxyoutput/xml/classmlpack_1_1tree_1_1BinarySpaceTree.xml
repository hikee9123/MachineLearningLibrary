<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1tree_1_1BinarySpaceTree" kind="class" language="C++" prot="public">
    <compoundname>mlpack::tree::BinarySpaceTree</compoundname>
    <includes refid="binary__space__tree_2binary__space__tree_8hpp" local="no">binary_space_tree.hpp</includes>
    <innerclass refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1BreadthFirstDualTreeTraverser" prot="public">mlpack::tree::BinarySpaceTree::BreadthFirstDualTreeTraverser</innerclass>
    <innerclass refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1DualTreeTraverser" prot="public">mlpack::tree::BinarySpaceTree::DualTreeTraverser</innerclass>
    <innerclass refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1SingleTreeTraverser" prot="public">mlpack::tree::BinarySpaceTree::SingleTreeTraverser</innerclass>
    <templateparamlist>
      <param>
        <type>typename MetricType</type>
      </param>
      <param>
        <type>typename StatisticType</type>
        <defval><ref refid="classmlpack_1_1tree_1_1EmptyStatistic" kindref="compound">EmptyStatistic</ref></defval>
      </param>
      <param>
        <type>typename MatType</type>
        <defval>arma::mat</defval>
      </param>
      <param>
        <type>template&lt; typename BoundMetricType, typename... &gt; class</type>
        <declname>BoundType</declname>
        <defname>BoundType</defname>
        <defval><ref refid="classmlpack_1_1bound_1_1HRectBound" kindref="compound">bound::HRectBound</ref></defval>
      </param>
      <param>
        <type>template&lt; typename SplitBoundType, typename SplitMatType &gt; class</type>
        <declname>SplitType</declname>
        <defname>SplitType</defname>
        <defval><ref refid="classmlpack_1_1tree_1_1MidpointSplit" kindref="compound">MidpointSplit</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" prot="public" static="no">
        <type>MatType::elem_type</type>
        <definition>typedef MatType::elem_type ElemType</definition>
        <argsstring></argsstring>
        <name>ElemType</name>
        <briefdescription>
<para>The type of element held in MatType. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="60" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a57758caa2e58c3fe05d1284eeabae523" prot="public" static="no">
        <type>MatType</type>
        <definition>typedef MatType Mat</definition>
        <argsstring></argsstring>
        <name>Mat</name>
        <briefdescription>
<para>So other classes can use TreeType::Mat. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="58" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a2fbe69d8cb6be0a0735b5df955708ade" prot="public" static="no">
        <type>SplitType&lt; BoundType&lt; MetricType &gt;, MatType &gt;</type>
        <definition>typedef SplitType&lt;BoundType&lt;MetricType&gt;, MatType&gt; Split</definition>
        <argsstring></argsstring>
        <name>Split</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="62" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1BinarySpaceTree_1aac83a4c2da46afd4932602be91f84961" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t begin</definition>
        <argsstring></argsstring>
        <name>begin</name>
        <briefdescription>
<para>The index of the first point in the dataset contained in this node (and its children). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="73" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a41c8947763b634c9afbfc966dceadf6e" prot="private" static="no" mutable="no">
        <type>BoundType&lt; MetricType &gt;</type>
        <definition>BoundType&lt;MetricType&gt; bound</definition>
        <argsstring></argsstring>
        <name>bound</name>
        <briefdescription>
<para>The bound object for this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="78" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a76d971a3c552bc58ba9f0d5fceae9806" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <briefdescription>
<para>The number of points of the dataset contained in this node (and its children). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="76" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a5a181abd72e80483265881c41c67689a" prot="private" static="no" mutable="no">
        <type>MatType *</type>
        <definition>MatType* dataset</definition>
        <argsstring></argsstring>
        <name>dataset</name>
        <briefdescription>
<para>The dataset. </para>        </briefdescription>
        <detaileddescription>
<para>If we are the root of the tree, we own the dataset and must delete it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="90" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1BinarySpaceTree_1abac6d3189ea06ff1b589cbf2e736568b" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType furthestDescendantDistance</definition>
        <argsstring></argsstring>
        <name>furthestDescendantDistance</name>
        <briefdescription>
<para>The worst possible distance to the furthest descendant, cached to speed things up. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="85" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1BinarySpaceTree_1add694b14d3baf90f5cc909f2b195fa96" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *</type>
        <definition>BinarySpaceTree* left</definition>
        <argsstring></argsstring>
        <name>left</name>
        <briefdescription>
<para>The left child node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="66" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1BinarySpaceTree_1afd64f326a495af18e10a5e71e7b02143" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType minimumBoundDistance</definition>
        <argsstring></argsstring>
        <name>minimumBoundDistance</name>
        <briefdescription>
<para>The minimum distance from the center to any edge of the bound. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="87" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ad48466cfe06f238905d327d348b31789" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *</type>
        <definition>BinarySpaceTree* parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <briefdescription>
<para>The parent node (NULL if this is the root of the tree). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="70" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a110be38965cb624d9e3b4d335f962806" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType parentDistance</definition>
        <argsstring></argsstring>
        <name>parentDistance</name>
        <briefdescription>
<para>The distance from the centroid of this node to the centroid of the parent. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="82" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a5504bb1fd77ea0e02e04aab928febf03" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *</type>
        <definition>BinarySpaceTree* right</definition>
        <argsstring></argsstring>
        <name>right</name>
        <briefdescription>
<para>The right child node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="68" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a3bb6957cc0ee042b639ebc4b8b45fd37" prot="private" static="no" mutable="no">
        <type>StatisticType</type>
        <definition>StatisticType stat</definition>
        <argsstring></argsstring>
        <name>stat</name>
        <briefdescription>
<para>Any extra data contained in the node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="80" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ab2f44cbb59a08132f4c843e5225bba0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class cereal::access</definition>
        <argsstring></argsstring>
        <name>cereal::access</name>
        <briefdescription>
<para>Friend access is given for the default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="559" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="559" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a360d6a8e92c66e9c2d985b528071e93e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(const MatType &amp;data, const size_t maxLeafSize=20)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Construct this as the root node of a binary space tree using the given dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This will copy the input matrix; if you don&apos;t want this, consider using the constructor that takes an rvalue reference and use std::move().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Dataset to create tree from. This will be copied! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a38fc3cb2dd94cbd130f0444b3b06355b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(const MatType &amp;data, std::vector&lt; size_t &gt; &amp;oldFromNew, const size_t maxLeafSize=20)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>oldFromNew</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Construct this as the root node of a binary space tree using the given dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This will copy the input matrix and modify its ordering; a mapping of the old point indices to the new point indices is filled. If you don&apos;t want the matrix to be copied, consider using the constructor that takes an rvalue reference and use std::move().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Dataset to create tree from. This will be copied! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldFromNew</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be filled with the old positions for each new point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a842ae235a817cfb9c7a5a456e7d78292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(const MatType &amp;data, std::vector&lt; size_t &gt; &amp;oldFromNew, std::vector&lt; size_t &gt; &amp;newFromOld, const size_t maxLeafSize=20)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>oldFromNew</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>newFromOld</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Construct this as the root node of a binary space tree using the given dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This will copy the input matrix and modify its ordering; a mapping of the old point indices to the new point indices is filled, as well as a mapping of the new point indices to the old point indices. If you don&apos;t want the matrix to be copied, consider using the constructor that takes an rvalue reference and use std::move().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Dataset to create tree from. This will be copied! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldFromNew</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be filled with the old positions for each new point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newFromOld</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be filled with the new positions for each old point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a49ee8af5482a265fe2b7edc8bb3efdce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(MatType &amp;&amp;data, const size_t maxLeafSize=20)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type>MatType &amp;&amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Construct this as the root node of a binary space tree using the given dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This will take ownership of the data matrix; if you don&apos;t want this, consider using the constructor that takes a const reference to a dataset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Dataset to create tree from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a3753895793f9161d2793fd7b326b821d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(MatType &amp;&amp;data, std::vector&lt; size_t &gt; &amp;oldFromNew, const size_t maxLeafSize=20)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type>MatType &amp;&amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>oldFromNew</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Construct this as the root node of a binary space tree using the given dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This will take ownership of the data matrix; a mapping of the old point indices to the new point indices is filled. If you don&apos;t want the matrix to have its ownership taken, consider using the constructor that takes a const reference to a dataset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Dataset to create tree from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldFromNew</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be filled with the old positions for each new point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1abb64c00419354018fa1cd0ceb4f2eee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(MatType &amp;&amp;data, std::vector&lt; size_t &gt; &amp;oldFromNew, std::vector&lt; size_t &gt; &amp;newFromOld, const size_t maxLeafSize=20)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type>MatType &amp;&amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>oldFromNew</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>newFromOld</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Construct this as the root node of a binary space tree using the given dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This will take ownership of the data matrix; a mapping of the old point indices to the new point indices is filled, as well as a mapping of the new point indices to the old point indices. If you don&apos;t want the matrix to have its ownership taken, consider using the constructor that takes a const reference to a dataset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Dataset to create tree from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldFromNew</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be filled with the old positions for each new point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newFromOld</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be filled with the new positions for each old point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a820092388341845e2a8927478215e476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(BinarySpaceTree *parent, const size_t begin, const size_t count, SplitType&lt; BoundType&lt; MetricType &gt;, MatType &gt; &amp;splitter, const size_t maxLeafSize=20)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>SplitType&lt; BoundType&lt; MetricType &gt;, MatType &gt; &amp;</type>
          <declname>splitter</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Construct this node as a child of the given parent, starting at column begin and using count points. </para>        </briefdescription>
        <detaileddescription>
<para>The ordering of that subset of points in the parent&apos;s data matrix will be modified! This is used for recursive tree-building by the other constructors which don&apos;t specify point indices.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent of this node. Its dataset will be modified! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of point to start tree construction with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points to use to construct tree. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitter</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated node splitter object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ae79c1b69a1dc4ac4d654c43e0d1a1981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(BinarySpaceTree *parent, const size_t begin, const size_t count, std::vector&lt; size_t &gt; &amp;oldFromNew, SplitType&lt; BoundType&lt; MetricType &gt;, MatType &gt; &amp;splitter, const size_t maxLeafSize=20)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>oldFromNew</declname>
        </param>
        <param>
          <type>SplitType&lt; BoundType&lt; MetricType &gt;, MatType &gt; &amp;</type>
          <declname>splitter</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Construct this node as a child of the given parent, starting at column begin and using count points. </para>        </briefdescription>
        <detaileddescription>
<para>The ordering of that subset of points in the parent&apos;s data matrix will be modified! This is used for recursive tree-building by the other constructors which don&apos;t specify point indices.</para><para>A mapping of the old point indices to the new point indices is filled, but it is expected that the vector is already allocated with size greater than or equal to (begin + count), and if that is not true, invalid memory reads (and writes) will occur.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent of this node. Its dataset will be modified! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of point to start tree construction with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points to use to construct tree. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldFromNew</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be filled with the old positions for each new point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitter</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated node splitter object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1aae1fbad0d2639fb7bd63aac6b6a998f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(BinarySpaceTree *parent, const size_t begin, const size_t count, std::vector&lt; size_t &gt; &amp;oldFromNew, std::vector&lt; size_t &gt; &amp;newFromOld, SplitType&lt; BoundType&lt; MetricType &gt;, MatType &gt; &amp;splitter, const size_t maxLeafSize=20)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>oldFromNew</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>newFromOld</declname>
        </param>
        <param>
          <type>SplitType&lt; BoundType&lt; MetricType &gt;, MatType &gt; &amp;</type>
          <declname>splitter</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Construct this node as a child of the given parent, starting at column begin and using count points. </para>        </briefdescription>
        <detaileddescription>
<para>The ordering of that subset of points in the parent&apos;s data matrix will be modified! This is used for recursive tree-building by the other constructors which don&apos;t specify point indices.</para><para>A mapping of the old point indices to the new point indices is filled, as well as a mapping of the new point indices to the old point indices. It is expected that the vector is already allocated with size greater than or equal to (begin_in + count_in), and if that is not true, invalid memory reads (and writes) will occur.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent of this node. Its dataset will be modified! </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of point to start tree construction with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points to use to construct tree. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oldFromNew</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be filled with the old positions for each new point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newFromOld</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which will be filled with the new positions for each old point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitter</parametername>
</parameternamelist>
<parameterdescription>
<para>Splitter matrix to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of each leaf in the tree. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a32dee7101946c7d2393cc13c8d65899f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(const BinarySpaceTree &amp;other)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Create a binary space tree by copying the other tree. </para>        </briefdescription>
        <detaileddescription>
<para>Be careful! This can take a long time and use a lot of memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Tree to be copied. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a50dd4753fb64883537125f80f5dfc273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(BinarySpaceTree &amp;&amp;other)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor for a <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>; possess all the members of the given tree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a7f027dcf721e6e54ad0b5b63504cf057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>(Archive &amp;ar, const typename std::enable_if_t&lt; cereal::is_loading&lt; Archive &gt;()&gt; *=0)</argsstring>
        <name>BinarySpaceTree</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="namespacecereal_1ad79f9b690399d7e8aad9e7fc9ef3b797" kindref="member">cereal::is_loading</ref>&lt; Archive &gt;()&gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Initialize the tree from a cereal archive. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ar</parametername>
</parameternamelist>
<parameterdescription>
<para>Archive to load tree from. Must be an iarchive, not an oarchive. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ae07a273ce37bd373995e13b3ef276265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~BinarySpaceTree</definition>
        <argsstring>()</argsstring>
        <name>~BinarySpaceTree</name>
        <briefdescription>
<para>Deletes this node, deallocating the memory for the children and calling their destructors in turn. </para>        </briefdescription>
        <detaileddescription>
<para>This will invalidate any pointers or references to any nodes which are children of this one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ac50a3a009687e641fd8249e011f628d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Begin</definition>
        <argsstring>() const</argsstring>
        <name>Begin</name>
        <briefdescription>
<para>Return the index of the beginning point of this subset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="498" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="498" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a49cdbf8b1b2899522cd80f4cbff40b69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t &amp;</type>
        <definition>size_t&amp; Begin</definition>
        <argsstring>()</argsstring>
        <name>Begin</name>
        <briefdescription>
<para>Modify the index of the beginning point of this subset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="500" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="500" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ae995f23d597849b8b3fa165765921914" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const BoundType&lt; MetricType &gt; &amp;</type>
        <definition>const BoundType&lt;MetricType&gt;&amp; Bound</definition>
        <argsstring>() const</argsstring>
        <name>Bound</name>
        <briefdescription>
<para>Return the bound object for this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="319" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="319" bodyend="319"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a29d3f7fc53a6113f14949dc05d747992" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="459" endline="462">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::MaxDistance</referencedby>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a080f6b6c8d4336ff1ead4f0d0f6a0cb5" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="453" endline="456">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::MinDistance</referencedby>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a186a488e372175c6f8499115c9add8b4" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="465" endline="468">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::RangeDistance</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a1023b24dcb81cc1769a8698d0ac8b7ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BoundType&lt; MetricType &gt; &amp;</type>
        <definition>BoundType&lt;MetricType&gt;&amp; Bound</definition>
        <argsstring>()</argsstring>
        <name>Bound</name>
        <briefdescription>
<para>Return the bound object for this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="321" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="321" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1aa800439660375c0253008cafa648da78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Center</definition>
        <argsstring>(arma::vec &amp;center) const</argsstring>
        <name>Center</name>
        <param>
          <type>arma::vec &amp;</type>
          <declname>center</declname>
        </param>
        <briefdescription>
<para>Store the center of the bounding region in the given vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="508" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="508" bodyend="508"/>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::BinarySpaceTree</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a2cf9f074d6e3c683213f5f17acfbc6f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;</type>
        <definition>BinarySpaceTree&amp; Child</definition>
        <argsstring>(const size_t child) const</argsstring>
        <name>Child</name>
        <param>
          <type>const size_t</type>
          <declname>child</declname>
        </param>
        <briefdescription>
<para>Return the specified child (0 will be left, 1 will be right). </para>        </briefdescription>
        <detaileddescription>
<para>If the index is greater than 1, this will return the right child.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>child</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of child to return. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="418" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa22ead21ac809efb970b90ec014dc318" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="410" endline="410">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::ParentDistance</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1acb373eeb13db5a753ec52ea56ec5a9cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *&amp;</type>
        <definition>BinarySpaceTree*&amp; ChildPtr</definition>
        <argsstring>(const size_t child)</argsstring>
        <name>ChildPtr</name>
        <param>
          <type>const size_t</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="420" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="420" bodyend="421"/>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa732ea3eeb38529c549fd4d15d8655be">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Descendant</references>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a2a85eb34222f1fc073940e8c89274e81">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::NumDescendants</references>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a352077c26368da0ee570c0b7f062b1e3">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::NumPoints</references>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a559eede5ea60f68634f8e7e72c3c68d2">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Point</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ab30fd361b8bee994ff8ed9fbb6fae845" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Count</definition>
        <argsstring>() const</argsstring>
        <name>Count</name>
        <briefdescription>
<para>Return the number of points in this subset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="503" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="503" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a5a132e068ab206a014b986ff71c3442d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t &amp;</type>
        <definition>size_t&amp; Count</definition>
        <argsstring>()</argsstring>
        <name>Count</name>
        <briefdescription>
<para>Modify the number of points in this subset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="505" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="505" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a4c3764c98d5804083a9ec2c867eb9366" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const MatType &amp;</type>
        <definition>const MatType&amp; Dataset</definition>
        <argsstring>() const</argsstring>
        <name>Dataset</name>
        <briefdescription>
<para>Get the dataset which the tree is built on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="347" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="347" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1abb34576c3ddb31987f1dda9c33e6476f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>MatType &amp;</type>
        <definition>MatType&amp; Dataset</definition>
        <argsstring>()</argsstring>
        <name>Dataset</name>
        <briefdescription>
<para>Modify the dataset which the tree is built on. Be careful! </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="349" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="349" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1aa732ea3eeb38529c549fd4d15d8655be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Descendant</definition>
        <argsstring>(const size_t index) const</argsstring>
        <name>Descendant</name>
        <param>
          <type>const size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return the index (with reference to the dataset) of a particular descendant of this node. </para>        </briefdescription>
        <detaileddescription>
<para>The index should be greater than zero but less than the number of descendants.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the descendant. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="440" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1acb373eeb13db5a753ec52ea56ec5a9cd" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="420" endline="421">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::ChildPtr</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1adc597088eadfcfa3060336d0484ab573" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType FurthestDescendantDistance</definition>
        <argsstring>() const</argsstring>
        <name>FurthestDescendantDistance</name>
        <briefdescription>
<para>Return the furthest possible descendant distance. </para>        </briefdescription>
        <detaileddescription>
<para>This returns the maximum distance from the centroid to the edge of the bound and not the empirical quantity which is the actual furthest descendant distance. So the actual furthest descendant distance may be less than what this method returns (but it will never be greater than this). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="400" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="352" endline="352">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1acbe82a6439f71405b5801ca7d941cbfb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType FurthestPointDistance</definition>
        <argsstring>() const</argsstring>
        <name>FurthestPointDistance</name>
        <briefdescription>
<para>Return the furthest distance to a point held in this node. </para>        </briefdescription>
        <detaileddescription>
<para>If this is not a leaf node, then the distance is 0 because the node holds no points. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="391" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="352" endline="352">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a0257281722537c7916db7763623f67f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t GetFurthestChild</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0)</argsstring>
        <name>GetFurthestChild</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the index of the furthest child node to the given query point. </para>        </briefdescription>
        <detaileddescription>
<para>If this is a leaf node, it will return <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a1f7ec083be66d58a3e02e12956bf005e" kindref="member">NumChildren()</ref> (invalid index). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="371" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="352" endline="352">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a03c2b878b5dd46d80b333542f97bd86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetFurthestChild</definition>
        <argsstring>(const BinarySpaceTree &amp;queryNode)</argsstring>
        <name>GetFurthestChild</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;</type>
          <declname>queryNode</declname>
        </param>
        <briefdescription>
<para>Return the index of the furthest child node to the given query node. </para>        </briefdescription>
        <detaileddescription>
<para>If it can&apos;t decide, it will return <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a1f7ec083be66d58a3e02e12956bf005e" kindref="member">NumChildren()</ref> (invalid index). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a19b9a5fd41d8e192b62effb1445bd410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t GetNearestChild</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0)</argsstring>
        <name>GetNearestChild</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the index of the nearest child node to the given query point. </para>        </briefdescription>
        <detaileddescription>
<para>If this is a leaf node, it will return <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a1f7ec083be66d58a3e02e12956bf005e" kindref="member">NumChildren()</ref> (invalid index). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="362" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="352" endline="352">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a45f18fdc176329c127d97aa7d08d4b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GetNearestChild</definition>
        <argsstring>(const BinarySpaceTree &amp;queryNode)</argsstring>
        <name>GetNearestChild</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;</type>
          <declname>queryNode</declname>
        </param>
        <briefdescription>
<para>Return the index of the nearest child node to the given query node. </para>        </briefdescription>
        <detaileddescription>
<para>If it can&apos;t decide, it will return <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a1f7ec083be66d58a3e02e12956bf005e" kindref="member">NumChildren()</ref> (invalid index). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1aa0f4813924e6cdee43b45050bb947abe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsLeaf</definition>
        <argsstring>() const</argsstring>
        <name>IsLeaf</name>
        <briefdescription>
<para>Return whether or not this node is a leaf (true if it has no children). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="329" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aac2d3c104b89109f3df4a9a8cad244da" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="326" endline="326">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Stat</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a3085061e078694745cf2f59a77f982c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *</type>
        <definition>BinarySpaceTree* Left</definition>
        <argsstring>() const</argsstring>
        <name>Left</name>
        <briefdescription>
<para>Gets the left child of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="332" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="332" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a5ddd6024d9d85e1e0d7e59b8533897a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *&amp;</type>
        <definition>BinarySpaceTree*&amp; Left</definition>
        <argsstring>()</argsstring>
        <name>Left</name>
        <briefdescription>
<para>Modify the left child of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="334" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a29d3f7fc53a6113f14949dc05d747992" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType MaxDistance</definition>
        <argsstring>(const BinarySpaceTree &amp;other) const</argsstring>
        <name>MaxDistance</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return the maximum distance to another node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="459" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="459" bodyend="462"/>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae995f23d597849b8b3fa165765921914" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="319" endline="319">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Bound</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ae764d88483236cc470f5abe0273df4c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType MaxDistance</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0) const</argsstring>
        <name>MaxDistance</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the maximum distance to another point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="481" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="481" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>MetricType</type>
        <definition>MetricType Metric</definition>
        <argsstring>() const</argsstring>
        <name>Metric</name>
        <briefdescription>
<para>Get the metric that the tree uses. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="352" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="352" bodyend="352"/>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1adc597088eadfcfa3060336d0484ab573">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::FurthestDescendantDistance</references>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1acbe82a6439f71405b5801ca7d941cbfb">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::FurthestPointDistance</references>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a0257281722537c7916db7763623f67f7">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::GetFurthestChild</references>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a19b9a5fd41d8e192b62effb1445bd410">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::GetNearestChild</references>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a20a4e92da6066eb335a576b7f9cd0415">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::MinimumBoundDistance</references>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a1f7ec083be66d58a3e02e12956bf005e">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::NumChildren</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a080f6b6c8d4336ff1ead4f0d0f6a0cb5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType MinDistance</definition>
        <argsstring>(const BinarySpaceTree &amp;other) const</argsstring>
        <name>MinDistance</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return the minimum distance to another node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="453" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="453" bodyend="456"/>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae995f23d597849b8b3fa165765921914" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="319" endline="319">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Bound</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a73bf99a433e88a31d98b46bf4c0da147" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType MinDistance</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0) const</argsstring>
        <name>MinDistance</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the minimum distance to another point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="472" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="472" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a20a4e92da6066eb335a576b7f9cd0415" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType MinimumBoundDistance</definition>
        <argsstring>() const</argsstring>
        <name>MinimumBoundDistance</name>
        <briefdescription>
<para>Return the minimum distance from the center of the node to any bound edge. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="403" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="352" endline="352">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a1f7ec083be66d58a3e02e12956bf005e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t NumChildren</definition>
        <argsstring>() const</argsstring>
        <name>NumChildren</name>
        <briefdescription>
<para>Return the number of children in this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="355" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="352" endline="352">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Metric</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a2a85eb34222f1fc073940e8c89274e81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t NumDescendants</definition>
        <argsstring>() const</argsstring>
        <name>NumDescendants</name>
        <briefdescription>
<para>Return the number of descendants of this node. </para>        </briefdescription>
        <detaileddescription>
<para>For a non-leaf in a binary space tree, this is the number of points at the descendant leaves. For a leaf, this is the number of points in the leaf. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="431" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1acb373eeb13db5a753ec52ea56ec5a9cd" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="420" endline="421">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::ChildPtr</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a352077c26368da0ee570c0b7f062b1e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t NumPoints</definition>
        <argsstring>() const</argsstring>
        <name>NumPoints</name>
        <briefdescription>
<para>Return the number of points in this node (0 if not a leaf). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="424" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1acb373eeb13db5a753ec52ea56ec5a9cd" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="420" endline="421">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::ChildPtr</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a11d6befceee3f4a7cda868bfeb3bf8f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;</type>
        <definition>BinarySpaceTree&amp; operator=</definition>
        <argsstring>(const BinarySpaceTree &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy the given BinarySaceTree. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree to be copied. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ace087a2c1ab4214c229b36edd4444ea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;</type>
        <definition>BinarySpaceTree&amp; operator=</definition>
        <argsstring>(BinarySpaceTree &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Take ownership of the given <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree to take ownership of. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1abe2ac60bc77d318c2dba58b43f18a245" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *</type>
        <definition>BinarySpaceTree* Parent</definition>
        <argsstring>() const</argsstring>
        <name>Parent</name>
        <briefdescription>
<para>Gets the parent of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="342" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a632e02a7a7f3eda4fe6d4fa5bc69b832" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *&amp;</type>
        <definition>BinarySpaceTree*&amp; Parent</definition>
        <argsstring>()</argsstring>
        <name>Parent</name>
        <briefdescription>
<para>Modify the parent of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="344" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="344" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1af44ed4e7bfea088689caed082da67e17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref></type>
        <definition>ElemType ParentDistance</definition>
        <argsstring>() const</argsstring>
        <name>ParentDistance</name>
        <briefdescription>
<para>Return the distance from the center of this node to the center of the parent node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="407" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="407" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1aa22ead21ac809efb970b90ec014dc318" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref> &amp;</type>
        <definition>ElemType&amp; ParentDistance</definition>
        <argsstring>()</argsstring>
        <name>ParentDistance</name>
        <briefdescription>
<para>Modify the distance from the center of this node to the center of the parent node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="410" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="410" bodyend="410"/>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a2cf9f074d6e3c683213f5f17acfbc6f7">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Child</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a559eede5ea60f68634f8e7e72c3c68d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Point</definition>
        <argsstring>(const size_t index) const</argsstring>
        <name>Point</name>
        <param>
          <type>const size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return the index (with reference to the dataset) of a particular point in this node. </para>        </briefdescription>
        <detaileddescription>
<para>This will happily return invalid indices if the given index is greater than the number of points in this node (obtained with <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a352077c26368da0ee570c0b7f062b1e3" kindref="member">NumPoints()</ref>) <ndash/> be careful.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of point for which a dataset index is wanted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="450" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1acb373eeb13db5a753ec52ea56ec5a9cd" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="420" endline="421">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::ChildPtr</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a186a488e372175c6f8499115c9add8b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>math::RangeType&lt; <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref> &gt;</type>
        <definition>math::RangeType&lt;ElemType&gt; RangeDistance</definition>
        <argsstring>(const BinarySpaceTree &amp;other) const</argsstring>
        <name>RangeDistance</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return the minimum and maximum distance to another node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="465" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="465" bodyend="468"/>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae995f23d597849b8b3fa165765921914" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="319" endline="319">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Bound</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a60a550bf46aa1d7b858134ce41fd5a3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type>math::RangeType&lt; <ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref> &gt;</type>
        <definition>math::RangeType&lt;ElemType&gt; RangeDistance</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0) const</argsstring>
        <name>RangeDistance</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the minimum and maximum distance to another point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="491" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="491" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1aaa38cf098e44114fc6e70da0f9ef57e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *</type>
        <definition>BinarySpaceTree* Right</definition>
        <argsstring>() const</argsstring>
        <name>Right</name>
        <briefdescription>
<para>Gets the right child of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="337" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a6c50c4ae4876df5d346da693c37ae02f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref> *&amp;</type>
        <definition>BinarySpaceTree*&amp; Right</definition>
        <argsstring>()</argsstring>
        <name>Right</name>
        <briefdescription>
<para>Modify the right child of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="339" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t version)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Serialize the tree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ad8b29c84ac793742cd15834f9f4c4f31" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const StatisticType &amp;</type>
        <definition>const StatisticType&amp; Stat</definition>
        <argsstring>() const</argsstring>
        <name>Stat</name>
        <briefdescription>
<para>Return the statistic object for this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="324" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="324" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1aac2d3c104b89109f3df4a9a8cad244da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>StatisticType &amp;</type>
        <definition>StatisticType&amp; Stat</definition>
        <argsstring>()</argsstring>
        <name>Stat</name>
        <briefdescription>
<para>Return the statistic object for this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="326" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="326" bodyend="326"/>
        <references refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa0f4813924e6cdee43b45050bb947abe">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::IsLeaf</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a65611cec5894c48904134e7790269a84" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SplitNode</definition>
        <argsstring>(const size_t maxLeafSize, SplitType&lt; BoundType&lt; MetricType &gt;, MatType &gt; &amp;splitter)</argsstring>
        <name>SplitNode</name>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
        </param>
        <param>
          <type>SplitType&lt; BoundType&lt; MetricType &gt;, MatType &gt; &amp;</type>
          <declname>splitter</declname>
        </param>
        <briefdescription>
<para>Splits the current node, assigning its left and right children recursively. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of points held in a leaf. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitter</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated SplitType object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a806b3f44605f324a6ba11824ba50bd13" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SplitNode</definition>
        <argsstring>(std::vector&lt; size_t &gt; &amp;oldFromNew, const size_t maxLeafSize, SplitType&lt; BoundType&lt; MetricType &gt;, MatType &gt; &amp;splitter)</argsstring>
        <name>SplitNode</name>
        <param>
          <type>std::vector&lt; size_t &gt; &amp;</type>
          <declname>oldFromNew</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxLeafSize</declname>
        </param>
        <param>
          <type>SplitType&lt; BoundType&lt; MetricType &gt;, MatType &gt; &amp;</type>
          <declname>splitter</declname>
        </param>
        <briefdescription>
<para>Splits the current node, assigning its left and right children recursively. </para>        </briefdescription>
        <detaileddescription>
<para>Also returns a list of the changed indices.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>oldFromNew</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector holding permuted indices. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of points held in a leaf. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitter</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated SplitType object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a65760f628c7b349ebb37c236bbbb847e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BoundType2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void UpdateBound</definition>
        <argsstring>(BoundType2 &amp;boundToUpdate)</argsstring>
        <name>UpdateBound</name>
        <param>
          <type>BoundType2 &amp;</type>
          <declname>boundToUpdate</declname>
        </param>
        <briefdescription>
<para>Update the bound of the current node. </para>        </briefdescription>
        <detaileddescription>
<para>This method does not take into account bound-specific properties.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>boundToUpdate</parametername>
</parameternamelist>
<parameterdescription>
<para>The bound to update. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1a37dbf8548fad3b8c4c1883cde0dba852" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UpdateBound</definition>
        <argsstring>(bound::HollowBallBound&lt; MetricType &gt; &amp;boundToUpdate)</argsstring>
        <name>UpdateBound</name>
        <param>
          <type><ref refid="classmlpack_1_1bound_1_1HollowBallBound" kindref="compound">bound::HollowBallBound</ref>&lt; MetricType &gt; &amp;</type>
          <declname>boundToUpdate</declname>
        </param>
        <briefdescription>
<para>Update the bound of the current node. </para>        </briefdescription>
        <detaileddescription>
<para>This method is designed for HollowBallBound only.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>boundToUpdate</parametername>
</parameternamelist>
<parameterdescription>
<para>The bound to update. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="547" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BinarySpaceTree</definition>
        <argsstring>()</argsstring>
        <name>BinarySpaceTree</name>
        <briefdescription>
<para>A default constructor. </para>        </briefdescription>
        <detaileddescription>
<para>This is meant to only be used with cereal, which is allowed with the friend declaration below. This does not return a valid tree! The method must be protected, so that the serialization shim can work with the default constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="556" column="1"/>
        <referencedby refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa800439660375c0253008cafa648da78" compoundref="binary__space__tree_2binary__space__tree_8hpp" startline="508" endline="508">BinarySpaceTree&lt; MetricType, StatisticType, MatType, BoundType, SplitType &gt;::Center</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A binary space partitioning tree, such as a KD-tree or a ball tree. </para>    </briefdescription>
    <detaileddescription>
<para>Once the bound and type of dataset is defined, the tree will construct itself. Call the constructor with the dataset to build the tree on, and the entire tree will be built.</para><para>This particular tree does not allow growth, so you cannot add or delete nodes from it. If you need to add or delete a node, the better procedure is to rebuild the tree entirely.</para><para>This tree does take one runtime parameter in the constructor, which is the max leaf size to be used.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MetricType</parametername>
</parameternamelist>
<parameterdescription>
<para>The metric used for tree-building. The BoundType may place restrictions on the metrics that can be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StatisticType</parametername>
</parameternamelist>
<parameterdescription>
<para>Extra data contained in the node. See <ref refid="statistic_8hpp" kindref="compound">statistic.hpp</ref> for the necessary skeleton interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MatType</parametername>
</parameternamelist>
<parameterdescription>
<para>The dataset class. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BoundType</parametername>
</parameternamelist>
<parameterdescription>
<para>The bound used for each node. HRectBound, the default, requires that an LMetric&lt;&gt; is used for MetricType (so, EuclideanDistance, ManhattanDistance, etc.). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SplitType</parametername>
</parameternamelist>
<parameterdescription>
<para>The class that partitions the dataset/points at a particular node into two parts. Its definition decides the way this split is done. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" line="55" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp" bodystart="54" bodyend="567"/>
    <listofallmembers>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aac83a4c2da46afd4932602be91f84961" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>begin</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ac50a3a009687e641fd8249e011f628d4" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Begin</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a49cdbf8b1b2899522cd80f4cbff40b69" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Begin</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a360d6a8e92c66e9c2d985b528071e93e" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a38fc3cb2dd94cbd130f0444b3b06355b" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a842ae235a817cfb9c7a5a456e7d78292" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a49ee8af5482a265fe2b7edc8bb3efdce" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a3753895793f9161d2793fd7b326b821d" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1abb64c00419354018fa1cd0ceb4f2eee5" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a820092388341845e2a8927478215e476" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae79c1b69a1dc4ac4d654c43e0d1a1981" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aae1fbad0d2639fb7bd63aac6b6a998f1" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a32dee7101946c7d2393cc13c8d65899f" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a50dd4753fb64883537125f80f5dfc273" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a7f027dcf721e6e54ad0b5b63504cf057" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" prot="protected" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>BinarySpaceTree</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae995f23d597849b8b3fa165765921914" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Bound</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a1023b24dcb81cc1769a8698d0ac8b7ed" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Bound</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a41c8947763b634c9afbfc966dceadf6e" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>bound</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa800439660375c0253008cafa648da78" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Center</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a2cf9f074d6e3c683213f5f17acfbc6f7" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Child</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1acb373eeb13db5a753ec52ea56ec5a9cd" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>ChildPtr</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a76d971a3c552bc58ba9f0d5fceae9806" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>count</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab30fd361b8bee994ff8ed9fbb6fae845" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Count</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a5a132e068ab206a014b986ff71c3442d" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Count</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a4c3764c98d5804083a9ec2c867eb9366" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Dataset</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1abb34576c3ddb31987f1dda9c33e6476f" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Dataset</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a5a181abd72e80483265881c41c67689a" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>dataset</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa732ea3eeb38529c549fd4d15d8655be" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Descendant</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>ElemType</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1abac6d3189ea06ff1b589cbf2e736568b" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>furthestDescendantDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1adc597088eadfcfa3060336d0484ab573" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>FurthestDescendantDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1acbe82a6439f71405b5801ca7d941cbfb" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>FurthestPointDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a0257281722537c7916db7763623f67f7" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>GetFurthestChild</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a03c2b878b5dd46d80b333542f97bd86d" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>GetFurthestChild</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a19b9a5fd41d8e192b62effb1445bd410" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>GetNearestChild</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a45f18fdc176329c127d97aa7d08d4b7a" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>GetNearestChild</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa0f4813924e6cdee43b45050bb947abe" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>IsLeaf</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1add694b14d3baf90f5cc909f2b195fa96" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>left</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a3085061e078694745cf2f59a77f982c3" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Left</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a5ddd6024d9d85e1e0d7e59b8533897a7" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Left</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a57758caa2e58c3fe05d1284eeabae523" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Mat</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a29d3f7fc53a6113f14949dc05d747992" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>MaxDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae764d88483236cc470f5abe0273df4c5" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>MaxDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Metric</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a080f6b6c8d4336ff1ead4f0d0f6a0cb5" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>MinDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a73bf99a433e88a31d98b46bf4c0da147" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>MinDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1afd64f326a495af18e10a5e71e7b02143" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>minimumBoundDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a20a4e92da6066eb335a576b7f9cd0415" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>MinimumBoundDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a1f7ec083be66d58a3e02e12956bf005e" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>NumChildren</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a2a85eb34222f1fc073940e8c89274e81" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>NumDescendants</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a352077c26368da0ee570c0b7f062b1e3" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>NumPoints</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a11d6befceee3f4a7cda868bfeb3bf8f9" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>operator=</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ace087a2c1ab4214c229b36edd4444ea7" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>operator=</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1abe2ac60bc77d318c2dba58b43f18a245" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Parent</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a632e02a7a7f3eda4fe6d4fa5bc69b832" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Parent</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ad48466cfe06f238905d327d348b31789" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>parent</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a110be38965cb624d9e3b4d335f962806" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>parentDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1af44ed4e7bfea088689caed082da67e17" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>ParentDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa22ead21ac809efb970b90ec014dc318" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>ParentDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a559eede5ea60f68634f8e7e72c3c68d2" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Point</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a186a488e372175c6f8499115c9add8b4" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>RangeDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a60a550bf46aa1d7b858134ce41fd5a3a" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>RangeDistance</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a5504bb1fd77ea0e02e04aab928febf03" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>right</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aaa38cf098e44114fc6e70da0f9ef57e0" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Right</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a6c50c4ae4876df5d346da693c37ae02f" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Right</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a2fbe69d8cb6be0a0735b5df955708ade" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Split</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a65611cec5894c48904134e7790269a84" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>SplitNode</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a806b3f44605f324a6ba11824ba50bd13" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>SplitNode</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a3bb6957cc0ee042b639ebc4b8b45fd37" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>stat</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ad8b29c84ac793742cd15834f9f4c4f31" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Stat</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aac2d3c104b89109f3df4a9a8cad244da" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>Stat</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a65760f628c7b349ebb37c236bbbb847e" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>UpdateBound</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a37dbf8548fad3b8c4c1883cde0dba852" prot="private" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>UpdateBound</name></member>
      <member refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae07a273ce37bd373995e13b3ef276265" prot="public" virt="non-virtual"><scope>mlpack::tree::BinarySpaceTree</scope><name>~BinarySpaceTree</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
