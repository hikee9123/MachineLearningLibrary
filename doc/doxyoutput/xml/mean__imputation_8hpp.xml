<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="mean__imputation_8hpp" kind="file" language="C++">
    <compoundname>mean_imputation.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <incdepgraph>
      <node id="7636">
        <label>list</label>
      </node>
      <node id="7633">
        <label>atomic</label>
      </node>
      <node id="7623">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="7599">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="7635">
        <label>iomanip</label>
      </node>
      <node id="7608">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="7609" relation="include">
        </childnode>
        <childnode refid="7611" relation="include">
        </childnode>
      </node>
      <node id="7591">
        <label>cstdint</label>
      </node>
      <node id="7600">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="7607">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="7630">
        <label>arma_config.hpp</label>
      </node>
      <node id="7620">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="7587">
        <label>cmath</label>
      </node>
      <node id="7606">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="7595">
        <label>stdexcept</label>
      </node>
      <node id="7615">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="7600" relation="include">
        </childnode>
        <childnode refid="7602" relation="include">
        </childnode>
        <childnode refid="7603" relation="include">
        </childnode>
        <childnode refid="7601" relation="include">
        </childnode>
      </node>
      <node id="7639">
        <label>string</label>
      </node>
      <node id="7627">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="7628" relation="include">
        </childnode>
        <childnode refid="7594" relation="include">
        </childnode>
      </node>
      <node id="7637">
        <label>map</label>
      </node>
      <node id="7589">
        <label>cfloat</label>
      </node>
      <node id="7619">
        <label>boost/variant.hpp</label>
      </node>
      <node id="7641">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="7603">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="7626">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="7627" relation="include">
        </childnode>
        <childnode refid="7603" relation="include">
        </childnode>
        <childnode refid="7610" relation="include">
        </childnode>
        <childnode refid="7628" relation="include">
        </childnode>
      </node>
      <node id="7616">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="7614">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="7600" relation="include">
        </childnode>
        <childnode refid="7602" relation="include">
        </childnode>
        <childnode refid="7603" relation="include">
        </childnode>
        <childnode refid="7601" relation="include">
        </childnode>
      </node>
      <node id="7617">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="7600" relation="include">
        </childnode>
        <childnode refid="7602" relation="include">
        </childnode>
        <childnode refid="7603" relation="include">
        </childnode>
        <childnode refid="7601" relation="include">
        </childnode>
      </node>
      <node id="7605">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="7625">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="7601" relation="include">
        </childnode>
        <childnode refid="7602" relation="include">
        </childnode>
        <childnode refid="7603" relation="include">
        </childnode>
        <childnode refid="7613" relation="include">
        </childnode>
        <childnode refid="7622" relation="include">
        </childnode>
      </node>
      <node id="7629">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="7630" relation="include">
        </childnode>
      </node>
      <node id="7631">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="7586">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="7587" relation="include">
        </childnode>
        <childnode refid="7588" relation="include">
        </childnode>
        <childnode refid="7589" relation="include">
        </childnode>
        <childnode refid="7590" relation="include">
        </childnode>
        <childnode refid="7591" relation="include">
        </childnode>
        <childnode refid="7592" relation="include">
        </childnode>
        <childnode refid="7593" relation="include">
        </childnode>
        <childnode refid="7594" relation="include">
        </childnode>
        <childnode refid="7595" relation="include">
        </childnode>
        <childnode refid="7596" relation="include">
        </childnode>
        <childnode refid="7597" relation="include">
        </childnode>
        <childnode refid="7598" relation="include">
        </childnode>
        <childnode refid="7599" relation="include">
        </childnode>
        <childnode refid="7600" relation="include">
        </childnode>
        <childnode refid="7601" relation="include">
        </childnode>
        <childnode refid="7602" relation="include">
        </childnode>
        <childnode refid="7603" relation="include">
        </childnode>
        <childnode refid="7604" relation="include">
        </childnode>
        <childnode refid="7605" relation="include">
        </childnode>
        <childnode refid="7606" relation="include">
        </childnode>
        <childnode refid="7607" relation="include">
        </childnode>
        <childnode refid="7608" relation="include">
        </childnode>
        <childnode refid="7612" relation="include">
        </childnode>
        <childnode refid="7613" relation="include">
        </childnode>
        <childnode refid="7614" relation="include">
        </childnode>
        <childnode refid="7615" relation="include">
        </childnode>
        <childnode refid="7616" relation="include">
        </childnode>
        <childnode refid="7617" relation="include">
        </childnode>
        <childnode refid="7618" relation="include">
        </childnode>
        <childnode refid="7624" relation="include">
        </childnode>
        <childnode refid="7625" relation="include">
        </childnode>
        <childnode refid="7622" relation="include">
        </childnode>
        <childnode refid="7626" relation="include">
        </childnode>
        <childnode refid="7629" relation="include">
        </childnode>
        <childnode refid="7631" relation="include">
        </childnode>
        <childnode refid="7632" relation="include">
        </childnode>
        <childnode refid="7641" relation="include">
        </childnode>
        <childnode refid="7642" relation="include">
        </childnode>
      </node>
      <node id="7592">
        <label>cstdio</label>
      </node>
      <node id="7596">
        <label>tuple</label>
      </node>
      <node id="7601">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="7618">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="7601" relation="include">
        </childnode>
        <childnode refid="7602" relation="include">
        </childnode>
        <childnode refid="7603" relation="include">
        </childnode>
        <childnode refid="7605" relation="include">
        </childnode>
        <childnode refid="7619" relation="include">
        </childnode>
        <childnode refid="7620" relation="include">
        </childnode>
        <childnode refid="7621" relation="include">
        </childnode>
        <childnode refid="7622" relation="include">
        </childnode>
      </node>
      <node id="7597">
        <label>utility</label>
      </node>
      <node id="7621">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="7612">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="7609">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="7610" relation="include">
        </childnode>
      </node>
      <node id="7632">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="7633" relation="include">
        </childnode>
        <childnode refid="7634" relation="include">
        </childnode>
        <childnode refid="7635" relation="include">
        </childnode>
        <childnode refid="7636" relation="include">
        </childnode>
        <childnode refid="7637" relation="include">
        </childnode>
        <childnode refid="7638" relation="include">
        </childnode>
        <childnode refid="7639" relation="include">
        </childnode>
        <childnode refid="7640" relation="include">
        </childnode>
      </node>
      <node id="7610">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="7624">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="7622" relation="include">
        </childnode>
        <childnode refid="7618" relation="include">
        </childnode>
        <childnode refid="7625" relation="include">
        </childnode>
      </node>
      <node id="7593">
        <label>cstdlib</label>
      </node>
      <node id="7588">
        <label>cctype</label>
      </node>
      <node id="7611">
        <label>unordered_map</label>
      </node>
      <node id="7590">
        <label>climits</label>
      </node>
      <node id="7638">
        <label>mutex</label>
      </node>
      <node id="7634">
        <label>chrono</label>
      </node>
      <node id="7642">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="7640">
        <label>thread</label>
      </node>
      <node id="7628">
        <label>type_traits</label>
      </node>
      <node id="7604">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="7598">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="7622">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="7600" relation="include">
        </childnode>
        <childnode refid="7601" relation="include">
        </childnode>
        <childnode refid="7602" relation="include">
        </childnode>
        <childnode refid="7603" relation="include">
        </childnode>
        <childnode refid="7623" relation="include">
        </childnode>
      </node>
      <node id="7585">
        <label>/home/aakash/mlpack/src/mlpack/core/data/imputation_methods/mean_imputation.hpp</label>
        <link refid="mean__imputation_8hpp"/>
        <childnode refid="7586" relation="include">
        </childnode>
      </node>
      <node id="7594">
        <label>cstring</label>
      </node>
      <node id="7613">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="7602">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmlpack_1_1data_1_1MeanImputation" prot="public">mlpack::data::MeanImputation</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1data">mlpack::data</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Keon Kim</para></simplesect>
Definition and Implementation of the MeanImputation class.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#ifndef<sp/>MLPACK_CORE_DATA_IMPUTE_STRATEGIES_MEAN_IMPUTATION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_CORE_DATA_IMPUTE_STRATEGIES_MEAN_IMPUTATION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">data<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="24" refid="classmlpack_1_1data_1_1MeanImputation" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1data_1_1MeanImputation" kindref="compound">MeanImputation</ref></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37" refid="classmlpack_1_1data_1_1MeanImputation_1a94b8353ed4d68b10e2dd59d5e7dc15ca" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1MeanImputation_1a94b8353ed4d68b10e2dd59d5e7dc15ca" kindref="member">Impute</ref>(arma::Mat&lt;T&gt;&amp;<sp/>input,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>mappedValue,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dimension,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>columnMajor<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elems<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>excluding<sp/>nan<sp/>or<sp/>missing<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>PairType<sp/>=<sp/>std::pair&lt;size_t,<sp/>size_t&gt;;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dimensions<sp/>and<sp/>indexes<sp/>are<sp/>saved<sp/>as<sp/>pairs<sp/>inside<sp/>this<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;PairType&gt;<sp/>targets;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>number<sp/>of<sp/>elements<sp/>and<sp/>sum<sp/>of<sp/>them<sp/>excluding<sp/>mapped<sp/>value<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nan.<sp/>while<sp/>doing<sp/>that,<sp/>remember<sp/>where<sp/>mappedValue<sp/>or<sp/>NaN<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(columnMajor)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>input.n_cols;<sp/>++i)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input(dimension,<sp/>i)<sp/>==<sp/>mappedValue<sp/>||</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::isnan(input(dimension,<sp/>i)))</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targets.emplace_back(dimension,<sp/>i);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elems++;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>input(dimension,<sp/>i);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>input.n_rows;<sp/>++i)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input(i,<sp/>dimension)<sp/>==<sp/>mappedValue<sp/>||</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::isnan(input(i,<sp/>dimension)))</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targets.emplace_back(i,<sp/>dimension);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elems++;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>input(i,<sp/>dimension);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elems<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Log::Fatal<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;it<sp/>is<sp/>impossible<sp/>to<sp/>calculate<sp/>mean;<sp/>no<sp/>valid<sp/>elements<sp/>in<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>dimension&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>mean;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean<sp/>=<sp/>sum<sp/>/<sp/>elems;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>replace<sp/>the<sp/>calculated<sp/>mean<sp/>to<sp/>the<sp/>missing<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>only<sp/>needs<sp/>to<sp/>loop<sp/>through<sp/>targets<sp/>vector,<sp/>not<sp/>the<sp/>whole<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PairType&amp;<sp/>target<sp/>:<sp/>targets)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input(target.first,<sp/>target.second)<sp/>=<sp/>mean;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>MeanImputation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/core/data/imputation_methods/mean_imputation.hpp"/>
  </compounddef>
</doxygen>
