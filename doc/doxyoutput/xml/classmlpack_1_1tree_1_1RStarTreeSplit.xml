<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1tree_1_1RStarTreeSplit" kind="class" language="C++" prot="public">
    <compoundname>mlpack::tree::RStarTreeSplit</compoundname>
    <includes refid="r__star__tree__split_8hpp" local="no">r_star_tree_split.hpp</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmlpack_1_1tree_1_1RStarTreeSplit_1aae7d976de7b1ce1a2dfe3ef1bbd6db42" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TreeType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void PickLeafSplit</definition>
        <argsstring>(TreeType *tree, size_t &amp;bestAxis, size_t &amp;bestIndex)</argsstring>
        <name>PickLeafSplit</name>
        <param>
          <type>TreeType *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>bestAxis</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>bestIndex</declname>
        </param>
        <briefdescription>
<para>Given a node, return the best dimension and the best index to split on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/rectangle_tree/r_star_tree_split.hpp" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1RStarTreeSplit_1a1100e195f158ec58fb680edc0e57b5eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TreeType</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>static size_t ReinsertPoints</definition>
        <argsstring>(TreeType *tree, std::vector&lt; bool &gt; &amp;relevels)</argsstring>
        <name>ReinsertPoints</name>
        <param>
          <type>TreeType *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>relevels</declname>
        </param>
        <briefdescription>
<para>Reinsert any points into the tree, if needed. </para>        </briefdescription>
        <detaileddescription>
<para>This returns the number of points reinserted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/rectangle_tree/r_star_tree_split.hpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1RStarTreeSplit_1af73652d9536a1715364bbb0e4a9ba04e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TreeType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void SplitLeafNode</definition>
        <argsstring>(TreeType *tree, std::vector&lt; bool &gt; &amp;relevels)</argsstring>
        <name>SplitLeafNode</name>
        <param>
          <type>TreeType *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>relevels</declname>
        </param>
        <briefdescription>
<para>Split a leaf node using the algorithm described in "The R*-tree: An Efficient and Robust Access method for Points and Rectangles. </para>        </briefdescription>
        <detaileddescription>
<para>" If necessary, this split will propagate upwards through the tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/rectangle_tree/r_star_tree_split.hpp" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1RStarTreeSplit_1a73ff1eaa94449d763847fff1f537922f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TreeType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool SplitNonLeafNode</definition>
        <argsstring>(TreeType *tree, std::vector&lt; bool &gt; &amp;relevels)</argsstring>
        <name>SplitNonLeafNode</name>
        <param>
          <type>TreeType *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>relevels</declname>
        </param>
        <briefdescription>
<para>Split a non-leaf node using the &quot;default&quot; algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>If this is a root node, the tree increases in depth. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/rectangle_tree/r_star_tree_split.hpp" line="42" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classmlpack_1_1tree_1_1RStarTreeSplit_1ad6cd53f562619e04c67c12c67e26a199" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TreeType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void InsertNodeIntoTree</definition>
        <argsstring>(TreeType *destTree, TreeType *srcNode)</argsstring>
        <name>InsertNodeIntoTree</name>
        <param>
          <type>TreeType *</type>
          <declname>destTree</declname>
        </param>
        <param>
          <type>TreeType *</type>
          <declname>srcNode</declname>
        </param>
        <briefdescription>
<para>Insert a node into another node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/rectangle_tree/r_star_tree_split.hpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1RStarTreeSplit_1a5ff7cb8f7a48fb17abd4ff2434a8ec11" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
          <param>
            <type>typename TreeType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool PairComp</definition>
        <argsstring>(const std::pair&lt; ElemType, TreeType &gt; &amp;p1, const std::pair&lt; ElemType, TreeType &gt; &amp;p2)</argsstring>
        <name>PairComp</name>
        <param>
          <type>const std::pair&lt; ElemType, TreeType &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const std::pair&lt; ElemType, TreeType &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Comparator for sorting with std::pair. </para>        </briefdescription>
        <detaileddescription>
<para>This comparator works a little bit faster then the default comparator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/rectangle_tree/r_star_tree_split.hpp" line="72" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/rectangle_tree/r_star_tree_split.hpp" bodystart="72" bodyend="76"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Rectangle Tree has new points inserted at the bottom. </para>    </briefdescription>
    <detaileddescription>
<para>When these nodes overflow, we split them, moving up the tree and splitting nodes as necessary. </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/tree/rectangle_tree/r_star_tree_split.hpp" line="27" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/rectangle_tree/r_star_tree_split.hpp" bodystart="26" bodyend="77"/>
    <listofallmembers>
      <member refid="classmlpack_1_1tree_1_1RStarTreeSplit_1ad6cd53f562619e04c67c12c67e26a199" prot="private" virt="non-virtual"><scope>mlpack::tree::RStarTreeSplit</scope><name>InsertNodeIntoTree</name></member>
      <member refid="classmlpack_1_1tree_1_1RStarTreeSplit_1a5ff7cb8f7a48fb17abd4ff2434a8ec11" prot="private" virt="non-virtual"><scope>mlpack::tree::RStarTreeSplit</scope><name>PairComp</name></member>
      <member refid="classmlpack_1_1tree_1_1RStarTreeSplit_1aae7d976de7b1ce1a2dfe3ef1bbd6db42" prot="public" virt="non-virtual"><scope>mlpack::tree::RStarTreeSplit</scope><name>PickLeafSplit</name></member>
      <member refid="classmlpack_1_1tree_1_1RStarTreeSplit_1a1100e195f158ec58fb680edc0e57b5eb" prot="public" virt="non-virtual"><scope>mlpack::tree::RStarTreeSplit</scope><name>ReinsertPoints</name></member>
      <member refid="classmlpack_1_1tree_1_1RStarTreeSplit_1af73652d9536a1715364bbb0e4a9ba04e" prot="public" virt="non-virtual"><scope>mlpack::tree::RStarTreeSplit</scope><name>SplitLeafNode</name></member>
      <member refid="classmlpack_1_1tree_1_1RStarTreeSplit_1a73ff1eaa94449d763847fff1f537922f" prot="public" virt="non-virtual"><scope>mlpack::tree::RStarTreeSplit</scope><name>SplitNonLeafNode</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
