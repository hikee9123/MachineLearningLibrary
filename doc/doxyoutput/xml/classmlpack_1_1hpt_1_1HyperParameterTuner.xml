<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1hpt_1_1HyperParameterTuner" kind="class" language="C++" prot="public">
    <compoundname>mlpack::hpt::HyperParameterTuner</compoundname>
    <includes refid="src_2mlpack_2core_2hpt_2hpt_8hpp" local="no">hpt.hpp</includes>
    <innerclass refid="structmlpack_1_1hpt_1_1HyperParameterTuner_1_1Negated" prot="private">mlpack::hpt::HyperParameterTuner::Negated</innerclass>
    <templateparamlist>
      <param>
        <type>typename MLAlgorithm</type>
      </param>
      <param>
        <type>typename Metric</type>
      </param>
      <param>
        <type>template&lt; typename, typename, typename, typename, typename &gt; class</type>
        <declname>CV</declname>
        <defname>CV</defname>
      </param>
      <param>
        <type>typename OptimizerType</type>
        <defval>ens::GridSearch</defval>
      </param>
      <param>
        <type>typename MatType</type>
        <defval>arma::mat</defval>
      </param>
      <param>
        <type>typename PredictionsType</type>
        <defval>typename <ref refid="classmlpack_1_1cv_1_1MetaInfoExtractor" kindref="compound">cv::MetaInfoExtractor</ref>&lt;MLAlgorithm,                 MatType&gt;::PredictionsType</defval>
      </param>
      <param>
        <type>typename WeightsType</type>
        <defval>typename <ref refid="classmlpack_1_1cv_1_1MetaInfoExtractor" kindref="compound">cv::MetaInfoExtractor</ref>&lt;MLAlgorithm, MatType,                 PredictionsType&gt;::WeightsType</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a8265331c9aa6770a6ef90106754aa05c" prot="private" static="no">
        <type>typename std::conditional&lt; Metric::NeedsMinimization, CV&lt; MLAlgorithm, Metric, MatType, PredictionsType, WeightsType &gt;, CV&lt; MLAlgorithm, Negated&lt; Metric &gt;, MatType, PredictionsType, WeightsType &gt; &gt;::type</type>
        <definition>using CVType =  typename std::conditional&lt;Metric::NeedsMinimization, CV&lt;MLAlgorithm, Metric, MatType, PredictionsType, WeightsType&gt;, CV&lt;MLAlgorithm, Negated&lt;Metric&gt;, MatType, PredictionsType, WeightsType&gt; &gt;::type</definition>
        <argsstring></argsstring>
        <name>CVType</name>
        <briefdescription>
<para>A short alias for the full type of the cross-validation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="203" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a4bb27379cfe38af2117068151c84950c" prot="private" static="no">
        <type>std::is_arithmetic&lt; typename std::remove_reference&lt; typename std::tuple_element&lt; I, Tuple &gt;::type &gt;::type &gt;</type>
        <definition>using IsArithmetic =  std::is_arithmetic&lt;typename std::remove_reference&lt; typename std::tuple_element&lt;I, Tuple&gt;::type&gt;::type&gt;</definition>
        <argsstring></argsstring>
        <name>IsArithmetic</name>
        <briefdescription>
<para>A type function to check whether the element I of the tuple type is an arithmetic type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="245" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a33fa044f2f2b2f797ed2f476b2ca7244" prot="private" static="no">
        <type><ref refid="classmlpack_1_1hpt_1_1IsPreFixedArg" kindref="compound">IsPreFixedArg</ref>&lt; typename std::tuple_element&lt; I, Tuple &gt;::type &gt;</type>
        <definition>using IsPreFixed =  IsPreFixedArg&lt;typename std::tuple_element&lt;I, Tuple&gt;::type&gt;</definition>
        <argsstring></argsstring>
        <name>IsPreFixed</name>
        <briefdescription>
<para>A type function to check whether the element I of the tuple type is a <ref refid="structmlpack_1_1hpt_1_1PreFixedArg" kindref="compound">PreFixedArg</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="238" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a402c70071c3b723abda0da2695067ab2" prot="private" static="no" mutable="no">
        <type>MLAlgorithm</type>
        <definition>MLAlgorithm bestModel</definition>
        <argsstring></argsstring>
        <name>bestModel</name>
        <briefdescription>
<para>The best model from the last run. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="219" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a9b0cf37d7f1f7d9e46a4aeafcc3f907f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double bestObjective</definition>
        <argsstring></argsstring>
        <name>bestObjective</name>
        <briefdescription>
<para>The best objective from the last run. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="216" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1af9d50a297b5b4a333462ffe3bae11da0" prot="private" static="no" mutable="no">
        <type>CVType</type>
        <definition>CVType cv</definition>
        <argsstring></argsstring>
        <name>cv</name>
        <briefdescription>
<para>The cross-validation object for assessing sets of hyper-parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="210" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1ad5c9c5c10dce1b4ba9983bc2c06ea85f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double minDelta</definition>
        <argsstring></argsstring>
        <name>minDelta</name>
        <briefdescription>
<para>The minimum increase of arguments for calculation of gradient in <ref refid="classmlpack_1_1hpt_1_1CVFunction" kindref="compound">CVFunction</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="231" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1af46443e4b38268e2b061773090207a09" prot="private" static="no" mutable="no">
        <type>OptimizerType</type>
        <definition>OptimizerType optimizer</definition>
        <argsstring></argsstring>
        <name>optimizer</name>
        <briefdescription>
<para>The optimizer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="213" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a12ec7d15fd4c4d70ba17ea500b9c4049" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double relativeDelta</definition>
        <argsstring></argsstring>
        <name>relativeDelta</name>
        <briefdescription>
<para>The relative increase of arguments for calculation of gradient in <ref refid="classmlpack_1_1hpt_1_1CVFunction" kindref="compound">CVFunction</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="225" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a7fd1a69d0568cda10d907e1113fd189d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>CVArgs</declname>
            <defname>CVArgs</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>HyperParameterTuner</definition>
        <argsstring>(const CVArgs &amp;...args)</argsstring>
        <name>HyperParameterTuner</name>
        <param>
          <type>const CVArgs &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref> object by passing constructor arguments for the given cross-validation strategy (the CV class). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Constructor arguments for the given cross-validation strategy (the CV class). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1add74660238332755f6e83e85f78b15c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const MLAlgorithm &amp;</type>
        <definition>const MLAlgorithm&amp; BestModel</definition>
        <argsstring>() const</argsstring>
        <name>BestModel</name>
        <briefdescription>
<para>Get the best model from the last run. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="184" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a0c2bf016556a87be5f6f9e86f6b37dd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>MLAlgorithm &amp;</type>
        <definition>MLAlgorithm&amp; BestModel</definition>
        <argsstring>()</argsstring>
        <name>BestModel</name>
        <briefdescription>
<para>Modify the best model from the last run. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="187" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1adf93208d264cc5138f52a9c13b46c088" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double BestObjective</definition>
        <argsstring>() const</argsstring>
        <name>BestObjective</name>
        <briefdescription>
<para>Get the performance measurement of the best model from the last run. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="181" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1afc866ee105432ff61c071bfa43a08e8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double MinDelta</definition>
        <argsstring>() const</argsstring>
        <name>MinDelta</name>
        <briefdescription>
<para>Get minimum increase of arguments for calculation of partial derivatives (by the definition) in gradient-based optimization. </para>        </briefdescription>
        <detaileddescription>
<para>This value is going to be used when it is greater than the increase calculated with the rules described in the documentation for <ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1ac23b9b3760c584f1d276ed867e7722aa" kindref="member">RelativeDelta()</ref>.</para><para>The default value is 1e-10. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="142" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1acf2793015fe5e3acb58b87a0e0f13813" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; MinDelta</definition>
        <argsstring>()</argsstring>
        <name>MinDelta</name>
        <briefdescription>
<para>Modify minimum increase of arguments for calculation of partial derivatives (by the definition) in gradient-based optimization. </para>        </briefdescription>
        <detaileddescription>
<para>This value is going to be used when it is greater than the increase calculated with the rules described in the documentation for <ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1ac23b9b3760c584f1d276ed867e7722aa" kindref="member">RelativeDelta()</ref>.</para><para>The default value is 1e-10. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="152" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="152" bodyend="152"/>
        <references refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a4e04da235ec0434d69613c547b20dbea">HyperParameterTuner&lt; MLAlgorithm, Metric, CV, OptimizerType, MatType, PredictionsType, WeightsType &gt;::Optimize</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a4e04da235ec0434d69613c547b20dbea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacemlpack_1_1hpt_1a7146c132523ba701e4baee3e1cad424d" kindref="member">TupleOfHyperParameters</ref>&lt; Args... &gt;</type>
        <definition>TupleOfHyperParameters&lt;Args...&gt; Optimize</definition>
        <argsstring>(const Args &amp;... args)</argsstring>
        <name>Optimize</name>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Find the best hyper-parameters by using the given Optimizer. </para>        </briefdescription>
        <detaileddescription>
<para>For each hyper-parameter one of the following should be passed as an argument.<orderedlist>
<listitem><para>A set of values to choose from (when using GridSearch as an optimizer). The set of values should be an STL-compatible container (it should provide begin() and end() methods returning iterators).</para></listitem><listitem><para>A starting value (when using any other optimizer than GridSearch).</para></listitem><listitem><para>A value fixed by using the function <ref refid="namespacemlpack_1_1hpt_1ad773f4d1def8deb412ffbf37bdf289ec" kindref="member">mlpack::hpt::Fixed</ref>. In this case the hyper-parameter will not be optimized.</para></listitem></orderedlist>
</para><para>All arguments should be passed in the same order as if the corresponding hyper-parameters would be passed into the Evaluate method of the given CV class (in the order as they appear in the constructor(s) of the given MLAlgorithm). Also, arguments for all required hyper-parameters (ones that don&apos;t have default values in the corresponding MLAlgorithm constructor) should be provided.</para><para>The method returns a tuple of values for hyper-parameters that haven&apos;t been fixed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments corresponding to hyper-parameters (see the method description for more information). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="178" column="1"/>
        <referencedby refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1acf2793015fe5e3acb58b87a0e0f13813" compoundref="src_2mlpack_2core_2hpt_2hpt_8hpp" startline="152" endline="152">HyperParameterTuner&lt; MLAlgorithm, Metric, CV, OptimizerType, MatType, PredictionsType, WeightsType &gt;::MinDelta</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a213f61b8936eadf8a162e45b4c6188d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>OptimizerType &amp;</type>
        <definition>OptimizerType&amp; Optimizer</definition>
        <argsstring>()</argsstring>
        <name>Optimizer</name>
        <briefdescription>
<para>Access and modify the optimizer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="110" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1ab4d547696f7f5e4be93f9cc2a2dbfc9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double RelativeDelta</definition>
        <argsstring>() const</argsstring>
        <name>RelativeDelta</name>
        <briefdescription>
<para>Get relative increase of arguments for calculation of partial derivatives (by the definition) in gradient-based optimization. </para>        </briefdescription>
        <detaileddescription>
<para>The exact increase for some particular argument is equal to the absolute value of the argument multiplied by the relative increase (see also the documentation for <ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1acf2793015fe5e3acb58b87a0e0f13813" kindref="member">MinDelta()</ref>).</para><para>The default value is 0.01. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="121" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1ac23b9b3760c584f1d276ed867e7722aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; RelativeDelta</definition>
        <argsstring>()</argsstring>
        <name>RelativeDelta</name>
        <briefdescription>
<para>Modify relative increase of arguments for calculation of partial derivatives (by the definition) in gradient-based optimization. </para>        </briefdescription>
        <detaileddescription>
<para>The exact increase for some particular argument is equal to the absolute value of the argument multiplied by the relative increase (see also the documentation for <ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1acf2793015fe5e3acb58b87a0e0f13813" kindref="member">MinDelta()</ref>).</para><para>The default value is 0.01. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="132" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="132" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1acb533aceca7f2c14193c9744b609e5fe" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename ArgsTuple</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>FixedArgs</declname>
            <defname>FixedArgs</defname>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;I == std::tuple_size&lt;ArgsTuple&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void InitAndOptimize</definition>
        <argsstring>(const ArgsTuple &amp;args, arma::mat &amp;bestParams, data::DatasetMapper&lt; data::IncrementPolicy, double &gt; &amp;datasetInfo, FixedArgs... fixedArgs)</argsstring>
        <name>InitAndOptimize</name>
        <param>
          <type>const ArgsTuple &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>bestParams</declname>
        </param>
        <param>
          <type><ref refid="classmlpack_1_1data_1_1DatasetMapper" kindref="compound">data::DatasetMapper</ref>&lt; <ref refid="classmlpack_1_1data_1_1IncrementPolicy" kindref="compound">data::IncrementPolicy</ref>, double &gt; &amp;</type>
          <declname>datasetInfo</declname>
        </param>
        <param>
          <type>FixedArgs...</type>
          <declname>fixedArgs</declname>
        </param>
        <briefdescription>
<para>The set of methods to initialize auxiliary objects (a <ref refid="classmlpack_1_1hpt_1_1CVFunction" kindref="compound">CVFunction</ref> object and the datasetInfo parameter) and run optimization to find the best hyper-parameters. </para>        </briefdescription>
        <detaileddescription>
<para>This template is called when we are ready to run optimization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a834fc7ed9cab36bce91cd196e276ee80" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename ArgsTuple</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>FixedArgs</declname>
            <defname>FixedArgs</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void InitAndOptimize</definition>
        <argsstring>(const ArgsTuple &amp;args, arma::mat &amp;bestParams, data::DatasetMapper&lt; data::IncrementPolicy, double &gt; &amp;datasetInfo, FixedArgs... fixedArgs)</argsstring>
        <name>InitAndOptimize</name>
        <param>
          <type>const ArgsTuple &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>bestParams</declname>
        </param>
        <param>
          <type><ref refid="classmlpack_1_1data_1_1DatasetMapper" kindref="compound">data::DatasetMapper</ref>&lt; <ref refid="classmlpack_1_1data_1_1IncrementPolicy" kindref="compound">data::IncrementPolicy</ref>, double &gt; &amp;</type>
          <declname>datasetInfo</declname>
        </param>
        <param>
          <type>FixedArgs...</type>
          <declname>fixedArgs</declname>
        </param>
        <briefdescription>
<para>The set of methods to initialize auxiliary objects (a <ref refid="classmlpack_1_1hpt_1_1CVFunction" kindref="compound">CVFunction</ref> object and the datasetInfo parameter) and run optimization to find the best hyper-parameters. </para>        </briefdescription>
        <detaileddescription>
<para>This template is called when the next argument should be fixed (should not be optimized). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a834fc7ed9cab36bce91cd196e276ee80" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename ArgsTuple</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>FixedArgs</declname>
            <defname>FixedArgs</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void InitAndOptimize</definition>
        <argsstring>(const ArgsTuple &amp;args, arma::mat &amp;bestParams, data::DatasetMapper&lt; data::IncrementPolicy, double &gt; &amp;datasetInfo, FixedArgs... fixedArgs)</argsstring>
        <name>InitAndOptimize</name>
        <param>
          <type>const ArgsTuple &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>bestParams</declname>
        </param>
        <param>
          <type><ref refid="classmlpack_1_1data_1_1DatasetMapper" kindref="compound">data::DatasetMapper</ref>&lt; <ref refid="classmlpack_1_1data_1_1IncrementPolicy" kindref="compound">data::IncrementPolicy</ref>, double &gt; &amp;</type>
          <declname>datasetInfo</declname>
        </param>
        <param>
          <type>FixedArgs...</type>
          <declname>fixedArgs</declname>
        </param>
        <briefdescription>
<para>The set of methods to initialize auxiliary objects (a <ref refid="classmlpack_1_1hpt_1_1CVFunction" kindref="compound">CVFunction</ref> object and the datasetInfo parameter) and run optimization to find the best hyper-parameters. </para>        </briefdescription>
        <detaileddescription>
<para>This template is called when the next argument is of an arithmetic type and should be used as an initial value for the hyper-parameter. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a834fc7ed9cab36bce91cd196e276ee80" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename ArgsTuple</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>FixedArgs</declname>
            <defname>FixedArgs</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void InitAndOptimize</definition>
        <argsstring>(const ArgsTuple &amp;args, arma::mat &amp;bestParams, data::DatasetMapper&lt; data::IncrementPolicy, double &gt; &amp;datasetInfo, FixedArgs... fixedArgs)</argsstring>
        <name>InitAndOptimize</name>
        <param>
          <type>const ArgsTuple &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>bestParams</declname>
        </param>
        <param>
          <type><ref refid="classmlpack_1_1data_1_1DatasetMapper" kindref="compound">data::DatasetMapper</ref>&lt; <ref refid="classmlpack_1_1data_1_1IncrementPolicy" kindref="compound">data::IncrementPolicy</ref>, double &gt; &amp;</type>
          <declname>datasetInfo</declname>
        </param>
        <param>
          <type>FixedArgs...</type>
          <declname>fixedArgs</declname>
        </param>
        <briefdescription>
<para>The set of methods to initialize auxiliary objects (a <ref refid="classmlpack_1_1hpt_1_1CVFunction" kindref="compound">CVFunction</ref> object and the datasetInfo parameter) and run optimization to find the best hyper-parameters. </para>        </briefdescription>
        <detaileddescription>
<para>This template is called when the next argument should be used to specify possible values for the hyper-parameter in datasetInfo. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1abfa8b79c981ead4dc9b7b23a06687691" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TupleType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>TupleType</type>
        <definition>TupleType VectorToTuple</definition>
        <argsstring>(const arma::vec &amp;vector, const Args &amp;... args)</argsstring>
        <name>VectorToTuple</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Gather all elements of vector in an argument list and use them to create a tuple. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1HyperParameterTuner_1a55ce8e7427fb86af3e9d42fbcff92b19" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TupleType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename</type>
            <defval>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;I == std::tuple_size&lt;TupleType&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>TupleType</type>
        <definition>TupleType VectorToTuple</definition>
        <argsstring>(const arma::vec &amp;vector, const Args &amp;... args)</argsstring>
        <name>VectorToTuple</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Create a tuple from args. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="347" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class <ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref> for the given MLAlgorithm utilizes the provided Optimizer to find the values of hyper-parameters that optimize the value of the given Metric. </para>    </briefdescription>
    <detaileddescription>
<para>The value of the Metric is calculated by performing cross-validation with the provided cross-validation strategy.</para><para>To construct a <ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref> object you need to pass the same arguments as for construction of an object of the given CV class. For example, we can use the following code to try to find a good lambda value for LinearRegression.</para><para><programlisting><codeline><highlight class="normal">//<sp/>100-point<sp/>5-dimensional<sp/>random<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>data<sp/>=<sp/>arma::randu&lt;arma::mat&gt;(5,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Noisy<sp/>responses<sp/>retrieved<sp/>by<sp/>a<sp/>random<sp/>linear<sp/>transformation<sp/>of<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">arma::rowvec<sp/>responses<sp/>=<sp/>arma::randu&lt;arma::rowvec&gt;(5)<sp/>*<sp/>data<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0.1<sp/>*<sp/>arma::randn&lt;arma::rowvec&gt;(100);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Using<sp/>80%<sp/>of<sp/>data<sp/>for<sp/>training<sp/>and<sp/>remaining<sp/>20%<sp/>for<sp/>assessing<sp/>MSE.</highlight></codeline>
<codeline><highlight class="normal">double<sp/>validationSize<sp/>=<sp/>0.2;</highlight></codeline>
<codeline><highlight class="normal">HyperParameterTuner&lt;LinearRegression,<sp/>MSE,<sp/>SimpleCV&gt;<sp/>hpt(validationSize,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>data,<sp/>responses);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Finding<sp/>the<sp/>best<sp/>value<sp/>for<sp/>lambda<sp/>from<sp/>the<sp/>values<sp/>0.0,<sp/>0.001,<sp/>0.01,<sp/>0.1,</highlight></codeline>
<codeline><highlight class="normal">//<sp/>and<sp/>1.0.</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>lambdas{0.0,<sp/>0.001,<sp/>0.01,<sp/>0.1,<sp/>1.0};</highlight></codeline>
<codeline><highlight class="normal">double<sp/>bestLambda;</highlight></codeline>
<codeline><highlight class="normal">std::tie(bestLambda)<sp/>=<sp/>hpt.Optimize(lambdas);</highlight></codeline>
</programlisting></para><para>When some hyper-parameters should not be optimized, you can specify values for them with the Fixed function as in the following example of finding good lambda1 and lambda2 values for LARS.</para><para><programlisting><codeline><highlight class="normal">HyperParameterTuner&lt;LARS,<sp/>MSE,<sp/>SimpleCV&gt;<sp/>hpt2(validationSize,<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>responses);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>transposeData<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>useCholesky<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>lambda1Set{0.0,<sp/>0.001,<sp/>0.01,<sp/>0.1,<sp/>1.0};</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>lambda2Set{0.0,<sp/>0.002,<sp/>0.02,<sp/>0.2,<sp/>2.0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>bestLambda1,<sp/>bestLambda2;</highlight></codeline>
<codeline><highlight class="normal">std::tie(bestLambda1,<sp/>bestLambda2)<sp/>=<sp/>hpt2.Optimize(Fixed(transposeData),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Fixed(useCholesky),<sp/>lambda1Set,<sp/>lambda2Set);</highlight></codeline>
</programlisting></para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MLAlgorithm</parametername>
</parameternamelist>
<parameterdescription>
<para>A machine learning algorithm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Metric</parametername>
</parameternamelist>
<parameterdescription>
<para>A metric to assess the quality of a trained model. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CV</parametername>
</parameternamelist>
<parameterdescription>
<para>A cross-validation strategy used to assess a set of hyper-parameters. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OptimizerType</parametername>
</parameternamelist>
<parameterdescription>
<para>An optimization strategy (GridSearch and GradientDescent are supported). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MatType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PredictionsType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of predictions (should be passed when the predictions type is a template parameter in Train methods of the given MLAlgorithm; arma::Row&lt;size_t&gt; will be used otherwise). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WeightsType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of weights (should be passed when weighted learning is supported, and the weights type is a template parameter in Train methods of the given MLAlgorithm; arma::vec will be used otherwise). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" line="97" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp" bodystart="96" bodyend="348"/>
    <listofallmembers>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a402c70071c3b723abda0da2695067ab2" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>bestModel</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1add74660238332755f6e83e85f78b15c5" prot="public" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>BestModel</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a0c2bf016556a87be5f6f9e86f6b37dd9" prot="public" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>BestModel</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a9b0cf37d7f1f7d9e46a4aeafcc3f907f" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>bestObjective</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1adf93208d264cc5138f52a9c13b46c088" prot="public" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>BestObjective</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1af9d50a297b5b4a333462ffe3bae11da0" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>cv</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a8265331c9aa6770a6ef90106754aa05c" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>CVType</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a7fd1a69d0568cda10d907e1113fd189d" prot="public" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>HyperParameterTuner</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1acb533aceca7f2c14193c9744b609e5fe" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>InitAndOptimize</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a834fc7ed9cab36bce91cd196e276ee80" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>InitAndOptimize</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a834fc7ed9cab36bce91cd196e276ee80" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>InitAndOptimize</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a834fc7ed9cab36bce91cd196e276ee80" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>InitAndOptimize</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a4bb27379cfe38af2117068151c84950c" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>IsArithmetic</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a33fa044f2f2b2f797ed2f476b2ca7244" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>IsPreFixed</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1ad5c9c5c10dce1b4ba9983bc2c06ea85f" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>minDelta</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1afc866ee105432ff61c071bfa43a08e8c" prot="public" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>MinDelta</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1acf2793015fe5e3acb58b87a0e0f13813" prot="public" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>MinDelta</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a4e04da235ec0434d69613c547b20dbea" prot="public" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>Optimize</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1af46443e4b38268e2b061773090207a09" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>optimizer</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a213f61b8936eadf8a162e45b4c6188d0" prot="public" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>Optimizer</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a12ec7d15fd4c4d70ba17ea500b9c4049" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>relativeDelta</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1ab4d547696f7f5e4be93f9cc2a2dbfc9b" prot="public" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>RelativeDelta</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1ac23b9b3760c584f1d276ed867e7722aa" prot="public" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>RelativeDelta</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1abfa8b79c981ead4dc9b7b23a06687691" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>VectorToTuple</name></member>
      <member refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a55ce8e7427fb86af3e9d42fbcff92b19" prot="private" virt="non-virtual"><scope>mlpack::hpt::HyperParameterTuner</scope><name>VectorToTuple</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
