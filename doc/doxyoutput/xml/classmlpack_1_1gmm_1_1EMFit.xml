<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1gmm_1_1EMFit" kind="class" language="C++" prot="public">
    <compoundname>mlpack::gmm::EMFit</compoundname>
    <includes refid="em__fit_8hpp" local="no">em_fit.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename InitialClusteringType</type>
        <defval><ref refid="classmlpack_1_1kmeans_1_1KMeans" kindref="compound">kmeans::KMeans</ref>&lt;&gt;</defval>
      </param>
      <param>
        <type>typename CovarianceConstraintPolicy</type>
        <defval><ref refid="classmlpack_1_1gmm_1_1PositiveDefiniteConstraint" kindref="compound">PositiveDefiniteConstraint</ref></defval>
      </param>
      <param>
        <type>typename Distribution</type>
        <defval><ref refid="classmlpack_1_1distribution_1_1GaussianDistribution" kindref="compound">distribution::GaussianDistribution</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1gmm_1_1EMFit_1a889a4a6afc2c8be1403c572b4297e917" prot="private" static="no" mutable="no">
        <type>InitialClusteringType</type>
        <definition>InitialClusteringType clusterer</definition>
        <argsstring></argsstring>
        <name>clusterer</name>
        <briefdescription>
<para>Object which will perform the clustering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="186" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1gmm_1_1EMFit_1a458a1cb40302969fe801099c088652a0" prot="private" static="no" mutable="no">
        <type>CovarianceConstraintPolicy</type>
        <definition>CovarianceConstraintPolicy constraint</definition>
        <argsstring></argsstring>
        <name>constraint</name>
        <briefdescription>
<para>Object which applies constraints to the covariance matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="188" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1gmm_1_1EMFit_1adb3fa2e38847b23885acf3833f28538e" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t maxIterations</definition>
        <argsstring></argsstring>
        <name>maxIterations</name>
        <briefdescription>
<para>Maximum iterations of EM algorithm. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="182" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1gmm_1_1EMFit_1a97eab6d709b80585fe9e8a54b1e3da27" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double tolerance</definition>
        <argsstring></argsstring>
        <name>tolerance</name>
        <briefdescription>
<para>Tolerance for convergence of EM. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="184" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a030d5debc5e91c51e0f72f64ff39f3de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>EMFit</definition>
        <argsstring>(const size_t maxIterations=300, const double tolerance=1e-10, InitialClusteringType clusterer=InitialClusteringType(), CovarianceConstraintPolicy constraint=CovarianceConstraintPolicy())</argsstring>
        <name>EMFit</name>
        <param>
          <type>const size_t</type>
          <declname>maxIterations</declname>
          <defval>300</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>tolerance</declname>
          <defval>1e-10</defval>
        </param>
        <param>
          <type>InitialClusteringType</type>
          <declname>clusterer</declname>
          <defval>InitialClusteringType()</defval>
        </param>
        <param>
          <type>CovarianceConstraintPolicy</type>
          <declname>constraint</declname>
          <defval>CovarianceConstraintPolicy()</defval>
        </param>
        <briefdescription>
<para>Construct the <ref refid="classmlpack_1_1gmm_1_1EMFit" kindref="compound">EMFit</ref> object, optionally passing an InitialClusteringType object (just in case it needs to store state). </para>        </briefdescription>
        <detaileddescription>
<para>Setting the maximum number of iterations to 0 means that the EM algorithm will iterate until convergence (with the given tolerance).</para><para>The parameter forcePositive controls whether or not the covariance matrices are checked for positive definiteness at each iteration. This could be a time-consuming task, so, if you know your data is well-behaved, you can set it to false and save some runtime.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maxIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of iterations for EM. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Log-likelihood tolerance required for convergence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clusterer</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which will perform the initial clustering. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constraint</parametername>
</parameternamelist>
<parameterdescription>
<para>Constraint policy of covariance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a399ea7835ff966f467d13416046c7fa0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const InitialClusteringType &amp;</type>
        <definition>const InitialClusteringType&amp; Clusterer</definition>
        <argsstring>() const</argsstring>
        <name>Clusterer</name>
        <briefdescription>
<para>Get the clusterer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="111" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a79abb61d6e17dced3b7bffcec5a5a83a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>InitialClusteringType &amp;</type>
        <definition>InitialClusteringType&amp; Clusterer</definition>
        <argsstring>()</argsstring>
        <name>Clusterer</name>
        <briefdescription>
<para>Modify the clusterer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="113" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a2abb870b3266e1ce64e43ed16f2537f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const CovarianceConstraintPolicy &amp;</type>
        <definition>const CovarianceConstraintPolicy&amp; Constraint</definition>
        <argsstring>() const</argsstring>
        <name>Constraint</name>
        <briefdescription>
<para>Get the covariance constraint policy class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="116" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a05ddd1b39294c15e05c8d922b336ee2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>CovarianceConstraintPolicy &amp;</type>
        <definition>CovarianceConstraintPolicy&amp; Constraint</definition>
        <argsstring>()</argsstring>
        <name>Constraint</name>
        <briefdescription>
<para>Modify the covariance constraint policy class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="118" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a2a2f9c9c82f1e94ee7aad7d759193b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Estimate</definition>
        <argsstring>(const arma::mat &amp;observations, std::vector&lt; Distribution &gt; &amp;dists, arma::vec &amp;weights, const bool useInitialModel=false)</argsstring>
        <name>Estimate</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>observations</declname>
        </param>
        <param>
          <type>std::vector&lt; Distribution &gt; &amp;</type>
          <declname>dists</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useInitialModel</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Fit the observations to a Gaussian mixture model (<ref refid="classmlpack_1_1gmm_1_1GMM" kindref="compound">GMM</ref>) using the EM algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>The size of the vectors (indicating the number of components) must already be set. Optionally, if useInitialModel is set to true, then the model given in the means, covariances, and weights parameters is used as the initial model, instead of using the InitialClusteringType::Cluster() option.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observations</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observations to train on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dists</parametername>
</parameternamelist>
<parameterdescription>
<para>Distributions to store model in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to store a priori weights in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useInitialModel</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the given model is used for the initial clustering. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1ac0f0d7036d31c3f590afd3ca9d061425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Estimate</definition>
        <argsstring>(const arma::mat &amp;observations, const arma::vec &amp;probabilities, std::vector&lt; Distribution &gt; &amp;dists, arma::vec &amp;weights, const bool useInitialModel=false)</argsstring>
        <name>Estimate</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>observations</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>probabilities</declname>
        </param>
        <param>
          <type>std::vector&lt; Distribution &gt; &amp;</type>
          <declname>dists</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useInitialModel</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Fit the observations to a Gaussian mixture model (<ref refid="classmlpack_1_1gmm_1_1GMM" kindref="compound">GMM</ref>) using the EM algorithm, taking into account the probabilities of each point being from this mixture. </para>        </briefdescription>
        <detaileddescription>
<para>The size of the vectors (indicating the number of components) must already be set. Optionally, if useInitialModel is set to true, then the model given in the means, covariances, and weights parameters is used as the initial model, instead of using the InitialClusteringType::Cluster() option.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observations</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observations to train on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>probabilities</parametername>
</parameternamelist>
<parameterdescription>
<para>Probability of each point being from this model. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dists</parametername>
</parameternamelist>
<parameterdescription>
<para>Distributions to store model in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to store a priori weights in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useInitialModel</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the given model is used for the initial clustering. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a420770944a5b0c7a852c4ec372c4a2d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t MaxIterations</definition>
        <argsstring>() const</argsstring>
        <name>MaxIterations</name>
        <briefdescription>
<para>Get the maximum number of iterations of the EM algorithm. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="121" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1acda675ab4ab86b95c92bc33bc391a61b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t &amp;</type>
        <definition>size_t&amp; MaxIterations</definition>
        <argsstring>()</argsstring>
        <name>MaxIterations</name>
        <briefdescription>
<para>Modify the maximum number of iterations of the EM algorithm. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="123" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t version)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Serialize the fitter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="132" column="1"/>
        <referencedby refid="classmlpack_1_1gmm_1_1EMFit_1a3d9fac84af16250f5a3689692e8f2173" compoundref="em__fit_8hpp" startline="128" endline="128">EMFit&lt; InitialClusteringType, CovarianceConstraintPolicy, Distribution &gt;::Tolerance</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a7b5af5c1a84c507cbaa7f999ea5a4fda" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Tolerance</definition>
        <argsstring>() const</argsstring>
        <name>Tolerance</name>
        <briefdescription>
<para>Get the tolerance for the convergence of the EM algorithm. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="126" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a3d9fac84af16250f5a3689692e8f2173" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; Tolerance</definition>
        <argsstring>()</argsstring>
        <name>Tolerance</name>
        <briefdescription>
<para>Modify the tolerance for the convergence of the EM algorithm. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="128" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="128" bodyend="128"/>
        <references refid="classmlpack_1_1gmm_1_1EMFit_1a72d63b74c8166dff8e1a9006905ad9ca">EMFit&lt; InitialClusteringType, CovarianceConstraintPolicy, Distribution &gt;::serialize</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a01f678b6cbcd298bdba86a53b3c583ca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ArmadilloGMMWrapper</definition>
        <argsstring>(const arma::mat &amp;observations, std::vector&lt; Distribution &gt; &amp;dists, arma::vec &amp;weights, const bool useInitialModel)</argsstring>
        <name>ArmadilloGMMWrapper</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>observations</declname>
        </param>
        <param>
          <type>std::vector&lt; Distribution &gt; &amp;</type>
          <declname>dists</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>useInitialModel</declname>
        </param>
        <briefdescription>
<para>Use the Armadillo gmm_diag clusterer to train a <ref refid="classmlpack_1_1gmm_1_1GMM" kindref="compound">GMM</ref> with diagonal covariance. </para>        </briefdescription>
        <detaileddescription>
<para>If InitialClusteringType == kmeans::KMeans&lt;&gt;, this will use Armadillo&apos;s initialization also.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observations</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to train on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dists</parametername>
</parameternamelist>
<parameterdescription>
<para>Distributions to store model in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Prior weights. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useInitialModel</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the existing model will be used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a27b153296db2a992bc58c5791ee10043" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InitialClustering</definition>
        <argsstring>(const arma::mat &amp;observations, std::vector&lt; Distribution &gt; &amp;dists, arma::vec &amp;weights)</argsstring>
        <name>InitialClustering</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>observations</declname>
        </param>
        <param>
          <type>std::vector&lt; Distribution &gt; &amp;</type>
          <declname>dists</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>Run the clusterer, and then turn the cluster assignments into Gaussians. </para>        </briefdescription>
        <detaileddescription>
<para>This is a helper function for both overloads of <ref refid="classmlpack_1_1gmm_1_1EMFit_1a2a2f9c9c82f1e94ee7aad7d759193b97" kindref="member">Estimate()</ref>. The vectors must be already set to the number of clusters.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observations</parametername>
</parameternamelist>
<parameterdescription>
<para>List of observations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>means</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to store means in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dists</parametername>
</parameternamelist>
<parameterdescription>
<para>Distributions to store model in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to store a priori weights in. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1gmm_1_1EMFit_1a085458da30ce29795254427d53b5b017" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double LogLikelihood</definition>
        <argsstring>(const arma::mat &amp;data, const std::vector&lt; Distribution &gt; &amp;dists, const arma::vec &amp;weights) const</argsstring>
        <name>LogLikelihood</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; Distribution &gt; &amp;</type>
          <declname>dists</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>weights</declname>
        </param>
        <briefdescription>
<para>Calculate the log-likelihood of a model. </para>        </briefdescription>
        <detaileddescription>
<para>Yes, this is reimplemented in the <ref refid="classmlpack_1_1gmm_1_1GMM" kindref="compound">GMM</ref> code. Intuition suggests that the log-likelihood is not the best way to determine if the EM algorithm has converged.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>means</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of means. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dists</parametername>
</parameternamelist>
<parameterdescription>
<para>Distributions to store model in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of a priori weights. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="160" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class contains methods which can fit a <ref refid="classmlpack_1_1gmm_1_1GMM" kindref="compound">GMM</ref> to observations using the EM algorithm. </para>    </briefdescription>
    <detaileddescription>
<para>It requires an initial clustering mechanism, which is by default the KMeans algorithm. The clustering mechanism must implement the following method:</para><para><itemizedlist>
<listitem><para>void Cluster(const arma::mat&amp; observations, const size_t clusters, arma::Row&lt;size_t&gt;&amp; assignments);</para></listitem></itemizedlist>
</para><para>This method should create &apos;clusters&apos; clusters, and return the assignment of each point to a cluster. </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" line="46" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp" bodystart="45" bodyend="189"/>
    <listofallmembers>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a01f678b6cbcd298bdba86a53b3c583ca" prot="private" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>ArmadilloGMMWrapper</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a889a4a6afc2c8be1403c572b4297e917" prot="private" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>clusterer</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a399ea7835ff966f467d13416046c7fa0" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>Clusterer</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a79abb61d6e17dced3b7bffcec5a5a83a" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>Clusterer</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a458a1cb40302969fe801099c088652a0" prot="private" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>constraint</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a2abb870b3266e1ce64e43ed16f2537f6" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>Constraint</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a05ddd1b39294c15e05c8d922b336ee2f" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>Constraint</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a030d5debc5e91c51e0f72f64ff39f3de" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>EMFit</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a2a2f9c9c82f1e94ee7aad7d759193b97" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>Estimate</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1ac0f0d7036d31c3f590afd3ca9d061425" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>Estimate</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a27b153296db2a992bc58c5791ee10043" prot="private" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>InitialClustering</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a085458da30ce29795254427d53b5b017" prot="private" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>LogLikelihood</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1adb3fa2e38847b23885acf3833f28538e" prot="private" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>maxIterations</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a420770944a5b0c7a852c4ec372c4a2d1" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>MaxIterations</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1acda675ab4ab86b95c92bc33bc391a61b" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>MaxIterations</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a97eab6d709b80585fe9e8a54b1e3da27" prot="private" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>tolerance</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a7b5af5c1a84c507cbaa7f999ea5a4fda" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>Tolerance</name></member>
      <member refid="classmlpack_1_1gmm_1_1EMFit_1a3d9fac84af16250f5a3689692e8f2173" prot="public" virt="non-virtual"><scope>mlpack::gmm::EMFit</scope><name>Tolerance</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
