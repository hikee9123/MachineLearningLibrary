<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1cf_1_1CFType" kind="class" language="C++" prot="public">
    <compoundname>mlpack::cf::CFType</compoundname>
    <includes refid="cf_8hpp" local="no">cf.hpp</includes>
    <innerclass refid="structmlpack_1_1cf_1_1CFType_1_1CandidateCmp" prot="private">mlpack::cf::CFType::CandidateCmp</innerclass>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>DecompositionPolicy</declname>
        <defname>DecompositionPolicy</defname>
        <defval><ref refid="classmlpack_1_1cf_1_1NMFPolicy" kindref="compound">NMFPolicy</ref></defval>
      </param>
      <param>
        <type>typename</type>
        <declname>NormalizationType</declname>
        <defname>NormalizationType</defname>
        <defval><ref refid="classmlpack_1_1cf_1_1NoNormalization" kindref="compound">NoNormalization</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classmlpack_1_1cf_1_1CFType_1a25f2752ae2dd3aa1e6b36257252e9c63" prot="private" static="no">
        <type>std::pair&lt; double, size_t &gt;</type>
        <definition>typedef std::pair&lt;double, size_t&gt; Candidate</definition>
        <argsstring></argsstring>
        <name>Candidate</name>
        <briefdescription>
<para>Candidate represents a possible recommendation (value, item). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="278" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="278" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1cf_1_1CFType_1a84c46dbc8b85d03cdab4d32fd6c7b664" prot="private" static="no" mutable="no">
        <type>arma::sp_mat</type>
        <definition>arma::sp_mat cleanedData</definition>
        <argsstring></argsstring>
        <name>cleanedData</name>
        <briefdescription>
<para>Cleaned data matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="273" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cf_1_1CFType_1af97ad494cc8077d8a0d660868e6c0b03" prot="private" static="no" mutable="no">
        <type>DecompositionPolicy</type>
        <definition>DecompositionPolicy decomposition</definition>
        <argsstring></argsstring>
        <name>decomposition</name>
        <briefdescription>
<para>DecompositionPolicy object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="271" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cf_1_1CFType_1a9763ba4133058a4cf33333526a3934ab" prot="private" static="no" mutable="no">
        <type>NormalizationType</type>
        <definition>NormalizationType normalization</definition>
        <argsstring></argsstring>
        <name>normalization</name>
        <briefdescription>
<para>Data normalization object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="275" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cf_1_1CFType_1a62168a90a279cc40905785a3de4e99df" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t numUsersForSimilarity</definition>
        <argsstring></argsstring>
        <name>numUsersForSimilarity</name>
        <briefdescription>
<para>Number of users for similarity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="267" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1cf_1_1CFType_1ab70df9cf68a7bebf253173dcec354ee5" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t rank</definition>
        <argsstring></argsstring>
        <name>rank</name>
        <briefdescription>
<para>Rank used for matrix factorization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="269" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="269" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a1ede74b2271ab9e82f8db2dbc27adf13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CFType</definition>
        <argsstring>(const size_t numUsersForSimilarity=5, const size_t rank=0)</argsstring>
        <name>CFType</name>
        <param>
          <type>const size_t</type>
          <declname>numUsersForSimilarity</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>rank</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classmlpack_1_1cf_1_1CFType" kindref="compound">CFType</ref> object without performing any factorization. </para>        </briefdescription>
        <detaileddescription>
<para>Be sure to call <ref refid="classmlpack_1_1cf_1_1CFType_1a6c7cc418bd1efca587106fbe387534ee" kindref="member">Train()</ref> before calling <ref refid="classmlpack_1_1cf_1_1CFType_1aea00d8c8dfad713dd5542e450d633d5a" kindref="member">GetRecommendations()</ref> or any other functions! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a6451c7152ccb66da74f6e98b1db7ec8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>CFType</definition>
        <argsstring>(const MatType &amp;data, const DecompositionPolicy &amp;decomposition=DecompositionPolicy(), const size_t numUsersForSimilarity=5, const size_t rank=0, const size_t maxIterations=1000, const double minResidue=1e-5, const bool mit=false)</argsstring>
        <name>CFType</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const DecompositionPolicy &amp;</type>
          <declname>decomposition</declname>
          <defval>DecompositionPolicy()</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>numUsersForSimilarity</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>rank</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxIterations</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>minResidue</declname>
          <defval>1e-5</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>mit</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classmlpack_1_1cf_1_1CFType" kindref="compound">CFType</ref> object using any decomposition method, immediately factorizing the given data to create a model. </para>        </briefdescription>
        <detaileddescription>
<para>There are parameters that can be set; default values are provided for each of them. If the rank is left unset (or is set to 0), a simple density-based heuristic will be used to choose a rank.</para><para>The provided dataset can be a coordinate list; that is, a 3-row matrix where each column corresponds to a (user, item, rating) entry in the matrix or a sparse matrix representing (user, item) table.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of input matrix, which is expected to be either arma::mat (table of (user, item, rating)) or arma::sp_mat (sparse rating matrix where row is item and column is user).</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data matrix: dense matrix (coordinate lists) or sparse matrix(cleaned). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decomposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated DecompositionPolicy object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numUsersForSimilarity</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the neighborhood. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rank</parametername>
</parameternamelist>
<parameterdescription>
<para>Rank parameter for matrix factorization. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of iterations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minResidue</parametername>
</parameternamelist>
<parameterdescription>
<para>Residue required to terminate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mit</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to terminate only when maxIterations is reached. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a9b45ccc1241c683ffaaf1be745b438d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::sp_mat &amp;</type>
        <definition>const arma::sp_mat&amp; CleanedData</definition>
        <argsstring>() const</argsstring>
        <name>CleanedData</name>
        <briefdescription>
<para>Get the cleaned data matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="180" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a2312b615423d95028bd2211c61a7d74d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const DecompositionPolicy &amp;</type>
        <definition>const DecompositionPolicy&amp; Decomposition</definition>
        <argsstring>() const</argsstring>
        <name>Decomposition</name>
        <briefdescription>
<para>Gets decomposition object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="177" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1aea00d8c8dfad713dd5542e450d633d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NeighborSearchPolicy</type>
            <defval><ref refid="namespacemlpack_1_1cf_1a3817765250ba3485d25a82ef2da8b9b2" kindref="member">EuclideanSearch</ref></defval>
          </param>
          <param>
            <type>typename InterpolationPolicy</type>
            <defval><ref refid="classmlpack_1_1cf_1_1AverageInterpolation" kindref="compound">AverageInterpolation</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void GetRecommendations</definition>
        <argsstring>(const size_t numRecs, arma::Mat&lt; size_t &gt; &amp;recommendations)</argsstring>
        <name>GetRecommendations</name>
        <param>
          <type>const size_t</type>
          <declname>numRecs</declname>
        </param>
        <param>
          <type>arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>recommendations</declname>
        </param>
        <briefdescription>
<para>Generates the given number of recommendations for all users. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NeighborSearchPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy used to search neighbors of query set in referece set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InterpolationPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy used to calculate interpolation weights.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numRecs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Recommendations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recommendations</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to save recommendations into. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="198" column="1"/>
        <referencedby refid="classmlpack_1_1cf_1_1CFType_1a85300f3ff2c7f809a8dbe783f833e7b1" compoundref="cf_8hpp" startline="183" endline="183">CFType&lt; DecompositionPolicy, NormalizationPolicy &gt;::Normalization</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a07ca697e6ba5cf1b7056071914e708a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NeighborSearchPolicy</type>
            <defval><ref refid="namespacemlpack_1_1cf_1a3817765250ba3485d25a82ef2da8b9b2" kindref="member">EuclideanSearch</ref></defval>
          </param>
          <param>
            <type>typename InterpolationPolicy</type>
            <defval><ref refid="classmlpack_1_1cf_1_1AverageInterpolation" kindref="compound">AverageInterpolation</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void GetRecommendations</definition>
        <argsstring>(const size_t numRecs, arma::Mat&lt; size_t &gt; &amp;recommendations, const arma::Col&lt; size_t &gt; &amp;users)</argsstring>
        <name>GetRecommendations</name>
        <param>
          <type>const size_t</type>
          <declname>numRecs</declname>
        </param>
        <param>
          <type>arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>recommendations</declname>
        </param>
        <param>
          <type>const arma::Col&lt; size_t &gt; &amp;</type>
          <declname>users</declname>
        </param>
        <briefdescription>
<para>Generates the given number of recommendations for the specified users. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NeighborSearchPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy used to search neighbors of query set in referece set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InterpolationPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy used to calculate interpolation weights.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numRecs</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Recommendations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recommendations</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to save recommendations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>Users for which recommendations are to be generated. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a85300f3ff2c7f809a8dbe783f833e7b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const NormalizationType &amp;</type>
        <definition>const NormalizationType&amp; Normalization</definition>
        <argsstring>() const</argsstring>
        <name>Normalization</name>
        <briefdescription>
<para>Get the normalization object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="183" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1ab907e6b81f7b38e654d185077603466f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void NumUsersForSimilarity</definition>
        <argsstring>(const size_t num)</argsstring>
        <name>NumUsersForSimilarity</name>
        <param>
          <type>const size_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Sets number of users for calculating similarity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="147" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="147" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a90464e33b6300c307c7d4741f3c5f791" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t NumUsersForSimilarity</definition>
        <argsstring>() const</argsstring>
        <name>NumUsersForSimilarity</name>
        <briefdescription>
<para>Gets number of users for calculating similarity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="159" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a40809f18b938075bb471c5f32e6ec57c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NeighborSearchPolicy</type>
            <defval><ref refid="namespacemlpack_1_1cf_1a3817765250ba3485d25a82ef2da8b9b2" kindref="member">EuclideanSearch</ref></defval>
          </param>
          <param>
            <type>typename InterpolationPolicy</type>
            <defval><ref refid="classmlpack_1_1cf_1_1AverageInterpolation" kindref="compound">AverageInterpolation</ref></defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Predict</definition>
        <argsstring>(const size_t user, const size_t item) const</argsstring>
        <name>Predict</name>
        <param>
          <type>const size_t</type>
          <declname>user</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Predict the rating of an item by a particular user. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NeighborSearchPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy used to search neighbors of query set in referece set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InterpolationPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy used to calculate interpolation weights.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>User to predict for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Item to predict for. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="235" column="1"/>
        <referencedby refid="classmlpack_1_1cf_1_1CFType_1a85300f3ff2c7f809a8dbe783f833e7b1" compoundref="cf_8hpp" startline="183" endline="183">CFType&lt; DecompositionPolicy, NormalizationPolicy &gt;::Normalization</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a66e488fde0b5aab4a0c3aab318382bd3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NeighborSearchPolicy</type>
            <defval><ref refid="namespacemlpack_1_1cf_1a3817765250ba3485d25a82ef2da8b9b2" kindref="member">EuclideanSearch</ref></defval>
          </param>
          <param>
            <type>typename InterpolationPolicy</type>
            <defval><ref refid="classmlpack_1_1cf_1_1AverageInterpolation" kindref="compound">AverageInterpolation</ref></defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Predict</definition>
        <argsstring>(const arma::Mat&lt; size_t &gt; &amp;combinations, arma::vec &amp;predictions) const</argsstring>
        <name>Predict</name>
        <param>
          <type>const arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>combinations</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>predictions</declname>
        </param>
        <briefdescription>
<para>Predict ratings for each user-item combination in the given coordinate list matrix. </para>        </briefdescription>
        <detaileddescription>
<para>The matrix &apos;combinations&apos; should have two rows and number of columns equal to the number of desired predictions. The first element of each column corresponds to the user index, and the second element of each column corresponds to the item index. The output vector &apos;predictions&apos; will have length equal to combinations.n_cols, and predictions[i] will be equal to the prediction for the user/item combination in combinations.col(i).</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NeighborSearchPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy used to search neighbors of query set in referece set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>InterpolationPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy used to calculate interpolation weights.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>combinations</parametername>
</parameternamelist>
<parameterdescription>
<para>User/item combinations to predict. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predictions</parametername>
</parameternamelist>
<parameterdescription>
<para>Predicted ratings for each user/item combination. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a6abdfd96dee1459e1640a6d6e1d1eec4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Rank</definition>
        <argsstring>(const size_t rankValue)</argsstring>
        <name>Rank</name>
        <param>
          <type>const size_t</type>
          <declname>rankValue</declname>
        </param>
        <briefdescription>
<para>Sets rank parameter for matrix factorization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="165" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1afe1447c5e7fa184cbf19ced57a50b7b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Rank</definition>
        <argsstring>() const</argsstring>
        <name>Rank</name>
        <briefdescription>
<para>Gets rank parameter for matrix factorization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="171" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a65cba07328997659bec80b9879b15a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>Serialize the <ref refid="classmlpack_1_1cf_1_1CFType" kindref="compound">CFType</ref> model to the given archive. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="263" column="1"/>
        <referencedby refid="classmlpack_1_1cf_1_1CFType_1a85300f3ff2c7f809a8dbe783f833e7b1" compoundref="cf_8hpp" startline="183" endline="183">CFType&lt; DecompositionPolicy, NormalizationPolicy &gt;::Normalization</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a6c7cc418bd1efca587106fbe387534ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Train</definition>
        <argsstring>(const arma::mat &amp;data, const DecompositionPolicy &amp;decomposition, const size_t maxIterations=1000, const double minResidue=1e-5, const bool mit=false)</argsstring>
        <name>Train</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const DecompositionPolicy &amp;</type>
          <declname>decomposition</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxIterations</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>minResidue</declname>
          <defval>1e-5</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>mit</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Train the <ref refid="classmlpack_1_1cf_1_1CFType" kindref="compound">CFType</ref> model (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>factorize the input matrix) using the parameters that have already been set for the model (specifically, the rank parameter), and optionally, using the given DecompositionPolicy.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dataset; dense matrix (coordinate lists). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decomposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated DecompositionPolicy object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of iterations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minResidue</parametername>
</parameternamelist>
<parameterdescription>
<para>Residue required to terminate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mit</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to terminate only when maxIterations is reached. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a521c130dfede7ce4f794e478aa50463f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Train</definition>
        <argsstring>(const arma::sp_mat &amp;data, const DecompositionPolicy &amp;decomposition, const size_t maxIterations=1000, const double minResidue=1e-5, const bool mit=false)</argsstring>
        <name>Train</name>
        <param>
          <type>const arma::sp_mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const DecompositionPolicy &amp;</type>
          <declname>decomposition</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>maxIterations</declname>
          <defval>1000</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>minResidue</declname>
          <defval>1e-5</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>mit</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Train the <ref refid="classmlpack_1_1cf_1_1CFType" kindref="compound">CFType</ref> model (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>factorize the input matrix) using the parameters that have already been set for the model (specifically, the rank parameter), and optionally, using the given DecompositionPolicy.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dataset; sparse matrix (user item table). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decomposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated DecompositionPolicy object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of iterations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minResidue</parametername>
</parameternamelist>
<parameterdescription>
<para>Residue required to terminate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mit</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to terminate only when maxIterations is reached. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="140" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmlpack_1_1cf_1_1CFType_1a6606a419e5db3e8218a4f0c6b1c81258" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CleanData</definition>
        <argsstring>(const arma::mat &amp;data, arma::sp_mat &amp;cleanedData)</argsstring>
        <name>CleanData</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>arma::sp_mat &amp;</type>
          <declname>cleanedData</declname>
        </param>
        <briefdescription>
<para>Converts the User, Item, Value Matrix to User-Item Table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="220" column="1"/>
        <referencedby refid="classmlpack_1_1cf_1_1CFType_1a85300f3ff2c7f809a8dbe783f833e7b1" compoundref="cf_8hpp" startline="183" endline="183">CFType&lt; DecompositionPolicy, NormalizationPolicy &gt;::Normalization</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class implements Collaborative Filtering (CF). </para>    </briefdescription>
    <detaileddescription>
<para>This implementation presently supports Alternating Least Squares (ALS) for collaborative filtering.</para><para>A simple example of how to run Collaborative Filtering is shown below.</para><para><programlisting><codeline><highlight class="normal">extern<sp/>arma::mat<sp/>data;<sp/>//<sp/>(user,<sp/>item,<sp/>rating)<sp/>table</highlight></codeline>
<codeline><highlight class="normal">extern<sp/>arma::Col&lt;size_t&gt;<sp/>users;<sp/>//<sp/>users<sp/>seeking<sp/>recommendations</highlight></codeline>
<codeline><highlight class="normal">arma::Mat&lt;size_t&gt;<sp/>recommendations;<sp/>//<sp/>Recommendations</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CFType&lt;&gt;<sp/>cf(data);<sp/>//<sp/>Default<sp/>options.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Generate<sp/>10<sp/>recommendations<sp/>for<sp/>all<sp/>users.</highlight></codeline>
<codeline><highlight class="normal">cf.GetRecommendations(10,<sp/>recommendations);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Generate<sp/>10<sp/>recommendations<sp/>for<sp/>specified<sp/>users.</highlight></codeline>
<codeline><highlight class="normal">cf.GetRecommendations(10,<sp/>recommendations,<sp/>users);</highlight></codeline>
</programlisting></para><para>The data matrix is a (user, item, rating) table. Each column in the matrix should have three rows. The first represents the user; the second represents the item; and the third represents the rating. The user and item, while they are in a matrix that holds doubles, should hold integer (or size_t) values. The user and item indices are assumed to start at 0.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DecompositionPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The policy used to decompose the rating matrix. It also provides methods to compute prediction and neighborhood. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NormalizationType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of normalization performed on raw data. Data is normalized before calling <ref refid="classmlpack_1_1cf_1_1CFType_1a6c7cc418bd1efca587106fbe387534ee" kindref="member">Train()</ref> method. Predicted rating is denormalized before return. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="557">
        <label>CFType&lt; DecompositionPolicy, NormalizationPolicy &gt;</label>
        <link refid="classmlpack_1_1cf_1_1CFType"/>
        <childnode refid="556" relation="template-instance">
          <edgelabel>&lt; DecompositionPolicy, NormalizationPolicy &gt;</edgelabel>
        </childnode>
      </node>
      <node id="556">
        <label>CFType&lt; DecompositionPolicy, NormalizationType &gt;</label>
        <link refid="classmlpack_1_1cf_1_1CFType"/>
      </node>
    </inheritancegraph>
    <location file="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" line="71" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp" bodystart="70" bodyend="287"/>
    <listofallmembers>
      <member refid="classmlpack_1_1cf_1_1CFType_1a25f2752ae2dd3aa1e6b36257252e9c63" prot="private" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>Candidate</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a1ede74b2271ab9e82f8db2dbc27adf13" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>CFType</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a6451c7152ccb66da74f6e98b1db7ec8e" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>CFType</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a6606a419e5db3e8218a4f0c6b1c81258" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>CleanData</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a84c46dbc8b85d03cdab4d32fd6c7b664" prot="private" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>cleanedData</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a9b45ccc1241c683ffaaf1be745b438d0" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>CleanedData</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1af97ad494cc8077d8a0d660868e6c0b03" prot="private" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>decomposition</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a2312b615423d95028bd2211c61a7d74d" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>Decomposition</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1aea00d8c8dfad713dd5542e450d633d5a" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>GetRecommendations</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a07ca697e6ba5cf1b7056071914e708a1" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>GetRecommendations</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a85300f3ff2c7f809a8dbe783f833e7b1" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>Normalization</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a9763ba4133058a4cf33333526a3934ab" prot="private" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>normalization</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a62168a90a279cc40905785a3de4e99df" prot="private" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>numUsersForSimilarity</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1ab907e6b81f7b38e654d185077603466f" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>NumUsersForSimilarity</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a90464e33b6300c307c7d4741f3c5f791" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>NumUsersForSimilarity</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a40809f18b938075bb471c5f32e6ec57c" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>Predict</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a66e488fde0b5aab4a0c3aab318382bd3" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>Predict</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a6abdfd96dee1459e1640a6d6e1d1eec4" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>Rank</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1afe1447c5e7fa184cbf19ced57a50b7b6" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>Rank</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1ab70df9cf68a7bebf253173dcec354ee5" prot="private" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>rank</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a65cba07328997659bec80b9879b15a51" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a6c7cc418bd1efca587106fbe387534ee" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>Train</name></member>
      <member refid="classmlpack_1_1cf_1_1CFType_1a521c130dfede7ce4f794e478aa50463f" prot="public" virt="non-virtual"><scope>mlpack::cf::CFType</scope><name>Train</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
