<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sample_ml_app" kind="page">
    <compoundname>sample_ml_app</compoundname>
    <title>Sample C++ ML App for Windows</title>
    <detaileddescription>
<sect1 id="sample_ml_app_1sample_intro">
<title>Introduction</title>
<para>This tutorial will help you create a sample machine learning app using mlpack/C++. Although this app does not cover all the mlpack capabilities, it will walkthrough several APIs to understand how everything connects. This Windows sample app is created using Visual Studio, but you can easily adapt it to a different platform by following the provided source code.</para><para><simplesect kind="note"><para>Before starting, make sure you have built mlpack for Windows following this <ref refid="build_windows" kindref="compound">Windows guide</ref></para></simplesect>
</para></sect1>
<sect1 id="sample_ml_app_1sample_create_project">
<title>Creating the VS project</title>
<para><itemizedlist>
<listitem><para>Open Visual Studio and create a new project (Windows Console Application)</para></listitem><listitem><para>For this sample, the project is named “sample-ml-app”</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="sample_ml_app_1sample_project_config">
<title>Project Configuration</title>
<para>There are different ways in which you can configure your project to link with dependencies. This configuration is for x64 Debug Mode. If you need Release Mode, please change the paths accordingly (assuming you have built mlpack and dependencies in Release Mode).</para><para><itemizedlist>
<listitem><para>Right click on the project and select Properties, select the x64 Debug profile</para></listitem><listitem><para>Under C/C++ &gt; General &gt; Additional Include Directories add: <programlisting><codeline><highlight class="normal">-<sp/>C:\boost\boost_1_71_0\lib\native\include</highlight></codeline>
<codeline><highlight class="normal">-<sp/>C:\mlpack\armadillo-9.800.3\include</highlight></codeline>
<codeline><highlight class="normal">-<sp/>C:\mlpack\mlpack-3.4.2\build\include</highlight></codeline>
</programlisting></para></listitem><listitem><para>Under Linker &gt; Input &gt; Additional Dependencies add: <programlisting><codeline><highlight class="normal">-<sp/>C:\mlpack\mlpack-3.4.2\build\Debug\mlpack.lib</highlight></codeline>
</programlisting></para></listitem><listitem><para>Under Build Events &gt; Post-Build Event &gt; Command Line add: <programlisting><codeline><highlight class="normal">-<sp/>xcopy<sp/>/y<sp/>&quot;C:\mlpack\mlpack-3.4.2\build\Debug\mlpack.dll&quot;<sp/>$(OutDir)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>xcopy<sp/>/y<sp/>&quot;C:\mlpack\mlpack-3.4.2\packages\OpenBLAS.0.2.14.1\lib\native\bin\x64\*.dll&quot;<sp/>$(OutDir)</highlight></codeline>
</programlisting></para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Recent versions of Visual Studio set &quot;Conformance Mode&quot; enabled by default. This causes some issues with the armadillo library. If you encounter this issue, disable &quot;Conformance Mode&quot; under C/C++ &gt; Language.</para></simplesect>
</para></sect1>
<sect1 id="sample_ml_app_1sample_app_goal">
<title>The app goal</title>
<para>This app aims to exercise an end-to-end machine learning workflow. We will cover:</para><para><itemizedlist>
<listitem><para>Loading and preparing a dataset</para></listitem><listitem><para>Training (using Random Forest as example)</para></listitem><listitem><para>Computing the training accuracy</para></listitem><listitem><para>Cross-Validation using K-Fold</para></listitem><listitem><para>Metrics gathering (accuracy, precision, recall, F1)</para></listitem><listitem><para>Saving the trained model to disk</para></listitem><listitem><para>Loading the model</para></listitem><listitem><para>Classifying a new sample</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="sample_ml_app_1sample_headers_namespaces">
<title>Headers and namespaces</title>
<para>For this app, we will need to include the following headers (i.e. add into stdafx.h):</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;mlpack/core.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;mlpack/methods/random_forest/random_forest.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;mlpack/methods/decision_tree/random_dimension_select.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;mlpack/core/cv/k_fold_cv.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;mlpack/core/cv/metrics/accuracy.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;mlpack/core/cv/metrics/precision.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;mlpack/core/cv/metrics/recall.hpp&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;mlpack/core/cv/metrics/F1.hpp&quot;</highlight></codeline>
</programlisting></para><para>Also, we will use the following namespaces:</para><para><programlisting><codeline><highlight class="normal">using<sp/>namespace<sp/>arma;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::tree;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack::cv;</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="sample_ml_app_1sample_load_dataset">
<title>Loading the dataset</title>
<para>First step is about loading the dataset. Different dataset file formats are supported, but here we load a CSV dataset, and we assume the labels don&apos;t require normalization.</para><para><simplesect kind="note"><para>Make sure you update the path to your dataset file. For this sample, you can simply copy &quot;mlpack/tests/data/german.csv&quot; and paste into a new &quot;data&quot; folder in your project directory.</para></simplesect>
<programlisting><codeline><highlight class="normal">mat<sp/>dataset;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>loaded<sp/>=<sp/>mlpack::data::Load(&quot;data/german.csv&quot;,<sp/>dataset);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!loaded)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>-1;</highlight></codeline>
</programlisting></para><para>Then we need to extract the labels from the last dimension of the dataset and remove the labels from the training set:</para><para><programlisting><codeline><highlight class="normal">Row&lt;size_t&gt;<sp/>labels;</highlight></codeline>
<codeline><highlight class="normal">labels<sp/>=<sp/>conv_to&lt;Row&lt;size_t&gt;&gt;::from(dataset.row(dataset.n_rows<sp/>-<sp/>1));</highlight></codeline>
<codeline><highlight class="normal">dataset.shed_row(dataset.n_rows<sp/>-<sp/>1);</highlight></codeline>
</programlisting></para><para>We now have our dataset ready for training.</para></sect1>
<sect1 id="sample_ml_app_1sample_training">
<title>Training</title>
<para>This app will use a Random Forest classifier. At first we define the classifier parameters and then we create the classifier to train it.</para><para><programlisting><codeline><highlight class="normal">const<sp/>size_t<sp/>numClasses<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>size_t<sp/>minimumLeafSize<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>size_t<sp/>numTrees<sp/>=<sp/>10;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RandomForest&lt;GiniGain,<sp/>RandomDimensionSelect&gt;<sp/>rf;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">rf<sp/>=<sp/>RandomForest&lt;GiniGain,<sp/>RandomDimensionSelect&gt;(dataset,<sp/>labels,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>numClasses,<sp/>numTrees,<sp/>minimumLeafSize);</highlight></codeline>
</programlisting></para><para>Now that the training is completed, we quickly compute the training accuracy:</para><para><programlisting><codeline><highlight class="normal">Row&lt;size_t&gt;<sp/>predictions;</highlight></codeline>
<codeline><highlight class="normal">rf.Classify(dataset,<sp/>predictions);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>size_t<sp/>correct<sp/>=<sp/>arma::accu(predictions<sp/>==<sp/>labels);</highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>&quot;\nTraining<sp/>Accuracy:<sp/>&quot;<sp/>&lt;&lt;<sp/>(double(correct)<sp/>/<sp/>double(labels.n_elem));</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="sample_ml_app_1sample_crossvalidation">
<title>Cross-Validating</title>
<para>Instead of training the Random Forest directly, we could also use K-fold cross-validation for training, which will give us a measure of performance on a held-out test set. This can give us a better estimate of how the model will perform when given new data. We also define which metric to use in order to assess the quality of the trained model.</para><para><programlisting><codeline><highlight class="normal">const<sp/>size_t<sp/>k<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal">KFoldCV&lt;RandomForest&lt;GiniGain,<sp/>RandomDimensionSelect&gt;,<sp/>Accuracy&gt;<sp/>cv(k,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dataset,<sp/>labels,<sp/>numClasses);</highlight></codeline>
<codeline><highlight class="normal">double<sp/>cvAcc<sp/>=<sp/>cv.Evaluate(numTrees,<sp/>minimumLeafSize);</highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>&quot;\nKFoldCV<sp/>Accuracy:<sp/>&quot;<sp/>&lt;&lt;<sp/>cvAcc;</highlight></codeline>
</programlisting></para><para>To compute other relevant metrics, such as Precision, Recall and F1:</para><para><programlisting><codeline><highlight class="normal">double<sp/>cvPrecision<sp/>=<sp/>Precision&lt;Binary&gt;::Evaluate(rf,<sp/>dataset,<sp/>labels);</highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>&quot;\nPrecision:<sp/>&quot;<sp/>&lt;&lt;<sp/>cvPrecision;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>cvRecall<sp/>=<sp/>Recall&lt;Binary&gt;::Evaluate(rf,<sp/>dataset,<sp/>labels);</highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>&quot;\nRecall:<sp/>&quot;<sp/>&lt;&lt;<sp/>cvRecall;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>cvF1<sp/>=<sp/>F1&lt;Binary&gt;::Evaluate(rf,<sp/>dataset,<sp/>labels);</highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>&quot;\nF1:<sp/>&quot;<sp/>&lt;&lt;<sp/>cvF1;</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="sample_ml_app_1sample_save_model">
<title>Saving the model</title>
<para>Now that our model is trained and validated, we save it to a file so we can use it later. Here we save the model that was trained using the entire dataset. Alternatively, we could extract the model from the cross-validation stage by using <computeroutput>cv.Model()</computeroutput> </para><para><programlisting><codeline><highlight class="normal">mlpack::data::Save(&quot;mymodel.xml&quot;,<sp/>&quot;model&quot;,<sp/>rf,<sp/>false);</highlight></codeline>
</programlisting></para><para>We can also save the model in <computeroutput>bin</computeroutput> format (&quot;mymodel.bin&quot;) which would result in a smaller file.</para></sect1>
<sect1 id="sample_ml_app_1sample_load_model">
<title>Loading the model</title>
<para>In a real-life application, you may want to load a previously trained model to classify new samples. We load the model from a file using:</para><para><programlisting><codeline><highlight class="normal">mlpack::data::Load(&quot;mymodel.xml&quot;,<sp/>&quot;model&quot;,<sp/>rf);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="sample_ml_app_1sample_classify_sample">
<title>Classifying a new sample</title>
<para>Finally, the ultimate goal is to classify a new sample using the previously trained model. Since the Random Forest classifier provides both predictions and probabilities, we obtain both.</para><para><programlisting><codeline><highlight class="normal">//<sp/>Create<sp/>a<sp/>test<sp/>sample<sp/>containing<sp/>only<sp/>one<sp/>point.<sp/><sp/>Because<sp/>Armadillo<sp/>is</highlight></codeline>
<codeline><highlight class="normal">//<sp/>column-major,<sp/>this<sp/>matrix<sp/>has<sp/>one<sp/>column<sp/>(one<sp/>point)<sp/>and<sp/>the<sp/>number<sp/>of<sp/>rows</highlight></codeline>
<codeline><highlight class="normal">//<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>dimensionality<sp/>of<sp/>the<sp/>point<sp/>(23).</highlight></codeline>
<codeline><highlight class="normal">mat<sp/>sample(&quot;2;<sp/>12;<sp/>2;<sp/>13;<sp/>1;<sp/>2;<sp/>2;<sp/>1;<sp/>3;<sp/>24;<sp/>3;<sp/>1;<sp/>1;<sp/>1;<sp/>1;<sp/>1;<sp/>0;<sp/>1;<sp/>0;<sp/>1;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;<sp/>0;<sp/>0;<sp/>0&quot;);</highlight></codeline>
<codeline><highlight class="normal">mat<sp/>probabilities;</highlight></codeline>
<codeline><highlight class="normal">rf.Classify(sample,<sp/>predictions,<sp/>probabilities);</highlight></codeline>
<codeline><highlight class="normal">u64<sp/>result<sp/>=<sp/>predictions.at(0);</highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/>&quot;\nClassification<sp/>result:<sp/>&quot;<sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>&quot;<sp/>,<sp/>Probabilities:<sp/>&quot;<sp/>&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>probabilities.at(0)<sp/>&lt;&lt;<sp/>&quot;/&quot;<sp/>&lt;&lt;<sp/>probabilities.at(1);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="sample_ml_app_1sample_app_conclussion">
<title>Final thoughts</title>
<para>Building real-life applications and services using machine learning can be challenging. Hopefully, this tutorial provides a good starting point that covers the basic workflow you may need to follow while developing it. You can take a look at the entire source code in the provided sample project located here: &quot;doc/examples/sample-ml-app&quot;. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
