<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1math_1_1ColumnsToBlocks" kind="class" language="C++" prot="public">
    <compoundname>mlpack::math::ColumnsToBlocks</compoundname>
    <includes refid="columns__to__blocks_8hpp" local="no">columns_to_blocks.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1math_1_1ColumnsToBlocks_1ad6bcc83a142cbc53a0f5ffc04d8f08ba" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t blockHeight</definition>
        <argsstring></argsstring>
        <name>blockHeight</name>
        <briefdescription>
<para>The height of each block. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="205" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a2662e16f17babe2feffbe0c20ab216db" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t blockWidth</definition>
        <argsstring></argsstring>
        <name>blockWidth</name>
        <briefdescription>
<para>The width of each block. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="207" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1math_1_1ColumnsToBlocks_1af0b90e1dc46e2c5ccfd3ec1e74021974" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t bufSize</definition>
        <argsstring></argsstring>
        <name>bufSize</name>
        <briefdescription>
<para>The size of the buffer around each block. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="209" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a64fab344559990a18d7f33cfaff3067e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double bufValue</definition>
        <argsstring></argsstring>
        <name>bufValue</name>
        <briefdescription>
<para>The value of the buffer around each block. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="211" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a8bc05371b3a4013263f68932ba1b6452" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t cols</definition>
        <argsstring></argsstring>
        <name>cols</name>
        <briefdescription>
<para>The number of blocks in each column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="221" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1math_1_1ColumnsToBlocks_1ae67f0a1fe15c5c2c2935561e90808d4f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double maxRange</definition>
        <argsstring></argsstring>
        <name>maxRange</name>
        <briefdescription>
<para>The maximum of the range to be scaled to (if scaling is enabled). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="215" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a5b9e869b4d89247cc3222507a2e9caa2" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double minRange</definition>
        <argsstring></argsstring>
        <name>minRange</name>
        <briefdescription>
<para>The minimum of the range to be scaled to (if scaling is enabled). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="213" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1math_1_1ColumnsToBlocks_1ad161320eba27a8b966baac47bee35c46" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t rows</definition>
        <argsstring></argsstring>
        <name>rows</name>
        <briefdescription>
<para>The number of blocks in each row. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="219" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1math_1_1ColumnsToBlocks_1aff7a60d3f21b50f4ad18e40d99d33a61" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool scale</definition>
        <argsstring></argsstring>
        <name>scale</name>
        <briefdescription>
<para>Whether or not scaling is enabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="217" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1aaf286af44a52e58e3791183cdc203deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ColumnsToBlocks</definition>
        <argsstring>(size_t rows, size_t cols, size_t blockHeight=0, size_t blockWidth=0)</argsstring>
        <name>ColumnsToBlocks</name>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blockHeight</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>blockWidth</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor a <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks" kindref="compound">ColumnsToBlocks</ref> object with the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para>The rows and cols parameters control the number of blocks per row and column of the output matrix, respectively, and the blockHeight and blockWidth parameters control the size of the individual blocks. If blockHeight and blockWidth are specified, then (blockHeight * blockWidth) must be equal to the number of rows in the input matrix when <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1ac8cc13952caefd0b3640d172955977a7" kindref="member">Transform()</ref> is called. If blockHeight and blockWidth are not specified, then the square root of the number of rows of the input matrix will be taken when <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1ac8cc13952caefd0b3640d172955977a7" kindref="member">Transform()</ref> is called and that will be used as the block width and height.</para><para>Note that the <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks" kindref="compound">ColumnsToBlocks</ref> object can also scale the inputs to a given range; see <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a668b1e7a0dab0c0dc31f1097f57f1c38" kindref="member">Scale()</ref>, <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1abcc192d4fe9322997d9bc1b6fbd5fb40" kindref="member">MinRange()</ref>, and <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a87701466a13a6cc63643b9f46eaa2bed" kindref="member">MaxRange()</ref>, and the buffer (margin) size can also be set with <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a0ed6759ae521a7c0183187697bc048e9" kindref="member">BufSize()</ref>, and the value used for the buffer can be set with <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a1f975716805f8568cda0888a78e917b8" kindref="member">BufValue()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks in each column of the output matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks in each row of the output matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of each block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blockWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of each block.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>blockHeight * blockWidth must be equal to maximalInputs.n_rows. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a7909cc5374f22c946c4a792598582419" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BlockHeight</definition>
        <argsstring>(const size_t value)</argsstring>
        <name>BlockHeight</name>
        <param>
          <type>const size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the height of each block; see the constructor for more details. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="149" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1af00fa96c0b3e0dacd1c0176eca472483" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BlockHeight</definition>
        <argsstring>() const</argsstring>
        <name>BlockHeight</name>
        <briefdescription>
<para>Get the block height. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="151" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1aa9d6f51aed3fb8b76f9bdf8183a8a596" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BlockWidth</definition>
        <argsstring>(size_t value)</argsstring>
        <name>BlockWidth</name>
        <param>
          <type>size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the width of each block; see the constructor for more details. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="154" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1aecfe34325ed6f312ce3aeaedb994d1f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BlockWidth</definition>
        <argsstring>() const</argsstring>
        <name>BlockWidth</name>
        <briefdescription>
<para>Get the block width. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="156" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a0ed6759ae521a7c0183187697bc048e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BufSize</definition>
        <argsstring>(const size_t value)</argsstring>
        <name>BufSize</name>
        <param>
          <type>const size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Modify the buffer size (the size of the margin around each column of the input). </para>        </briefdescription>
        <detaileddescription>
<para>The default value is 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="160" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a798519f6802d88a49635e44d5230020a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BufSize</definition>
        <argsstring>() const</argsstring>
        <name>BufSize</name>
        <briefdescription>
<para>Get the buffer size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="162" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a1f975716805f8568cda0888a78e917b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BufValue</definition>
        <argsstring>(const double value)</argsstring>
        <name>BufValue</name>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Modify the value used for buffer cells; the default is -1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="165" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a49f9cd43a166d9f864310e9f444698b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double BufValue</definition>
        <argsstring>() const</argsstring>
        <name>BufValue</name>
        <briefdescription>
<para>Get the value used for buffer cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="167" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a4baee2c2b3fe90b0921171da72b6890c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Cols</definition>
        <argsstring>(const size_t value)</argsstring>
        <name>Cols</name>
        <param>
          <type>const size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the number of blocks per column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="196" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a4272c009d2f2f8572158049515044a61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Cols</definition>
        <argsstring>() const</argsstring>
        <name>Cols</name>
        <briefdescription>
<para>Return the number of blocks per column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="198" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a87701466a13a6cc63643b9f46eaa2bed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MaxRange</definition>
        <argsstring>(const double value)</argsstring>
        <name>MaxRange</name>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the maximum of the range the input will be scaled to, if scaling is enabled (see <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a668b1e7a0dab0c0dc31f1097f57f1c38" kindref="member">Scale()</ref>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="171" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1acafd86fdb4e4d1c32d5edee456b8ba84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double MaxRange</definition>
        <argsstring>() const</argsstring>
        <name>MaxRange</name>
        <briefdescription>
<para>Get the maximum of the range the input will be scaled to, if scaling is enabled (see <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a668b1e7a0dab0c0dc31f1097f57f1c38" kindref="member">Scale()</ref>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="174" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1abcc192d4fe9322997d9bc1b6fbd5fb40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MinRange</definition>
        <argsstring>(const double value)</argsstring>
        <name>MinRange</name>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the minimum of the range the input will be scaled to, if scaling is enabled (see <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a668b1e7a0dab0c0dc31f1097f57f1c38" kindref="member">Scale()</ref>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="178" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a48f09a1c6bd5e08aea80485023818908" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double MinRange</definition>
        <argsstring>() const</argsstring>
        <name>MinRange</name>
        <briefdescription>
<para>Get the minimum of the range the input will be scaled to, if scaling is enabled (see <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a668b1e7a0dab0c0dc31f1097f57f1c38" kindref="member">Scale()</ref>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="181" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a8fb9290a74b4454f4f8e8484c18f1635" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Rows</definition>
        <argsstring>(const size_t value)</argsstring>
        <name>Rows</name>
        <param>
          <type>const size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the number of blocks per row. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="191" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1ae4dde733be7af7e81bd4a1e89f9c4b91" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Rows</definition>
        <argsstring>() const</argsstring>
        <name>Rows</name>
        <briefdescription>
<para>Modify the number of blocks per row. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="193" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1a668b1e7a0dab0c0dc31f1097f57f1c38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Scale</definition>
        <argsstring>(const bool value)</argsstring>
        <name>Scale</name>
        <param>
          <type>const bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set whether or not scaling is enabled (see also <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a87701466a13a6cc63643b9f46eaa2bed" kindref="member">MaxRange()</ref> and <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1abcc192d4fe9322997d9bc1b6fbd5fb40" kindref="member">MinRange()</ref>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="185" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1ab7ad8f9c12a950a6087504534992c270" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Scale</definition>
        <argsstring>() const</argsstring>
        <name>Scale</name>
        <briefdescription>
<para>Get whether or not scaling is enabled (see also <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a87701466a13a6cc63643b9f46eaa2bed" kindref="member">MaxRange()</ref> and <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1abcc192d4fe9322997d9bc1b6fbd5fb40" kindref="member">MinRange()</ref>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="188" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1ac8cc13952caefd0b3640d172955977a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Transform</definition>
        <argsstring>(const arma::mat &amp;maximalInputs, arma::mat &amp;output)</argsstring>
        <name>Transform</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>maximalInputs</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Transform the columns of the input matrix into blocks. </para>        </briefdescription>
        <detaileddescription>
<para>If blockHeight and blockWidth were not specified in the constructor (and <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a7909cc5374f22c946c4a792598582419" kindref="member">BlockHeight()</ref> and <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1aa9d6f51aed3fb8b76f9bdf8183a8a596" kindref="member">BlockWidth()</ref> were not called), then the number of rows in the input matrix must be a perfect square.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>maximalInputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Input matrix to transform. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to store transformed output in. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="146" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1math_1_1ColumnsToBlocks_1ad953b6adcfed04fcac50c6b9836a9a06" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsPerfectSquare</definition>
        <argsstring>(size_t value) const</argsstring>
        <name>IsPerfectSquare</name>
        <param>
          <type>size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Determine whether or not the number is a perfect square. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="202" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Transform the columns of the given matrix into a block format. </para>    </briefdescription>
    <detaileddescription>
<para>This could be useful with the <ref refid="namespacemlpack_1_1nn_1a5fcd73722265acc12d00ba8d32db6f17" kindref="member">mlpack::nn::MaximalInputs()</ref> function, if your training samples are images. Roughly speaking, given a matrix</para><para>[[A] [B] [C] [D]]</para><para>then the <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks" kindref="compound">ColumnsToBlocks</ref> class can transform this to something like</para><para>[[m m m m m] [m A m B m] [m m m m m] [m C m D m] [m m m m m]]</para><para>where A through D are vectors and may themselves be reshaped by <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks" kindref="compound">ColumnsToBlocks</ref>.</para><para>An example usage of the <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks" kindref="compound">ColumnsToBlocks</ref> class with the output of <ref refid="namespacemlpack_1_1nn_1a5fcd73722265acc12d00ba8d32db6f17" kindref="member">MaximalInputs()</ref> is given below; this assumes that the images are square, and will return a matrix with a one-element margin, with each maximal input (that is, each column of the maximalInput matrix) as a square block in the output matrix. 5 rows and columns of blocks will be in the output matrix.</para><para><programlisting><codeline><highlight class="normal">//<sp/>We<sp/>assume<sp/>we<sp/>have<sp/>a<sp/>sparse<sp/>autoencoder<sp/>&apos;encoder&apos;.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>maximalInput;<sp/>//<sp/>Store<sp/>the<sp/>features<sp/>learned<sp/>by<sp/>sparse<sp/>autoencoder</highlight></codeline>
<codeline><highlight class="normal">mlpack::nn::MaximalInputs(encoder.Parameters(),<sp/>maximalInput);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">arma::mat<sp/>outputs;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>bool<sp/>scale<sp/>=<sp/>true;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ColumnsToBlocks<sp/>ctb(5,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>output;</highlight></codeline>
<codeline><highlight class="normal">ctb.Transform(maximalInput,<sp/>output);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>You<sp/>can<sp/>save<sp/>the<sp/>output<sp/>as<sp/>a<sp/>pgm,<sp/>this<sp/>may<sp/>help<sp/>you<sp/>visualize<sp/>the<sp/>training</highlight></codeline>
<codeline><highlight class="normal">//<sp/>results.</highlight></codeline>
<codeline><highlight class="normal">output.save(fileName,<sp/>arma::pgm_binary);</highlight></codeline>
</programlisting></para><para>Another example of usage is given below, on a sample matrix.</para><para><programlisting><codeline><highlight class="normal">//<sp/>This<sp/>matrix<sp/>has<sp/>two<sp/>columns.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>input;</highlight></codeline>
<codeline><highlight class="normal">input<sp/>=<sp/>{<sp/>{<sp/>-1.0000,<sp/>0.1429<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>-0.7143,<sp/>0.4286<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>-0.4286,<sp/>0.7143<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>-0.1429,<sp/>1.0000<sp/>}<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">arma::mat<sp/>output;</highlight></codeline>
<codeline><highlight class="normal">ColumnsToBlocks<sp/>ctb(1,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">ctb.Transform(input,<sp/>output);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>columns<sp/>of<sp/>the<sp/>input<sp/>will<sp/>be<sp/>reshaped<sp/>as<sp/>a<sp/>square<sp/>which<sp/>is</highlight></codeline>
<codeline><highlight class="normal">//<sp/>surrounded<sp/>by<sp/>padding<sp/>value<sp/>-1<sp/>(this<sp/>value<sp/>could<sp/>be<sp/>changed<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal">//<sp/>BufValue()<sp/>method):</highlight></codeline>
<codeline><highlight class="normal">//<sp/>-1.0000<sp/><sp/>-1.0000<sp/><sp/>-1.0000<sp/><sp/>-1.0000<sp/><sp/>-1.0000<sp/><sp/>-1.0000<sp/><sp/>-1.0000</highlight></codeline>
<codeline><highlight class="normal">//<sp/>-1.0000<sp/><sp/>-1.0000<sp/><sp/>-0.4286<sp/><sp/>-1.0000<sp/><sp/><sp/>0.1429<sp/><sp/><sp/>0.7143<sp/><sp/>-1.0000</highlight></codeline>
<codeline><highlight class="normal">//<sp/>-1.0000<sp/><sp/>-0.7143<sp/><sp/>-0.1429<sp/><sp/>-1.0000<sp/><sp/><sp/>0.4286<sp/><sp/><sp/>1.0000<sp/><sp/>-1.0000</highlight></codeline>
<codeline><highlight class="normal">//<sp/>-1.0000<sp/><sp/>-1.0000<sp/><sp/>-1.0000<sp/><sp/>-1.0000<sp/><sp/>-1.0000<sp/><sp/>-1.0000<sp/><sp/>-1.0000</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Now,<sp/>let&apos;s<sp/>change<sp/>some<sp/>parameters;<sp/>let&apos;s<sp/>have<sp/>each<sp/>input<sp/>column<sp/>output<sp/>not</highlight></codeline>
<codeline><highlight class="normal">//<sp/>as<sp/>a<sp/>square,<sp/>but<sp/>as<sp/>a<sp/>4x1<sp/>vector.</highlight></codeline>
<codeline><highlight class="normal">ctb.BlockWidth(1);</highlight></codeline>
<codeline><highlight class="normal">ctb.BlockHeight(4);</highlight></codeline>
<codeline><highlight class="normal">ctb.Transform(input,<sp/>output);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>output<sp/>here<sp/>will<sp/>be<sp/>similar,<sp/>but<sp/>each<sp/>maximal<sp/>input<sp/>is<sp/>4x1:</highlight></codeline>
<codeline><highlight class="normal">//<sp/>-1.0000<sp/>-1.0000<sp/>-1.0000<sp/>-1.0000<sp/>-1.0000</highlight></codeline>
<codeline><highlight class="normal">//<sp/>-1.0000<sp/>-1.0000<sp/>-1.0000<sp/><sp/>0.1429<sp/>-1.0000</highlight></codeline>
<codeline><highlight class="normal">//<sp/>-1.0000<sp/>-0.7143<sp/>-1.0000<sp/><sp/>0.4286<sp/>-1.0000</highlight></codeline>
<codeline><highlight class="normal">//<sp/>-1.0000<sp/>-0.4286<sp/>-1.0000<sp/><sp/>0.7143<sp/>-1.0000</highlight></codeline>
<codeline><highlight class="normal">//<sp/>-1.0000<sp/>-0.1429<sp/>-1.0000<sp/><sp/>1.0000<sp/>-1.0000</highlight></codeline>
<codeline><highlight class="normal">//<sp/>-1.0000<sp/>-1.0000<sp/>-1.0000<sp/>-1.0000<sp/>-1.0000</highlight></codeline>
</programlisting></para><para>The <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks" kindref="compound">ColumnsToBlocks</ref> class can also, depending on the parameters, scale the input to a given range (useful for exporting to PGM, for instance), and also set the buffer size and value. See the <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a668b1e7a0dab0c0dc31f1097f57f1c38" kindref="member">Scale()</ref>, <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1abcc192d4fe9322997d9bc1b6fbd5fb40" kindref="member">MinRange()</ref>, <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a87701466a13a6cc63643b9f46eaa2bed" kindref="member">MaxRange()</ref>, <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a0ed6759ae521a7c0183187697bc048e9" kindref="member">BufSize()</ref>, and <ref refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a1f975716805f8568cda0888a78e917b8" kindref="member">BufValue()</ref> methods for more details. </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" line="107" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/math/columns_to_blocks.hpp" bodystart="106" bodyend="222"/>
    <listofallmembers>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1ad6bcc83a142cbc53a0f5ffc04d8f08ba" prot="private" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>blockHeight</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a7909cc5374f22c946c4a792598582419" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>BlockHeight</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1af00fa96c0b3e0dacd1c0176eca472483" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>BlockHeight</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a2662e16f17babe2feffbe0c20ab216db" prot="private" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>blockWidth</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1aa9d6f51aed3fb8b76f9bdf8183a8a596" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>BlockWidth</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1aecfe34325ed6f312ce3aeaedb994d1f7" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>BlockWidth</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1af0b90e1dc46e2c5ccfd3ec1e74021974" prot="private" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>bufSize</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a0ed6759ae521a7c0183187697bc048e9" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>BufSize</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a798519f6802d88a49635e44d5230020a" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>BufSize</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a64fab344559990a18d7f33cfaff3067e" prot="private" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>bufValue</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a1f975716805f8568cda0888a78e917b8" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>BufValue</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a49f9cd43a166d9f864310e9f444698b6" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>BufValue</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a8bc05371b3a4013263f68932ba1b6452" prot="private" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>cols</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a4baee2c2b3fe90b0921171da72b6890c" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>Cols</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a4272c009d2f2f8572158049515044a61" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>Cols</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1aaf286af44a52e58e3791183cdc203deb" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>ColumnsToBlocks</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1ad953b6adcfed04fcac50c6b9836a9a06" prot="private" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>IsPerfectSquare</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a87701466a13a6cc63643b9f46eaa2bed" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>MaxRange</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1acafd86fdb4e4d1c32d5edee456b8ba84" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>MaxRange</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1ae67f0a1fe15c5c2c2935561e90808d4f" prot="private" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>maxRange</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a5b9e869b4d89247cc3222507a2e9caa2" prot="private" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>minRange</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1abcc192d4fe9322997d9bc1b6fbd5fb40" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>MinRange</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a48f09a1c6bd5e08aea80485023818908" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>MinRange</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1ad161320eba27a8b966baac47bee35c46" prot="private" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>rows</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a8fb9290a74b4454f4f8e8484c18f1635" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>Rows</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1ae4dde733be7af7e81bd4a1e89f9c4b91" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>Rows</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1aff7a60d3f21b50f4ad18e40d99d33a61" prot="private" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>scale</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1a668b1e7a0dab0c0dc31f1097f57f1c38" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>Scale</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1ab7ad8f9c12a950a6087504534992c270" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>Scale</name></member>
      <member refid="classmlpack_1_1math_1_1ColumnsToBlocks_1ac8cc13952caefd0b3640d172955977a7" prot="public" virt="non-virtual"><scope>mlpack::math::ColumnsToBlocks</scope><name>Transform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
