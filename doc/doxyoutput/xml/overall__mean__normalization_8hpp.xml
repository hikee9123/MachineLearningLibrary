<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="overall__mean__normalization_8hpp" kind="file" language="C++">
    <compoundname>overall_mean_normalization.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <incdepgraph>
      <node id="46370">
        <label>list</label>
      </node>
      <node id="46367">
        <label>atomic</label>
      </node>
      <node id="46357">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="46333">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="46369">
        <label>iomanip</label>
      </node>
      <node id="46342">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="46343" relation="include">
        </childnode>
        <childnode refid="46345" relation="include">
        </childnode>
      </node>
      <node id="46325">
        <label>cstdint</label>
      </node>
      <node id="46334">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="46341">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="46364">
        <label>arma_config.hpp</label>
      </node>
      <node id="46354">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="46321">
        <label>cmath</label>
      </node>
      <node id="46340">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="46329">
        <label>stdexcept</label>
      </node>
      <node id="46349">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="46334" relation="include">
        </childnode>
        <childnode refid="46336" relation="include">
        </childnode>
        <childnode refid="46337" relation="include">
        </childnode>
        <childnode refid="46335" relation="include">
        </childnode>
      </node>
      <node id="46373">
        <label>string</label>
      </node>
      <node id="46361">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="46362" relation="include">
        </childnode>
        <childnode refid="46328" relation="include">
        </childnode>
      </node>
      <node id="46371">
        <label>map</label>
      </node>
      <node id="46323">
        <label>cfloat</label>
      </node>
      <node id="46353">
        <label>boost/variant.hpp</label>
      </node>
      <node id="46375">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="46337">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="46360">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="46361" relation="include">
        </childnode>
        <childnode refid="46337" relation="include">
        </childnode>
        <childnode refid="46344" relation="include">
        </childnode>
        <childnode refid="46362" relation="include">
        </childnode>
      </node>
      <node id="46350">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="46348">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="46334" relation="include">
        </childnode>
        <childnode refid="46336" relation="include">
        </childnode>
        <childnode refid="46337" relation="include">
        </childnode>
        <childnode refid="46335" relation="include">
        </childnode>
      </node>
      <node id="46351">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="46334" relation="include">
        </childnode>
        <childnode refid="46336" relation="include">
        </childnode>
        <childnode refid="46337" relation="include">
        </childnode>
        <childnode refid="46335" relation="include">
        </childnode>
      </node>
      <node id="46339">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="46359">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="46335" relation="include">
        </childnode>
        <childnode refid="46336" relation="include">
        </childnode>
        <childnode refid="46337" relation="include">
        </childnode>
        <childnode refid="46347" relation="include">
        </childnode>
        <childnode refid="46356" relation="include">
        </childnode>
      </node>
      <node id="46363">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="46364" relation="include">
        </childnode>
      </node>
      <node id="46365">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="46320">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="46321" relation="include">
        </childnode>
        <childnode refid="46322" relation="include">
        </childnode>
        <childnode refid="46323" relation="include">
        </childnode>
        <childnode refid="46324" relation="include">
        </childnode>
        <childnode refid="46325" relation="include">
        </childnode>
        <childnode refid="46326" relation="include">
        </childnode>
        <childnode refid="46327" relation="include">
        </childnode>
        <childnode refid="46328" relation="include">
        </childnode>
        <childnode refid="46329" relation="include">
        </childnode>
        <childnode refid="46330" relation="include">
        </childnode>
        <childnode refid="46331" relation="include">
        </childnode>
        <childnode refid="46332" relation="include">
        </childnode>
        <childnode refid="46333" relation="include">
        </childnode>
        <childnode refid="46334" relation="include">
        </childnode>
        <childnode refid="46335" relation="include">
        </childnode>
        <childnode refid="46336" relation="include">
        </childnode>
        <childnode refid="46337" relation="include">
        </childnode>
        <childnode refid="46338" relation="include">
        </childnode>
        <childnode refid="46339" relation="include">
        </childnode>
        <childnode refid="46340" relation="include">
        </childnode>
        <childnode refid="46341" relation="include">
        </childnode>
        <childnode refid="46342" relation="include">
        </childnode>
        <childnode refid="46346" relation="include">
        </childnode>
        <childnode refid="46347" relation="include">
        </childnode>
        <childnode refid="46348" relation="include">
        </childnode>
        <childnode refid="46349" relation="include">
        </childnode>
        <childnode refid="46350" relation="include">
        </childnode>
        <childnode refid="46351" relation="include">
        </childnode>
        <childnode refid="46352" relation="include">
        </childnode>
        <childnode refid="46358" relation="include">
        </childnode>
        <childnode refid="46359" relation="include">
        </childnode>
        <childnode refid="46356" relation="include">
        </childnode>
        <childnode refid="46360" relation="include">
        </childnode>
        <childnode refid="46363" relation="include">
        </childnode>
        <childnode refid="46365" relation="include">
        </childnode>
        <childnode refid="46366" relation="include">
        </childnode>
        <childnode refid="46375" relation="include">
        </childnode>
        <childnode refid="46376" relation="include">
        </childnode>
      </node>
      <node id="46326">
        <label>cstdio</label>
      </node>
      <node id="46330">
        <label>tuple</label>
      </node>
      <node id="46335">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="46319">
        <label>/home/aakash/mlpack/src/mlpack/methods/cf/normalization/overall_mean_normalization.hpp</label>
        <link refid="overall__mean__normalization_8hpp"/>
        <childnode refid="46320" relation="include">
        </childnode>
      </node>
      <node id="46352">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="46335" relation="include">
        </childnode>
        <childnode refid="46336" relation="include">
        </childnode>
        <childnode refid="46337" relation="include">
        </childnode>
        <childnode refid="46339" relation="include">
        </childnode>
        <childnode refid="46353" relation="include">
        </childnode>
        <childnode refid="46354" relation="include">
        </childnode>
        <childnode refid="46355" relation="include">
        </childnode>
        <childnode refid="46356" relation="include">
        </childnode>
      </node>
      <node id="46331">
        <label>utility</label>
      </node>
      <node id="46355">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="46346">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="46343">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="46344" relation="include">
        </childnode>
      </node>
      <node id="46366">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="46367" relation="include">
        </childnode>
        <childnode refid="46368" relation="include">
        </childnode>
        <childnode refid="46369" relation="include">
        </childnode>
        <childnode refid="46370" relation="include">
        </childnode>
        <childnode refid="46371" relation="include">
        </childnode>
        <childnode refid="46372" relation="include">
        </childnode>
        <childnode refid="46373" relation="include">
        </childnode>
        <childnode refid="46374" relation="include">
        </childnode>
      </node>
      <node id="46344">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="46358">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="46356" relation="include">
        </childnode>
        <childnode refid="46352" relation="include">
        </childnode>
        <childnode refid="46359" relation="include">
        </childnode>
      </node>
      <node id="46327">
        <label>cstdlib</label>
      </node>
      <node id="46322">
        <label>cctype</label>
      </node>
      <node id="46345">
        <label>unordered_map</label>
      </node>
      <node id="46324">
        <label>climits</label>
      </node>
      <node id="46372">
        <label>mutex</label>
      </node>
      <node id="46368">
        <label>chrono</label>
      </node>
      <node id="46376">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="46374">
        <label>thread</label>
      </node>
      <node id="46362">
        <label>type_traits</label>
      </node>
      <node id="46338">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="46332">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="46356">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="46334" relation="include">
        </childnode>
        <childnode refid="46335" relation="include">
        </childnode>
        <childnode refid="46336" relation="include">
        </childnode>
        <childnode refid="46337" relation="include">
        </childnode>
        <childnode refid="46357" relation="include">
        </childnode>
      </node>
      <node id="46328">
        <label>cstring</label>
      </node>
      <node id="46347">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="46336">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmlpack_1_1cf_1_1OverallMeanNormalization" prot="public">mlpack::cf::OverallMeanNormalization</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1cf">mlpack::cf</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Wenhao Huang</para></simplesect>
This class performs overall mean normalization on raw ratings. In another word, this class is used to remove global effect of overall mean.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#ifndef<sp/>MLPACK_METHODS_CF_NORMALIZATION_OVERALL_MEAN_NORMALIZATION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_METHODS_CF_NORMALIZATION_OVERALL_MEAN_NORMALIZATION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">cf<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classmlpack_1_1cf_1_1OverallMeanNormalization" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1cf_1_1OverallMeanNormalization" kindref="compound">OverallMeanNormalization</ref></highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a4f250b6f53764957972f247537e5a780" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a4f250b6f53764957972f247537e5a780" kindref="member">OverallMeanNormalization</ref>()<sp/>:<sp/>mean(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a87410cc06d847eef46d0dfdb137c6be7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a87410cc06d847eef46d0dfdb137c6be7" kindref="member">Normalize</ref>(arma::mat&amp;<sp/>data)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>mean<sp/>=<sp/>arma::mean(data.row(2));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>data.row(2)<sp/>-=<sp/>mean;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>algorithm<sp/>omits<sp/>rating<sp/>of<sp/>zero.<sp/>If<sp/>normalized<sp/>rating<sp/>equals<sp/>zero,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>set<sp/>to<sp/>the<sp/>smallest<sp/>positive<sp/>float<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>data.row(2).for_each([](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>std::numeric_limits&lt;double&gt;::min();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a9656a2fd4841da15cf4b13ab57aa8000" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a9656a2fd4841da15cf4b13ab57aa8000" kindref="member">Normalize</ref>(arma::sp_mat&amp;<sp/>cleanedData)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Caculate<sp/>mean<sp/>of<sp/>all<sp/>non<sp/>zero<sp/>ratings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cleanedData.n_nonzero<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mean<sp/>=<sp/>arma::accu(cleanedData)<sp/>/<sp/>cleanedData.n_nonzero;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>mean<sp/>from<sp/>all<sp/>non<sp/>zero<sp/>ratings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arma::sp_mat::iterator<sp/>it<sp/>=<sp/>cleanedData.begin();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arma::sp_mat::iterator<sp/>it_end<sp/>=<sp/>cleanedData.end();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>it_end;<sp/>++it)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>*it<sp/>-<sp/>mean;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>algorithm<sp/>omits<sp/>rating<sp/>of<sp/>zero.<sp/>If<sp/>normalized<sp/>rating<sp/>equals<sp/>zero,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>set<sp/>to<sp/>the<sp/>smallest<sp/>positive<sp/>float<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>std::numeric_limits&lt;float&gt;::min();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*it<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mean<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cleanedData<sp/>remains<sp/>the<sp/>same<sp/>when<sp/>mean<sp/>==<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a1bf7d88b868311ad7ea9967146036e2e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a1bf7d88b868311ad7ea9967146036e2e" kindref="member">Denormalize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>user<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>item<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rating)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="106"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rating<sp/>+<sp/>mean;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a8db4f270d31a4c519959d1a0bd01c7fc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a8db4f270d31a4c519959d1a0bd01c7fc" kindref="member">Denormalize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Mat&lt;size_t&gt;&amp;<sp/></highlight><highlight class="comment">/*<sp/>combinations<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arma::vec&amp;<sp/>predictions)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="118"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>predictions<sp/>+=<sp/>mean;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1ab201fbc06e6c2aaaa75cf1be856b4e02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1ab201fbc06e6c2aaaa75cf1be856b4e02" kindref="member">Mean</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="126"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mean;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="134" refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a65cba07328997659bec80b9879b15a51" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1cf_1_1OverallMeanNormalization_1a65cba07328997659bec80b9879b15a51" kindref="member">serialize</ref>(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="comment">/*<sp/>version<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>ar(CEREAL_NVP(mean));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/methods/cf/normalization/overall_mean_normalization.hpp"/>
  </compounddef>
</doxygen>
