<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="binary__space__tree_2binary__space__tree_8hpp" kind="file" language="C++">
    <compoundname>binary_space_tree.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <includes refid="statistic_8hpp" local="yes">../statistic.hpp</includes>
    <includes refid="midpoint__split_8hpp" local="yes">midpoint_split.hpp</includes>
    <includes local="yes">binary_space_tree_impl.hpp</includes>
    <includes refid="binary__space__tree_8hpp" local="yes">../binary_space_tree.hpp</includes>
    <includedby refid="binary__space__tree_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree.hpp</includedby>
    <includedby refid="binary__space__tree_2single__tree__traverser_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/single_tree_traverser.hpp</includedby>
    <includedby refid="binary__space__tree_2dual__tree__traverser_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/dual_tree_traverser.hpp</includedby>
    <includedby refid="neighbor__search_8hpp" local="no">/home/aakash/mlpack/src/mlpack/methods/neighbor_search/neighbor_search.hpp</includedby>
    <incdepgraph>
      <node id="13743">
        <label>list</label>
      </node>
      <node id="13793">
        <label>breadth_first_dual_tree_traverser_impl.hpp</label>
      </node>
      <node id="13785">
        <label>binary_space_tree/single_tree_traverser.hpp</label>
        <link refid="binary__space__tree_2single__tree__traverser_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13692" relation="include">
        </childnode>
        <childnode refid="13786" relation="include">
        </childnode>
      </node>
      <node id="13795">
        <label>binary_space_tree/traits.hpp</label>
        <link refid="binary__space__tree_2traits_8hpp"/>
        <childnode refid="13796" relation="include">
        </childnode>
        <childnode refid="13763" relation="include">
        </childnode>
      </node>
      <node id="13740">
        <label>atomic</label>
      </node>
      <node id="13730">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="13706">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="13742">
        <label>iomanip</label>
      </node>
      <node id="13792">
        <label>queue</label>
      </node>
      <node id="13760">
        <label>bound_traits.hpp</label>
        <link refid="bound__traits_8hpp"/>
      </node>
      <node id="13770">
        <label>binary_space_tree/mean_split.hpp</label>
        <link refid="mean__split_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13752" relation="include">
        </childnode>
        <childnode refid="13771" relation="include">
        </childnode>
      </node>
      <node id="13759">
        <label>lmetric_impl.hpp</label>
      </node>
      <node id="13715">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="13716" relation="include">
        </childnode>
        <childnode refid="13718" relation="include">
        </childnode>
      </node>
      <node id="13698">
        <label>cstdint</label>
      </node>
      <node id="13707">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="13714">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="13794">
        <label>binary_space_tree/breadth_first_dual_tree_traverser_impl.hpp</label>
      </node>
      <node id="13774">
        <label>mlpack/mlpack_export.hpp</label>
      </node>
      <node id="13771">
        <label>mean_split_impl.hpp</label>
      </node>
      <node id="13737">
        <label>arma_config.hpp</label>
      </node>
      <node id="13765">
        <label>hollow_ball_bound.hpp</label>
        <link refid="hollow__ball__bound_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13758" relation="include">
        </childnode>
        <childnode refid="13760" relation="include">
        </childnode>
        <childnode refid="13766" relation="include">
        </childnode>
      </node>
      <node id="13750">
        <label>../statistic.hpp</label>
        <link refid="statistic_8hpp"/>
      </node>
      <node id="13781">
        <label>lin_alg_impl.hpp</label>
      </node>
      <node id="13727">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="13694">
        <label>cmath</label>
      </node>
      <node id="13756">
        <label>bounds.hpp</label>
        <link refid="bounds_8hpp"/>
        <childnode refid="13757" relation="include">
        </childnode>
        <childnode refid="13758" relation="include">
        </childnode>
        <childnode refid="13760" relation="include">
        </childnode>
        <childnode refid="13761" relation="include">
        </childnode>
        <childnode refid="13763" relation="include">
        </childnode>
        <childnode refid="13765" relation="include">
        </childnode>
        <childnode refid="13767" relation="include">
        </childnode>
      </node>
      <node id="13713">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="13702">
        <label>stdexcept</label>
      </node>
      <node id="13788">
        <label>binary_space_tree/dual_tree_traverser.hpp</label>
        <link refid="binary__space__tree_2dual__tree__traverser_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13692" relation="include">
        </childnode>
        <childnode refid="13789" relation="include">
        </childnode>
      </node>
      <node id="13722">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="13707" relation="include">
        </childnode>
        <childnode refid="13709" relation="include">
        </childnode>
        <childnode refid="13710" relation="include">
        </childnode>
        <childnode refid="13708" relation="include">
        </childnode>
      </node>
      <node id="13757">
        <label>mlpack/core/math/range.hpp</label>
      </node>
      <node id="13746">
        <label>string</label>
      </node>
      <node id="13777">
        <label>binary_space_tree/rp_tree_max_split.hpp</label>
        <link refid="rp__tree__max__split_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13752" relation="include">
        </childnode>
        <childnode refid="13778" relation="include">
        </childnode>
      </node>
      <node id="13753">
        <label>midpoint_split_impl.hpp</label>
      </node>
      <node id="13734">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="13735" relation="include">
        </childnode>
        <childnode refid="13701" relation="include">
        </childnode>
      </node>
      <node id="13744">
        <label>map</label>
      </node>
      <node id="13789">
        <label>dual_tree_traverser_impl.hpp</label>
      </node>
      <node id="13780">
        <label>mlpack/core/math/lin_alg.hpp</label>
        <link refid="lin__alg_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13781" relation="include">
        </childnode>
      </node>
      <node id="13696">
        <label>cfloat</label>
      </node>
      <node id="13726">
        <label>boost/variant.hpp</label>
      </node>
      <node id="13748">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="13710">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="13733">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="13734" relation="include">
        </childnode>
        <childnode refid="13710" relation="include">
        </childnode>
        <childnode refid="13717" relation="include">
        </childnode>
        <childnode refid="13735" relation="include">
        </childnode>
      </node>
      <node id="13723">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="13721">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="13707" relation="include">
        </childnode>
        <childnode refid="13709" relation="include">
        </childnode>
        <childnode refid="13710" relation="include">
        </childnode>
        <childnode refid="13708" relation="include">
        </childnode>
      </node>
      <node id="13724">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="13707" relation="include">
        </childnode>
        <childnode refid="13709" relation="include">
        </childnode>
        <childnode refid="13710" relation="include">
        </childnode>
        <childnode refid="13708" relation="include">
        </childnode>
      </node>
      <node id="13754">
        <label>binary_space_tree_impl.hpp</label>
      </node>
      <node id="13712">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="13732">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="13708" relation="include">
        </childnode>
        <childnode refid="13709" relation="include">
        </childnode>
        <childnode refid="13710" relation="include">
        </childnode>
        <childnode refid="13720" relation="include">
        </childnode>
        <childnode refid="13729" relation="include">
        </childnode>
      </node>
      <node id="13736">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="13737" relation="include">
        </childnode>
      </node>
      <node id="13790">
        <label>binary_space_tree/dual_tree_traverser_impl.hpp</label>
      </node>
      <node id="13738">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="13693">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="13694" relation="include">
        </childnode>
        <childnode refid="13695" relation="include">
        </childnode>
        <childnode refid="13696" relation="include">
        </childnode>
        <childnode refid="13697" relation="include">
        </childnode>
        <childnode refid="13698" relation="include">
        </childnode>
        <childnode refid="13699" relation="include">
        </childnode>
        <childnode refid="13700" relation="include">
        </childnode>
        <childnode refid="13701" relation="include">
        </childnode>
        <childnode refid="13702" relation="include">
        </childnode>
        <childnode refid="13703" relation="include">
        </childnode>
        <childnode refid="13704" relation="include">
        </childnode>
        <childnode refid="13705" relation="include">
        </childnode>
        <childnode refid="13706" relation="include">
        </childnode>
        <childnode refid="13707" relation="include">
        </childnode>
        <childnode refid="13708" relation="include">
        </childnode>
        <childnode refid="13709" relation="include">
        </childnode>
        <childnode refid="13710" relation="include">
        </childnode>
        <childnode refid="13711" relation="include">
        </childnode>
        <childnode refid="13712" relation="include">
        </childnode>
        <childnode refid="13713" relation="include">
        </childnode>
        <childnode refid="13714" relation="include">
        </childnode>
        <childnode refid="13715" relation="include">
        </childnode>
        <childnode refid="13719" relation="include">
        </childnode>
        <childnode refid="13720" relation="include">
        </childnode>
        <childnode refid="13721" relation="include">
        </childnode>
        <childnode refid="13722" relation="include">
        </childnode>
        <childnode refid="13723" relation="include">
        </childnode>
        <childnode refid="13724" relation="include">
        </childnode>
        <childnode refid="13725" relation="include">
        </childnode>
        <childnode refid="13731" relation="include">
        </childnode>
        <childnode refid="13732" relation="include">
        </childnode>
        <childnode refid="13729" relation="include">
        </childnode>
        <childnode refid="13733" relation="include">
        </childnode>
        <childnode refid="13736" relation="include">
        </childnode>
        <childnode refid="13738" relation="include">
        </childnode>
        <childnode refid="13739" relation="include">
        </childnode>
        <childnode refid="13748" relation="include">
        </childnode>
        <childnode refid="13749" relation="include">
        </childnode>
      </node>
      <node id="13786">
        <label>single_tree_traverser_impl.hpp</label>
      </node>
      <node id="13751">
        <label>midpoint_split.hpp</label>
        <link refid="midpoint__split_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13752" relation="include">
        </childnode>
        <childnode refid="13753" relation="include">
        </childnode>
      </node>
      <node id="13775">
        <label>random</label>
      </node>
      <node id="13764">
        <label>ballbound_impl.hpp</label>
      </node>
      <node id="13787">
        <label>binary_space_tree/single_tree_traverser_impl.hpp</label>
      </node>
      <node id="13699">
        <label>cstdio</label>
      </node>
      <node id="13768">
        <label>address.hpp</label>
        <link refid="address_8hpp"/>
      </node>
      <node id="13796">
        <label>mlpack/core/tree/tree_traits.hpp</label>
        <link refid="tree__traits_8hpp"/>
      </node>
      <node id="13703">
        <label>tuple</label>
      </node>
      <node id="13708">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="13783">
        <label>binary_space_tree/ub_tree_split.hpp</label>
        <link refid="ub__tree__split_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13768" relation="include">
        </childnode>
        <childnode refid="13784" relation="include">
        </childnode>
      </node>
      <node id="13725">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="13708" relation="include">
        </childnode>
        <childnode refid="13709" relation="include">
        </childnode>
        <childnode refid="13710" relation="include">
        </childnode>
        <childnode refid="13712" relation="include">
        </childnode>
        <childnode refid="13726" relation="include">
        </childnode>
        <childnode refid="13727" relation="include">
        </childnode>
        <childnode refid="13728" relation="include">
        </childnode>
        <childnode refid="13729" relation="include">
        </childnode>
      </node>
      <node id="13692">
        <label>/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp</label>
        <link refid="binary__space__tree_2binary__space__tree_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13750" relation="include">
        </childnode>
        <childnode refid="13751" relation="include">
        </childnode>
        <childnode refid="13754" relation="include">
        </childnode>
        <childnode refid="13755" relation="include">
        </childnode>
      </node>
      <node id="13761">
        <label>hrectbound.hpp</label>
        <link refid="hrectbound_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13757" relation="include">
        </childnode>
        <childnode refid="13758" relation="include">
        </childnode>
        <childnode refid="13760" relation="include">
        </childnode>
        <childnode refid="13762" relation="include">
        </childnode>
      </node>
      <node id="13782">
        <label>rp_tree_mean_split_impl.hpp</label>
      </node>
      <node id="13773">
        <label>mlpack/core/math/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13774" relation="include">
        </childnode>
        <childnode refid="13775" relation="include">
        </childnode>
      </node>
      <node id="13704">
        <label>utility</label>
      </node>
      <node id="13728">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="13719">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="13755">
        <label>../binary_space_tree.hpp</label>
        <link refid="binary__space__tree_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13756" relation="include">
        </childnode>
        <childnode refid="13751" relation="include">
        </childnode>
        <childnode refid="13770" relation="include">
        </childnode>
        <childnode refid="13772" relation="include">
        </childnode>
        <childnode refid="13777" relation="include">
        </childnode>
        <childnode refid="13779" relation="include">
        </childnode>
        <childnode refid="13783" relation="include">
        </childnode>
        <childnode refid="13692" relation="include">
        </childnode>
        <childnode refid="13785" relation="include">
        </childnode>
        <childnode refid="13787" relation="include">
        </childnode>
        <childnode refid="13788" relation="include">
        </childnode>
        <childnode refid="13790" relation="include">
        </childnode>
        <childnode refid="13791" relation="include">
        </childnode>
        <childnode refid="13794" relation="include">
        </childnode>
        <childnode refid="13795" relation="include">
        </childnode>
        <childnode refid="13797" relation="include">
        </childnode>
      </node>
      <node id="13716">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="13717" relation="include">
        </childnode>
      </node>
      <node id="13739">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="13740" relation="include">
        </childnode>
        <childnode refid="13741" relation="include">
        </childnode>
        <childnode refid="13742" relation="include">
        </childnode>
        <childnode refid="13743" relation="include">
        </childnode>
        <childnode refid="13744" relation="include">
        </childnode>
        <childnode refid="13745" relation="include">
        </childnode>
        <childnode refid="13746" relation="include">
        </childnode>
        <childnode refid="13747" relation="include">
        </childnode>
      </node>
      <node id="13717">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="13731">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="13729" relation="include">
        </childnode>
        <childnode refid="13725" relation="include">
        </childnode>
        <childnode refid="13732" relation="include">
        </childnode>
      </node>
      <node id="13700">
        <label>cstdlib</label>
      </node>
      <node id="13695">
        <label>cctype</label>
      </node>
      <node id="13718">
        <label>unordered_map</label>
      </node>
      <node id="13697">
        <label>climits</label>
      </node>
      <node id="13745">
        <label>mutex</label>
      </node>
      <node id="13741">
        <label>chrono</label>
      </node>
      <node id="13762">
        <label>hrectbound_impl.hpp</label>
      </node>
      <node id="13749">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="13779">
        <label>binary_space_tree/rp_tree_mean_split.hpp</label>
        <link refid="rp__tree__mean__split_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13777" relation="include">
        </childnode>
        <childnode refid="13752" relation="include">
        </childnode>
        <childnode refid="13780" relation="include">
        </childnode>
        <childnode refid="13782" relation="include">
        </childnode>
      </node>
      <node id="13776">
        <label>vantage_point_split_impl.hpp</label>
      </node>
      <node id="13747">
        <label>thread</label>
      </node>
      <node id="13763">
        <label>ballbound.hpp</label>
        <link refid="ballbound_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13758" relation="include">
        </childnode>
        <childnode refid="13760" relation="include">
        </childnode>
        <childnode refid="13764" relation="include">
        </childnode>
      </node>
      <node id="13778">
        <label>rp_tree_max_split_impl.hpp</label>
      </node>
      <node id="13752">
        <label>mlpack/core/tree/perform_split.hpp</label>
        <link refid="perform__split_8hpp"/>
      </node>
      <node id="13735">
        <label>type_traits</label>
      </node>
      <node id="13791">
        <label>binary_space_tree/breadth_first_dual_tree_traverser.hpp</label>
        <link refid="breadth__first__dual__tree__traverser_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13792" relation="include">
        </childnode>
        <childnode refid="13755" relation="include">
        </childnode>
        <childnode refid="13793" relation="include">
        </childnode>
      </node>
      <node id="13711">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="13797">
        <label>binary_space_tree/typedef.hpp</label>
        <link refid="core_2tree_2binary__space__tree_2typedef_8hpp"/>
        <childnode refid="13755" relation="include">
        </childnode>
      </node>
      <node id="13705">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="13729">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="13707" relation="include">
        </childnode>
        <childnode refid="13708" relation="include">
        </childnode>
        <childnode refid="13709" relation="include">
        </childnode>
        <childnode refid="13710" relation="include">
        </childnode>
        <childnode refid="13730" relation="include">
        </childnode>
      </node>
      <node id="13766">
        <label>hollow_ball_bound_impl.hpp</label>
      </node>
      <node id="13701">
        <label>cstring</label>
      </node>
      <node id="13720">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="13769">
        <label>cellbound_impl.hpp</label>
      </node>
      <node id="13784">
        <label>ub_tree_split_impl.hpp</label>
      </node>
      <node id="13767">
        <label>cellbound.hpp</label>
        <link refid="cellbound_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13757" relation="include">
        </childnode>
        <childnode refid="13758" relation="include">
        </childnode>
        <childnode refid="13760" relation="include">
        </childnode>
        <childnode refid="13768" relation="include">
        </childnode>
        <childnode refid="13769" relation="include">
        </childnode>
      </node>
      <node id="13709">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
      <node id="13758">
        <label>mlpack/core/metrics/lmetric.hpp</label>
        <link refid="lmetric_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13759" relation="include">
        </childnode>
      </node>
      <node id="13772">
        <label>binary_space_tree/vantage_point_split.hpp</label>
        <link refid="vantage__point__split_8hpp"/>
        <childnode refid="13693" relation="include">
        </childnode>
        <childnode refid="13752" relation="include">
        </childnode>
        <childnode refid="13773" relation="include">
        </childnode>
        <childnode refid="13776" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="13840">
        <label>/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/single_tree_traverser.hpp</label>
        <link refid="binary__space__tree_2single__tree__traverser_8hpp"/>
        <childnode refid="13799" relation="include">
        </childnode>
      </node>
      <node id="13814">
        <label>/home/aakash/mlpack/src/mlpack/methods/kmeans/pelleg_moore_kmeans.hpp</label>
        <link refid="pelleg__moore__kmeans_8hpp"/>
      </node>
      <node id="13828">
        <label>/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp</label>
        <link refid="lmnn__function_8hpp"/>
        <childnode refid="13829" relation="include">
        </childnode>
      </node>
      <node id="13832">
        <label>/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp</label>
        <link refid="range__search_8hpp"/>
        <childnode refid="13833" relation="include">
        </childnode>
        <childnode refid="13834" relation="include">
        </childnode>
      </node>
      <node id="13830">
        <label>/home/aakash/mlpack/src/mlpack/methods/neighbor_search/typedef.hpp</label>
        <link refid="methods_2neighbor__search_2typedef_8hpp"/>
        <childnode refid="13815" relation="include">
        </childnode>
      </node>
      <node id="13819">
        <label>/home/aakash/mlpack/src/mlpack/methods/cf/cf_model.hpp</label>
        <link refid="cf__model_8hpp"/>
      </node>
      <node id="13821">
        <label>/home/aakash/mlpack/src/mlpack/methods/cf/decomposition_policies/regularized_svd_method.hpp</label>
        <link refid="regularized__svd__method_8hpp"/>
      </node>
      <node id="13841">
        <label>/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/dual_tree_traverser.hpp</label>
        <link refid="binary__space__tree_2dual__tree__traverser_8hpp"/>
        <childnode refid="13799" relation="include">
        </childnode>
      </node>
      <node id="13818">
        <label>/home/aakash/mlpack/src/mlpack/methods/cf/decomposition_policies/bias_svd_method.hpp</label>
        <link refid="bias__svd__method_8hpp"/>
      </node>
      <node id="13816">
        <label>/home/aakash/mlpack/src/mlpack/methods/cf/cf.hpp</label>
        <link refid="cf_8hpp"/>
        <childnode refid="13817" relation="include">
        </childnode>
        <childnode refid="13819" relation="include">
        </childnode>
        <childnode refid="13820" relation="include">
        </childnode>
        <childnode refid="13822" relation="include">
        </childnode>
      </node>
      <node id="13824">
        <label>/home/aakash/mlpack/src/mlpack/methods/cf/neighbor_search_policies/cosine_search.hpp</label>
        <link refid="cosine__search_8hpp"/>
      </node>
      <node id="13838">
        <label>/home/aakash/mlpack/src/mlpack/methods/rann/ra_typedef.hpp</label>
        <link refid="ra__typedef_8hpp"/>
        <childnode refid="13837" relation="include">
        </childnode>
      </node>
      <node id="13833">
        <label>/home/aakash/mlpack/src/mlpack/methods/dbscan/dbscan.hpp</label>
        <link refid="dbscan_8hpp"/>
      </node>
      <node id="13810">
        <label>/home/aakash/mlpack/src/mlpack/methods/gmm/gmm.hpp</label>
        <link refid="gmm_8hpp"/>
        <childnode refid="13809" relation="include">
        </childnode>
      </node>
      <node id="13835">
        <label>/home/aakash/mlpack/src/mlpack/tests/main_tests/range_search_utils.hpp</label>
        <link refid="range__search__utils_8hpp"/>
      </node>
      <node id="13805">
        <label>/home/aakash/mlpack/src/mlpack/methods/kmeans/dual_tree_kmeans.hpp</label>
        <link refid="dual__tree__kmeans_8hpp"/>
      </node>
      <node id="13822">
        <label>/home/aakash/mlpack/src/mlpack/methods/svdplusplus/svdplusplus.hpp</label>
        <link refid="svdplusplus_8hpp"/>
        <childnode refid="13823" relation="include">
        </childnode>
      </node>
      <node id="13808">
        <label>/home/aakash/mlpack/src/mlpack/methods/gmm/diagonal_gmm.hpp</label>
        <link refid="diagonal__gmm_8hpp"/>
        <childnode refid="13809" relation="include">
        </childnode>
      </node>
      <node id="13831">
        <label>/home/aakash/mlpack/src/mlpack/methods/neighbor_search/ns_model.hpp</label>
        <link refid="ns__model_8hpp"/>
      </node>
      <node id="13837">
        <label>/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp</label>
        <link refid="ra__search_8hpp"/>
        <childnode refid="13836" relation="include">
        </childnode>
        <childnode refid="13838" relation="include">
        </childnode>
      </node>
      <node id="13813">
        <label>/home/aakash/mlpack/src/mlpack/methods/nystroem_method/nystroem_method.hpp</label>
        <link refid="nystroem__method_2nystroem__method_8hpp"/>
        <childnode refid="13812" relation="include">
        </childnode>
      </node>
      <node id="13827">
        <label>/home/aakash/mlpack/src/mlpack/methods/lmnn/constraints.hpp</label>
        <link refid="constraints_8hpp"/>
        <childnode refid="13828" relation="include">
        </childnode>
      </node>
      <node id="13825">
        <label>/home/aakash/mlpack/src/mlpack/methods/cf/neighbor_search_policies/lmetric_search.hpp</label>
        <link refid="lmetric__search_8hpp"/>
        <childnode refid="13816" relation="include">
        </childnode>
      </node>
      <node id="13829">
        <label>/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp</label>
        <link refid="lmnn_8hpp"/>
      </node>
      <node id="13817">
        <label>/home/aakash/mlpack/src/mlpack/methods/bias_svd/bias_svd.hpp</label>
        <link refid="bias__svd_8hpp"/>
        <childnode refid="13818" relation="include">
        </childnode>
      </node>
      <node id="13798">
        <label>/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp</label>
        <link refid="binary__space__tree_2binary__space__tree_8hpp"/>
        <childnode refid="13799" relation="include">
        </childnode>
        <childnode refid="13840" relation="include">
        </childnode>
        <childnode refid="13841" relation="include">
        </childnode>
        <childnode refid="13815" relation="include">
        </childnode>
      </node>
      <node id="13836">
        <label>/home/aakash/mlpack/src/mlpack/methods/rann/ra_model.hpp</label>
        <link refid="ra__model_8hpp"/>
      </node>
      <node id="13807">
        <label>/home/aakash/mlpack/src/mlpack/methods/gmm/em_fit.hpp</label>
        <link refid="em__fit_8hpp"/>
        <childnode refid="13808" relation="include">
        </childnode>
        <childnode refid="13810" relation="include">
        </childnode>
      </node>
      <node id="13804">
        <label>/home/aakash/mlpack/src/mlpack/methods/kde/kde_model.hpp</label>
        <link refid="kde__model_8hpp"/>
      </node>
      <node id="13799">
        <label>/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree.hpp</label>
        <link refid="binary__space__tree_8hpp"/>
        <childnode refid="13798" relation="include">
        </childnode>
        <childnode refid="13800" relation="include">
        </childnode>
        <childnode refid="13801" relation="include">
        </childnode>
        <childnode refid="13802" relation="include">
        </childnode>
        <childnode refid="13803" relation="include">
        </childnode>
        <childnode refid="13804" relation="include">
        </childnode>
        <childnode refid="13805" relation="include">
        </childnode>
        <childnode refid="13806" relation="include">
        </childnode>
        <childnode refid="13814" relation="include">
        </childnode>
        <childnode refid="13815" relation="include">
        </childnode>
        <childnode refid="13831" relation="include">
        </childnode>
        <childnode refid="13832" relation="include">
        </childnode>
        <childnode refid="13834" relation="include">
        </childnode>
        <childnode refid="13836" relation="include">
        </childnode>
        <childnode refid="13837" relation="include">
        </childnode>
        <childnode refid="13839" relation="include">
        </childnode>
      </node>
      <node id="13823">
        <label>/home/aakash/mlpack/src/mlpack/methods/cf/decomposition_policies/svdplusplus_method.hpp</label>
        <link refid="svdplusplus__method_8hpp"/>
      </node>
      <node id="13820">
        <label>/home/aakash/mlpack/src/mlpack/methods/regularized_svd/regularized_svd.hpp</label>
        <link refid="regularized__svd_8hpp"/>
        <childnode refid="13821" relation="include">
        </childnode>
      </node>
      <node id="13839">
        <label>/home/aakash/mlpack/src/mlpack/methods/rann/ra_query_stat.hpp</label>
        <link refid="ra__query__stat_8hpp"/>
        <childnode refid="13837" relation="include">
        </childnode>
      </node>
      <node id="13815">
        <label>/home/aakash/mlpack/src/mlpack/methods/neighbor_search/neighbor_search.hpp</label>
        <link refid="neighbor__search_8hpp"/>
        <childnode refid="13816" relation="include">
        </childnode>
        <childnode refid="13824" relation="include">
        </childnode>
        <childnode refid="13825" relation="include">
        </childnode>
        <childnode refid="13826" relation="include">
        </childnode>
        <childnode refid="13805" relation="include">
        </childnode>
        <childnode refid="13827" relation="include">
        </childnode>
        <childnode refid="13830" relation="include">
        </childnode>
        <childnode refid="13831" relation="include">
        </childnode>
      </node>
      <node id="13834">
        <label>/home/aakash/mlpack/src/mlpack/methods/range_search/rs_model.hpp</label>
        <link refid="rs__model_8hpp"/>
        <childnode refid="13835" relation="include">
        </childnode>
      </node>
      <node id="13803">
        <label>/home/aakash/mlpack/src/mlpack/methods/kde/kde.hpp</label>
        <link refid="kde_8hpp"/>
        <childnode refid="13804" relation="include">
        </childnode>
      </node>
      <node id="13826">
        <label>/home/aakash/mlpack/src/mlpack/methods/cf/neighbor_search_policies/pearson_search.hpp</label>
        <link refid="pearson__search_8hpp"/>
      </node>
      <node id="13806">
        <label>/home/aakash/mlpack/src/mlpack/methods/kmeans/kmeans.hpp</label>
        <link refid="kmeans_8hpp"/>
        <childnode refid="13807" relation="include">
        </childnode>
        <childnode refid="13811" relation="include">
        </childnode>
      </node>
      <node id="13802">
        <label>/home/aakash/mlpack/src/mlpack/methods/emst/dtb.hpp</label>
        <link refid="dtb_8hpp"/>
      </node>
      <node id="13811">
        <label>/home/aakash/mlpack/src/mlpack/methods/nystroem_method/kmeans_selection.hpp</label>
        <link refid="kmeans__selection_8hpp"/>
        <childnode refid="13812" relation="include">
        </childnode>
        <childnode refid="13813" relation="include">
        </childnode>
      </node>
      <node id="13809">
        <label>/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_model.hpp</label>
        <link refid="hmm__model_8hpp"/>
      </node>
      <node id="13812">
        <label>/home/aakash/mlpack/src/mlpack/methods/kernel_pca/kernel_rules/nystroem_method.hpp</label>
        <link refid="kernel__pca_2kernel__rules_2nystroem__method_8hpp"/>
      </node>
      <node id="13800">
        <label>/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/breadth_first_dual_tree_traverser.hpp</label>
        <link refid="breadth__first__dual__tree__traverser_8hpp"/>
        <childnode refid="13799" relation="include">
        </childnode>
      </node>
      <node id="13801">
        <label>/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/typedef.hpp</label>
        <link refid="core_2tree_2binary__space__tree_2typedef_8hpp"/>
        <childnode refid="13799" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classmlpack_1_1tree_1_1BinarySpaceTree" prot="public">mlpack::tree::BinarySpaceTree</innerclass>
    <innerclass refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1BreadthFirstDualTreeTraverser" prot="public">mlpack::tree::BinarySpaceTree::BreadthFirstDualTreeTraverser</innerclass>
    <innerclass refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1DualTreeTraverser" prot="public">mlpack::tree::BinarySpaceTree::DualTreeTraverser</innerclass>
    <innerclass refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1SingleTreeTraverser" prot="public">mlpack::tree::BinarySpaceTree::SingleTreeTraverser</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1tree">mlpack::tree</innernamespace>
    <briefdescription>
<para>Definition of generalized binary space partitioning tree (BinarySpaceTree). </para>    </briefdescription>
    <detaileddescription>
<para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#ifndef<sp/>MLPACK_CORE_TREE_BINARY_SPACE_TREE_BINARY_SPACE_TREE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_CORE_TREE_BINARY_SPACE_TREE_BINARY_SPACE_TREE_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../statistic.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="midpoint__split_8hpp" kindref="compound">midpoint_split.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="20" refid="namespacemlpack_1_1tree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tree<sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MetricType,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StatisticType<sp/>=<sp/><ref refid="classmlpack_1_1tree_1_1EmptyStatistic" kindref="compound">EmptyStatistic</ref>,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType<sp/>=<sp/>arma::mat,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BoundMetricType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BoundType<sp/>=</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1bound_1_1HRectBound" kindref="compound">bound::HRectBound</ref>,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplitBoundType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SplitMatType&gt;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SplitType<sp/>=<sp/><ref refid="classmlpack_1_1tree_1_1MidpointSplit" kindref="compound">MidpointSplit</ref>&gt;</highlight></codeline>
<codeline lineno="54" refid="classmlpack_1_1tree_1_1BinarySpaceTree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref></highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a57758caa2e58c3fe05d1284eeabae523" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MatType<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a57758caa2e58c3fe05d1284eeabae523" kindref="member">Mat</ref>;</highlight></codeline>
<codeline lineno="60" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType::elem_type<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a227d0c7e23e98fcd6c81ecab357a791f" kindref="member">ElemType</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a2fbe69d8cb6be0a0735b5df955708ade" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>SplitType&lt;BoundType&lt;MetricType&gt;,<sp/>MatType&gt;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a2fbe69d8cb6be0a0735b5df955708ade" kindref="member">Split</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*<sp/>left;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*<sp/>right;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*<sp/>parent;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>BoundType&lt;MetricType&gt;<sp/>bound;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>StatisticType<sp/>stat;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>ElemType<sp/>parentDistance;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>ElemType<sp/>furthestDescendantDistance;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>ElemType<sp/>minimumBoundDistance;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>MatType*<sp/>dataset;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RuleType&gt;</highlight></codeline>
<codeline lineno="96" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1SingleTreeTraverser" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1SingleTreeTraverser" kindref="compound">SingleTreeTraverser</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RuleType&gt;</highlight></codeline>
<codeline lineno="100" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1DualTreeTraverser" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1DualTreeTraverser" kindref="compound">DualTreeTraverser</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RuleType&gt;</highlight></codeline>
<codeline lineno="103" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1BreadthFirstDualTreeTraverser" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1_1BreadthFirstDualTreeTraverser" kindref="compound">BreadthFirstDualTreeTraverser</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxLeafSize<sp/>=<sp/>20);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>data,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;&amp;<sp/>oldFromNew,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxLeafSize<sp/>=<sp/>20);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>data,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;&amp;<sp/>oldFromNew,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;&amp;<sp/>newFromOld,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxLeafSize<sp/>=<sp/>20);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(MatType&amp;&amp;<sp/>data,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxLeafSize<sp/>=<sp/>20);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(MatType&amp;&amp;<sp/>data,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;&amp;<sp/>oldFromNew,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxLeafSize<sp/>=<sp/>20);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(MatType&amp;&amp;<sp/>data,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;&amp;<sp/>oldFromNew,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;&amp;<sp/>newFromOld,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxLeafSize<sp/>=<sp/>20);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(<ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*<sp/>parent,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>begin,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplitType&lt;BoundType&lt;MetricType&gt;,<sp/>MatType&gt;&amp;<sp/>splitter,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxLeafSize<sp/>=<sp/>20);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(<ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*<sp/>parent,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>begin,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;&amp;<sp/>oldFromNew,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplitType&lt;BoundType&lt;MetricType&gt;,<sp/>MatType&gt;&amp;<sp/>splitter,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxLeafSize<sp/>=<sp/>20);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(<ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*<sp/>parent,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>begin,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;&amp;<sp/>oldFromNew,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;&amp;<sp/>newFromOld,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplitType&lt;BoundType&lt;MetricType&gt;,<sp/>MatType&gt;&amp;<sp/>splitter,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxLeafSize<sp/>=<sp/>20);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(<ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;&amp;<sp/>other);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a11d6befceee3f4a7cda868bfeb3bf8f9" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a11d6befceee3f4a7cda868bfeb3bf8f9" kindref="member">operator=</ref>(<ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;&amp;<sp/>other);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>(</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Archive&amp;<sp/>ar,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;cereal::is_loading&lt;Archive&gt;()&gt;*<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae07a273ce37bd373995e13b3ef276265" kindref="member">~BinarySpaceTree</ref>();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae995f23d597849b8b3fa165765921914" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BoundType&lt;MetricType&gt;&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae995f23d597849b8b3fa165765921914" kindref="member">Bound</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound;<sp/>}</highlight></codeline>
<codeline lineno="321" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a1023b24dcb81cc1769a8698d0ac8b7ed" refkind="member"><highlight class="normal"><sp/><sp/>BoundType&lt;MetricType&gt;&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a1023b24dcb81cc1769a8698d0ac8b7ed" kindref="member">Bound</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound;<sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ad8b29c84ac793742cd15834f9f4c4f31" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>StatisticType&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ad8b29c84ac793742cd15834f9f4c4f31" kindref="member">Stat</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;<sp/>}</highlight></codeline>
<codeline lineno="326" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aac2d3c104b89109f3df4a9a8cad244da" refkind="member"><highlight class="normal"><sp/><sp/>StatisticType&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aac2d3c104b89109f3df4a9a8cad244da" kindref="member">Stat</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;<sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa0f4813924e6cdee43b45050bb947abe" kindref="member">IsLeaf</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a3085061e078694745cf2f59a77f982c3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a3085061e078694745cf2f59a77f982c3" kindref="member">Left</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left;<sp/>}</highlight></codeline>
<codeline lineno="334" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a5ddd6024d9d85e1e0d7e59b8533897a7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a5ddd6024d9d85e1e0d7e59b8533897a7" kindref="member">Left</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left;<sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aaa38cf098e44114fc6e70da0f9ef57e0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aaa38cf098e44114fc6e70da0f9ef57e0" kindref="member">Right</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>right;<sp/>}</highlight></codeline>
<codeline lineno="339" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a6c50c4ae4876df5d346da693c37ae02f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a6c50c4ae4876df5d346da693c37ae02f" kindref="member">Right</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>right;<sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1abe2ac60bc77d318c2dba58b43f18a245" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1abe2ac60bc77d318c2dba58b43f18a245" kindref="member">Parent</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent;<sp/>}</highlight></codeline>
<codeline lineno="344" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a632e02a7a7f3eda4fe6d4fa5bc69b832" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a632e02a7a7f3eda4fe6d4fa5bc69b832" kindref="member">Parent</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent;<sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a4c3764c98d5804083a9ec2c867eb9366" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a4c3764c98d5804083a9ec2c867eb9366" kindref="member">Dataset</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*dataset;<sp/>}</highlight></codeline>
<codeline lineno="349" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1abb34576c3ddb31987f1dda9c33e6476f" refkind="member"><highlight class="normal"><sp/><sp/>MatType&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1abb34576c3ddb31987f1dda9c33e6476f" kindref="member">Dataset</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*dataset;<sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" refkind="member"><highlight class="normal"><sp/><sp/>MetricType<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab7cdd810a507e4a0aa262ea0fa8a322c" kindref="member">Metric</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MetricType();<sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a1f7ec083be66d58a3e02e12956bf005e" kindref="member">NumChildren</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VecType&gt;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a19b9a5fd41d8e192b62effb1445bd410" kindref="member">GetNearestChild</ref>(</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VecType&amp;<sp/>point,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;<ref refid="structIsVector" kindref="compound">IsVector&lt;VecType&gt;::value</ref>&gt;*<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VecType&gt;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a0257281722537c7916db7763623f67f7" kindref="member">GetFurthestChild</ref>(</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VecType&amp;<sp/>point,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;<ref refid="structIsVector" kindref="compound">IsVector&lt;VecType&gt;::value</ref>&gt;*<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a19b9a5fd41d8e192b62effb1445bd410" kindref="member">GetNearestChild</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;<sp/>queryNode);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a0257281722537c7916db7763623f67f7" kindref="member">GetFurthestChild</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;<sp/>queryNode);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>ElemType<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1acbe82a6439f71405b5801ca7d941cbfb" kindref="member">FurthestPointDistance</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>ElemType<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1adc597088eadfcfa3060336d0484ab573" kindref="member">FurthestDescendantDistance</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>ElemType<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a20a4e92da6066eb335a576b7f9cd0415" kindref="member">MinimumBoundDistance</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1af44ed4e7bfea088689caed082da67e17" refkind="member"><highlight class="normal"><sp/><sp/>ElemType<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1af44ed4e7bfea088689caed082da67e17" kindref="member">ParentDistance</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parentDistance;<sp/>}</highlight></codeline>
<codeline lineno="410" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa22ead21ac809efb970b90ec014dc318" refkind="member"><highlight class="normal"><sp/><sp/>ElemType&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa22ead21ac809efb970b90ec014dc318" kindref="member">ParentDistance</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parentDistance;<sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a2cf9f074d6e3c683213f5f17acfbc6f7" kindref="member">Child</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>child)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1acb373eeb13db5a753ec52ea56ec5a9cd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>*&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1acb373eeb13db5a753ec52ea56ec5a9cd" kindref="member">ChildPtr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>child)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(child<sp/>==<sp/>0)<sp/>?<sp/>left<sp/>:<sp/>right;<sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a352077c26368da0ee570c0b7f062b1e3" kindref="member">NumPoints</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a2a85eb34222f1fc073940e8c89274e81" kindref="member">NumDescendants</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa732ea3eeb38529c549fd4d15d8655be" kindref="member">Descendant</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a559eede5ea60f68634f8e7e72c3c68d2" kindref="member">Point</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a080f6b6c8d4336ff1ead4f0d0f6a0cb5" refkind="member"><highlight class="normal"><sp/><sp/>ElemType<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a080f6b6c8d4336ff1ead4f0d0f6a0cb5" kindref="member">MinDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="454"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound.MinDistance(other.<ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae995f23d597849b8b3fa165765921914" kindref="member">Bound</ref>());</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="459" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a29d3f7fc53a6113f14949dc05d747992" refkind="member"><highlight class="normal"><sp/><sp/>ElemType<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a29d3f7fc53a6113f14949dc05d747992" kindref="member">MaxDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="460"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound.MaxDistance(other.<ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae995f23d597849b8b3fa165765921914" kindref="member">Bound</ref>());</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a186a488e372175c6f8499115c9add8b4" refkind="member"><highlight class="normal"><sp/><sp/>math::RangeType&lt;ElemType&gt;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a186a488e372175c6f8499115c9add8b4" kindref="member">RangeDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree" kindref="compound">BinarySpaceTree</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="466"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound.RangeDistance(other.<ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae995f23d597849b8b3fa165765921914" kindref="member">Bound</ref>());</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VecType&gt;</highlight></codeline>
<codeline lineno="472" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a73bf99a433e88a31d98b46bf4c0da147" refkind="member"><highlight class="normal"><sp/><sp/>ElemType<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a73bf99a433e88a31d98b46bf4c0da147" kindref="member">MinDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VecType&amp;<sp/>point,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;<ref refid="structIsVector" kindref="compound">IsVector&lt;VecType&gt;::value</ref>&gt;*<sp/>=<sp/>0)</highlight><highlight class="keyword"></highlight></codeline>
<codeline lineno="474"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/>const</highlight></codeline>
<codeline lineno="475"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound.MinDistance(point);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VecType&gt;</highlight></codeline>
<codeline lineno="481" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae764d88483236cc470f5abe0273df4c5" refkind="member"><highlight class="normal"><sp/><sp/>ElemType<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae764d88483236cc470f5abe0273df4c5" kindref="member">MaxDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VecType&amp;<sp/>point,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;<ref refid="structIsVector" kindref="compound">IsVector&lt;VecType&gt;::value</ref>&gt;*<sp/>=<sp/>0)</highlight><highlight class="keyword"></highlight></codeline>
<codeline lineno="483"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/>const</highlight></codeline>
<codeline lineno="484"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound.MaxDistance(point);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VecType&gt;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>math::RangeType&lt;ElemType&gt;</highlight></codeline>
<codeline lineno="491" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a60a550bf46aa1d7b858134ce41fd5a3a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a60a550bf46aa1d7b858134ce41fd5a3a" kindref="member">RangeDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VecType&amp;<sp/>point,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;<ref refid="structIsVector" kindref="compound">IsVector&lt;VecType&gt;::value</ref>&gt;*<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="493"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound.RangeDistance(point);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ac50a3a009687e641fd8249e011f628d4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ac50a3a009687e641fd8249e011f628d4" kindref="member">Begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;<sp/>}</highlight></codeline>
<codeline lineno="500" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a49cdbf8b1b2899522cd80f4cbff40b69" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a49cdbf8b1b2899522cd80f4cbff40b69" kindref="member">Begin</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;<sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab30fd361b8bee994ff8ed9fbb6fae845" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab30fd361b8bee994ff8ed9fbb6fae845" kindref="member">Count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;<sp/>}</highlight></codeline>
<codeline lineno="505" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a5a132e068ab206a014b986ff71c3442d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a5a132e068ab206a014b986ff71c3442d" kindref="member">Count</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;<sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa800439660375c0253008cafa648da78" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1aa800439660375c0253008cafa648da78" kindref="member">Center</ref>(arma::vec&amp;<sp/>center)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>bound.Center(center);<sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplitNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxLeafSize,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplitType&lt;BoundType&lt;MetricType&gt;,<sp/>MatType&gt;&amp;<sp/>splitter);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SplitNode(std::vector&lt;size_t&gt;&amp;<sp/>oldFromNew,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxLeafSize,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SplitType&lt;BoundType&lt;MetricType&gt;,<sp/>MatType&gt;&amp;<sp/>splitter);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BoundType2&gt;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateBound(BoundType2&amp;<sp/>boundToUpdate);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateBound(<ref refid="classmlpack_1_1bound_1_1HollowBallBound" kindref="compound">bound::HollowBallBound&lt;MetricType&gt;</ref>&amp;<sp/>boundToUpdate);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ae287bd32ba0f337878b2d1b52e550281" kindref="member">BinarySpaceTree</ref>();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="classmlpack_1_1tree_1_1BinarySpaceTree_1ab2f44cbb59a08132f4c843e5225bba0e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">cereal::access;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1BinarySpaceTree_1a72d63b74c8166dff8e1a9006905ad9ca" kindref="member">serialize</ref>(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>version);</highlight></codeline>
<codeline lineno="567"><highlight class="normal">};</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;binary_space_tree_impl.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>everything<sp/>else,<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../binary_space_tree.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/core/tree/binary_space_tree/binary_space_tree.hpp"/>
  </compounddef>
</doxygen>
