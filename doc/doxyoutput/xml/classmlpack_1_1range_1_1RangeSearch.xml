<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1range_1_1RangeSearch" kind="class" language="C++" prot="public">
    <compoundname>mlpack::range::RangeSearch</compoundname>
    <includes refid="range__search_8hpp" local="no">range_search.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>MetricType</declname>
        <defname>MetricType</defname>
        <defval><ref refid="namespacemlpack_1_1metric_1a0306f114fdf32dcdfa8f015408cfc37d" kindref="member">metric::EuclideanDistance</ref></defval>
      </param>
      <param>
        <type>typename</type>
        <declname>MatType</declname>
        <defname>MatType</defname>
        <defval>arma::mat</defval>
      </param>
      <param>
        <type>template&lt; typename TreeMetricType, typename TreeStatType, typename TreeMatType &gt; class</type>
        <declname>TreeType</declname>
        <defname>TreeType</defname>
        <defval><ref refid="namespacemlpack_1_1tree_1a73c2146f8d1da65d927c7746bfe7e750" kindref="member">tree::KDTree</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmlpack_1_1range_1_1RangeSearch_1a5cbbe0e3dd87208f402ebd5a35dcd608" prot="public" static="no">
        <type>TreeType&lt; MetricType, <ref refid="classmlpack_1_1range_1_1RangeSearchStat" kindref="compound">RangeSearchStat</ref>, MatType &gt;</type>
        <definition>typedef TreeType&lt;MetricType, RangeSearchStat, MatType&gt; Tree</definition>
        <argsstring></argsstring>
        <name>Tree</name>
        <briefdescription>
<para>Convenience typedef. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="49" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1range_1_1RangeSearch_1a06e4c7b3f942c628e2b3584e7ba02cbf" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t baseCases</definition>
        <argsstring></argsstring>
        <name>baseCases</name>
        <briefdescription>
<para>The total number of base cases during the last search. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="317" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1range_1_1RangeSearch_1ad069c71a7bc99c59bce1c3f859e5d22b" prot="private" static="no" mutable="no">
        <type>MetricType</type>
        <definition>MetricType metric</definition>
        <argsstring></argsstring>
        <name>metric</name>
        <briefdescription>
<para>Instantiated distance metric. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="314" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1range_1_1RangeSearch_1a060864f6de9076fe26693298a2d570bd" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool naive</definition>
        <argsstring></argsstring>
        <name>naive</name>
        <briefdescription>
<para>If true, O(n^2) naive computation is used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="309" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1range_1_1RangeSearch_1a18bb7cb0cf16d0f4ba0744c6c7ab2027" prot="private" static="no" mutable="no">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; oldFromNewReferences</definition>
        <argsstring></argsstring>
        <name>oldFromNewReferences</name>
        <briefdescription>
<para>Mappings to old reference indices (used when this object builds trees). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="298" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1range_1_1RangeSearch_1afdeaba8b33d99d27772a74843e7dfbc2" prot="private" static="no" mutable="no">
        <type>const MatType *</type>
        <definition>const MatType* referenceSet</definition>
        <argsstring></argsstring>
        <name>referenceSet</name>
        <briefdescription>
<para>Reference set (data should be accessed using this). </para>        </briefdescription>
        <detaileddescription>
<para>In some situations we may be the owner of this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="303" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1range_1_1RangeSearch_1afce03afdbc14367356598962033187af" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1range_1_1RangeSearch_1a5cbbe0e3dd87208f402ebd5a35dcd608" kindref="member">Tree</ref> *</type>
        <definition>Tree* referenceTree</definition>
        <argsstring></argsstring>
        <name>referenceTree</name>
        <briefdescription>
<para>Reference tree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="300" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1range_1_1RangeSearch_1aecc3c9a30f1be1fe8b602374bde73e7b" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t scores</definition>
        <argsstring></argsstring>
        <name>scores</name>
        <briefdescription>
<para>The total number of scores during the last search. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="319" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1range_1_1RangeSearch_1a72486e26c509c1276fa97ea7917f6d6c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool singleMode</definition>
        <argsstring></argsstring>
        <name>singleMode</name>
        <briefdescription>
<para>If true, single-tree computation is used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="311" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1range_1_1RangeSearch_1a09dd83eb7ea58a2d5cfbdbdca5f63b88" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool treeOwner</definition>
        <argsstring></argsstring>
        <name>treeOwner</name>
        <briefdescription>
<para>If true, this object is responsible for deleting the trees. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="306" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="306" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmlpack_1_1range_1_1RangeSearch_1af99d59b0c664ebe9313200fcfeaf66ae" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class LeafSizeRSWrapper&lt; TreeType &gt;</definition>
        <argsstring></argsstring>
        <name>LeafSizeRSWrapper&lt; TreeType &gt;</name>
        <briefdescription>
<para>For access to mappings when building models. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="319" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a9292d974d50191623b9f26d7f2ccea1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RangeSearch</definition>
        <argsstring>(MatType referenceSet, const bool naive=false, const bool singleMode=false, const MetricType metric=MetricType())</argsstring>
        <name>RangeSearch</name>
        <param>
          <type>MatType</type>
          <declname>referenceSet</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>naive</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>singleMode</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const MetricType</type>
          <declname>metric</declname>
          <defval>MetricType()</defval>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> object with a given reference dataset (this is the dataset which is searched). </para>        </briefdescription>
        <detaileddescription>
<para>Optionally, perform the computation in naive mode or single-tree mode. Additionally, an instantiated metric can be given, for cases where the distance metric holds data.</para><para>This method will move the matrices to internal copies, which are rearranged during tree-building. You can avoid creating an extra copy by pre-constructing the trees and passing them in using std::move.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>referenceSet</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference dataset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>naive</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the computation should be done in O(n^2) naive mode. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>singleMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether single-tree computation should be used (as opposed to dual-tree computation). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metric</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated distance metric. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a6d201f3cf484ea56a37daabeb0cded94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RangeSearch</definition>
        <argsstring>(Tree *referenceTree, const bool singleMode=false, const MetricType metric=MetricType())</argsstring>
        <name>RangeSearch</name>
        <param>
          <type><ref refid="classmlpack_1_1range_1_1RangeSearch_1a5cbbe0e3dd87208f402ebd5a35dcd608" kindref="member">Tree</ref> *</type>
          <declname>referenceTree</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>singleMode</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const MetricType</type>
          <declname>metric</declname>
          <defval>MetricType()</defval>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> object with the given pre-constructed reference tree (this is the tree built on the reference set, which is the set that is searched). </para>        </briefdescription>
        <detaileddescription>
<para>Optionally, choose to use single-tree mode, which will not build a tree on query points. Naive mode is not available as an option for this constructor. Additionally, an instantiated distance metric can be given, for cases where the distance metric holds data.</para><para>There is no copying of the data matrices in this constructor (because tree-building is not necessary), so this is the constructor to use when copies absolutely must be avoided.</para><para><simplesect kind="note"><para>Because tree-building (at least with BinarySpaceTree) modifies the ordering of a matrix, be aware that mapping of the points back to their original indices is not done when this constructor is used.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>referenceTree</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-built tree for reference points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>singleMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether single-tree computation should be used (as opposed to dual-tree computation). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metric</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated distance metric. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a838592644923cb86943f789ca0522bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RangeSearch</definition>
        <argsstring>(const bool naive=false, const bool singleMode=false, const MetricType metric=MetricType())</argsstring>
        <name>RangeSearch</name>
        <param>
          <type>const bool</type>
          <declname>naive</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>singleMode</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const MetricType</type>
          <declname>metric</declname>
          <defval>MetricType()</defval>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> object without any reference data. </para>        </briefdescription>
        <detaileddescription>
<para>If the monochromatic <ref refid="classmlpack_1_1range_1_1RangeSearch_1a0df148abcabf67c5876e942e12279f8e" kindref="member">Search()</ref> is called before a reference set is set with <ref refid="classmlpack_1_1range_1_1RangeSearch_1a27ba39af83e3cb01f2e6fbec159adf0e" kindref="member">Train()</ref>, no results will be returned (since the reference set is empty).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>naive</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to use naive search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>singleMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether single-tree computation should be used (as opposed to dual-tree computation). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metric</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated metric. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1af751a5f912b2f3eb714567b6b6ca7c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RangeSearch</definition>
        <argsstring>(const RangeSearch &amp;other)</argsstring>
        <name>RangeSearch</name>
        <param>
          <type>const <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct the <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> model as a copy of the given model. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this may be computationally intensive!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> model to copy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1aeb192154ad7a75d89fcc6dbb6ffc1f24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RangeSearch</definition>
        <argsstring>(RangeSearch &amp;&amp;other)</argsstring>
        <name>RangeSearch</name>
        <param>
          <type><ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct the <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> model by taking ownership of the given model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> model to take ownership of. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a250641479dfc9c4881bdae8c960f767f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~RangeSearch</definition>
        <argsstring>()</argsstring>
        <name>~RangeSearch</name>
        <briefdescription>
<para>Destroy the <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>If trees were created, they will be deleted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a3f4bd5d0aa64ea090796725f7755287d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BaseCases</definition>
        <argsstring>() const</argsstring>
        <name>BaseCases</name>
        <briefdescription>
<para>Get the number of base cases during the last search. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="282" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="282" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a343230e7d7344e3f7d5f5f2eb89cf2c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Naive</definition>
        <argsstring>() const</argsstring>
        <name>Naive</name>
        <briefdescription>
<para>Get whether naive search is being used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="277" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1af7d397adca3f411b4e2d2f977b280ce6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool &amp;</type>
        <definition>bool&amp; Naive</definition>
        <argsstring>()</argsstring>
        <name>Naive</name>
        <briefdescription>
<para>Modify whether naive search is being used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="279" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a9b0922f9fb5439cf21e6873f8a9a84b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> &amp;</type>
        <definition>RangeSearch&amp; operator=</definition>
        <argsstring>(const RangeSearch &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Deep copy the given <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> model to copy. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a2c57ee3bbf6708990e6432d0962e2226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> &amp;</type>
        <definition>RangeSearch&amp; operator=</definition>
        <argsstring>(RangeSearch &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move the given <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> model to move. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a0a975940b302b4efec85bbe2d8b36251" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const MatType &amp;</type>
        <definition>const MatType&amp; ReferenceSet</definition>
        <argsstring>() const</argsstring>
        <name>ReferenceSet</name>
        <briefdescription>
<para>Return the reference set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="291" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a92cb2297c084f56afea6f37e3c894f52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmlpack_1_1range_1_1RangeSearch_1a5cbbe0e3dd87208f402ebd5a35dcd608" kindref="member">Tree</ref> *</type>
        <definition>Tree* ReferenceTree</definition>
        <argsstring>()</argsstring>
        <name>ReferenceTree</name>
        <briefdescription>
<para>Return the reference tree (or NULL if in naive mode). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="294" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a4d1e40c0bf406280a237ca1b487e3c62" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Scores</definition>
        <argsstring>() const</argsstring>
        <name>Scores</name>
        <briefdescription>
<para>Get the number of scores during the last search. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="284" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="284" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a0df148abcabf67c5876e942e12279f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Search</definition>
        <argsstring>(const MatType &amp;querySet, const math::Range &amp;range, std::vector&lt; std::vector&lt; size_t &gt;&gt; &amp;neighbors, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;distances)</argsstring>
        <name>Search</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>querySet</declname>
        </param>
        <param>
          <type>const math::Range &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; size_t &gt;&gt; &amp;</type>
          <declname>neighbors</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>distances</declname>
        </param>
        <briefdescription>
<para>Search for all reference points in the given range for each point in the query set, returning the results in the neighbors and distances objects. </para>        </briefdescription>
        <detaileddescription>
<para>Each entry in the external vector corresponds to a query point. Each of these entries holds a vector which contains the indices and distances of the reference points falling into the given range.</para><para>That is:</para><para><itemizedlist>
<listitem><para>neighbors.size() and distances.size() both equal the number of query points.</para></listitem><listitem><para>neighbors[i] contains the indices of all the points in the reference set which have distances inside the given range to query point i.</para></listitem><listitem><para>distances[i] contains all of the distances corresponding to the indices contained in neighbors[i].</para></listitem><listitem><para>neighbors[i] and distances[i] are not sorted in any particular order.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>querySet</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of query points to search with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range of distances in which to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbors</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which will hold the list of neighbors for each point which fell into the given range, for each query point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which will hold the list of distances for each point which fell into the given range, for each query point. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a24f0beece99aedbee1edf5890f5bc235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Search</definition>
        <argsstring>(Tree *queryTree, const math::Range &amp;range, std::vector&lt; std::vector&lt; size_t &gt;&gt; &amp;neighbors, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;distances)</argsstring>
        <name>Search</name>
        <param>
          <type><ref refid="classmlpack_1_1range_1_1RangeSearch_1a5cbbe0e3dd87208f402ebd5a35dcd608" kindref="member">Tree</ref> *</type>
          <declname>queryTree</declname>
        </param>
        <param>
          <type>const math::Range &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; size_t &gt;&gt; &amp;</type>
          <declname>neighbors</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>distances</declname>
        </param>
        <briefdescription>
<para>Given a pre-built query tree, search for all reference points in the given range for each point in the query set, returning the results in the neighbors and distances objects. </para>        </briefdescription>
        <detaileddescription>
<para>Each entry in the external vector corresponds to a query point. Each of these entries holds a vector which contains the indices and distances of the reference points falling into the given range.</para><para>That is:</para><para><itemizedlist>
<listitem><para>neighbors.size() and distances.size() both equal the number of query points.</para></listitem><listitem><para>neighbors[i] contains the indices of all the points in the reference set which have distances inside the given range to query point i.</para></listitem><listitem><para>distances[i] contains all of the distances corresponding to the indices contained in neighbors[i].</para></listitem><listitem><para>neighbors[i] and distances[i] are not sorted in any particular order.</para></listitem></itemizedlist>
</para><para>If either naive or singleMode are set to true, this will throw an invalid_argument exception; passing in a query tree implies dual-tree search.</para><para>If you want to use the reference tree as the query tree, instead call the overload of <ref refid="classmlpack_1_1range_1_1RangeSearch_1a0df148abcabf67c5876e942e12279f8e" kindref="member">Search()</ref> that does not take a query set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queryTree</parametername>
</parameternamelist>
<parameterdescription>
<para>Tree built on query points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range of distances in which to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbors</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which will hold the list of neighbors for each point which fell into the given range, for each query point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which will hold the list of distances for each point which fell into the given range, for each query point. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a3868480bcd41a740550657144b5f7018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Search</definition>
        <argsstring>(const math::Range &amp;range, std::vector&lt; std::vector&lt; size_t &gt;&gt; &amp;neighbors, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;distances)</argsstring>
        <name>Search</name>
        <param>
          <type>const math::Range &amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; size_t &gt;&gt; &amp;</type>
          <declname>neighbors</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>distances</declname>
        </param>
        <briefdescription>
<para>Search for all points in the given range for each point in the reference set (which was passed to the constructor), returning the results in the neighbors and distances objects. </para>        </briefdescription>
        <detaileddescription>
<para>This means that the query set and the reference set are the same.</para><para>Each entry in the external vector corresponds to a query point. Each of these entries holds a vector which contains the indices and distances of the reference points falling into the given range.</para><para>That is:</para><para><itemizedlist>
<listitem><para>neighbors.size() and distances.size() both equal the number of query points.</para></listitem><listitem><para>neighbors[i] contains the indices of all the points in the reference set which have distances inside the given range to query point i.</para></listitem><listitem><para>distances[i] contains all of the distances corresponding to the indices contained in neighbors[i].</para></listitem><listitem><para>neighbors[i] and distances[i] are not sorted in any particular order.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range of distances in which to search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbors</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which will hold the list of neighbors for each point which fell into the given range, for each query point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>Object which will hold the list of distances for each point which fell into the given range, for each query point. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t version)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Serialize the model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="288" column="1"/>
        <referencedby refid="classmlpack_1_1range_1_1RangeSearch_1a4d1e40c0bf406280a237ca1b487e3c62" compoundref="range__search_8hpp" startline="284" endline="284">RangeSearch&lt; metric::EuclideanDistance, arma::mat, TreeType &gt;::Scores</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a7477b3e8499a6158bbe177e7f30d4947" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SingleMode</definition>
        <argsstring>() const</argsstring>
        <name>SingleMode</name>
        <briefdescription>
<para>Get whether single-tree search is being used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="272" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="272" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1adadacd63ddeadf138d834b1fdc632773" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool &amp;</type>
        <definition>bool&amp; SingleMode</definition>
        <argsstring>()</argsstring>
        <name>SingleMode</name>
        <briefdescription>
<para>Modify whether single-tree search is being used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="274" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="274" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a27ba39af83e3cb01f2e6fbec159adf0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Train</definition>
        <argsstring>(MatType referenceSet)</argsstring>
        <name>Train</name>
        <param>
          <type>MatType</type>
          <declname>referenceSet</declname>
        </param>
        <briefdescription>
<para>Set the reference set to a new reference set, and build a tree if necessary. </para>        </briefdescription>
        <detaileddescription>
<para>This method is called &apos;<ref refid="classmlpack_1_1range_1_1RangeSearch_1a27ba39af83e3cb01f2e6fbec159adf0e" kindref="member">Train()</ref>&apos; in order to match the rest of the mlpack abstractions, even though calling this &quot;training&quot; is maybe a bit of a stretch.</para><para>Use std::move to pass in the reference set if the old copy is no longer needed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>referenceSet</parametername>
</parameternamelist>
<parameterdescription>
<para>New set of reference data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1range_1_1RangeSearch_1a3d1133fe6bda66e7143fd7aab27cbd04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Train</definition>
        <argsstring>(Tree *referenceTree)</argsstring>
        <name>Train</name>
        <param>
          <type><ref refid="classmlpack_1_1range_1_1RangeSearch_1a5cbbe0e3dd87208f402ebd5a35dcd608" kindref="member">Tree</ref> *</type>
          <declname>referenceTree</declname>
        </param>
        <briefdescription>
<para>Set the reference tree to a new reference tree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="163" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classmlpack_1_1range_1_1RangeSearch" kindref="compound">RangeSearch</ref> class is a template class for performing range searches. </para>    </briefdescription>
    <detaileddescription>
<para>It is implemented in the style of a generalized tree-independent dual-tree algorithm; for more details on the actual algorithm, see the <ref refid="classmlpack_1_1range_1_1RangeSearchRules" kindref="compound">RangeSearchRules</ref> class.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MetricType</parametername>
</parameternamelist>
<parameterdescription>
<para>Metric to use for range search calculations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MatType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of data to use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TreeType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of tree to use; must satisfy the TreeType policy API. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1177">
        <label>RangeSearch&lt; MetricType, MatType, TreeType &gt;</label>
        <link refid="classmlpack_1_1range_1_1RangeSearch"/>
      </node>
      <node id="1178">
        <label>RangeSearch&lt; metric::EuclideanDistance, arma::mat, TreeType &gt;</label>
        <link refid="classmlpack_1_1range_1_1RangeSearch"/>
        <childnode refid="1177" relation="template-instance">
          <edgelabel>&lt; metric::EuclideanDistance, arma::mat, TreeType &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" line="46" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/range_search/range_search.hpp" bodystart="45" bodyend="323"/>
    <listofallmembers>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a06e4c7b3f942c628e2b3584e7ba02cbf" prot="private" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>baseCases</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a3f4bd5d0aa64ea090796725f7755287d" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>BaseCases</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1ad069c71a7bc99c59bce1c3f859e5d22b" prot="private" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>metric</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a343230e7d7344e3f7d5f5f2eb89cf2c5" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>Naive</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1af7d397adca3f411b4e2d2f977b280ce6" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>Naive</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a060864f6de9076fe26693298a2d570bd" prot="private" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>naive</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a18bb7cb0cf16d0f4ba0744c6c7ab2027" prot="private" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>oldFromNewReferences</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a9b0922f9fb5439cf21e6873f8a9a84b5" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>operator=</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a2c57ee3bbf6708990e6432d0962e2226" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>operator=</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a9292d974d50191623b9f26d7f2ccea1d" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>RangeSearch</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a6d201f3cf484ea56a37daabeb0cded94" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>RangeSearch</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a838592644923cb86943f789ca0522bd1" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>RangeSearch</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1af751a5f912b2f3eb714567b6b6ca7c2d" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>RangeSearch</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1aeb192154ad7a75d89fcc6dbb6ffc1f24" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>RangeSearch</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1afdeaba8b33d99d27772a74843e7dfbc2" prot="private" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>referenceSet</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a0a975940b302b4efec85bbe2d8b36251" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>ReferenceSet</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a92cb2297c084f56afea6f37e3c894f52" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>ReferenceTree</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1afce03afdbc14367356598962033187af" prot="private" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>referenceTree</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1aecc3c9a30f1be1fe8b602374bde73e7b" prot="private" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>scores</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a4d1e40c0bf406280a237ca1b487e3c62" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>Scores</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a0df148abcabf67c5876e942e12279f8e" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>Search</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a24f0beece99aedbee1edf5890f5bc235" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>Search</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a3868480bcd41a740550657144b5f7018" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>Search</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a72d63b74c8166dff8e1a9006905ad9ca" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a72486e26c509c1276fa97ea7917f6d6c" prot="private" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>singleMode</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a7477b3e8499a6158bbe177e7f30d4947" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>SingleMode</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1adadacd63ddeadf138d834b1fdc632773" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>SingleMode</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a27ba39af83e3cb01f2e6fbec159adf0e" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>Train</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a3d1133fe6bda66e7143fd7aab27cbd04" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>Train</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a5cbbe0e3dd87208f402ebd5a35dcd608" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>Tree</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a09dd83eb7ea58a2d5cfbdbdca5f63b88" prot="private" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>treeOwner</name></member>
      <member refid="classmlpack_1_1range_1_1RangeSearch_1a250641479dfc9c4881bdae8c960f767f" prot="public" virt="non-virtual"><scope>mlpack::range::RangeSearch</scope><name>~RangeSearch</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
