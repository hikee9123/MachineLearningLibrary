<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1kernel_1_1LinearKernel" kind="class" language="C++" prot="public">
    <compoundname>mlpack::kernel::LinearKernel</compoundname>
    <includes refid="linear__kernel_8hpp" local="no">linear_kernel.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1LinearKernel_1a4250bde5222c9a9c476fcabe3cd1dc79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>LinearKernel</definition>
        <argsstring>()</argsstring>
        <name>LinearKernel</name>
        <briefdescription>
<para>This constructor does nothing; the linear kernel has no parameters to store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/linear_kernel.hpp" line="39" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/linear_kernel.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1LinearKernel_1aa2ccb5a0533a6ba0abe6dfc1f98fbafb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;, const uint32_t)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
        </param>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>Serialize the kernel (it has no members... do nothing). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/linear_kernel.hpp" line="60" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/linear_kernel.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmlpack_1_1kernel_1_1LinearKernel_1a9cf31d3d6cf687f6f78a15ec94f46380" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecTypeA</type>
          </param>
          <param>
            <type>typename VecTypeB</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>static double Evaluate</definition>
        <argsstring>(const VecTypeA &amp;a, const VecTypeB &amp;b)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const VecTypeA &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const VecTypeB &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Simple evaluation of the dot product. </para>        </briefdescription>
        <detaileddescription>
<para>This evaluation uses Armadillo&apos;s dot() function.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>VecTypeA</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of first vector (should be arma::vec or arma::sp_vec). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>VecTypeB</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of second vector (arma::vec / arma::sp_vec). </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>K(a, b). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/kernels/linear_kernel.hpp" line="53" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/linear_kernel.hpp" bodystart="53" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The simple linear kernel (dot product). </para>    </briefdescription>
    <detaileddescription>
<para>For any two vectors <formula id="36">$ x $</formula> and <formula id="37">$ y $</formula>,</para><para><formula id="53">\[ K(x, y) = x^T y \]</formula></para><para>This kernel has no parameters and therefore the evaluation can be static. </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/kernels/linear_kernel.hpp" line="33" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/kernels/linear_kernel.hpp" bodystart="32" bodyend="61"/>
    <listofallmembers>
      <member refid="classmlpack_1_1kernel_1_1LinearKernel_1a9cf31d3d6cf687f6f78a15ec94f46380" prot="public" virt="non-virtual"><scope>mlpack::kernel::LinearKernel</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1kernel_1_1LinearKernel_1a4250bde5222c9a9c476fcabe3cd1dc79" prot="public" virt="non-virtual"><scope>mlpack::kernel::LinearKernel</scope><name>LinearKernel</name></member>
      <member refid="classmlpack_1_1kernel_1_1LinearKernel_1aa2ccb5a0533a6ba0abe6dfc1f98fbafb" prot="public" virt="non-virtual"><scope>mlpack::kernel::LinearKernel</scope><name>serialize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
