<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="go_quickstart" kind="page">
    <compoundname>go_quickstart</compoundname>
    <title>mlpack in Go quickstart guide</title>
    <detaileddescription>
<sect1 id="go_quickstart_1go_quickstart_intro">
<title>Introduction</title>
<para>This page describes how you can quickly get started using mlpack from Go and gives a few examples of usage, and pointers to deeper documentation.</para><para>This quickstart guide is also available for <ref refid="python_quickstart" kindref="compound">Python</ref>, <ref refid="cli_quickstart" kindref="compound">the command-line</ref>, <ref refid="julia_quickstart" kindref="compound">Julia</ref> and <ref refid="r_quickstart" kindref="compound">R</ref>.</para></sect1>
<sect1 id="go_quickstart_1go_quickstart_install">
<title>Installing mlpack</title>
<para>Installing the mlpack bindings for Go is somewhat time-consuming as the library must be built; you can run the following code:</para><para><programlisting><codeline><highlight class="normal">go<sp/>get<sp/>-u<sp/>-d<sp/>mlpack.org/v1/mlpack</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>${GOPATH}/src/mlpack.org/v1/mlpack</highlight></codeline>
<codeline><highlight class="normal">make<sp/>install</highlight></codeline>
</programlisting></para><para>Building the Go bindings from scratch is a little more in-depth, though. For information on that, follow the instructions on the <ref refid="build" kindref="compound">Building mlpack From Source</ref> page, and be sure to specify <computeroutput>-DBUILD_GO_BINDINGS=ON</computeroutput> to CMake;</para></sect1>
<sect1 id="go_quickstart_1go_quickstart_example">
<title>Simple mlpack quickstart example</title>
<para>As a really simple example of how to use mlpack from Go, let&apos;s do some simple classification on a subset of the standard machine learning <computeroutput>covertype</computeroutput> dataset. We&apos;ll first split the dataset into a training set and a testing set, then we&apos;ll train an mlpack random forest on the training data, and finally we&apos;ll print the accuracy of the random forest on the test dataset.</para><para>You can copy-paste this code directly into main.go to run it. <programlisting><codeline><highlight class="normal">package<sp/>main</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">import<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;mlpack.org/v1/mlpack&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;fmt&quot;</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">func<sp/>main()<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Download<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mlpack.DownloadFile(&quot;https://www.mlpack.org/datasets/covertype-small.data.csv.gz&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;data.csv.gz&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mlpack.DownloadFile(&quot;https://www.mlpack.org/datasets/covertype-small.labels.csv.gz&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;labels.csv.gz&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Extract/Unzip<sp/>the<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mlpack.UnZip(&quot;data.csv.gz&quot;,<sp/>&quot;data.csv&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dataset,<sp/>_<sp/>:=<sp/>mlpack.Load(&quot;data.csv&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>mlpack.UnZip(&quot;labels.csv.gz&quot;,<sp/>&quot;labels.csv&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>labels,<sp/>_<sp/>:=<sp/>mlpack.Load(&quot;labels.csv&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Split<sp/>the<sp/>dataset<sp/>using<sp/>mlpack.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params<sp/>:=<sp/>mlpack.PreprocessSplitOptions()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params.InputLabels<sp/>=<sp/>labels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params.TestRatio<sp/>=<sp/>0.3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params.Verbose<sp/>=<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>test,<sp/>test_labels,<sp/>train,<sp/>train_labels<sp/>:=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mlpack.PreprocessSplit(dataset,<sp/>params)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Train<sp/>a<sp/>random<sp/>forest.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_params<sp/>:=<sp/>mlpack.RandomForestOptions()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_params.NumTrees<sp/>=<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_params.MinimumLeafSize<sp/>=<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_params.PrintTrainingAccuracy<sp/>=<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_params.Training<sp/>=<sp/>train</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_params.Labels<sp/>=<sp/>train_labels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_params.Verbose<sp/>=<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_model,<sp/>_,<sp/>_<sp/>:=<sp/>mlpack.RandomForest(rf_params)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Predict<sp/>the<sp/>labels<sp/>of<sp/>the<sp/>test<sp/>points.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_params_2<sp/>:=<sp/>mlpack.RandomForestOptions()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_params_2.Test<sp/>=<sp/>test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_params_2.InputModel<sp/>=<sp/>&amp;rf_model</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rf_params_2.Verbose<sp/>=<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>_,<sp/>predictions,<sp/>_<sp/>:=<sp/>mlpack.RandomForest(rf_params_2)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Now<sp/>print<sp/>the<sp/>accuracy.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rows,<sp/>_<sp/>:=<sp/>predictions.Dims()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>var<sp/>sum<sp/>int<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>i<sp/>:=<sp/>0;<sp/>i<sp/>&lt;<sp/>rows;<sp/>i++<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(predictions.At(i,<sp/>0)<sp/>==<sp/>test_labels.At(i,<sp/>0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>sum<sp/>+<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fmt.Print(sum,<sp/>&quot;<sp/>correct<sp/>out<sp/>of<sp/>&quot;,<sp/>rows,<sp/>&quot;<sp/>(&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(float64(sum)<sp/>/<sp/>float64(rows))<sp/>*<sp/>100,<sp/>&quot;%).\n&quot;)</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>We can see that we achieve reasonably good accuracy on the test dataset (80%+); if we use the full <computeroutput>covertype.csv.gz</computeroutput>, the accuracy should increase significantly (but training will take longer).</para><para>It&apos;s easy to modify the code above to do more complex things, or to use different mlpack learners, or to interface with other machine learning toolkits.</para></sect1>
<sect1 id="go_quickstart_1go_quickstart_whatelse">
<title>What else does mlpack implement?</title>
<para>The example above has only shown a little bit of the functionality of mlpack. Lots of other commands are available with different functionality. A full list of each of these commands and full documentation can be found on the following page:</para><para><itemizedlist>
<listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/go_documentation.html">Go documentation</ulink></para></listitem></itemizedlist>
</para><para>You can also use the GoDoc to explore the <computeroutput>mlpack</computeroutput> module and its functions; every function comes with comprehensive documentation.</para><para>For more information on what mlpack does, see <ulink url="https://www.mlpack.org/">https://www.mlpack.org/</ulink>. Next, let&apos;s go through another example for providing movie recommendations with mlpack.</para></sect1>
<sect1 id="go_quickstart_1go_quickstart_movierecs">
<title>Using mlpack for movie recommendations</title>
<para>In this example, we&apos;ll train a collaborative filtering model using mlpack&apos;s <computeroutput><ulink url="https://www.mlpack.org/doc/mlpack-git/go_documentation.html#cf">Cf()</ulink></computeroutput> method. We&apos;ll train this on the MovieLens dataset from <ulink url="https://grouplens.org/datasets/movielens/,">https://grouplens.org/datasets/movielens/,</ulink> and then we&apos;ll use the model that we train to give recommendations.</para><para>You can copy-paste this code directly into main.go to run it.</para><para><programlisting><codeline><highlight class="normal">package<sp/>main</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">import<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;github.com/frictionlessdata/tableschema-go/csv&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;mlpack.org/v1/mlpack&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;gonum.org/v1/gonum/mat&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;fmt&quot;</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">func<sp/>main()<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Download<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mlpack.DownloadFile(&quot;https://www.mlpack.org/datasets/ml-20m/ratings-only.csv.gz&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ratings-only.csv.gz&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mlpack.DownloadFile(&quot;https://www.mlpack.org/datasets/ml-20m/movies.csv.gz&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;movies.csv.gz&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Extract<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mlpack.UnZip(&quot;ratings-only.csv.gz&quot;,<sp/>&quot;ratings-only.csv&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ratings,<sp/>_<sp/>:=<sp/>mlpack.Load(&quot;ratings-only.csv&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>mlpack.UnZip(&quot;movies.csv.gz&quot;,<sp/>&quot;movies.csv&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>table,<sp/>_<sp/>:=<sp/>csv.NewTable(csv.FromFile(&quot;movies.csv&quot;),<sp/>csv.LoadHeaders())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>movies,<sp/>_<sp/>:=<sp/>table.ReadColumn(&quot;title&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Split<sp/>the<sp/>dataset<sp/>using<sp/>mlpack.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params<sp/>:=<sp/>mlpack.PreprocessSplitOptions()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params.TestRatio<sp/>=<sp/>0.1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>params.Verbose<sp/>=<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ratings_test,<sp/>_,<sp/>ratings_train,<sp/>_<sp/>:=<sp/>mlpack.PreprocessSplit(ratings,<sp/>params)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Train<sp/>the<sp/>model.<sp/><sp/>Change<sp/>the<sp/>rank<sp/>to<sp/>increase/decrease<sp/>the<sp/>complexity<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>model.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params<sp/>:=<sp/>mlpack.CfOptions()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params.Training<sp/>=<sp/>ratings_train</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params.Test<sp/>=<sp/>ratings_test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params.Rank<sp/>=<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params.Verbose<sp/>=<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params.Algorithm<sp/>=<sp/>&quot;RegSVD&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>_,<sp/>cf_model<sp/>:=<sp/>mlpack.Cf(cf_params)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Now<sp/>query<sp/>the<sp/>5<sp/>top<sp/>movies<sp/>for<sp/>user<sp/>1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params_2<sp/>:=<sp/>mlpack.CfOptions()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params_2.InputModel<sp/>=<sp/>&amp;cf_model</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params_2.Recommendations<sp/>=<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params_2.Query<sp/>=<sp/>mat.NewDense(1,<sp/>1,<sp/>[]float64{1})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params_2.Verbose<sp/>=<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cf_params_2.MaxIterations<sp/>=<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>output,<sp/>_<sp/>:=<sp/>mlpack.Cf(cf_params_2)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Get<sp/>the<sp/>names<sp/>of<sp/>the<sp/>movies<sp/>for<sp/>user<sp/>1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fmt.Println(&quot;Recommendations<sp/>for<sp/>user<sp/>1&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>i<sp/>:=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fmt.Println(i,<sp/>&quot;:&quot;,<sp/>movies[int(output.At(0<sp/>,<sp/>i))])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Here is some example output, showing that user 1 seems to have good taste in movies:</para><para><programlisting><codeline><highlight class="normal">Recommendations<sp/>for<sp/>user<sp/>1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0:<sp/>Casablanca<sp/>(1942)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1:<sp/>Pan&apos;s<sp/>Labyrinth<sp/>(Laberinto<sp/>del<sp/>fauno,<sp/>El)<sp/>(2006)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>2:<sp/>Godfather,<sp/>The<sp/>(1972)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>3:<sp/>Answer<sp/>This!<sp/>(2010)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>4:<sp/>Life<sp/>Is<sp/>Beautiful<sp/>(La<sp/>Vita<sp/>è<sp/>bella)<sp/>(1997)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>5:<sp/>Adventures<sp/>of<sp/>Tintin,<sp/>The<sp/>(2011)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>6:<sp/>Dark<sp/>Knight,<sp/>The<sp/>(2008)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>7:<sp/>Out<sp/>for<sp/>Justice<sp/>(1991)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>8:<sp/>Dr.<sp/>Strangelove<sp/>or:<sp/>How<sp/>I<sp/>Learned<sp/>to<sp/>Stop<sp/>Worrying<sp/>and<sp/>Love<sp/>the<sp/>Bomb<sp/>(1964)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>9:<sp/>Schindler&apos;s<sp/>List<sp/>(1993)</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="go_quickstart_1go_quickstart_nextsteps">
<title>Next steps with mlpack</title>
<para>Now that you have done some simple work with mlpack, you have seen how it can easily plug into a data science workflow in Go. A great thing to do next would be to look at more documentation for the Go mlpack bindings:</para><para><itemizedlist>
<listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/go_documentation.html">Go mlpack binding documentation</ulink></para></listitem></itemizedlist>
</para><para>Also, mlpack is much more flexible from C++ and allows much greater functionality. So, more complicated tasks are possible if you are willing to write C++. To get started learning about mlpack in C++, the following resources might be helpful:</para><para><itemizedlist>
<listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/doxygen/tutorials.html">mlpack C++ tutorials</ulink></para></listitem><listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/doxygen/build.html">mlpack build and installation guide</ulink></para></listitem><listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/doxygen/sample.html">Simple sample C++ mlpack programs</ulink></para></listitem><listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/doxygen/index.html">mlpack Doxygen documentation homepage</ulink> </para></listitem></itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
