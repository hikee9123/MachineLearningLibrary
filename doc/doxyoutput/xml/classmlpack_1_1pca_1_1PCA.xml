<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1pca_1_1PCA" kind="class" language="C++" prot="public">
    <compoundname>mlpack::pca::PCA</compoundname>
    <includes refid="pca_8hpp" local="no">pca.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename DecompositionPolicy</type>
        <defval><ref refid="classmlpack_1_1pca_1_1ExactSVDPolicy" kindref="compound">ExactSVDPolicy</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1pca_1_1PCA_1af97ad494cc8077d8a0d660868e6c0b03" prot="private" static="no" mutable="no">
        <type>DecompositionPolicy</type>
        <definition>DecompositionPolicy decomposition</definition>
        <argsstring></argsstring>
        <name>decomposition</name>
        <briefdescription>
<para>Decomposition method used to perform principal components analysis. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="149" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1pca_1_1PCA_1a67030e1b91c3181696fd86ee85a1d87a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool scaleData</definition>
        <argsstring></argsstring>
        <name>scaleData</name>
        <briefdescription>
<para>Whether or not the data will be scaled by standard deviation when <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> is performed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="146" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1pca_1_1PCA_1a9f0b6d838b7e3513e262d7d996e108bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PCA</definition>
        <argsstring>(const bool scaleData=false, const DecompositionPolicy &amp;decomposition=DecompositionPolicy())</argsstring>
        <name>PCA</name>
        <param>
          <type>const bool</type>
          <declname>scaleData</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const DecompositionPolicy &amp;</type>
          <declname>decomposition</declname>
          <defval>DecompositionPolicy()</defval>
        </param>
        <briefdescription>
<para>Create the <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> object, specifying if the data should be scaled in each dimension by standard deviation when <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> is performed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scaleData</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to scale the data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decomposition</parametername>
</parameternamelist>
<parameterdescription>
<para>Decomposition policy to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1pca_1_1PCA_1a657771c335d4a28141e2abfbcba8c2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Apply</definition>
        <argsstring>(const arma::mat &amp;data, arma::mat &amp;transformedData, arma::vec &amp;eigVal, arma::mat &amp;eigvec)</argsstring>
        <name>Apply</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>transformedData</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>eigVal</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>eigvec</declname>
        </param>
        <briefdescription>
<para>Apply Principal Component Analysis to the provided data set. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to pass the same matrix reference for both data and transformedData.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transformedData</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to put results of <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eigVal</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to put eigenvalues into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eigvec</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to put eigenvectors (loadings) into. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="55" column="1"/>
        <referencedby refid="classmlpack_1_1pca_1_1PCA_1a1687d5cb3c520bde7db5d0f20ec552b4" compoundref="pca_8hpp" startline="94" endline="97">PCA&lt; DecompositionPolicy &gt;::Apply</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1pca_1_1PCA_1adc4a34de0f409309eb54b84d4d5a38f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Apply</definition>
        <argsstring>(const arma::mat &amp;data, arma::mat &amp;transformedData, arma::vec &amp;eigVal)</argsstring>
        <name>Apply</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>transformedData</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>eigVal</declname>
        </param>
        <briefdescription>
<para>Apply Principal Component Analysis to the provided data set. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to pass the same matrix reference for both data and transformedData.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transformedData</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to store results of <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eigVal</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to put eigenvalues into. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1pca_1_1PCA_1a3a9ed0703c201abf87306bc1c22334f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Apply</definition>
        <argsstring>(const arma::mat &amp;data, arma::mat &amp;transformedData)</argsstring>
        <name>Apply</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>transformedData</declname>
        </param>
        <briefdescription>
<para>Apply Principal Component Analysis to the provided data set. </para>        </briefdescription>
        <detaileddescription>
<para>It is safe to pass the same matrix reference for both data and transformedData. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transformedData</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to store results of <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> in. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1pca_1_1PCA_1a8c94adc9f4e3147a342f8316dd70fa9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Apply</definition>
        <argsstring>(arma::mat &amp;data, const size_t newDimension)</argsstring>
        <name>Apply</name>
        <param>
          <type>arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>newDimension</declname>
        </param>
        <briefdescription>
<para>Use <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> for dimensionality reduction on the given dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This will save the newDimension largest principal components of the data and remove the rest. The parameter returned is the amount of variance of the data that is retained; this is a value between 0 and 1. For instance, a value of 0.9 indicates that 90% of the variance present in the data was retained.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newDimension</parametername>
</parameternamelist>
<parameterdescription>
<para>New dimension of the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Amount of the variance of the data retained (between 0 and 1). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1pca_1_1PCA_1a1687d5cb3c520bde7db5d0f20ec552b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Apply</definition>
        <argsstring>(arma::mat &amp;data, const int newDimension)</argsstring>
        <name>Apply</name>
        <param>
          <type>arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>newDimension</declname>
        </param>
        <briefdescription>
<para>This overload is here to make sure int gets casted right to size_t. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="94" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" bodystart="94" bodyend="97"/>
        <references refid="classmlpack_1_1pca_1_1PCA_1a657771c335d4a28141e2abfbcba8c2e8">PCA&lt; DecompositionPolicy &gt;::Apply</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1pca_1_1PCA_1a8cd7abbd11cfd2b4a771a864bbf29eef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Apply</definition>
        <argsstring>(arma::mat &amp;data, const double varRetained)</argsstring>
        <name>Apply</name>
        <param>
          <type>arma::mat &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>varRetained</declname>
        </param>
        <briefdescription>
<para>Use <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> for dimensionality reduction on the given dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This will save as many dimensions as necessary to retain at least the given amount of variance (specified by parameter varRetained). The amount should be between 0 and 1; if the amount is 0, then only 1 dimension will be retained. If the amount is 1, then all dimensions will be retained.</para><para>The method returns the actual amount of variance retained, which will always be greater than or equal to the varRetained parameter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>varRetained</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower bound on amount of variance to retain; should be between 0 and 1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Actual amount of variance retained (between 0 and 1). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1pca_1_1PCA_1a3809cc3360d20521c50564e78a54ad0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ScaleData</definition>
        <argsstring>() const</argsstring>
        <name>ScaleData</name>
        <briefdescription>
<para>Get whether or not this <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> object will scale (by standard deviation) the data when <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> is performed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="118" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" bodystart="118" bodyend="118"/>
        <referencedby refid="classmlpack_1_1pca_1_1PCA_1a0e6d9cee4c4392ab92e9b21fde791402" compoundref="pca_8hpp" startline="121" endline="121">PCA&lt; DecompositionPolicy &gt;::ScaleData</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1pca_1_1PCA_1a0e6d9cee4c4392ab92e9b21fde791402" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool &amp;</type>
        <definition>bool&amp; ScaleData</definition>
        <argsstring>()</argsstring>
        <name>ScaleData</name>
        <briefdescription>
<para>Modify whether or not this <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> object will scale (by standard deviation) the data when <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> is performed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="121" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" bodystart="121" bodyend="121"/>
        <references refid="classmlpack_1_1pca_1_1PCA_1a3809cc3360d20521c50564e78a54ad0c" compoundref="pca_8hpp" startline="118" endline="118">PCA&lt; DecompositionPolicy &gt;::ScaleData</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1pca_1_1PCA_1a3b559eb8de9ecb7a8d6e6a620bf559fc" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ScaleData</definition>
        <argsstring>(arma::mat &amp;centeredData)</argsstring>
        <name>ScaleData</name>
        <param>
          <type>arma::mat &amp;</type>
          <declname>centeredData</declname>
        </param>
        <briefdescription>
<para>Scaling the data is when we reduce the variance of each dimension to 1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="125" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" bodystart="125" bodyend="142"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class implements principal components analysis (<ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref>). </para>    </briefdescription>
    <detaileddescription>
<para>This is a common, widely-used technique that is often used for either dimensionality reduction or transforming data into a better basis. Further information on <ref refid="classmlpack_1_1pca_1_1PCA" kindref="compound">PCA</ref> can be found in almost any statistics or machine learning textbook, and all over the internet. </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" line="34" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/pca/pca.hpp" bodystart="33" bodyend="150"/>
    <listofallmembers>
      <member refid="classmlpack_1_1pca_1_1PCA_1a657771c335d4a28141e2abfbcba8c2e8" prot="public" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>Apply</name></member>
      <member refid="classmlpack_1_1pca_1_1PCA_1adc4a34de0f409309eb54b84d4d5a38f9" prot="public" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>Apply</name></member>
      <member refid="classmlpack_1_1pca_1_1PCA_1a3a9ed0703c201abf87306bc1c22334f6" prot="public" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>Apply</name></member>
      <member refid="classmlpack_1_1pca_1_1PCA_1a8c94adc9f4e3147a342f8316dd70fa9d" prot="public" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>Apply</name></member>
      <member refid="classmlpack_1_1pca_1_1PCA_1a1687d5cb3c520bde7db5d0f20ec552b4" prot="public" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>Apply</name></member>
      <member refid="classmlpack_1_1pca_1_1PCA_1a8cd7abbd11cfd2b4a771a864bbf29eef" prot="public" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>Apply</name></member>
      <member refid="classmlpack_1_1pca_1_1PCA_1af97ad494cc8077d8a0d660868e6c0b03" prot="private" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>decomposition</name></member>
      <member refid="classmlpack_1_1pca_1_1PCA_1a9f0b6d838b7e3513e262d7d996e108bb" prot="public" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>PCA</name></member>
      <member refid="classmlpack_1_1pca_1_1PCA_1a67030e1b91c3181696fd86ee85a1d87a" prot="private" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>scaleData</name></member>
      <member refid="classmlpack_1_1pca_1_1PCA_1a3809cc3360d20521c50564e78a54ad0c" prot="public" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>ScaleData</name></member>
      <member refid="classmlpack_1_1pca_1_1PCA_1a0e6d9cee4c4392ab92e9b21fde791402" prot="public" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>ScaleData</name></member>
      <member refid="classmlpack_1_1pca_1_1PCA_1a3b559eb8de9ecb7a8d6e6a620bf559fc" prot="private" virt="non-virtual"><scope>mlpack::pca::PCA</scope><name>ScaleData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
