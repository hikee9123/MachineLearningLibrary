<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1lmnn_1_1LMNN" kind="class" language="C++" prot="public">
    <compoundname>mlpack::lmnn::LMNN</compoundname>
    <includes refid="lmnn_8hpp" local="no">lmnn.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename MetricType</type>
        <defval><ref refid="namespacemlpack_1_1metric_1a42614a1b47a4de6037e67742b94dd24d" kindref="member">metric::SquaredEuclideanDistance</ref></defval>
      </param>
      <param>
        <type>typename OptimizerType</type>
        <defval>ens::AMSGrad</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNN_1a513b486f0725823790c22399f0c054a8" prot="private" static="no" mutable="no">
        <type>const arma::mat &amp;</type>
        <definition>const arma::mat&amp; dataset</definition>
        <argsstring></argsstring>
        <name>dataset</name>
        <briefdescription>
<para>Dataset reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="116" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNN_1a9389e4770ba454a2e14f870491495cb2" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t k</definition>
        <argsstring></argsstring>
        <name>k</name>
        <briefdescription>
<para>Number of target points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="122" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNN_1a27d52672c552cd7f78c89c94dbb6375d" prot="private" static="no" mutable="no">
        <type>const arma::Row&lt; size_t &gt; &amp;</type>
        <definition>const arma::Row&lt;size_t&gt;&amp; labels</definition>
        <argsstring></argsstring>
        <name>labels</name>
        <briefdescription>
<para>Labels reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="119" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNN_1ad069c71a7bc99c59bce1c3f859e5d22b" prot="private" static="no" mutable="no">
        <type>MetricType</type>
        <definition>MetricType metric</definition>
        <argsstring></argsstring>
        <name>metric</name>
        <briefdescription>
<para>Metric to be used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="131" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNN_1af46443e4b38268e2b061773090207a09" prot="private" static="no" mutable="no">
        <type>OptimizerType</type>
        <definition>OptimizerType optimizer</definition>
        <argsstring></argsstring>
        <name>optimizer</name>
        <briefdescription>
<para>The optimizer to use. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="134" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNN_1aa1e1a65ba5db157ef93b416260dda43d" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t range</definition>
        <argsstring></argsstring>
        <name>range</name>
        <briefdescription>
<para>Range after which impostors need to be recalculated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="128" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNN_1a8e8f340682893ac20981cfbfb76372b8" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double regularization</definition>
        <argsstring></argsstring>
        <name>regularization</name>
        <briefdescription>
<para>Regularization value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="125" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1a212df5d9b57184556420c87ef7335926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LMNN</definition>
        <argsstring>(const arma::mat &amp;dataset, const arma::Row&lt; size_t &gt; &amp;labels, const size_t k, const MetricType metric=MetricType())</argsstring>
        <name>LMNN</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>dataset</declname>
        </param>
        <param>
          <type>const arma::Row&lt; size_t &gt; &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const MetricType</type>
          <declname>metric</declname>
          <defval>MetricType()</defval>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classmlpack_1_1lmnn_1_1LMNN" kindref="compound">LMNN</ref> object, passing a dataset (distance metric is learned using this dataset) and labels. </para>        </briefdescription>
        <detaileddescription>
<para>Initialization will copy both dataset and labels matrices to internal copies.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataset</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dataset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dataset labels. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of targets to consider. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metric</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of metric used for computation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1aff320b9a86b77a150e630c01d5888273" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::mat &amp;</type>
        <definition>const arma::mat&amp; Dataset</definition>
        <argsstring>() const</argsstring>
        <name>Dataset</name>
        <briefdescription>
<para>Get the dataset reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="90" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1ab749ea30c4c3d750ef3a619f32dc3e75" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const size_t &amp;</type>
        <definition>const size_t&amp; K</definition>
        <argsstring>() const</argsstring>
        <name>K</name>
        <briefdescription>
<para>Access the value of k. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="106" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1aeae9eca1b61b389943775d6eeb8325b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t K</definition>
        <argsstring>()</argsstring>
        <name>K</name>
        <briefdescription>
<para>Modify the value of k. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="108" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1ae68718a757e9635f87377fd3935ca20d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::Row&lt; size_t &gt; &amp;</type>
        <definition>const arma::Row&lt;size_t&gt;&amp; Labels</definition>
        <argsstring>() const</argsstring>
        <name>Labels</name>
        <briefdescription>
<para>Get the labels reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="93" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1a55126379a6e9673a59546f4e446e9ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>CallbackTypes</declname>
            <defname>CallbackTypes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void LearnDistance</definition>
        <argsstring>(arma::mat &amp;outputMatrix, CallbackTypes &amp;&amp;... callbacks)</argsstring>
        <name>LearnDistance</name>
        <param>
          <type>arma::mat &amp;</type>
          <declname>outputMatrix</declname>
        </param>
        <param>
          <type>CallbackTypes &amp;&amp;...</type>
          <declname>callbacks</declname>
        </param>
        <briefdescription>
<para>Perform Large Margin Nearest Neighbors metric learning. </para>        </briefdescription>
        <detaileddescription>
<para>The output distance matrix is written into the passed reference. If the <ref refid="classmlpack_1_1lmnn_1_1LMNN_1a55126379a6e9673a59546f4e446e9ada" kindref="member">LearnDistance()</ref> is called with an outputMatrix with correct dimensions, then that matrix will be used as the starting point for optimization.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CallbackTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>Types of Callback functions. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outputMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Covariance matrix of Mahalanobis distance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function for ensmallen optimizer <computeroutput>OptimizerType</computeroutput>. See <ulink url="https://www.ensmallen.org/docs.html#callback-documentation">https://www.ensmallen.org/docs.html#callback-documentation</ulink>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1a3bdf808beacdb2f464caa78076a23a0a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const OptimizerType &amp;</type>
        <definition>const OptimizerType&amp; Optimizer</definition>
        <argsstring>() const</argsstring>
        <name>Optimizer</name>
        <briefdescription>
<para>Get the optimizer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="111" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1a213f61b8936eadf8a162e45b4c6188d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>OptimizerType &amp;</type>
        <definition>OptimizerType&amp; Optimizer</definition>
        <argsstring>()</argsstring>
        <name>Optimizer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="112" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1a8a26c8724520d749b483fe8dcfe7416b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const size_t &amp;</type>
        <definition>const size_t&amp; Range</definition>
        <argsstring>() const</argsstring>
        <name>Range</name>
        <briefdescription>
<para>Access the range value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="101" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1ab2cebd1b43cb779465e7323255112bb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t &amp;</type>
        <definition>size_t&amp; Range</definition>
        <argsstring>()</argsstring>
        <name>Range</name>
        <briefdescription>
<para>Modify the range value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="103" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1ad3a3c8f810d08e2e922b3c30e29b7f11" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double &amp;</type>
        <definition>const double&amp; Regularization</definition>
        <argsstring>() const</argsstring>
        <name>Regularization</name>
        <briefdescription>
<para>Access the regularization value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="96" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNN_1a9c741ac26a2c0ee8bb0fbe52534dd544" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; Regularization</definition>
        <argsstring>()</argsstring>
        <name>Regularization</name>
        <briefdescription>
<para>Modify the regularization value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="98" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An implementation of Large Margin nearest neighbor metric learning technique. </para>    </briefdescription>
    <detaileddescription>
<para>The method seeks to improve clustering &amp; classification algorithms on a dataset by transforming the dataset representation in a more convenient form for them. It introduces the concept of target neighbors and impostors, focusing on the idea that the distance between impostors and the perimeters established by target neighbors should be large and that between target neighbors and data point should be small. It requires the knowledge of target neighbors beforehand. Moreover, target neighbors once initialized remain same.</para><para>For more details, see the following published paper:</para><para><programlisting><codeline><highlight class="normal">@ARTICLE{weinberger09distance,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author<sp/>=<sp/>{Weinberger,<sp/>K.Q.<sp/>and<sp/>Saul,<sp/>L.K.},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title<sp/>=<sp/>{{Distance<sp/>metric<sp/>learning<sp/>for<sp/>large<sp/>margin<sp/>nearest<sp/>neighbor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>classification}},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>journal<sp/>=<sp/>{The<sp/>Journal<sp/>of<sp/>Machine<sp/>Learning<sp/>Research},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year<sp/>=<sp/>{2009},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>volume<sp/>=<sp/>{10},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pages<sp/>=<sp/>{207--244},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>publisher<sp/>=<sp/>{MIT<sp/>Press}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MetricType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of metric to use for computation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OptimizerType</parametername>
</parameternamelist>
<parameterdescription>
<para>Optimizer to use for developing distance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" line="56" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn.hpp" bodystart="55" bodyend="135"/>
    <listofallmembers>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1a513b486f0725823790c22399f0c054a8" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>dataset</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1aff320b9a86b77a150e630c01d5888273" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>Dataset</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1a9389e4770ba454a2e14f870491495cb2" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>k</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1ab749ea30c4c3d750ef3a619f32dc3e75" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>K</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1aeae9eca1b61b389943775d6eeb8325b7" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>K</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1a27d52672c552cd7f78c89c94dbb6375d" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>labels</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1ae68718a757e9635f87377fd3935ca20d" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>Labels</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1a55126379a6e9673a59546f4e446e9ada" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>LearnDistance</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1a212df5d9b57184556420c87ef7335926" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>LMNN</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1ad069c71a7bc99c59bce1c3f859e5d22b" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>metric</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1a3bdf808beacdb2f464caa78076a23a0a" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>Optimizer</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1a213f61b8936eadf8a162e45b4c6188d0" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>Optimizer</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1af46443e4b38268e2b061773090207a09" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>optimizer</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1aa1e1a65ba5db157ef93b416260dda43d" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>range</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1a8a26c8724520d749b483fe8dcfe7416b" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>Range</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1ab2cebd1b43cb779465e7323255112bb4" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>Range</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1a8e8f340682893ac20981cfbfb76372b8" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>regularization</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1ad3a3c8f810d08e2e922b3c30e29b7f11" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>Regularization</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNN_1a9c741ac26a2c0ee8bb0fbe52534dd544" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNN</scope><name>Regularization</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
