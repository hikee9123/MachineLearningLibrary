<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1neighbor_1_1RASearch" kind="class" language="C++" prot="public">
    <compoundname>mlpack::neighbor::RASearch</compoundname>
    <includes refid="ra__search_8hpp" local="no">ra_search.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>SortPolicy</declname>
        <defname>SortPolicy</defname>
        <defval><ref refid="namespacemlpack_1_1neighbor_1af3f11fce33c041aa26b1c91107f71b0f" kindref="member">NearestNeighborSort</ref></defval>
      </param>
      <param>
        <type>typename</type>
        <declname>MetricType</declname>
        <defname>MetricType</defname>
        <defval><ref refid="namespacemlpack_1_1metric_1a0306f114fdf32dcdfa8f015408cfc37d" kindref="member">metric::EuclideanDistance</ref></defval>
      </param>
      <param>
        <type>typename</type>
        <declname>MatType</declname>
        <defname>MatType</defname>
        <defval>arma::mat</defval>
      </param>
      <param>
        <type>template&lt; typename TreeMetricType, typename TreeStatType, typename TreeMatType &gt; class</type>
        <declname>TreeType</declname>
        <defname>TreeType</defname>
        <defval><ref refid="namespacemlpack_1_1tree_1a73c2146f8d1da65d927c7746bfe7e750" kindref="member">tree::KDTree</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmlpack_1_1neighbor_1_1RASearch_1a23f60d6d543928c40d96f87711eeba19" prot="public" static="no">
        <type>TreeType&lt; MetricType, <ref refid="classmlpack_1_1neighbor_1_1RAQueryStat" kindref="compound">RAQueryStat</ref>&lt; SortPolicy &gt;, MatType &gt;</type>
        <definition>typedef TreeType&lt;MetricType, RAQueryStat&lt;SortPolicy&gt;, MatType&gt; Tree</definition>
        <argsstring></argsstring>
        <name>Tree</name>
        <briefdescription>
<para>Convenience typedef. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="81" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1a20f4c4490bc8ecbdd1ffcb79acce6035" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double alpha</definition>
        <argsstring></argsstring>
        <name>alpha</name>
        <briefdescription>
<para>The desired success probability (between 0 and 1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="386" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1a3c423bae8b44c1c33e948bf23decd7f9" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool firstLeafExact</definition>
        <argsstring></argsstring>
        <name>firstLeafExact</name>
        <briefdescription>
<para>If true, we will traverse to the first leaf without approximation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="390" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1ad069c71a7bc99c59bce1c3f859e5d22b" prot="private" static="no" mutable="no">
        <type>MetricType</type>
        <definition>MetricType metric</definition>
        <argsstring></argsstring>
        <name>metric</name>
        <briefdescription>
<para>Instantiation of kernel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="396" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1a060864f6de9076fe26693298a2d570bd" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool naive</definition>
        <argsstring></argsstring>
        <name>naive</name>
        <briefdescription>
<para>Indicates if naive random sampling on the set is being used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="379" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1a18bb7cb0cf16d0f4ba0744c6c7ab2027" prot="private" static="no" mutable="no">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; oldFromNewReferences</definition>
        <argsstring></argsstring>
        <name>oldFromNewReferences</name>
        <briefdescription>
<para>Permutations of reference points during tree building. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="367" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1afdeaba8b33d99d27772a74843e7dfbc2" prot="private" static="no" mutable="no">
        <type>const MatType *</type>
        <definition>const MatType* referenceSet</definition>
        <argsstring></argsstring>
        <name>referenceSet</name>
        <briefdescription>
<para>Reference dataset. In some situations we may own this dataset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="371" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1afce03afdbc14367356598962033187af" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1neighbor_1_1RASearch_1a23f60d6d543928c40d96f87711eeba19" kindref="member">Tree</ref> *</type>
        <definition>Tree* referenceTree</definition>
        <argsstring></argsstring>
        <name>referenceTree</name>
        <briefdescription>
<para>Pointer to the root of the reference tree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="369" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1a75bf9c04028f0908231497715f1eda12" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool sampleAtLeaves</definition>
        <argsstring></argsstring>
        <name>sampleAtLeaves</name>
        <briefdescription>
<para>Whether or not sampling is done at the leaves. Faster, but less accurate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="388" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1a91bfd33ad72709c4da52441df886dc02" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool setOwner</definition>
        <argsstring></argsstring>
        <name>setOwner</name>
        <briefdescription>
<para>If true, we are responsible for deleting the dataset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="376" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1a72486e26c509c1276fa97ea7917f6d6c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool singleMode</definition>
        <argsstring></argsstring>
        <name>singleMode</name>
        <briefdescription>
<para>Indicates if single-tree search is being used (opposed to dual-tree). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="381" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1abf4543b8d57210df462ad0940cf2fe9d" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t singleSampleLimit</definition>
        <argsstring></argsstring>
        <name>singleSampleLimit</name>
        <briefdescription>
<para>The limit on the number of points in the largest node that can be approximated by sampling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="393" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1ae5f7c26321910a384f6f0d37910858a2" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double tau</definition>
        <argsstring></argsstring>
        <name>tau</name>
        <briefdescription>
<para>The rank-approximation in percentile of the data (between 0 and 100). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="384" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1neighbor_1_1RASearch_1a09dd83eb7ea58a2d5cfbdbdca5f63b88" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool treeOwner</definition>
        <argsstring></argsstring>
        <name>treeOwner</name>
        <briefdescription>
<para>If true, this object created the trees and is responsible for them. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="374" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="374" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmlpack_1_1neighbor_1_1RASearch_1aba6992841b00d5aa2a2aeca9ce1423d7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class LeafSizeRAWrapper&lt; TreeType &gt;</definition>
        <argsstring></argsstring>
        <name>LeafSizeRAWrapper&lt; TreeType &gt;</name>
        <briefdescription>
<para>For access to mappings when building models. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="396" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="399" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a2e2e09ad4d126aa5c72648e5e36198ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RASearch</definition>
        <argsstring>(MatType referenceSet, const bool naive=false, const bool singleMode=false, const double tau=5, const double alpha=0.95, const bool sampleAtLeaves=false, const bool firstLeafExact=false, const size_t singleSampleLimit=20, const MetricType metric=MetricType())</argsstring>
        <name>RASearch</name>
        <param>
          <type>MatType</type>
          <declname>referenceSet</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>naive</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>singleMode</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>tau</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
          <defval>0.95</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>sampleAtLeaves</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>firstLeafExact</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>singleSampleLimit</declname>
          <defval>20</defval>
        </param>
        <param>
          <type>const MetricType</type>
          <declname>metric</declname>
          <defval>MetricType()</defval>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classmlpack_1_1neighbor_1_1RASearch" kindref="compound">RASearch</ref> object, passing both a reference dataset (this is the dataset that will be searched). </para>        </briefdescription>
        <detaileddescription>
<para>Optionally, perform the computation in naive mode or single-tree mode. An initialized distance metric can be given, for cases where the metric has internal data (i.e. the distance::MahalanobisDistance class).</para><para>This method will copy the matrices to internal copies, which are rearranged during tree-building. If you don&apos;t need to keep the reference dataset, you can use std::move() to remove the overhead of making copies. Using std::move() transfers the ownership of the dataset.</para><para>tau, the rank-approximation parameter, specifies that we are looking for k neighbors with probability alpha of being in the top tau percent of nearest neighbors. So, as an example, if our dataset has 1000 points, and we want 5 nearest neighbors with 95% probability of being in the top 5% of nearest neighbors (or, the top 50 nearest neighbors), we set k = 5, tau = 5, and alpha = 0.95.</para><para>The method will fail (and throw a std::invalid_argument exception) if the value of tau is too low: tau must be set such that the number of points in the corresponding percentile of the data is greater than k. Thus, if we choose tau = 0.1 with a dataset of 1000 points and k = 5, then we are attempting to choose 5 nearest neighbors out of the closest 1 point <ndash/> this is invalid.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>referenceSet</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of reference points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>naive</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the rank-approximate search will be performed by directly sampling the whole set instead of using the stratified sampling on the tree. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>singleMode</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, single-tree search will be used (as opposed to dual-tree search). This is useful when <ref refid="classmlpack_1_1neighbor_1_1RASearch_1a0de302ca0602fe721ac01f073d5e630f" kindref="member">Search()</ref> will be called with few query points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metric</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional instance of the MetricType class. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>The rank-approximation in percentile of the data. The default value is 5%. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired success probability. The default value is 0.95. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampleAtLeaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample at leaves for faster but less accurate computation. This defaults to &apos;false&apos;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstLeafExact</parametername>
</parameternamelist>
<parameterdescription>
<para>Traverse to the first leaf without approximation. This can ensure that the query definitely finds its (near) duplicate if there exists one. This defaults to &apos;false&apos; for now. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>singleSampleLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limit on the largest node that can be approximated by sampling. This defaults to 20. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a71c2c551b7ed51e42515edd5ab00b255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RASearch</definition>
        <argsstring>(Tree *referenceTree, const bool singleMode=false, const double tau=5, const double alpha=0.95, const bool sampleAtLeaves=false, const bool firstLeafExact=false, const size_t singleSampleLimit=20, const MetricType metric=MetricType())</argsstring>
        <name>RASearch</name>
        <param>
          <type><ref refid="classmlpack_1_1neighbor_1_1RASearch_1a23f60d6d543928c40d96f87711eeba19" kindref="member">Tree</ref> *</type>
          <declname>referenceTree</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>singleMode</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>tau</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
          <defval>0.95</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>sampleAtLeaves</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>firstLeafExact</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>singleSampleLimit</declname>
          <defval>20</defval>
        </param>
        <param>
          <type>const MetricType</type>
          <declname>metric</declname>
          <defval>MetricType()</defval>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classmlpack_1_1neighbor_1_1RASearch" kindref="compound">RASearch</ref> object with the given pre-constructed reference tree. </para>        </briefdescription>
        <detaileddescription>
<para>It is assumed that the points in the tree&apos;s dataset correspond to the reference set. Optionally, choose to use single-tree mode. Naive mode is not available as an option for this constructor; instead, to run naive computation, use a different constructor. Additionally, an instantiated distance metric can be given, for cases where the distance metric holds data.</para><para>There is no copying of the data matrices in this constructor (because tree-building is not necessary), so this is the constructor to use when copies absolutely must be avoided.</para><para>tau, the rank-approximation parameter, specifies that we are looking for k neighbors with probability alpha of being in the top tau percent of nearest neighbors. So, as an example, if our dataset has 1000 points, and we want 5 nearest neighbors with 95% probability of being in the top 5% of nearest neighbors (or, the top 50 nearest neighbors), we set k = 5, tau = 5, and alpha = 0.95.</para><para>The method will fail (and throw a std::invalid_argument exception) if the value of tau is too low: tau must be set such that the number of points in the corresponding percentile of the data is greater than k. Thus, if we choose tau = 0.1 with a dataset of 1000 points and k = 5, then we are attempting to choose 5 nearest neighbors out of the closest 1 point <ndash/> this is invalid.</para><para><simplesect kind="note"><para>Tree-building may (at least with BinarySpaceTree) modify the ordering of a matrix, so be aware that the results you get from <ref refid="classmlpack_1_1neighbor_1_1RASearch_1a0de302ca0602fe721ac01f073d5e630f" kindref="member">Search()</ref> will correspond to the modified matrix.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>referenceTree</parametername>
</parameternamelist>
<parameterdescription>
<para>Pre-built tree for reference points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>singleMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether single-tree computation should be used (as opposed to dual-tree computation). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>The rank-approximation in percentile of the data. The default value is 5%. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired success probability. The default value is 0.95. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampleAtLeaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample at leaves for faster but less accurate computation. This defaults to &apos;false&apos;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstLeafExact</parametername>
</parameternamelist>
<parameterdescription>
<para>Traverse to the first leaf without approximation. This can ensure that the query definitely finds its (near) duplicate if there exists one. This defaults to &apos;false&apos; for now. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>singleSampleLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limit on the largest node that can be approximated by sampling. This defaults to 20. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metric</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated distance metric. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a796e8bc5d64b5f5d479be42faa9156d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RASearch</definition>
        <argsstring>(const bool naive=false, const bool singleMode=false, const double tau=5, const double alpha=0.95, const bool sampleAtLeaves=false, const bool firstLeafExact=false, const size_t singleSampleLimit=20, const MetricType metric=MetricType())</argsstring>
        <name>RASearch</name>
        <param>
          <type>const bool</type>
          <declname>naive</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>singleMode</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>tau</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
          <defval>0.95</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>sampleAtLeaves</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>firstLeafExact</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const size_t</type>
          <declname>singleSampleLimit</declname>
          <defval>20</defval>
        </param>
        <param>
          <type>const MetricType</type>
          <declname>metric</declname>
          <defval>MetricType()</defval>
        </param>
        <briefdescription>
<para>Create an <ref refid="classmlpack_1_1neighbor_1_1RASearch" kindref="compound">RASearch</ref> object with no reference data. </para>        </briefdescription>
        <detaileddescription>
<para>If <ref refid="classmlpack_1_1neighbor_1_1RASearch_1a0de302ca0602fe721ac01f073d5e630f" kindref="member">Search()</ref> is called before a reference set is set with <ref refid="classmlpack_1_1neighbor_1_1RASearch_1a27ba39af83e3cb01f2e6fbec159adf0e" kindref="member">Train()</ref>, an exception will be thrown.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>naive</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether naive (brute-force) search should be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>singleMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether single-tree computation should be used (as opposed to dual-tree computation). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tau</parametername>
</parameternamelist>
<parameterdescription>
<para>The rank-approximation in percentile of the data. The default value is 5%. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired success probability. The default value is 0.95. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampleAtLeaves</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample at leaves for faster but less accurate computation. This defaults to &apos;false&apos;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>firstLeafExact</parametername>
</parameternamelist>
<parameterdescription>
<para>Traverse to the first leaf without approximation. This can ensure that the query definitely finds its (near) duplicate if there exists one. This defaults to &apos;false&apos; for now. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>singleSampleLimit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limit on the largest node that can be approximated by sampling. This defaults to 20. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metric</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated distance metric. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a68b835e379f6b9375bbe6874357eb978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>~RASearch</definition>
        <argsstring>()</argsstring>
        <name>~RASearch</name>
        <briefdescription>
<para>Delete the <ref refid="classmlpack_1_1neighbor_1_1RASearch" kindref="compound">RASearch</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>The tree is the only member we are responsible for deleting. The others will take care of themselves. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a500ecd077d5cc5fdbf6ceb095d8de9e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Alpha</definition>
        <argsstring>() const</argsstring>
        <name>Alpha</name>
        <briefdescription>
<para>Get the desired success probability. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="342" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1acbb0e4747a3a307bee88bad71e5eeaf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; Alpha</definition>
        <argsstring>()</argsstring>
        <name>Alpha</name>
        <briefdescription>
<para>Modify the desired success probability. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="344" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="344" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a17ec6e467897eb8aee3b519e0758e77d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool FirstLeafExact</definition>
        <argsstring>() const</argsstring>
        <name>FirstLeafExact</name>
        <briefdescription>
<para>Get whether or not we traverse to the first leaf without approximation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="352" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="352" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1aca2eb648feb965d3bcb0b0b73f8b2b0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool &amp;</type>
        <definition>bool&amp; FirstLeafExact</definition>
        <argsstring>()</argsstring>
        <name>FirstLeafExact</name>
        <briefdescription>
<para>Modify whether or not we traverse to the first leaf without approximation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="354" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="354" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a343230e7d7344e3f7d5f5f2eb89cf2c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Naive</definition>
        <argsstring>() const</argsstring>
        <name>Naive</name>
        <briefdescription>
<para>Get whether or not naive (brute-force) search is used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="327" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1af7d397adca3f411b4e2d2f977b280ce6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool &amp;</type>
        <definition>bool&amp; Naive</definition>
        <argsstring>()</argsstring>
        <name>Naive</name>
        <briefdescription>
<para>Modify whether or not naive (brute-force) search is used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="329" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="329" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a0a975940b302b4efec85bbe2d8b36251" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const MatType &amp;</type>
        <definition>const MatType&amp; ReferenceSet</definition>
        <argsstring>() const</argsstring>
        <name>ReferenceSet</name>
        <briefdescription>
<para>Access the reference set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="324" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="324" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a769fa33810494d3cc0abdd8578daba67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ResetQueryTree</definition>
        <argsstring>(Tree *queryTree) const</argsstring>
        <name>ResetQueryTree</name>
        <param>
          <type><ref refid="classmlpack_1_1neighbor_1_1RASearch_1a23f60d6d543928c40d96f87711eeba19" kindref="member">Tree</ref> *</type>
          <declname>queryTree</declname>
        </param>
        <briefdescription>
<para>This function recursively resets the <ref refid="classmlpack_1_1neighbor_1_1RAQueryStat" kindref="compound">RAQueryStat</ref> of the given query tree to set &apos;bound&apos; to SortPolicy::WorstDistance and &apos;numSamplesMade&apos; to 0. </para>        </briefdescription>
        <detaileddescription>
<para>This allows a user to perform multiple searches with the same query tree, possibly with different levels of approximation without requiring to build a new pair of trees for every new (approximate) search.</para><para>If <ref refid="classmlpack_1_1neighbor_1_1RASearch_1a0de302ca0602fe721ac01f073d5e630f" kindref="member">Search()</ref> is called multiple times with the same query tree without calling <ref refid="classmlpack_1_1neighbor_1_1RASearch_1a769fa33810494d3cc0abdd8578daba67" kindref="member">ResetQueryTree()</ref>, the results may not satisfy the theoretical guarantees provided by the rank-approximate neighbor search algorithm.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queryTree</parametername>
</parameternamelist>
<parameterdescription>
<para>Tree whose statistics should be reset. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1aa9dd91d6b96e1d0b343c3cec27372036" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SampleAtLeaves</definition>
        <argsstring>() const</argsstring>
        <name>SampleAtLeaves</name>
        <briefdescription>
<para>Get whether or not sampling is done at the leaves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="347" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="347" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a9f6d54dd0424f827becc2e2e9969b1bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool &amp;</type>
        <definition>bool&amp; SampleAtLeaves</definition>
        <argsstring>()</argsstring>
        <name>SampleAtLeaves</name>
        <briefdescription>
<para>Modify whether or not sampling is done at the leaves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="349" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="349" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a0de302ca0602fe721ac01f073d5e630f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Search</definition>
        <argsstring>(const MatType &amp;querySet, const size_t k, arma::Mat&lt; size_t &gt; &amp;neighbors, arma::mat &amp;distances)</argsstring>
        <name>Search</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>querySet</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>neighbors</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>distances</declname>
        </param>
        <briefdescription>
<para>Compute the rank approximate nearest neighbors of each query point in the query set and store the output in the given matrices. </para>        </briefdescription>
        <detaileddescription>
<para>The matrices will be set to the size of n columns by k rows, where n is the number of points in the query dataset and k is the number of neighbors being searched for.</para><para>If querySet is small or only contains one point, it can be faster to do single-tree search; single-tree search can be set with the <ref refid="classmlpack_1_1neighbor_1_1RASearch_1adadacd63ddeadf138d834b1fdc632773" kindref="member">SingleMode()</ref> function or in the constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>querySet</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of query points (can be a single point). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of neighbors to search for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbors</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix storing lists of neighbors for each query point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix storing distances of neighbors for each query point. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a9a8b402b4af23e9ebe2143139b3a6b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Search</definition>
        <argsstring>(Tree *queryTree, const size_t k, arma::Mat&lt; size_t &gt; &amp;neighbors, arma::mat &amp;distances)</argsstring>
        <name>Search</name>
        <param>
          <type><ref refid="classmlpack_1_1neighbor_1_1RASearch_1a23f60d6d543928c40d96f87711eeba19" kindref="member">Tree</ref> *</type>
          <declname>queryTree</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>neighbors</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>distances</declname>
        </param>
        <briefdescription>
<para>Compute the rank approximate nearest neighbors of each point in the pre-built query tree and store the output in the given matrices. </para>        </briefdescription>
        <detaileddescription>
<para>The matrices will be set to the size of n columns by k rows, where n is the number of points in the query dataset and k is the number of neighbors being searched for.</para><para>If singleMode or naive is enabled, then this method will throw a std::invalid_argument exception; calling this function implies a dual-tree algorithm.</para><para><simplesect kind="note"><para>If the tree type you are using modifies the data matrix, be aware that the results returned from this function will be with respect to the modified data matrix.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queryTree</parametername>
</parameternamelist>
<parameterdescription>
<para>Tree built on query points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of neighbors to search for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbors</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix storing lists of neighbors for each query point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix storing distances of neighbors for each query point. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a619c7d4931e628a0c199159c57b34cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Search</definition>
        <argsstring>(const size_t k, arma::Mat&lt; size_t &gt; &amp;neighbors, arma::mat &amp;distances)</argsstring>
        <name>Search</name>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>neighbors</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>distances</declname>
        </param>
        <briefdescription>
<para>Compute the rank approximate nearest neighbors of each point in the reference set (that is, the query set is taken to be the reference set), and store the output in the given matrices. </para>        </briefdescription>
        <detaileddescription>
<para>The matrices will be set to the size of n columns by k rows, where n is the number of points in the query dataset and k is the number of neighbors being searched for.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of neighbors to search for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>neighbors</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix storing lists of neighbors for each point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix storing distances of neighbors for each query point. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a65cba07328997659bec80b9879b15a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>Serialize the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="363" column="1"/>
        <referencedby refid="classmlpack_1_1neighbor_1_1RASearch_1ae78a7b8e9c96a2dbf646a27efee047b1" compoundref="ra__search_8hpp" startline="359" endline="359">RASearch&lt; NearestNeighborSort, metric::EuclideanDistance, arma::mat, TreeType &gt;::SingleSampleLimit</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a7477b3e8499a6158bbe177e7f30d4947" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool SingleMode</definition>
        <argsstring>() const</argsstring>
        <name>SingleMode</name>
        <briefdescription>
<para>Get whether or not single-tree search is used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="332" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="332" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1adadacd63ddeadf138d834b1fdc632773" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool &amp;</type>
        <definition>bool&amp; SingleMode</definition>
        <argsstring>()</argsstring>
        <name>SingleMode</name>
        <briefdescription>
<para>Modify whether or not single-tree search is used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="334" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a3a2580f686a9de3078e499b1280e2a9f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t SingleSampleLimit</definition>
        <argsstring>() const</argsstring>
        <name>SingleSampleLimit</name>
        <briefdescription>
<para>Get the limit on the size of a node that can be approximated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="357" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="357" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1ae78a7b8e9c96a2dbf646a27efee047b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t &amp;</type>
        <definition>size_t&amp; SingleSampleLimit</definition>
        <argsstring>()</argsstring>
        <name>SingleSampleLimit</name>
        <briefdescription>
<para>Modify the limit on the size of a node that can be approximation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="359" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="359" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a4a4b0fafde4cc4c856a53025dc8c4c21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Tau</definition>
        <argsstring>() const</argsstring>
        <name>Tau</name>
        <briefdescription>
<para>Get the rank-approximation in percentile of the data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="337" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1ad522d61ed716a322376adea25ebdbc90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; Tau</definition>
        <argsstring>()</argsstring>
        <name>Tau</name>
        <briefdescription>
<para>Modify the rank-approximation in percentile of the data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="339" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a27ba39af83e3cb01f2e6fbec159adf0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Train</definition>
        <argsstring>(MatType referenceSet)</argsstring>
        <name>Train</name>
        <param>
          <type>MatType</type>
          <declname>referenceSet</declname>
        </param>
        <briefdescription>
<para>&quot;Train&quot; the model on the given reference set. </para>        </briefdescription>
        <detaileddescription>
<para>If tree-based search is being used (if <ref refid="classmlpack_1_1neighbor_1_1RASearch_1af7d397adca3f411b4e2d2f977b280ce6" kindref="member">Naive()</ref> is false), the reference tree is rebuilt. Thus, a copy of the reference dataset is made. If you don&apos;t need to keep the dataset, you can avoid copying by using std::move(). This transfers the ownership of the dataset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>referenceSet</parametername>
</parameternamelist>
<parameterdescription>
<para>New reference set to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1neighbor_1_1RASearch_1a3d1133fe6bda66e7143fd7aab27cbd04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Train</definition>
        <argsstring>(Tree *referenceTree)</argsstring>
        <name>Train</name>
        <param>
          <type><ref refid="classmlpack_1_1neighbor_1_1RASearch_1a23f60d6d543928c40d96f87711eeba19" kindref="member">Tree</ref> *</type>
          <declname>referenceTree</declname>
        </param>
        <briefdescription>
<para>Set the reference tree to a new reference tree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="242" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classmlpack_1_1neighbor_1_1RASearch" kindref="compound">RASearch</ref> class: This class provides a generic manner to perform rank-approximate search via random-sampling. </para>    </briefdescription>
    <detaileddescription>
<para>If the &apos;naive&apos; option is chosen, this rank-approximate search will be done by randomly sampling from the whole set. If the &apos;naive&apos; option is not chosen, the sampling is done in a stratified manner in the tree as mentioned in the algorithms in Figure 2 of the following paper:</para><para><programlisting><codeline><highlight class="normal">@inproceedings{ram2009rank,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>title={{Rank-Approximate<sp/>Nearest<sp/>Neighbor<sp/>Search:<sp/>Retaining<sp/>Meaning<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Speed<sp/>in<sp/>High<sp/>Dimensions}},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>author={{Ram,<sp/>P.<sp/>and<sp/>Lee,<sp/>D.<sp/>and<sp/>Ouyang,<sp/>H.<sp/>and<sp/>Gray,<sp/>A.<sp/>G.}},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>booktitle={{Advances<sp/>of<sp/>Neural<sp/>Information<sp/>Processing<sp/>Systems}},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>year={2009}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><ref refid="classmlpack_1_1neighbor_1_1RASearch" kindref="compound">RASearch</ref> is currently known to not work with ball trees (#356).</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>SortPolicy</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort policy for distances; see NearestNeighborSort. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MetricType</parametername>
</parameternamelist>
<parameterdescription>
<para>The metric to use for computation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TreeType</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree type to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1114">
        <label>RASearch&lt; SortPolicy, MetricType, MatType, TreeType &gt;</label>
        <link refid="classmlpack_1_1neighbor_1_1RASearch"/>
      </node>
      <node id="1115">
        <label>RASearch&lt; NearestNeighborSort, metric::EuclideanDistance, arma::mat, TreeType &gt;</label>
        <link refid="classmlpack_1_1neighbor_1_1RASearch"/>
        <childnode refid="1114" relation="template-instance">
          <edgelabel>&lt; NearestNeighborSort, metric::EuclideanDistance, arma::mat, TreeType &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" line="78" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/rann/ra_search.hpp" bodystart="77" bodyend="400"/>
    <listofallmembers>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a20f4c4490bc8ecbdd1ffcb79acce6035" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>alpha</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a500ecd077d5cc5fdbf6ceb095d8de9e1" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Alpha</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1acbb0e4747a3a307bee88bad71e5eeaf1" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Alpha</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a3c423bae8b44c1c33e948bf23decd7f9" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>firstLeafExact</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a17ec6e467897eb8aee3b519e0758e77d" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>FirstLeafExact</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1aca2eb648feb965d3bcb0b0b73f8b2b0f" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>FirstLeafExact</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1ad069c71a7bc99c59bce1c3f859e5d22b" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>metric</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a060864f6de9076fe26693298a2d570bd" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>naive</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a343230e7d7344e3f7d5f5f2eb89cf2c5" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Naive</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1af7d397adca3f411b4e2d2f977b280ce6" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Naive</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a18bb7cb0cf16d0f4ba0744c6c7ab2027" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>oldFromNewReferences</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a2e2e09ad4d126aa5c72648e5e36198ae" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>RASearch</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a71c2c551b7ed51e42515edd5ab00b255" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>RASearch</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a796e8bc5d64b5f5d479be42faa9156d1" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>RASearch</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1afdeaba8b33d99d27772a74843e7dfbc2" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>referenceSet</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a0a975940b302b4efec85bbe2d8b36251" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>ReferenceSet</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1afce03afdbc14367356598962033187af" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>referenceTree</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a769fa33810494d3cc0abdd8578daba67" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>ResetQueryTree</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a75bf9c04028f0908231497715f1eda12" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>sampleAtLeaves</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1aa9dd91d6b96e1d0b343c3cec27372036" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>SampleAtLeaves</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a9f6d54dd0424f827becc2e2e9969b1bb" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>SampleAtLeaves</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a0de302ca0602fe721ac01f073d5e630f" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Search</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a9a8b402b4af23e9ebe2143139b3a6b00" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Search</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a619c7d4931e628a0c199159c57b34cbd" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Search</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a65cba07328997659bec80b9879b15a51" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a91bfd33ad72709c4da52441df886dc02" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>setOwner</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a72486e26c509c1276fa97ea7917f6d6c" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>singleMode</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a7477b3e8499a6158bbe177e7f30d4947" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>SingleMode</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1adadacd63ddeadf138d834b1fdc632773" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>SingleMode</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a3a2580f686a9de3078e499b1280e2a9f" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>SingleSampleLimit</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1ae78a7b8e9c96a2dbf646a27efee047b1" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>SingleSampleLimit</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1abf4543b8d57210df462ad0940cf2fe9d" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>singleSampleLimit</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a4a4b0fafde4cc4c856a53025dc8c4c21" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Tau</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1ad522d61ed716a322376adea25ebdbc90" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Tau</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1ae5f7c26321910a384f6f0d37910858a2" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>tau</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a27ba39af83e3cb01f2e6fbec159adf0e" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Train</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a3d1133fe6bda66e7143fd7aab27cbd04" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Train</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a23f60d6d543928c40d96f87711eeba19" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>Tree</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a09dd83eb7ea58a2d5cfbdbdca5f63b88" prot="private" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>treeOwner</name></member>
      <member refid="classmlpack_1_1neighbor_1_1RASearch_1a68b835e379f6b9375bbe6874357eb978" prot="public" virt="non-virtual"><scope>mlpack::neighbor::RASearch</scope><name>~RASearch</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
