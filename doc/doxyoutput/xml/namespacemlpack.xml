<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacemlpack" kind="namespace" language="C++">
    <compoundname>mlpack</compoundname>
    <innerclass refid="classmlpack_1_1Backtrace" prot="public">mlpack::Backtrace</innerclass>
    <innerclass refid="classmlpack_1_1IO" prot="public">mlpack::IO</innerclass>
    <innerclass refid="classmlpack_1_1Timer" prot="public">mlpack::Timer</innerclass>
    <innerclass refid="classmlpack_1_1Timers" prot="public">mlpack::Timers</innerclass>
    <innernamespace refid="namespacemlpack_1_1adaboost">mlpack::adaboost</innernamespace>
    <innernamespace refid="namespacemlpack_1_1amf">mlpack::amf</innernamespace>
    <innernamespace refid="namespacemlpack_1_1ann">mlpack::ann</innernamespace>
    <innernamespace refid="namespacemlpack_1_1bound">mlpack::bound</innernamespace>
    <innernamespace refid="namespacemlpack_1_1cf">mlpack::cf</innernamespace>
    <innernamespace refid="namespacemlpack_1_1cv">mlpack::cv</innernamespace>
    <innernamespace refid="namespacemlpack_1_1data">mlpack::data</innernamespace>
    <innernamespace refid="namespacemlpack_1_1dbscan">mlpack::dbscan</innernamespace>
    <innernamespace refid="namespacemlpack_1_1det">mlpack::det</innernamespace>
    <innernamespace refid="namespacemlpack_1_1distribution">mlpack::distribution</innernamespace>
    <innernamespace refid="namespacemlpack_1_1emst">mlpack::emst</innernamespace>
    <innernamespace refid="namespacemlpack_1_1fastmks">mlpack::fastmks</innernamespace>
    <innernamespace refid="namespacemlpack_1_1gmm">mlpack::gmm</innernamespace>
    <innernamespace refid="namespacemlpack_1_1hmm">mlpack::hmm</innernamespace>
    <innernamespace refid="namespacemlpack_1_1hpt">mlpack::hpt</innernamespace>
    <innernamespace refid="namespacemlpack_1_1kde">mlpack::kde</innernamespace>
    <innernamespace refid="namespacemlpack_1_1kernel">mlpack::kernel</innernamespace>
    <innernamespace refid="namespacemlpack_1_1kmeans">mlpack::kmeans</innernamespace>
    <innernamespace refid="namespacemlpack_1_1kpca">mlpack::kpca</innernamespace>
    <innernamespace refid="namespacemlpack_1_1lcc">mlpack::lcc</innernamespace>
    <innernamespace refid="namespacemlpack_1_1lmnn">mlpack::lmnn</innernamespace>
    <innernamespace refid="namespacemlpack_1_1math">mlpack::math</innernamespace>
    <innernamespace refid="namespacemlpack_1_1matrix__completion">mlpack::matrix_completion</innernamespace>
    <innernamespace refid="namespacemlpack_1_1meanshift">mlpack::meanshift</innernamespace>
    <innernamespace refid="namespacemlpack_1_1metric">mlpack::metric</innernamespace>
    <innernamespace refid="namespacemlpack_1_1mvu">mlpack::mvu</innernamespace>
    <innernamespace refid="namespacemlpack_1_1naive__bayes">mlpack::naive_bayes</innernamespace>
    <innernamespace refid="namespacemlpack_1_1nca">mlpack::nca</innernamespace>
    <innernamespace refid="namespacemlpack_1_1neighbor">mlpack::neighbor</innernamespace>
    <innernamespace refid="namespacemlpack_1_1nn">mlpack::nn</innernamespace>
    <innernamespace refid="namespacemlpack_1_1pca">mlpack::pca</innernamespace>
    <innernamespace refid="namespacemlpack_1_1perceptron">mlpack::perceptron</innernamespace>
    <innernamespace refid="namespacemlpack_1_1radical">mlpack::radical</innernamespace>
    <innernamespace refid="namespacemlpack_1_1range">mlpack::range</innernamespace>
    <innernamespace refid="namespacemlpack_1_1regression">mlpack::regression</innernamespace>
    <innernamespace refid="namespacemlpack_1_1rl">mlpack::rl</innernamespace>
    <innernamespace refid="namespacemlpack_1_1sfinae">mlpack::sfinae</innernamespace>
    <innernamespace refid="namespacemlpack_1_1sparse__coding">mlpack::sparse_coding</innernamespace>
    <innernamespace refid="namespacemlpack_1_1svd">mlpack::svd</innernamespace>
    <innernamespace refid="namespacemlpack_1_1svm">mlpack::svm</innernamespace>
    <innernamespace refid="namespacemlpack_1_1tree">mlpack::tree</innernamespace>
    <innernamespace refid="namespacemlpack_1_1util">mlpack::util</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacemlpack_1aa79e1de3de2187b74e5ea138b09ab461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::CheckMatrices</definition>
        <argsstring>(const arma::mat &amp;x, const arma::mat &amp;xmlX, const arma::mat &amp;jsonX, const arma::mat &amp;binaryX)</argsstring>
        <name>CheckMatrices</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>xmlX</declname>
        </param>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>jsonX</declname>
        </param>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>binaryX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" line="217" column="1"/>
        <referencedby refid="namespacemlpack_1a005e4f612a7747ec26149ceb00fbb960" compoundref="serialization_8hpp" startline="206" endline="214">SerializePointerObjectAll</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1a58b18b5a75135c9cf5f7e90dd626f7ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::CheckMatrices</definition>
        <argsstring>(const arma::Mat&lt; size_t &gt; &amp;x, const arma::Mat&lt; size_t &gt; &amp;xmlX, const arma::Mat&lt; size_t &gt; &amp;jsonX, const arma::Mat&lt; size_t &gt; &amp;binaryX)</argsstring>
        <name>CheckMatrices</name>
        <param>
          <type>const arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>xmlX</declname>
        </param>
        <param>
          <type>const arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>jsonX</declname>
        </param>
        <param>
          <type>const arma::Mat&lt; size_t &gt; &amp;</type>
          <declname>binaryX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1ab4fe0775386b425fea62ba70709cbc47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mlpack::CheckMatrices</definition>
        <argsstring>(const arma::cube &amp;x, const arma::cube &amp;xmlX, const arma::cube &amp;jsonX, const arma::cube &amp;binaryX)</argsstring>
        <name>CheckMatrices</name>
        <param>
          <type>const arma::cube &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const arma::cube &amp;</type>
          <declname>xmlX</declname>
        </param>
        <param>
          <type>const arma::cube &amp;</type>
          <declname>jsonX</declname>
        </param>
        <param>
          <type>const arma::cube &amp;</type>
          <declname>binaryX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1a60e0769fd629305e7b5ea41569bc64ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename IArchiveType</type>
          </param>
          <param>
            <type>typename OArchiveType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::SerializeObject</definition>
        <argsstring>(T &amp;t, T &amp;newT)</argsstring>
        <name>SerializeObject</name>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>newT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" line="145" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" bodystart="145" bodyend="168"/>
        <references refid="namespacemlpack_1_1data_1a387137c43ed9616d39ba90e890d181eba4c41ae0ac8cc59e0caeaa4984dd5d469" compoundref="format_8hpp" startline="25">mlpack::data::binary</references>
        <references refid="test__catch__tools_8hpp_1a2bef90617ddbfbbfc128fed05612d17a" compoundref="test__catch__tools_8hpp" startline="176" endline="188">FilterFileName</references>
        <referencedby refid="namespacemlpack_1a8c171c8ee3d09fb7f38f9a76b9a962b8" compoundref="serialization_8hpp" startline="172" endline="180">SerializeObjectAll</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1a8c171c8ee3d09fb7f38f9a76b9a962b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::SerializeObjectAll</definition>
        <argsstring>(T &amp;t, T &amp;xmlT, T &amp;jsonT, T &amp;binaryT)</argsstring>
        <name>SerializeObjectAll</name>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>xmlT</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>jsonT</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>binaryT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" line="172" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" bodystart="172" bodyend="180"/>
        <references refid="namespacemlpack_1a60e0769fd629305e7b5ea41569bc64ae" compoundref="serialization_8hpp" startline="145" endline="168">SerializeObject</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1a4aa2fa900138dc71a37b9b3922d6faff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename IArchiveType</type>
          </param>
          <param>
            <type>typename OArchiveType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::SerializePointerObject</definition>
        <argsstring>(T *t, T *&amp;newT)</argsstring>
        <name>SerializePointerObject</name>
        <param>
          <type>T *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>newT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" line="184" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" bodystart="184" bodyend="203"/>
        <references refid="namespacemlpack_1_1data_1a387137c43ed9616d39ba90e890d181eba4c41ae0ac8cc59e0caeaa4984dd5d469" compoundref="format_8hpp" startline="25">mlpack::data::binary</references>
        <references refid="pointer__wrapper_8hpp_1a58a300268ba9c6215a8ab2075a4dc675" compoundref="pointer__wrapper_8hpp" startline="96">CEREAL_POINTER</references>
        <references refid="test__catch__tools_8hpp_1a2bef90617ddbfbbfc128fed05612d17a" compoundref="test__catch__tools_8hpp" startline="176" endline="188">FilterFileName</references>
        <referencedby refid="namespacemlpack_1a005e4f612a7747ec26149ceb00fbb960" compoundref="serialization_8hpp" startline="206" endline="214">SerializePointerObjectAll</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1a005e4f612a7747ec26149ceb00fbb960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::SerializePointerObjectAll</definition>
        <argsstring>(T *t, T *&amp;xmlT, T *&amp;jsonT, T *&amp;binaryT)</argsstring>
        <name>SerializePointerObjectAll</name>
        <param>
          <type>T *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>xmlT</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>jsonT</declname>
        </param>
        <param>
          <type>T *&amp;</type>
          <declname>binaryT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" line="206" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" bodystart="206" bodyend="214"/>
        <references refid="namespacemlpack_1aa79e1de3de2187b74e5ea138b09ab461">CheckMatrices</references>
        <references refid="namespacemlpack_1a4aa2fa900138dc71a37b9b3922d6faff" compoundref="serialization_8hpp" startline="184" endline="203">SerializePointerObject</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1a4f980f11d878f685a51f25a1e00aeef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CubeType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::TestAllArmadilloSerialization</definition>
        <argsstring>(arma::Cube&lt; CubeType &gt; &amp;x)</argsstring>
        <name>TestAllArmadilloSerialization</name>
        <param>
          <type>arma::Cube&lt; CubeType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" line="78" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" bodystart="78" bodyend="86"/>
        <references refid="namespacemlpack_1a615dd99e3b326f33e92e48f84d3f86cf" compoundref="serialization_8hpp" startline="26" endline="74">TestArmadilloSerialization</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1a48f8ce6e4565473110b4f55040b74b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::TestAllArmadilloSerialization</definition>
        <argsstring>(MatType &amp;x)</argsstring>
        <name>TestAllArmadilloSerialization</name>
        <param>
          <type>MatType &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" line="132" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" bodystart="132" bodyend="140"/>
        <references refid="namespacemlpack_1a615dd99e3b326f33e92e48f84d3f86cf" compoundref="serialization_8hpp" startline="26" endline="74">TestArmadilloSerialization</references>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1a615dd99e3b326f33e92e48f84d3f86cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CubeType</type>
          </param>
          <param>
            <type>typename IArchiveType</type>
          </param>
          <param>
            <type>typename OArchiveType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::TestArmadilloSerialization</definition>
        <argsstring>(arma::Cube&lt; CubeType &gt; &amp;x)</argsstring>
        <name>TestArmadilloSerialization</name>
        <param>
          <type>arma::Cube&lt; CubeType &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" line="26" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" bodystart="26" bodyend="74"/>
        <references refid="namespacemlpack_1_1data_1a387137c43ed9616d39ba90e890d181eba4c41ae0ac8cc59e0caeaa4984dd5d469" compoundref="format_8hpp" startline="25">mlpack::data::binary</references>
        <references refid="test__catch__tools_8hpp_1a2bef90617ddbfbbfc128fed05612d17a" compoundref="test__catch__tools_8hpp" startline="176" endline="188">FilterFileName</references>
        <referencedby refid="namespacemlpack_1a4f980f11d878f685a51f25a1e00aeef1" compoundref="serialization_8hpp" startline="78" endline="86">TestAllArmadilloSerialization</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespacemlpack_1a7c2aa41ce56ddd03a2a2d8580b2433c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatType</type>
          </param>
          <param>
            <type>typename IArchiveType</type>
          </param>
          <param>
            <type>typename OArchiveType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mlpack::TestArmadilloSerialization</definition>
        <argsstring>(MatType &amp;x)</argsstring>
        <name>TestArmadilloSerialization</name>
        <param>
          <type>MatType &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" line="92" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/tests/serialization.hpp" bodystart="92" bodyend="128"/>
        <references refid="namespacemlpack_1_1data_1a387137c43ed9616d39ba90e890d181eba4c41ae0ac8cc59e0caeaa4984dd5d469" compoundref="format_8hpp" startline="25">mlpack::data::binary</references>
        <references refid="test__catch__tools_8hpp_1a2bef90617ddbfbbfc128fed05612d17a" compoundref="test__catch__tools_8hpp" startline="176" endline="188">FilterFileName</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Linear algebra utility functions, generally performed on matrices or vectors. </para>    </briefdescription>
    <detaileddescription>
<para>This class is used to update the weightVectors matrix according to the simple update rule as discussed by Rosenblatt:</para><para>if a vector x has been incorrectly classified by a weight w, then w = w - x and w&apos;= w&apos;+ x</para><para>where w&apos; is the weight vector which correctly classifies x. </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/cv/cv_base.hpp" line="17" column="1"/>
  </compounddef>
</doxygen>
