<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1ann_1_1BernoulliDistribution" kind="class" language="C++" prot="public">
    <compoundname>mlpack::ann::BernoulliDistribution</compoundname>
    <includes refid="bernoulli__distribution_8hpp" local="no">bernoulli_distribution.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename DataType</type>
        <defval>arma::mat</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1BernoulliDistribution_1a2112f9b5e099151133c27964f78865f1" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool applyLogistic</definition>
        <argsstring></argsstring>
        <name>applyLogistic</name>
        <briefdescription>
<para>If true, apply logistic function to probability matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="135" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1BernoulliDistribution_1a974b448c3d0a13d483d36ef15de369b5" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double eps</definition>
        <argsstring></argsstring>
        <name>eps</name>
        <briefdescription>
<para>The minimum value used for computing logarithms and denominators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="138" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1BernoulliDistribution_1ab3ea6c5be94f7cdd20ceb1db6fa4c4de" prot="private" static="no" mutable="no">
        <type>DataType</type>
        <definition>DataType logits</definition>
        <argsstring></argsstring>
        <name>logits</name>
        <briefdescription>
<para>logits matrix of the distributions. </para>        </briefdescription>
        <detaileddescription>
<para>After applying logistic function, it gives probability matrix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="132" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1ann_1_1BernoulliDistribution_1ab38b5328e6641b3bbce9eea6bf8c08a6" prot="private" static="no" mutable="no">
        <type>DataType</type>
        <definition>DataType probability</definition>
        <argsstring></argsstring>
        <name>probability</name>
        <briefdescription>
<para>Probabilities of the distributions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="128" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1ann_1_1BernoulliDistribution_1a88d6abf9fc36d7f6975a64a14a6c03a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BernoulliDistribution</definition>
        <argsstring>()</argsstring>
        <name>BernoulliDistribution</name>
        <briefdescription>
<para>Default constructor, which creates a Bernoulli distribution with zero dimension. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1BernoulliDistribution_1a81bf5f2daf02b0a98d86ea65f24bc69b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BernoulliDistribution</definition>
        <argsstring>(const DataType &amp;param, const bool applyLogistic=true, const double eps=1e-10)</argsstring>
        <name>BernoulliDistribution</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>applyLogistic</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>eps</declname>
          <defval>1e-10</defval>
        </param>
        <briefdescription>
<para>Create multiple independent Bernoulli distributions whose p values are given by the param parameter. </para>        </briefdescription>
        <detaileddescription>
<para>Thus, we create nofRows * nofColumns distributions. The shape of the matrix of distributions is the same as the shape of the param matrix as each element of the param matrix parameterizes one Bernoulli distribution. This is used in the ANN module to define distribution for each feature in each batch, where number of features becomes nofRows and batch size becomes nofColumns.</para><para>applyLogistic has to be true if all the elements of param matrix are not in the range [0, 1].</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix of probabilities or pre probabilities of the multiple distributions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>applyLogistic</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, we apply Logistic function to the param matrix (pre probability) to get probability. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eps</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum value used for computing logarithms and denominators. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1BernoulliDistribution_1aebb63750cdd19cf5cc2828471451f77d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const DataType &amp;</type>
        <definition>const DataType&amp; Logits</definition>
        <argsstring>() const</argsstring>
        <name>Logits</name>
        <briefdescription>
<para>Return the logits matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="108" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1BernoulliDistribution_1a693726db71ae8d6dea2993305b8296e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType &amp;</type>
        <definition>DataType&amp; Logits</definition>
        <argsstring>()</argsstring>
        <name>Logits</name>
        <briefdescription>
<para>Return a modifiable copy of the pre probability matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="111" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1BernoulliDistribution_1a1b59fa6b8ee989ff2d9b0a001309e792" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double LogProbability</definition>
        <argsstring>(const DataType &amp;observation) const</argsstring>
        <name>LogProbability</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>observation</declname>
        </param>
        <briefdescription>
<para>Return the log probabilities of the given matrix of observations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observation</parametername>
</parameternamelist>
<parameterdescription>
<para>The observation matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="82" column="1"/>
        <referencedby refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a5d5f71a6aaf6e56c1b5cce0bee23103f" compoundref="bernoulli__distribution_8hpp" startline="72" endline="75">BernoulliDistribution&lt; DataType &gt;::Probability</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1BernoulliDistribution_1a73599ea85b4aa7a913286b6f62e40ccc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogProbBackward</definition>
        <argsstring>(const DataType &amp;observation, DataType &amp;output) const</argsstring>
        <name>LogProbBackward</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>observation</declname>
        </param>
        <param>
          <type>DataType &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Stores the gradient of the log probabilities of the observations in the output matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observation</parametername>
</parameternamelist>
<parameterdescription>
<para>The observation matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>The output matrix where the gradients are stored. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="91" column="1"/>
        <referencedby refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a5d5f71a6aaf6e56c1b5cce0bee23103f" compoundref="bernoulli__distribution_8hpp" startline="72" endline="75">BernoulliDistribution&lt; DataType &gt;::Probability</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1BernoulliDistribution_1a5d5f71a6aaf6e56c1b5cce0bee23103f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Probability</definition>
        <argsstring>(const DataType &amp;observation) const</argsstring>
        <name>Probability</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>observation</declname>
        </param>
        <briefdescription>
<para>Return the probabilities of the given matrix of observations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observation</parametername>
</parameternamelist>
<parameterdescription>
<para>The observation matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="72" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" bodystart="72" bodyend="75"/>
        <references refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a1b59fa6b8ee989ff2d9b0a001309e792">BernoulliDistribution&lt; DataType &gt;::LogProbability</references>
        <references refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a73599ea85b4aa7a913286b6f62e40ccc">BernoulliDistribution&lt; DataType &gt;::LogProbBackward</references>
        <references refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a59b1e2962ad6370100f34906d6fddd76">BernoulliDistribution&lt; DataType &gt;::Sample</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1BernoulliDistribution_1aa9aa637b51801aaa39ae77be9b6d9280" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const DataType &amp;</type>
        <definition>const DataType&amp; Probability</definition>
        <argsstring>() const</argsstring>
        <name>Probability</name>
        <briefdescription>
<para>Return the probability matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="102" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1BernoulliDistribution_1a11883ea7fd2a81bdd492d58f1ae13ed6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataType &amp;</type>
        <definition>DataType&amp; Probability</definition>
        <argsstring>()</argsstring>
        <name>Probability</name>
        <briefdescription>
<para>Return a modifiable copy of the probability matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="105" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1BernoulliDistribution_1a59b1e2962ad6370100f34906d6fddd76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>DataType</type>
        <definition>DataType Sample</definition>
        <argsstring>() const</argsstring>
        <name>Sample</name>
        <briefdescription>
<para>Return a matrix of randomly generated samples according to the probability distributions defined by this object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Matrix(integer) of random samples from the multiple Bernoulli distributions. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="99" column="1"/>
        <referencedby refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a5d5f71a6aaf6e56c1b5cce0bee23103f" compoundref="bernoulli__distribution_8hpp" startline="72" endline="75">BernoulliDistribution&lt; DataType &gt;::Probability</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1ann_1_1BernoulliDistribution_1a65cba07328997659bec80b9879b15a51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>Serialize the distribution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="117" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" bodystart="117" bodyend="124"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Multiple independent Bernoulli distributions. </para>    </briefdescription>
    <detaileddescription>
<para>Bernoulli distribution is the discrete probability distribution of a random variable which takes the value 1 with probability p and the value 0 with probability q = 1 - p. In this implementation, the p values of the distributions are given by the param matrix.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the input data. (arma::colvec, arma::mat, arma::sp_mat or arma::cube). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" line="35" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/ann/dists/bernoulli_distribution.hpp" bodystart="34" bodyend="139"/>
    <listofallmembers>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a2112f9b5e099151133c27964f78865f1" prot="private" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>applyLogistic</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a88d6abf9fc36d7f6975a64a14a6c03a6" prot="public" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>BernoulliDistribution</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a81bf5f2daf02b0a98d86ea65f24bc69b" prot="public" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>BernoulliDistribution</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a974b448c3d0a13d483d36ef15de369b5" prot="private" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>eps</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1aebb63750cdd19cf5cc2828471451f77d" prot="public" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>Logits</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a693726db71ae8d6dea2993305b8296e4" prot="public" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>Logits</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1ab3ea6c5be94f7cdd20ceb1db6fa4c4de" prot="private" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>logits</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a1b59fa6b8ee989ff2d9b0a001309e792" prot="public" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>LogProbability</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a73599ea85b4aa7a913286b6f62e40ccc" prot="public" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>LogProbBackward</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1ab38b5328e6641b3bbce9eea6bf8c08a6" prot="private" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>probability</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a5d5f71a6aaf6e56c1b5cce0bee23103f" prot="public" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>Probability</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1aa9aa637b51801aaa39ae77be9b6d9280" prot="public" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>Probability</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a11883ea7fd2a81bdd492d58f1ae13ed6" prot="public" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>Probability</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a59b1e2962ad6370100f34906d6fddd76" prot="public" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>Sample</name></member>
      <member refid="classmlpack_1_1ann_1_1BernoulliDistribution_1a65cba07328997659bec80b9879b15a51" prot="public" virt="non-virtual"><scope>mlpack::ann::BernoulliDistribution</scope><name>serialize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
