<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1regression_1_1LinearRegression" kind="class" language="C++" prot="public">
    <compoundname>mlpack::regression::LinearRegression</compoundname>
    <includes refid="linear__regression_8hpp" local="no">linear_regression.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1regression_1_1LinearRegression_1aa8a564a4a0de3d40f38f686d5fb27aa6" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool intercept</definition>
        <argsstring></argsstring>
        <name>intercept</name>
        <briefdescription>
<para>Indicates whether first parameter is intercept. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="164" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1regression_1_1LinearRegression_1a3db359547eed8cfd48ca821d95f577af" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lambda</definition>
        <argsstring></argsstring>
        <name>lambda</name>
        <briefdescription>
<para>The Tikhonov regularization parameter for ridge regression (0 for linear regression). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="161" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1regression_1_1LinearRegression_1ac69a673c592c289211605aa5122f0376" prot="private" static="no" mutable="no">
        <type>arma::vec</type>
        <definition>arma::vec parameters</definition>
        <argsstring></argsstring>
        <name>parameters</name>
        <briefdescription>
<para>The calculated B. </para>        </briefdescription>
        <detaileddescription>
<para>Initialized and filled by constructor to hold the least squares solution. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="155" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1a5512c52fafc771cd94e1ae8ea65d1729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LinearRegression</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::rowvec &amp;responses, const double lambda=0, const bool intercept=true)</argsstring>
        <name>LinearRegression</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::rowvec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>intercept</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Creates the model. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>X, matrix of data points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>y, the measured data for each point in X. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>Regularization constant for ridge regression. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intercept</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to include an intercept term. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1a038242ee2c6c66ef9e287503fffe64e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LinearRegression</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::rowvec &amp;responses, const arma::rowvec &amp;weights, const double lambda=0, const bool intercept=true)</argsstring>
        <name>LinearRegression</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::rowvec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>const arma::rowvec &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>intercept</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Creates the model with weighted learning. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>X, matrix of data points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>y, the measured data for each point in X. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Observation weights (for boosting). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>Regularization constant for ridge regression. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intercept</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to include an intercept term. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1a33f04840f1f440c8ab14254ce127cf9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>LinearRegression</definition>
        <argsstring>()</argsstring>
        <name>LinearRegression</name>
        <briefdescription>
<para>Empty constructor. </para>        </briefdescription>
        <detaileddescription>
<para>This gives a non-working model, so make sure <ref refid="classmlpack_1_1regression_1_1LinearRegression_1a593683fefbb596f9b7f6347d0be5a562" kindref="member">Train()</ref> is called (or make sure the model parameters are set) before calling <ref refid="classmlpack_1_1regression_1_1LinearRegression_1a71e5e21b1d92756979b32face7b3c573" kindref="member">Predict()</ref>! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="62" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" bodystart="62" bodyend="62"/>
        <references refid="classmlpack_1_1regression_1_1LinearRegression_1ad1b012d8c3cad8c6a155b715cb32a134">LinearRegression::ComputeError</references>
        <references refid="classmlpack_1_1regression_1_1LinearRegression_1a71e5e21b1d92756979b32face7b3c573">LinearRegression::Predict</references>
        <references refid="classmlpack_1_1regression_1_1LinearRegression_1a593683fefbb596f9b7f6347d0be5a562">LinearRegression::Train</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1ad1b012d8c3cad8c6a155b715cb32a134" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double ComputeError</definition>
        <argsstring>(const arma::mat &amp;points, const arma::rowvec &amp;responses) const</argsstring>
        <name>ComputeError</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>const arma::rowvec &amp;</type>
          <declname>responses</declname>
        </param>
        <briefdescription>
<para>Calculate the L2 squared error on the given predictors and responses using this linear regression model. </para>        </briefdescription>
        <detaileddescription>
<para>This calculation returns</para><para><formula id="161">\[ (1 / n) * \| y - X B \|^2_2 \]</formula></para><para>where <formula id="37">$ y $</formula> is the responses vector, <formula id="154">$ X $</formula> is the matrix of predictors, and <formula id="162">$ B $</formula> is the parameters of the trained linear regression model.</para><para>As this number decreases to 0, the linear regression fit is better.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix of predictors (X). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Transposed vector of responses (y^T). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="123" column="1"/>
        <referencedby refid="classmlpack_1_1regression_1_1LinearRegression_1a33f04840f1f440c8ab14254ce127cf9f" compoundref="linear__regression_8hpp" startline="62" endline="62">LinearRegression::LinearRegression</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1aa755a6a1366c3ba88bb0f8543127ccea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Intercept</definition>
        <argsstring>() const</argsstring>
        <name>Intercept</name>
        <briefdescription>
<para>Return whether or not an intercept term is used in the model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="137" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1a53535041275cedd0ec3de67ca032aa94" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Lambda</definition>
        <argsstring>() const</argsstring>
        <name>Lambda</name>
        <briefdescription>
<para>Return the Tikhonov regularization parameter for ridge regression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="132" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1aaf66629b989a326453647f42443c6a0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; Lambda</definition>
        <argsstring>()</argsstring>
        <name>Lambda</name>
        <briefdescription>
<para>Modify the Tikhonov regularization parameter for ridge regression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="134" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1a6a67e9b83bb8f0ea6122efcc5f75927c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::vec &amp;</type>
        <definition>const arma::vec&amp; Parameters</definition>
        <argsstring>() const</argsstring>
        <name>Parameters</name>
        <briefdescription>
<para>Return the parameters (the b vector). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="127" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1a6c16a2172d1b0486c8677bba4c5a3ff1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>arma::vec &amp;</type>
        <definition>arma::vec&amp; Parameters</definition>
        <argsstring>()</argsstring>
        <name>Parameters</name>
        <briefdescription>
<para>Modify the parameters (the b vector). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="129" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1a71e5e21b1d92756979b32face7b3c573" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Predict</definition>
        <argsstring>(const arma::mat &amp;points, arma::rowvec &amp;predictions) const</argsstring>
        <name>Predict</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>arma::rowvec &amp;</type>
          <declname>predictions</declname>
        </param>
        <briefdescription>
<para>Calculate y_i for each data point in points. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>the data points to calculate with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predictions</parametername>
</parameternamelist>
<parameterdescription>
<para>y, will contain calculated values on completion. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="104" column="1"/>
        <referencedby refid="classmlpack_1_1regression_1_1LinearRegression_1a33f04840f1f440c8ab14254ce127cf9f" compoundref="linear__regression_8hpp" startline="62" endline="62">LinearRegression::LinearRegression</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1a65cba07328997659bec80b9879b15a51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>Serialize the model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="143" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1a593683fefbb596f9b7f6347d0be5a562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Train</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::rowvec &amp;responses, const bool intercept=true)</argsstring>
        <name>Train</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::rowvec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>intercept</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Train the <ref refid="classmlpack_1_1regression_1_1LinearRegression" kindref="compound">LinearRegression</ref> model on the given data. </para>        </briefdescription>
        <detaileddescription>
<para>Careful! This will completely ignore and overwrite the existing model. This particular implementation does not have an incremental training algorithm. To set the regularization parameter lambda, call <ref refid="classmlpack_1_1regression_1_1LinearRegression_1aaf66629b989a326453647f42443c6a0c" kindref="member">Lambda()</ref> or set a different value in the constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>X, the matrix of data points to train the model on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>y, the responses to the data points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intercept</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to fit an intercept term. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The least squares error after training. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="76" column="1"/>
        <referencedby refid="classmlpack_1_1regression_1_1LinearRegression_1a33f04840f1f440c8ab14254ce127cf9f" compoundref="linear__regression_8hpp" startline="62" endline="62">LinearRegression::LinearRegression</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LinearRegression_1aae707a6e9fb9f1958a70f8a078135eef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Train</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::rowvec &amp;responses, const arma::rowvec &amp;weights, const bool intercept=true)</argsstring>
        <name>Train</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::rowvec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>const arma::rowvec &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>intercept</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Train the <ref refid="classmlpack_1_1regression_1_1LinearRegression" kindref="compound">LinearRegression</ref> model on the given data and weights. </para>        </briefdescription>
        <detaileddescription>
<para>Careful! This will completely ignore and overwrite the existing model. This particular implementation does not have an incremental training algorithm. To set the regularization parameter lambda, call <ref refid="classmlpack_1_1regression_1_1LinearRegression_1aaf66629b989a326453647f42443c6a0c" kindref="member">Lambda()</ref> or set a different value in the constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>X, the matrix of data points to train the model on. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>y, the responses to the data points. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Observation weights (for boosting). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intercept</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to fit an intercept term. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The least squares error after training. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="93" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A simple linear regression algorithm using ordinary least squares. </para>    </briefdescription>
    <detaileddescription>
<para>Optionally, this class can perform ridge regression, if the lambda parameter is set to a number greater than zero. </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" line="27" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/linear_regression/linear_regression.hpp" bodystart="26" bodyend="165"/>
    <listofallmembers>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1ad1b012d8c3cad8c6a155b715cb32a134" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>ComputeError</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1aa755a6a1366c3ba88bb0f8543127ccea" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>Intercept</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1aa8a564a4a0de3d40f38f686d5fb27aa6" prot="private" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>intercept</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1a53535041275cedd0ec3de67ca032aa94" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>Lambda</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1aaf66629b989a326453647f42443c6a0c" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>Lambda</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1a3db359547eed8cfd48ca821d95f577af" prot="private" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>lambda</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1a5512c52fafc771cd94e1ae8ea65d1729" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>LinearRegression</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1a038242ee2c6c66ef9e287503fffe64e9" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>LinearRegression</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1a33f04840f1f440c8ab14254ce127cf9f" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>LinearRegression</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1ac69a673c592c289211605aa5122f0376" prot="private" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>parameters</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1a6a67e9b83bb8f0ea6122efcc5f75927c" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>Parameters</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1a6c16a2172d1b0486c8677bba4c5a3ff1" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>Parameters</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1a71e5e21b1d92756979b32face7b3c573" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>Predict</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1a65cba07328997659bec80b9879b15a51" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1a593683fefbb596f9b7f6347d0be5a562" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>Train</name></member>
      <member refid="classmlpack_1_1regression_1_1LinearRegression_1aae707a6e9fb9f1958a70f8a078135eef" prot="public" virt="non-virtual"><scope>mlpack::regression::LinearRegression</scope><name>Train</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
