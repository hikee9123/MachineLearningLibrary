<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="shuffle__data_8hpp" kind="file" language="C++">
    <compoundname>shuffle_data.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <includedby refid="core_8hpp" local="no">/home/aakash/mlpack/src/mlpack/core.hpp</includedby>
    <includedby refid="logistic__regression__function_8hpp" local="no">/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression_function.hpp</includedby>
    <includedby refid="nca__softmax__error__function_8hpp" local="no">/home/aakash/mlpack/src/mlpack/methods/nca/nca_softmax_error_function.hpp</includedby>
    <incdepgraph>
      <node id="12903">
        <label>list</label>
      </node>
      <node id="12900">
        <label>atomic</label>
      </node>
      <node id="12890">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="12866">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="12902">
        <label>iomanip</label>
      </node>
      <node id="12875">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="12876" relation="include">
        </childnode>
        <childnode refid="12878" relation="include">
        </childnode>
      </node>
      <node id="12858">
        <label>cstdint</label>
      </node>
      <node id="12867">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="12874">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="12897">
        <label>arma_config.hpp</label>
      </node>
      <node id="12887">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="12854">
        <label>cmath</label>
      </node>
      <node id="12873">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="12862">
        <label>stdexcept</label>
      </node>
      <node id="12882">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="12867" relation="include">
        </childnode>
        <childnode refid="12869" relation="include">
        </childnode>
        <childnode refid="12870" relation="include">
        </childnode>
        <childnode refid="12868" relation="include">
        </childnode>
      </node>
      <node id="12906">
        <label>string</label>
      </node>
      <node id="12894">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="12895" relation="include">
        </childnode>
        <childnode refid="12861" relation="include">
        </childnode>
      </node>
      <node id="12904">
        <label>map</label>
      </node>
      <node id="12856">
        <label>cfloat</label>
      </node>
      <node id="12886">
        <label>boost/variant.hpp</label>
      </node>
      <node id="12908">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="12870">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="12893">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="12894" relation="include">
        </childnode>
        <childnode refid="12870" relation="include">
        </childnode>
        <childnode refid="12877" relation="include">
        </childnode>
        <childnode refid="12895" relation="include">
        </childnode>
      </node>
      <node id="12883">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="12881">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="12867" relation="include">
        </childnode>
        <childnode refid="12869" relation="include">
        </childnode>
        <childnode refid="12870" relation="include">
        </childnode>
        <childnode refid="12868" relation="include">
        </childnode>
      </node>
      <node id="12884">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="12867" relation="include">
        </childnode>
        <childnode refid="12869" relation="include">
        </childnode>
        <childnode refid="12870" relation="include">
        </childnode>
        <childnode refid="12868" relation="include">
        </childnode>
      </node>
      <node id="12872">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="12892">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="12868" relation="include">
        </childnode>
        <childnode refid="12869" relation="include">
        </childnode>
        <childnode refid="12870" relation="include">
        </childnode>
        <childnode refid="12880" relation="include">
        </childnode>
        <childnode refid="12889" relation="include">
        </childnode>
      </node>
      <node id="12896">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="12897" relation="include">
        </childnode>
      </node>
      <node id="12898">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="12853">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="12854" relation="include">
        </childnode>
        <childnode refid="12855" relation="include">
        </childnode>
        <childnode refid="12856" relation="include">
        </childnode>
        <childnode refid="12857" relation="include">
        </childnode>
        <childnode refid="12858" relation="include">
        </childnode>
        <childnode refid="12859" relation="include">
        </childnode>
        <childnode refid="12860" relation="include">
        </childnode>
        <childnode refid="12861" relation="include">
        </childnode>
        <childnode refid="12862" relation="include">
        </childnode>
        <childnode refid="12863" relation="include">
        </childnode>
        <childnode refid="12864" relation="include">
        </childnode>
        <childnode refid="12865" relation="include">
        </childnode>
        <childnode refid="12866" relation="include">
        </childnode>
        <childnode refid="12867" relation="include">
        </childnode>
        <childnode refid="12868" relation="include">
        </childnode>
        <childnode refid="12869" relation="include">
        </childnode>
        <childnode refid="12870" relation="include">
        </childnode>
        <childnode refid="12871" relation="include">
        </childnode>
        <childnode refid="12872" relation="include">
        </childnode>
        <childnode refid="12873" relation="include">
        </childnode>
        <childnode refid="12874" relation="include">
        </childnode>
        <childnode refid="12875" relation="include">
        </childnode>
        <childnode refid="12879" relation="include">
        </childnode>
        <childnode refid="12880" relation="include">
        </childnode>
        <childnode refid="12881" relation="include">
        </childnode>
        <childnode refid="12882" relation="include">
        </childnode>
        <childnode refid="12883" relation="include">
        </childnode>
        <childnode refid="12884" relation="include">
        </childnode>
        <childnode refid="12885" relation="include">
        </childnode>
        <childnode refid="12891" relation="include">
        </childnode>
        <childnode refid="12892" relation="include">
        </childnode>
        <childnode refid="12889" relation="include">
        </childnode>
        <childnode refid="12893" relation="include">
        </childnode>
        <childnode refid="12896" relation="include">
        </childnode>
        <childnode refid="12898" relation="include">
        </childnode>
        <childnode refid="12899" relation="include">
        </childnode>
        <childnode refid="12908" relation="include">
        </childnode>
        <childnode refid="12909" relation="include">
        </childnode>
      </node>
      <node id="12859">
        <label>cstdio</label>
      </node>
      <node id="12863">
        <label>tuple</label>
      </node>
      <node id="12868">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="12885">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="12868" relation="include">
        </childnode>
        <childnode refid="12869" relation="include">
        </childnode>
        <childnode refid="12870" relation="include">
        </childnode>
        <childnode refid="12872" relation="include">
        </childnode>
        <childnode refid="12886" relation="include">
        </childnode>
        <childnode refid="12887" relation="include">
        </childnode>
        <childnode refid="12888" relation="include">
        </childnode>
        <childnode refid="12889" relation="include">
        </childnode>
      </node>
      <node id="12864">
        <label>utility</label>
      </node>
      <node id="12888">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="12879">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="12876">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="12877" relation="include">
        </childnode>
      </node>
      <node id="12852">
        <label>/home/aakash/mlpack/src/mlpack/core/math/shuffle_data.hpp</label>
        <link refid="shuffle__data_8hpp"/>
        <childnode refid="12853" relation="include">
        </childnode>
      </node>
      <node id="12899">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="12900" relation="include">
        </childnode>
        <childnode refid="12901" relation="include">
        </childnode>
        <childnode refid="12902" relation="include">
        </childnode>
        <childnode refid="12903" relation="include">
        </childnode>
        <childnode refid="12904" relation="include">
        </childnode>
        <childnode refid="12905" relation="include">
        </childnode>
        <childnode refid="12906" relation="include">
        </childnode>
        <childnode refid="12907" relation="include">
        </childnode>
      </node>
      <node id="12877">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="12891">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="12889" relation="include">
        </childnode>
        <childnode refid="12885" relation="include">
        </childnode>
        <childnode refid="12892" relation="include">
        </childnode>
      </node>
      <node id="12860">
        <label>cstdlib</label>
      </node>
      <node id="12855">
        <label>cctype</label>
      </node>
      <node id="12878">
        <label>unordered_map</label>
      </node>
      <node id="12857">
        <label>climits</label>
      </node>
      <node id="12905">
        <label>mutex</label>
      </node>
      <node id="12901">
        <label>chrono</label>
      </node>
      <node id="12909">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="12907">
        <label>thread</label>
      </node>
      <node id="12895">
        <label>type_traits</label>
      </node>
      <node id="12871">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="12865">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="12889">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="12867" relation="include">
        </childnode>
        <childnode refid="12868" relation="include">
        </childnode>
        <childnode refid="12869" relation="include">
        </childnode>
        <childnode refid="12870" relation="include">
        </childnode>
        <childnode refid="12890" relation="include">
        </childnode>
      </node>
      <node id="12861">
        <label>cstring</label>
      </node>
      <node id="12880">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="12869">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="12954">
        <label>/home/aakash/mlpack/src/mlpack/tests/serialization.hpp</label>
        <link refid="serialization_8hpp"/>
      </node>
      <node id="12917">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/metrics/accuracy.hpp</label>
        <link refid="accuracy_8hpp"/>
      </node>
      <node id="12916">
        <label>/home/aakash/mlpack/src/mlpack/core/hpt/hpt.hpp</label>
        <link refid="src_2mlpack_2core_2hpt_2hpt_8hpp"/>
      </node>
      <node id="12946">
        <label>/home/aakash/mlpack/src/mlpack/methods/decision_tree/decision_tree.hpp</label>
        <link refid="decision__tree_8hpp"/>
        <childnode refid="12947" relation="include">
        </childnode>
        <childnode refid="12948" relation="include">
        </childnode>
      </node>
      <node id="12943">
        <label>/home/aakash/mlpack/src/mlpack/methods/cf/cf_model.hpp</label>
        <link refid="cf__model_8hpp"/>
      </node>
      <node id="12923">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/metrics/recall.hpp</label>
        <link refid="recall_8hpp"/>
      </node>
      <node id="12918">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/metrics/f1.hpp</label>
        <link refid="f1_8hpp"/>
      </node>
      <node id="12933">
        <label>/home/aakash/mlpack/src/mlpack/methods/ann/layer/layer.hpp</label>
        <link refid="layer_8hpp"/>
        <childnode refid="12934" relation="include">
        </childnode>
        <childnode refid="12935" relation="include">
        </childnode>
        <childnode refid="12939" relation="include">
        </childnode>
        <childnode refid="12940" relation="include">
        </childnode>
        <childnode refid="12936" relation="include">
        </childnode>
        <childnode refid="12937" relation="include">
        </childnode>
        <childnode refid="12938" relation="include">
        </childnode>
        <childnode refid="12941" relation="include">
        </childnode>
      </node>
      <node id="12911">
        <label>/home/aakash/mlpack/src/mlpack/core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="12912" relation="include">
        </childnode>
        <childnode refid="12917" relation="include">
        </childnode>
        <childnode refid="12918" relation="include">
        </childnode>
        <childnode refid="12919" relation="include">
        </childnode>
        <childnode refid="12920" relation="include">
        </childnode>
        <childnode refid="12921" relation="include">
        </childnode>
        <childnode refid="12922" relation="include">
        </childnode>
        <childnode refid="12923" relation="include">
        </childnode>
        <childnode refid="12924" relation="include">
        </childnode>
        <childnode refid="12925" relation="include">
        </childnode>
        <childnode refid="12926" relation="include">
        </childnode>
        <childnode refid="12927" relation="include">
        </childnode>
        <childnode refid="12928" relation="include">
        </childnode>
        <childnode refid="12930" relation="include">
        </childnode>
        <childnode refid="12931" relation="include">
        </childnode>
        <childnode refid="12932" relation="include">
        </childnode>
        <childnode refid="12939" relation="include">
        </childnode>
        <childnode refid="12942" relation="include">
        </childnode>
        <childnode refid="12943" relation="include">
        </childnode>
        <childnode refid="12944" relation="include">
        </childnode>
        <childnode refid="12945" relation="include">
        </childnode>
        <childnode refid="12949" relation="include">
        </childnode>
        <childnode refid="12950" relation="include">
        </childnode>
        <childnode refid="12951" relation="include">
        </childnode>
        <childnode refid="12952" relation="include">
        </childnode>
        <childnode refid="12953" relation="include">
        </childnode>
        <childnode refid="12954" relation="include">
        </childnode>
        <childnode refid="12955" relation="include">
        </childnode>
        <childnode refid="12956" relation="include">
        </childnode>
      </node>
      <node id="12926">
        <label>/home/aakash/mlpack/src/mlpack/core/data/one_hot_encoding.hpp</label>
        <link refid="one__hot__encoding_8hpp"/>
        <childnode refid="12911" relation="include">
        </childnode>
      </node>
      <node id="12932">
        <label>/home/aakash/mlpack/src/mlpack/methods/ann/layer/recurrent.hpp</label>
        <link refid="recurrent_8hpp"/>
        <childnode refid="12933" relation="include">
        </childnode>
      </node>
      <node id="12951">
        <label>/home/aakash/mlpack/src/mlpack/methods/reinforcement_learning/environment/acrobot.hpp</label>
        <link refid="acrobot_8hpp"/>
      </node>
      <node id="12947">
        <label>/home/aakash/mlpack/src/mlpack/methods/adaboost/adaboost.hpp</label>
        <link refid="adaboost_8hpp"/>
      </node>
      <node id="12942">
        <label>/home/aakash/mlpack/src/mlpack/methods/ann/rbm/rbm.hpp</label>
        <link refid="rbm_8hpp"/>
      </node>
      <node id="12940">
        <label>/home/aakash/mlpack/src/mlpack/methods/ann/rnn.hpp</label>
        <link refid="rnn_8hpp"/>
      </node>
      <node id="12936">
        <label>/home/aakash/mlpack/src/mlpack/methods/reinforcement_learning/q_networks/categorical_dqn.hpp</label>
        <link refid="categorical__dqn_8hpp"/>
      </node>
      <node id="12919">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/metrics/facilities.hpp</label>
        <link refid="facilities_8hpp"/>
      </node>
      <node id="12944">
        <label>/home/aakash/mlpack/src/mlpack/methods/dbscan/dbscan.hpp</label>
        <link refid="dbscan_8hpp"/>
      </node>
      <node id="12953">
        <label>/home/aakash/mlpack/src/mlpack/tests/main_tests/range_search_utils.hpp</label>
        <link refid="range__search__utils_8hpp"/>
      </node>
      <node id="12929">
        <label>/home/aakash/mlpack/src/mlpack/core/hpt/deduce_hp_types.hpp</label>
        <link refid="deduce__hp__types_8hpp"/>
        <childnode refid="12916" relation="include">
        </childnode>
      </node>
      <node id="12948">
        <label>/home/aakash/mlpack/src/mlpack/methods/random_forest/random_forest.hpp</label>
        <link refid="random__forest_8hpp"/>
      </node>
      <node id="12913">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/cv_base.hpp</label>
        <link refid="cv__base_8hpp"/>
        <childnode refid="12914" relation="include">
        </childnode>
        <childnode refid="12915" relation="include">
        </childnode>
      </node>
      <node id="12925">
        <label>/home/aakash/mlpack/src/mlpack/core/data/load_csv.hpp</label>
        <link refid="load__csv_8hpp"/>
      </node>
      <node id="12955">
        <label>/home/aakash/mlpack/src/mlpack/tests/test_catch_tools.hpp</label>
        <link refid="test__catch__tools_8hpp"/>
        <childnode refid="12954" relation="include">
        </childnode>
      </node>
      <node id="12921">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/metrics/precision.hpp</label>
        <link refid="precision_8hpp"/>
      </node>
      <node id="12914">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/k_fold_cv.hpp</label>
        <link refid="k__fold__cv_8hpp"/>
      </node>
      <node id="12934">
        <label>/home/aakash/mlpack/src/mlpack/methods/ann/brnn.hpp</label>
        <link refid="brnn_8hpp"/>
      </node>
      <node id="12956">
        <label>/home/aakash/mlpack/src/mlpack/tests/test_function_tools.hpp</label>
        <link refid="test__function__tools_8hpp"/>
      </node>
      <node id="12939">
        <label>/home/aakash/mlpack/src/mlpack/methods/ann/layer_names.hpp</label>
        <link refid="layer__names_8hpp"/>
      </node>
      <node id="12941">
        <label>/home/aakash/mlpack/src/mlpack/tests/custom_layer.hpp</label>
        <link refid="custom__layer_8hpp"/>
      </node>
      <node id="12959">
        <label>/home/aakash/mlpack/src/mlpack/methods/nca/nca_softmax_error_function.hpp</label>
        <link refid="nca__softmax__error__function_8hpp"/>
        <childnode refid="12960" relation="include">
        </childnode>
      </node>
      <node id="12949">
        <label>/home/aakash/mlpack/src/mlpack/methods/kde/kde_model.hpp</label>
        <link refid="kde__model_8hpp"/>
      </node>
      <node id="12958">
        <label>/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp</label>
        <link refid="logistic__regression_8hpp"/>
        <childnode refid="12956" relation="include">
        </childnode>
      </node>
      <node id="12920">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/metrics/mse.hpp</label>
        <link refid="mse_8hpp"/>
      </node>
      <node id="12910">
        <label>/home/aakash/mlpack/src/mlpack/core/math/shuffle_data.hpp</label>
        <link refid="shuffle__data_8hpp"/>
        <childnode refid="12911" relation="include">
        </childnode>
        <childnode refid="12957" relation="include">
        </childnode>
        <childnode refid="12959" relation="include">
        </childnode>
      </node>
      <node id="12935">
        <label>/home/aakash/mlpack/src/mlpack/methods/ann/ffn.hpp</label>
        <link refid="ffn_8hpp"/>
        <childnode refid="12931" relation="include">
        </childnode>
        <childnode refid="12936" relation="include">
        </childnode>
        <childnode refid="12937" relation="include">
        </childnode>
        <childnode refid="12938" relation="include">
        </childnode>
      </node>
      <node id="12927">
        <label>/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp</label>
        <link refid="cv__function_8hpp"/>
      </node>
      <node id="12937">
        <label>/home/aakash/mlpack/src/mlpack/methods/reinforcement_learning/q_networks/dueling_dqn.hpp</label>
        <link refid="dueling__dqn_8hpp"/>
      </node>
      <node id="12922">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/metrics/r2_score.hpp</label>
        <link refid="r2__score_8hpp"/>
      </node>
      <node id="12950">
        <label>/home/aakash/mlpack/src/mlpack/methods/preprocess/scaling_model.hpp</label>
        <link refid="scaling__model_8hpp"/>
      </node>
      <node id="12957">
        <label>/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression_function.hpp</label>
        <link refid="logistic__regression__function_8hpp"/>
        <childnode refid="12958" relation="include">
        </childnode>
      </node>
      <node id="12931">
        <label>/home/aakash/mlpack/src/mlpack/methods/ann/gan/gan.hpp</label>
        <link refid="gan_8hpp"/>
      </node>
      <node id="12930">
        <label>/home/aakash/mlpack/src/mlpack/methods/adaboost/adaboost_model.hpp</label>
        <link refid="adaboost__model_8hpp"/>
      </node>
      <node id="12912">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/meta_info_extractor.hpp</label>
        <link refid="meta__info__extractor_8hpp"/>
        <childnode refid="12913" relation="include">
        </childnode>
        <childnode refid="12914" relation="include">
        </childnode>
        <childnode refid="12915" relation="include">
        </childnode>
        <childnode refid="12916" relation="include">
        </childnode>
      </node>
      <node id="12938">
        <label>/home/aakash/mlpack/src/mlpack/methods/reinforcement_learning/q_networks/simple_dqn.hpp</label>
        <link refid="simple__dqn_8hpp"/>
      </node>
      <node id="12915">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/simple_cv.hpp</label>
        <link refid="simple__cv_8hpp"/>
      </node>
      <node id="12945">
        <label>/home/aakash/mlpack/src/mlpack/methods/decision_tree/gini_gain.hpp</label>
        <link refid="gini__gain_8hpp"/>
        <childnode refid="12946" relation="include">
        </childnode>
      </node>
      <node id="12952">
        <label>/home/aakash/mlpack/src/mlpack/tests/ann_test_tools.hpp</label>
        <link refid="ann__test__tools_8hpp"/>
      </node>
      <node id="12924">
        <label>/home/aakash/mlpack/src/mlpack/core/cv/metrics/silhouette_score.hpp</label>
        <link refid="silhouette__score_8hpp"/>
      </node>
      <node id="12928">
        <label>/home/aakash/mlpack/src/mlpack/core/hpt/fixed.hpp</label>
        <link refid="fixed_8hpp"/>
        <childnode refid="12929" relation="include">
        </childnode>
      </node>
      <node id="12960">
        <label>/home/aakash/mlpack/src/mlpack/methods/nca/nca.hpp</label>
        <link refid="nca_8hpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1math">mlpack::math</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin</para></simplesect>
Given data points and labels, shuffle their ordering.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#ifndef<sp/>MLPACK_CORE_MATH_SHUFFLE_DATA_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_CORE_MATH_SHUFFLE_DATA_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">math<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LabelsType&gt;</highlight></codeline>
<codeline lineno="28" refid="namespacemlpack_1_1math_1a9fd573f30f3cd68f82f51ba57506d169" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemlpack_1_1math_1a9fd573f30f3cd68f82f51ba57506d169" kindref="member">ShuffleData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>inputPoints,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LabelsType&amp;<sp/>inputLabels,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatType&amp;<sp/>outputPoints,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LabelsType&amp;<sp/>outputLabels,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;!arma::is_SpMat&lt;MatType&gt;::value&gt;*<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;!arma::is_Cube&lt;MatType&gt;::value&gt;*<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>ordering.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>arma::uvec<sp/>ordering<sp/>=<sp/>arma::shuffle(arma::linspace&lt;arma::uvec&gt;(0,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inputPoints.n_cols<sp/>-<sp/>1,<sp/>inputPoints.n_cols));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>outputPoints<sp/>=<sp/>inputPoints.cols(ordering);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>outputLabels<sp/>=<sp/>inputLabels.cols(ordering);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LabelsType&gt;</highlight></codeline>
<codeline lineno="51" refid="namespacemlpack_1_1math_1a3d51da0ee510a507855d587b91645a2e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemlpack_1_1math_1a9fd573f30f3cd68f82f51ba57506d169" kindref="member">ShuffleData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>inputPoints,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LabelsType&amp;<sp/>inputLabels,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatType&amp;<sp/>outputPoints,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LabelsType&amp;<sp/>outputLabels,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;arma::is_SpMat&lt;MatType&gt;::value&gt;*<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;!arma::is_Cube&lt;MatType&gt;::value&gt;*<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>ordering.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>arma::uvec<sp/>ordering<sp/>=<sp/>arma::shuffle(arma::linspace&lt;arma::uvec&gt;(0,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inputPoints.n_cols<sp/>-<sp/>1,<sp/>inputPoints.n_cols));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>coordinate<sp/>list<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>arma::umat<sp/>locations(2,<sp/>inputPoints.n_nonzero);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>arma::Col&lt;typename<sp/>MatType::elem_type&gt;<sp/>values(inputPoints.n_nonzero);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType::const_iterator<sp/>it<sp/>=<sp/>inputPoints.begin();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>inputPoints.end())</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>locations(0,<sp/>index)<sp/>=<sp/>it.row();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>locations(1,<sp/>index)<sp/>=<sp/>ordering[it.col()];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>values(index)<sp/>=<sp/>(*it);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;inputPoints<sp/>==<sp/>&amp;outputPoints<sp/>||<sp/>&amp;inputLabels<sp/>==<sp/>&amp;outputLabels)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>MatType<sp/>newOutputPoints(locations,<sp/>values,<sp/>inputPoints.n_rows,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputPoints.n_cols,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>LabelsType<sp/>newOutputLabels(inputLabels.n_elem);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>newOutputLabels.cols(ordering)<sp/>=<sp/>inputLabels;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>outputPoints<sp/>=<sp/>std::move(newOutputPoints);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>outputLabels<sp/>=<sp/>std::move(newOutputLabels);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>outputPoints<sp/>=<sp/>MatType(locations,<sp/>values,<sp/>inputPoints.n_rows,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputPoints.n_cols,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>outputLabels.set_size(inputLabels.n_elem);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>outputLabels.cols(ordering)<sp/>=<sp/>inputLabels;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LabelsType&gt;</highlight></codeline>
<codeline lineno="103" refid="namespacemlpack_1_1math_1ae867d408a4e6bd4f6c6efa6ad46f699d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemlpack_1_1math_1a9fd573f30f3cd68f82f51ba57506d169" kindref="member">ShuffleData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>inputPoints,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LabelsType&amp;<sp/>inputLabels,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatType&amp;<sp/>outputPoints,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LabelsType&amp;<sp/>outputLabels,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;!arma::is_SpMat&lt;MatType&gt;::value&gt;*<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;arma::is_Cube&lt;MatType&gt;::value&gt;*<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;arma::is_Cube&lt;LabelsType&gt;::value&gt;*<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>ordering.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>arma::uvec<sp/>ordering<sp/>=<sp/>arma::shuffle(arma::linspace&lt;arma::uvec&gt;(0,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inputPoints.n_cols<sp/>-<sp/>1,<sp/>inputPoints.n_cols));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Properly<sp/>handle<sp/>the<sp/>case<sp/>where<sp/>the<sp/>input<sp/>and<sp/>output<sp/>data<sp/>are<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>MatType*<sp/>outputPointsPtr<sp/>=<sp/>&amp;outputPoints;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>LabelsType*<sp/>outputLabelsPtr<sp/>=<sp/>&amp;outputLabels;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;inputPoints<sp/>==<sp/>&amp;outputPoints)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>outputPointsPtr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MatType();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;inputLabels<sp/>==<sp/>&amp;outputLabels)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>outputLabelsPtr<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LabelsType();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>outputPointsPtr-&gt;set_size(inputPoints.n_rows,<sp/>inputPoints.n_cols,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inputPoints.n_slices);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>outputLabelsPtr-&gt;set_size(inputLabels.n_rows,<sp/>inputLabels.n_cols,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inputLabels.n_slices);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ordering.n_elem;<sp/>++i)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>outputPointsPtr-&gt;tube(0,<sp/>ordering[i],<sp/>outputPointsPtr-&gt;n_rows<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ordering[i])<sp/>=<sp/>inputPoints.tube(0,<sp/>i,<sp/>inputPoints.n_rows<sp/>-<sp/>1,<sp/>i);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>outputLabelsPtr-&gt;tube(0,<sp/>ordering[i],<sp/>outputLabelsPtr-&gt;n_rows<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ordering[i])<sp/>=<sp/>inputLabels.tube(0,<sp/>i,<sp/>inputLabels.n_rows<sp/>-<sp/>1,<sp/>i);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up<sp/>memory<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;inputPoints<sp/>==<sp/>&amp;outputPoints)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>outputPoints<sp/>=<sp/>std::move(*outputPointsPtr);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>outputPointsPtr;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;inputLabels<sp/>==<sp/>&amp;outputLabels)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>outputLabels<sp/>=<sp/>std::move(*outputLabelsPtr);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>outputLabelsPtr;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LabelsType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>WeightsType&gt;</highlight></codeline>
<codeline lineno="160" refid="namespacemlpack_1_1math_1a4e6818ee1202660968eeda80040b5d0e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemlpack_1_1math_1a9fd573f30f3cd68f82f51ba57506d169" kindref="member">ShuffleData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>inputPoints,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LabelsType&amp;<sp/>inputLabels,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WeightsType&amp;<sp/>inputWeights,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatType&amp;<sp/>outputPoints,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LabelsType&amp;<sp/>outputLabels,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WeightsType&amp;<sp/>outputWeights,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;!arma::is_SpMat&lt;MatType&gt;::value&gt;*<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;!arma::is_Cube&lt;MatType&gt;::value&gt;*<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>ordering.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>arma::uvec<sp/>ordering<sp/>=<sp/>arma::shuffle(arma::linspace&lt;arma::uvec&gt;(0,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inputPoints.n_cols<sp/>-<sp/>1,<sp/>inputPoints.n_cols));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>outputPoints<sp/>=<sp/>inputPoints.cols(ordering);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>outputLabels<sp/>=<sp/>inputLabels.cols(ordering);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>outputWeights<sp/>=<sp/>inputWeights.cols(ordering);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LabelsType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>WeightsType&gt;</highlight></codeline>
<codeline lineno="188" refid="namespacemlpack_1_1math_1a522c0905bf5015a7eebac8fdddb6452b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemlpack_1_1math_1a9fd573f30f3cd68f82f51ba57506d169" kindref="member">ShuffleData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>inputPoints,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LabelsType&amp;<sp/>inputLabels,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WeightsType&amp;<sp/>inputWeights,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatType&amp;<sp/>outputPoints,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LabelsType&amp;<sp/>outputLabels,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WeightsType&amp;<sp/>outputWeights,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;arma::is_SpMat&lt;MatType&gt;::value&gt;*<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt;!arma::is_Cube&lt;MatType&gt;::value&gt;*<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>ordering.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>arma::uvec<sp/>ordering<sp/>=<sp/>arma::shuffle(arma::linspace&lt;arma::uvec&gt;(0,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inputPoints.n_cols<sp/>-<sp/>1,<sp/>inputPoints.n_cols));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>coordinate<sp/>list<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>arma::umat<sp/>locations(2,<sp/>inputPoints.n_nonzero);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>arma::Col&lt;typename<sp/>MatType::elem_type&gt;<sp/>values(inputPoints.n_nonzero);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType::const_iterator<sp/>it<sp/>=<sp/>inputPoints.begin();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>inputPoints.end())</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>locations(0,<sp/>index)<sp/>=<sp/>it.row();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>locations(1,<sp/>index)<sp/>=<sp/>ordering[it.col()];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>values(index)<sp/>=<sp/>(*it);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;inputPoints<sp/>==<sp/>&amp;outputPoints<sp/>||<sp/>&amp;inputLabels<sp/>==<sp/>&amp;outputLabels<sp/>||</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&amp;inputWeights<sp/>==<sp/>&amp;outputWeights)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>MatType<sp/>newOutputPoints(locations,<sp/>values,<sp/>inputPoints.n_rows,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputPoints.n_cols,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>LabelsType<sp/>newOutputLabels(inputLabels.n_elem);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>WeightsType<sp/>newOutputWeights(inputWeights.n_elem);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>newOutputLabels.cols(ordering)<sp/>=<sp/>inputLabels;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>newOutputWeights.cols(ordering)<sp/>=<sp/>inputWeights;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>outputPoints<sp/>=<sp/>std::move(newOutputPoints);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>outputLabels<sp/>=<sp/>std::move(newOutputLabels);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>outputWeights<sp/>=<sp/>std::move(newOutputWeights);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>outputPoints<sp/>=<sp/>MatType(locations,<sp/>values,<sp/>inputPoints.n_rows,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputPoints.n_cols,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>outputLabels.set_size(inputLabels.n_elem);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>outputLabels.cols(ordering)<sp/>=<sp/>inputLabels;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>outputWeights.set_size(inputWeights.n_elem);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>outputWeights.cols(ordering)<sp/>=<sp/>inputWeights;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>math</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/core/math/shuffle_data.hpp"/>
  </compounddef>
</doxygen>
