<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="iodoc" kind="page">
    <compoundname>iodoc</compoundname>
    <title>Writing an mlpack binding</title>
    <detaileddescription>
<sect1 id="iodoc_1iointro">
<title>Introduction</title>
<para>This tutorial gives some simple examples of how to write an mlpack binding that can be compiled for multiple languages. These bindings make up the core of how most users will interact with mlpack.</para><para>mlpack provides the following:</para><para><itemizedlist>
<listitem><para>mlpack::Log, for debugging / informational / warning / fatal output</para></listitem><listitem><para><ref refid="classmlpack_1_1IO" kindref="compound">mlpack::IO</ref>, for parsing command line options or other option</para></listitem></itemizedlist>
</para><para>Each of those classes are well-documented, and that documentation should be consulted for further reference.</para><para>First, we&apos;ll discuss the logging infrastructure, which is useful for giving output that users can see.</para></sect1>
<sect1 id="iodoc_1simplelog">
<title>Simple Logging Example</title>
<para>mlpack has four logging levels:</para><para><itemizedlist>
<listitem><para>Log::Debug</para></listitem><listitem><para>Log::Info</para></listitem><listitem><para>Log::Warn</para></listitem><listitem><para>Log::Fatal</para></listitem></itemizedlist>
</para><para>Output to Log::Debug does not show (and has no performance penalty) when mlpack is compiled without debugging symbols. Output to Log::Info is only shown when the program is run with the <computeroutput><ndash/>verbose</computeroutput> (or <computeroutput>-v</computeroutput>) flag. Log::Warn is always shown, and Log::Fatal will throw a std::runtime_error exception, after a newline is sent to it. If mlpack was compiled with debugging symbols, Log::Fatal will also print a backtrace, if the necessary libraries are available.</para><para>Here is a simple example binding, and its output. Note that instead of <computeroutput>int</computeroutput> <computeroutput>main()</computeroutput>, we use <computeroutput>static</computeroutput> <computeroutput>void</computeroutput> <computeroutput>mlpackMain()</computeroutput>. This is because the automatic binding generator (see bindings) will set up the environment and once that is done, it will call <computeroutput>mlpackMain()</computeroutput>.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/core.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;mlpack/core/util/io.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>definition<sp/>below<sp/>means<sp/>we<sp/>will<sp/>only<sp/>compile<sp/>for<sp/>the<sp/>command<sp/>line.</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>BINDING_TYPE<sp/>BINDING_TYPE_CLI</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;mlpack/core/util/mlpack_main.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>mlpackMain()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Log::Debug<sp/>&lt;&lt;<sp/>&quot;Compiled<sp/>with<sp/>debugging<sp/>symbols.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Log::Info<sp/>&lt;&lt;<sp/>&quot;Some<sp/>test<sp/>informational<sp/>output.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Log::Warn<sp/>&lt;&lt;<sp/>&quot;A<sp/>warning!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Log::Fatal<sp/>&lt;&lt;<sp/>&quot;Program<sp/>has<sp/>crashed.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Log::Warn<sp/>&lt;&lt;<sp/>&quot;Made<sp/>it!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Assuming mlpack is installed on the system and the code above is saved in <computeroutput>test.cpp</computeroutput>, this program can be compiled with the following command:</para><para><programlisting><codeline><highlight class="normal">$<sp/>g++<sp/>-o<sp/>test<sp/>test.cpp<sp/>-DDEBUG<sp/>-g<sp/>-rdynamic<sp/>-lmlpack</highlight></codeline>
</programlisting></para><para>Since we compiled with <computeroutput>-DDEBUG</computeroutput>, if we run the program as below, the following output is shown:</para><para><programlisting><codeline><highlight class="normal">$<sp/>./test<sp/>--verbose</highlight></codeline>
<codeline><highlight class="normal">[DEBUG]<sp/>Compiled<sp/>with<sp/>debugging<sp/>symbols.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Some<sp/>test<sp/>informational<sp/>output.</highlight></codeline>
<codeline><highlight class="normal">[WARN<sp/>]<sp/>A<sp/>warning!</highlight></codeline>
<codeline><highlight class="normal">[FATAL]<sp/>[bt]:<sp/>(1)<sp/>/absolute/path/to/file/example.cpp:6:<sp/>function()</highlight></codeline>
<codeline><highlight class="normal">[FATAL]<sp/>Program<sp/>has<sp/>crashed.</highlight></codeline>
<codeline><highlight class="normal">terminate<sp/>called<sp/>after<sp/>throwing<sp/>an<sp/>instance<sp/>of<sp/>&apos;std::runtime_error&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>what():<sp/><sp/>fatal<sp/>error;<sp/>see<sp/>Log::Fatal<sp/>output</highlight></codeline>
<codeline><highlight class="normal">Aborted</highlight></codeline>
</programlisting></para><para>The flags <computeroutput>-g</computeroutput> and <computeroutput>-rdynamic</computeroutput> are only necessary for providing a backtrace. If those flags are not given during compilation, the following output would be shown:</para><para><programlisting><codeline><highlight class="normal">$<sp/>./test<sp/>--verbose</highlight></codeline>
<codeline><highlight class="normal">[DEBUG]<sp/>Compiled<sp/>with<sp/>debugging<sp/>symbols.</highlight></codeline>
<codeline><highlight class="normal">[INFO<sp/>]<sp/>Some<sp/>test<sp/>informational<sp/>output.</highlight></codeline>
<codeline><highlight class="normal">[WARN<sp/>]<sp/>A<sp/>warning!</highlight></codeline>
<codeline><highlight class="normal">[FATAL]<sp/>Cannot<sp/>give<sp/>backtrace<sp/>because<sp/>program<sp/>was<sp/>compiled<sp/>without:<sp/>-g<sp/>-rdynamic</highlight></codeline>
<codeline><highlight class="normal">[FATAL]<sp/>For<sp/>a<sp/>backtrace,<sp/>recompile<sp/>with:<sp/>-g<sp/>-rdynamic.</highlight></codeline>
<codeline><highlight class="normal">[FATAL]<sp/>Program<sp/>has<sp/>crashed.</highlight></codeline>
<codeline><highlight class="normal">terminate<sp/>called<sp/>after<sp/>throwing<sp/>an<sp/>instance<sp/>of<sp/>&apos;std::runtime_error&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>what():<sp/><sp/>fatal<sp/>error;<sp/>see<sp/>Log::Fatal<sp/>output</highlight></codeline>
<codeline><highlight class="normal">Aborted</highlight></codeline>
</programlisting></para><para>The last warning is not reached, because Log::Fatal terminates the program.</para><para>Without debugging symbols (i.e. without <computeroutput>-g</computeroutput> and <computeroutput>-DDEBUG</computeroutput>) and without <ndash/>verbose, the following is shown:</para><para><programlisting><codeline><highlight class="normal">$<sp/>./test</highlight></codeline>
<codeline><highlight class="normal">[WARN<sp/>]<sp/>A<sp/>warning!</highlight></codeline>
<codeline><highlight class="normal">[FATAL]<sp/>Program<sp/>has<sp/>crashed.</highlight></codeline>
<codeline><highlight class="normal">terminate<sp/>called<sp/>after<sp/>throwing<sp/>an<sp/>instance<sp/>of<sp/>&apos;std::runtime_error&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>what():<sp/><sp/>fatal<sp/>error;<sp/>see<sp/>Log::Fatal<sp/>output</highlight></codeline>
<codeline><highlight class="normal">Aborted</highlight></codeline>
</programlisting></para><para>These four outputs can be very useful for both providing informational output and debugging output for your mlpack program.</para></sect1>
<sect1 id="iodoc_1simpleio">
<title>Simple IO Example</title>
<para>Through the <ref refid="classmlpack_1_1IO" kindref="compound">mlpack::IO</ref> object, command-line parameters can be easily added with the BINDING_NAME, BINDING_SHORT_DESC, BINDING_LONG_DESC, BINDING_EXAMPLE, BINDING_SEE_ALSO, PARAM_INT, PARAM_DOUBLE, PARAM_STRING, and PARAM_FLAG macros.</para><para>Here is a sample use of those macros, extracted from methods/pca/pca_main.cpp. (Some details have been omitted from the snippet below.)</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;mlpack/core.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;mlpack/core/util/io.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;mlpack/core/util/mlpack_main.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Program<sp/>Name.</highlight></codeline>
<codeline><highlight class="normal">BINDING_NAME(&quot;Principal<sp/>Components<sp/>Analysis&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Short<sp/>description.</highlight></codeline>
<codeline><highlight class="normal">BINDING_SHORT_DESC(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;An<sp/>implementation<sp/>of<sp/>several<sp/>strategies<sp/>for<sp/>principal<sp/>components<sp/>analysis<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;(PCA),<sp/>a<sp/>common<sp/>preprocessing<sp/>step.<sp/><sp/>Given<sp/>a<sp/>dataset<sp/>and<sp/>a<sp/>desired<sp/>new<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;dimensionality,<sp/>this<sp/>can<sp/>reduce<sp/>the<sp/>dimensionality<sp/>of<sp/>the<sp/>data<sp/>using<sp/>the<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;linear<sp/>transformation<sp/>determined<sp/>by<sp/>PCA.&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Long<sp/>description.</highlight></codeline>
<codeline><highlight class="normal">BINDING_LONG_DESC(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;This<sp/>program<sp/>performs<sp/>principal<sp/>components<sp/>analysis<sp/>on<sp/>the<sp/>given<sp/>dataset<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;using<sp/>the<sp/>exact,<sp/>randomized,<sp/>randomized<sp/>block<sp/>Krylov,<sp/>or<sp/>QUIC<sp/>SVD<sp/>method.<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;It<sp/>will<sp/>transform<sp/>the<sp/>data<sp/>onto<sp/>its<sp/>principal<sp/>components,<sp/>optionally<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;performing<sp/>dimensionality<sp/>reduction<sp/>by<sp/>ignoring<sp/>the<sp/>principal<sp/>components<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;with<sp/>the<sp/>smallest<sp/>eigenvalues.&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>See<sp/>also...</highlight></codeline>
<codeline><highlight class="normal">BINDING_SEE_ALSO(&quot;Principal<sp/>component<sp/>analysis<sp/>on<sp/>Wikipedia&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;https://en.wikipedia.org/wiki/Principal_component_analysis&quot;);</highlight></codeline>
<codeline><highlight class="normal">BINDING_SEE_ALSO(&quot;mlpack::pca::PCA<sp/>C++<sp/>class<sp/>documentation&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;@doxygen/classmlpack_1_1pca_1_1PCA.html&quot;));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Parameters<sp/>for<sp/>program.</highlight></codeline>
<codeline><highlight class="normal">PARAM_MATRIX_IN_REQ(&quot;input&quot;,<sp/>&quot;Input<sp/>dataset<sp/>to<sp/>perform<sp/>PCA<sp/>on.&quot;,<sp/>&quot;i&quot;);</highlight></codeline>
<codeline><highlight class="normal">PARAM_MATRIX_OUT(&quot;output&quot;,<sp/>&quot;Matrix<sp/>to<sp/>save<sp/>modified<sp/>dataset<sp/>to.&quot;,<sp/>&quot;o&quot;);</highlight></codeline>
<codeline><highlight class="normal">PARAM_INT_IN(&quot;new_dimensionality&quot;,<sp/>&quot;Desired<sp/>dimensionality<sp/>of<sp/>output<sp/>dataset.&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;d&quot;,<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>mlpack;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>mlpackMain()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Load<sp/>input<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>arma::mat&amp;<sp/>dataset<sp/>=<sp/>IO::GetParam&lt;arma::mat&gt;(&quot;input&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>newDimension<sp/>=<sp/>IO::GetParam&lt;int&gt;(&quot;new_dimensionality&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Now<sp/>save<sp/>the<sp/>results.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(IO::HasParam(&quot;output&quot;))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>IO::GetParam&lt;arma::mat&gt;(&quot;output&quot;)<sp/>=<sp/>std::move(dataset);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Documentation is automatically generated using those macros, and when the program is run with <ndash/>help the following is displayed:</para><para><programlisting><codeline><highlight class="normal">$<sp/>mlpack_pca<sp/>--help</highlight></codeline>
<codeline><highlight class="normal">Principal<sp/>Components<sp/>Analysis</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>This<sp/>program<sp/>performs<sp/>principal<sp/>components<sp/>analysis<sp/>on<sp/>the<sp/>given<sp/>dataset.<sp/><sp/>It</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>will<sp/>transform<sp/>the<sp/>data<sp/>onto<sp/>its<sp/>principal<sp/>components,<sp/>optionally<sp/>performing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>dimensionality<sp/>reduction<sp/>by<sp/>ignoring<sp/>the<sp/>principal<sp/>components<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>smallest<sp/>eigenvalues.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Required<sp/>options:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>--input_file<sp/>[string]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input<sp/>dataset<sp/>to<sp/>perform<sp/>PCA<sp/>on.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--output_file<sp/>[string]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix<sp/>to<sp/>save<sp/>modified<sp/>dataset<sp/>to.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Options:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>--help<sp/>(-h)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default<sp/>help<sp/>info.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--info<sp/>[string]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Get<sp/>help<sp/>on<sp/>a<sp/>specific<sp/>module<sp/>or<sp/>option.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default<sp/>value<sp/>&apos;&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--new_dimensionality<sp/>[int]<sp/><sp/><sp/><sp/>Desired<sp/>dimensionality<sp/>of<sp/>output<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default<sp/>value<sp/>0.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>--verbose<sp/>(-v)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Display<sp/>informational<sp/>messages<sp/>and<sp/>the<sp/>full<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>parameters<sp/>and<sp/>timers<sp/>at<sp/>the<sp/>end<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execution.</highlight></codeline>
</programlisting></para><para>The <ref refid="classmlpack_1_1IO" kindref="compound">mlpack::IO</ref> documentation can be consulted for further and complete documentation. Also useful is to look at other example bindings, found in <computeroutput>src/mlpack/methods/</computeroutput>. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
