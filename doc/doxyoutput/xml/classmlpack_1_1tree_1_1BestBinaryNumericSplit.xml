<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1tree_1_1BestBinaryNumericSplit" kind="class" language="C++" prot="public">
    <compoundname>mlpack::tree::BestBinaryNumericSplit</compoundname>
    <includes refid="best__binary__numeric__split_8hpp" local="no">best_binary_numeric_split.hpp</includes>
    <innerclass refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" prot="public">mlpack::tree::BestBinaryNumericSplit::AuxiliarySplitInfo</innerclass>
    <templateparamlist>
      <param>
        <type>typename FitnessFunction</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1ac9d96402128b43c686e4160a55debf09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ElemType</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>static size_t CalculateDirection</definition>
        <argsstring>(const ElemType &amp;point, const double &amp;splitInfo, const AuxiliarySplitInfo &amp;)</argsstring>
        <name>CalculateDirection</name>
        <param>
          <type>const ElemType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>splitInfo</declname>
        </param>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" kindref="compound">AuxiliarySplitInfo</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Given a point, calculate which child it should go to (left or right). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Point to calculate direction of. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Auxiliary information for the split. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*</parametername>
</parameternamelist>
<parameterdescription>
<para>(aux) Auxiliary information for the split (Unused). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/decision_tree/best_binary_numeric_split.hpp" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1a822dda54d3f80cda15f57c1bcdc45cbc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t NumChildren</definition>
        <argsstring>(const double &amp;, const AuxiliarySplitInfo &amp;)</argsstring>
        <name>NumChildren</name>
        <param>
          <type>const double &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" kindref="compound">AuxiliarySplitInfo</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Returns 2, since the binary split always has two children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/decision_tree/best_binary_numeric_split.hpp" line="166" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/decision_tree/best_binary_numeric_split.hpp" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1a97602530721faeb6f8e9077992889686" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>UseWeights</declname>
            <defname>UseWeights</defname>
          </param>
          <param>
            <type>typename VecType</type>
          </param>
          <param>
            <type>typename WeightVecType</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>static double SplitIfBetter</definition>
        <argsstring>(const double bestGain, const VecType &amp;data, const arma::Row&lt; size_t &gt; &amp;labels, const size_t numClasses, const WeightVecType &amp;weights, const size_t minimumLeafSize, const double minimumGainSplit, arma::vec &amp;splitInfo, AuxiliarySplitInfo &amp;aux)</argsstring>
        <name>SplitIfBetter</name>
        <param>
          <type>const double</type>
          <declname>bestGain</declname>
        </param>
        <param>
          <type>const VecType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const arma::Row&lt; size_t &gt; &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>numClasses</declname>
        </param>
        <param>
          <type>const WeightVecType &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>minimumLeafSize</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>minimumGainSplit</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>splitInfo</declname>
        </param>
        <param>
          <type><ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" kindref="compound">AuxiliarySplitInfo</ref> &amp;</type>
          <declname>aux</declname>
        </param>
        <briefdescription>
<para>Check if we can split a node. </para>        </briefdescription>
        <detaileddescription>
<para>If we can split a node in a way that improves on &apos;bestGain&apos;, then we return the improved gain. Otherwise we return the value &apos;bestGain&apos;. If a split is made, then splitInfo and aux may be modified.</para><para>This overload is used only for classification tasks.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bestGain</parametername>
</parameternamelist>
<parameterdescription>
<para>Best gain seen so far (we&apos;ll only split if we find gain better than this). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of data points to check for a split in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Labels for each point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numClasses</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of classes in the dataset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights associated with labels. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of points in a leaf node for splitting. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumGainSplit</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum gain split. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores split information on a successful split. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aux</parametername>
</parameternamelist>
<parameterdescription>
<para>Auxiliary split information, which may be modified on a successful split. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/decision_tree/best_binary_numeric_split.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1a88ca342950299e5e4d0a02bbfaa82530" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>UseWeights</declname>
            <defname>UseWeights</defname>
          </param>
          <param>
            <type>typename VecType</type>
          </param>
          <param>
            <type>typename ResponsesType</type>
          </param>
          <param>
            <type>typename WeightVecType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; !<ref refid="structmlpack_1_1tree_1_1HasOptimizedBinarySplitForms" kindref="compound">HasOptimizedBinarySplitForms</ref>&lt; FitnessFunction, UseWeights &gt;::value, double &gt;::type</type>
        <definition>static std::enable_if&lt; !HasOptimizedBinarySplitForms&lt;FitnessFunction, UseWeights&gt;::value, double&gt;::type SplitIfBetter</definition>
        <argsstring>(const double bestGain, const VecType &amp;data, const ResponsesType &amp;responses, const WeightVecType &amp;weights, const size_t minimumLeafSize, const double minimumGainSplit, double &amp;splitInfo, AuxiliarySplitInfo &amp;aux, FitnessFunction &amp;fitnessFunction)</argsstring>
        <name>SplitIfBetter</name>
        <param>
          <type>const double</type>
          <declname>bestGain</declname>
        </param>
        <param>
          <type>const VecType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const ResponsesType &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>const WeightVecType &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>minimumLeafSize</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>minimumGainSplit</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>splitInfo</declname>
        </param>
        <param>
          <type><ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" kindref="compound">AuxiliarySplitInfo</ref> &amp;</type>
          <declname>aux</declname>
        </param>
        <param>
          <type>FitnessFunction &amp;</type>
          <declname>fitnessFunction</declname>
        </param>
        <briefdescription>
<para>Check if we can split a node. </para>        </briefdescription>
        <detaileddescription>
<para>If we can split a node in a way that improves on &apos;bestGain&apos;, then we return the improved gain. Otherwise we return the value &apos;bestGain&apos;. If a split is made, then splitInfo and aux may be modified.</para><para>This overload is used only for regression tasks.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bestGain</parametername>
</parameternamelist>
<parameterdescription>
<para>Best gain seen so far (we&apos;ll only split if we find gain better than this). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of data points to check for a split in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Responses for each point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights associated with responses. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of points in a leaf node for splitting. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumGainSplit</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum gain split. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores split information on a successful split. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aux</parametername>
</parameternamelist>
<parameterdescription>
<para>Auxiliary split information, which may be modified on a successful split. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fitnessFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>The FitnessFunction object instance. It it used to evaluate the gain for the split. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/decision_tree/best_binary_numeric_split.hpp" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1a808fe167e131da7ebf244da9763ed62c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>UseWeights</declname>
            <defname>UseWeights</defname>
          </param>
          <param>
            <type>typename VecType</type>
          </param>
          <param>
            <type>typename ResponsesType</type>
          </param>
          <param>
            <type>typename WeightVecType</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structmlpack_1_1tree_1_1HasOptimizedBinarySplitForms" kindref="compound">HasOptimizedBinarySplitForms</ref>&lt; FitnessFunction, UseWeights &gt;::value, double &gt;::type</type>
        <definition>static std::enable_if&lt; HasOptimizedBinarySplitForms&lt;FitnessFunction, UseWeights&gt;::value, double&gt;::type SplitIfBetter</definition>
        <argsstring>(const double bestGain, const VecType &amp;data, const ResponsesType &amp;responses, const WeightVecType &amp;weights, const size_t minimumLeafSize, const double minimumGainSplit, double &amp;splitInfo, AuxiliarySplitInfo &amp;, FitnessFunction &amp;fitnessFunction)</argsstring>
        <name>SplitIfBetter</name>
        <param>
          <type>const double</type>
          <declname>bestGain</declname>
        </param>
        <param>
          <type>const VecType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const ResponsesType &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>const WeightVecType &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>minimumLeafSize</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>minimumGainSplit</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>splitInfo</declname>
        </param>
        <param>
          <type><ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1_1AuxiliarySplitInfo" kindref="compound">AuxiliarySplitInfo</ref> &amp;</type>
        </param>
        <param>
          <type>FitnessFunction &amp;</type>
          <declname>fitnessFunction</declname>
        </param>
        <briefdescription>
<para>Check if we can split a node. </para>        </briefdescription>
        <detaileddescription>
<para>If we can split a node in a way that improves on &apos;bestGain&apos;, then we return the improved gain. Otherwise we return the value &apos;bestGain&apos;. If a split is made, then splitInfo and aux may be modified.</para><para>This overload is specialized for any fitness function that implements BinaryScanInitialize(), BinaryStep() and BinaryGains() functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bestGain</parametername>
</parameternamelist>
<parameterdescription>
<para>Best gain seen so far (we&apos;ll only split if we find gain better than this). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimension of data points to check for a split in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Responses for each point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weights</parametername>
</parameternamelist>
<parameterdescription>
<para>Weights associated with responses. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumLeafSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of points in a leaf node for splitting. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumGainSplit</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum gain split. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Stores split information on a successful split. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aux</parametername>
</parameternamelist>
<parameterdescription>
<para>Auxiliary split information, which may be modified on a successful split. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/decision_tree/best_binary_numeric_split.hpp" line="152" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit" kindref="compound">BestBinaryNumericSplit</ref> is a splitting function for decision trees that will exhaustively search a numeric dimension for the best binary split. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>FitnessFunction</parametername>
</parameternamelist>
<parameterdescription>
<para>Fitness function to use to calculate gain. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/decision_tree/best_binary_numeric_split.hpp" line="50" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/decision_tree/best_binary_numeric_split.hpp" bodystart="49" bodyend="184"/>
    <listofallmembers>
      <member refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1ac9d96402128b43c686e4160a55debf09" prot="public" virt="non-virtual"><scope>mlpack::tree::BestBinaryNumericSplit</scope><name>CalculateDirection</name></member>
      <member refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1a822dda54d3f80cda15f57c1bcdc45cbc" prot="public" virt="non-virtual"><scope>mlpack::tree::BestBinaryNumericSplit</scope><name>NumChildren</name></member>
      <member refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1a97602530721faeb6f8e9077992889686" prot="public" virt="non-virtual"><scope>mlpack::tree::BestBinaryNumericSplit</scope><name>SplitIfBetter</name></member>
      <member refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1a88ca342950299e5e4d0a02bbfaa82530" prot="public" virt="non-virtual"><scope>mlpack::tree::BestBinaryNumericSplit</scope><name>SplitIfBetter</name></member>
      <member refid="classmlpack_1_1tree_1_1BestBinaryNumericSplit_1a808fe167e131da7ebf244da9763ed62c" prot="public" virt="non-virtual"><scope>mlpack::tree::BestBinaryNumericSplit</scope><name>SplitIfBetter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
