<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="mean__normalization_8hpp" kind="file" language="C++">
    <compoundname>mean_normalization.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <includedby refid="scaling__model_8hpp" local="no">/home/aakash/mlpack/src/mlpack/methods/preprocess/scaling_model.hpp</includedby>
    <incdepgraph>
      <node id="8797">
        <label>list</label>
      </node>
      <node id="8794">
        <label>atomic</label>
      </node>
      <node id="8784">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="8760">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="8796">
        <label>iomanip</label>
      </node>
      <node id="8769">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="8770" relation="include">
        </childnode>
        <childnode refid="8772" relation="include">
        </childnode>
      </node>
      <node id="8752">
        <label>cstdint</label>
      </node>
      <node id="8761">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="8768">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="8791">
        <label>arma_config.hpp</label>
      </node>
      <node id="8781">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="8748">
        <label>cmath</label>
      </node>
      <node id="8767">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="8756">
        <label>stdexcept</label>
      </node>
      <node id="8776">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="8761" relation="include">
        </childnode>
        <childnode refid="8763" relation="include">
        </childnode>
        <childnode refid="8764" relation="include">
        </childnode>
        <childnode refid="8762" relation="include">
        </childnode>
      </node>
      <node id="8800">
        <label>string</label>
      </node>
      <node id="8788">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="8789" relation="include">
        </childnode>
        <childnode refid="8755" relation="include">
        </childnode>
      </node>
      <node id="8798">
        <label>map</label>
      </node>
      <node id="8750">
        <label>cfloat</label>
      </node>
      <node id="8780">
        <label>boost/variant.hpp</label>
      </node>
      <node id="8802">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="8764">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="8787">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="8788" relation="include">
        </childnode>
        <childnode refid="8764" relation="include">
        </childnode>
        <childnode refid="8771" relation="include">
        </childnode>
        <childnode refid="8789" relation="include">
        </childnode>
      </node>
      <node id="8777">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="8775">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="8761" relation="include">
        </childnode>
        <childnode refid="8763" relation="include">
        </childnode>
        <childnode refid="8764" relation="include">
        </childnode>
        <childnode refid="8762" relation="include">
        </childnode>
      </node>
      <node id="8778">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="8761" relation="include">
        </childnode>
        <childnode refid="8763" relation="include">
        </childnode>
        <childnode refid="8764" relation="include">
        </childnode>
        <childnode refid="8762" relation="include">
        </childnode>
      </node>
      <node id="8746">
        <label>/home/aakash/mlpack/src/mlpack/core/data/scaler_methods/mean_normalization.hpp</label>
        <link refid="mean__normalization_8hpp"/>
        <childnode refid="8747" relation="include">
        </childnode>
      </node>
      <node id="8766">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="8786">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="8762" relation="include">
        </childnode>
        <childnode refid="8763" relation="include">
        </childnode>
        <childnode refid="8764" relation="include">
        </childnode>
        <childnode refid="8774" relation="include">
        </childnode>
        <childnode refid="8783" relation="include">
        </childnode>
      </node>
      <node id="8790">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="8791" relation="include">
        </childnode>
      </node>
      <node id="8792">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="8747">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="8748" relation="include">
        </childnode>
        <childnode refid="8749" relation="include">
        </childnode>
        <childnode refid="8750" relation="include">
        </childnode>
        <childnode refid="8751" relation="include">
        </childnode>
        <childnode refid="8752" relation="include">
        </childnode>
        <childnode refid="8753" relation="include">
        </childnode>
        <childnode refid="8754" relation="include">
        </childnode>
        <childnode refid="8755" relation="include">
        </childnode>
        <childnode refid="8756" relation="include">
        </childnode>
        <childnode refid="8757" relation="include">
        </childnode>
        <childnode refid="8758" relation="include">
        </childnode>
        <childnode refid="8759" relation="include">
        </childnode>
        <childnode refid="8760" relation="include">
        </childnode>
        <childnode refid="8761" relation="include">
        </childnode>
        <childnode refid="8762" relation="include">
        </childnode>
        <childnode refid="8763" relation="include">
        </childnode>
        <childnode refid="8764" relation="include">
        </childnode>
        <childnode refid="8765" relation="include">
        </childnode>
        <childnode refid="8766" relation="include">
        </childnode>
        <childnode refid="8767" relation="include">
        </childnode>
        <childnode refid="8768" relation="include">
        </childnode>
        <childnode refid="8769" relation="include">
        </childnode>
        <childnode refid="8773" relation="include">
        </childnode>
        <childnode refid="8774" relation="include">
        </childnode>
        <childnode refid="8775" relation="include">
        </childnode>
        <childnode refid="8776" relation="include">
        </childnode>
        <childnode refid="8777" relation="include">
        </childnode>
        <childnode refid="8778" relation="include">
        </childnode>
        <childnode refid="8779" relation="include">
        </childnode>
        <childnode refid="8785" relation="include">
        </childnode>
        <childnode refid="8786" relation="include">
        </childnode>
        <childnode refid="8783" relation="include">
        </childnode>
        <childnode refid="8787" relation="include">
        </childnode>
        <childnode refid="8790" relation="include">
        </childnode>
        <childnode refid="8792" relation="include">
        </childnode>
        <childnode refid="8793" relation="include">
        </childnode>
        <childnode refid="8802" relation="include">
        </childnode>
        <childnode refid="8803" relation="include">
        </childnode>
      </node>
      <node id="8753">
        <label>cstdio</label>
      </node>
      <node id="8757">
        <label>tuple</label>
      </node>
      <node id="8762">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="8779">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="8762" relation="include">
        </childnode>
        <childnode refid="8763" relation="include">
        </childnode>
        <childnode refid="8764" relation="include">
        </childnode>
        <childnode refid="8766" relation="include">
        </childnode>
        <childnode refid="8780" relation="include">
        </childnode>
        <childnode refid="8781" relation="include">
        </childnode>
        <childnode refid="8782" relation="include">
        </childnode>
        <childnode refid="8783" relation="include">
        </childnode>
      </node>
      <node id="8758">
        <label>utility</label>
      </node>
      <node id="8782">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="8773">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="8770">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="8771" relation="include">
        </childnode>
      </node>
      <node id="8793">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="8794" relation="include">
        </childnode>
        <childnode refid="8795" relation="include">
        </childnode>
        <childnode refid="8796" relation="include">
        </childnode>
        <childnode refid="8797" relation="include">
        </childnode>
        <childnode refid="8798" relation="include">
        </childnode>
        <childnode refid="8799" relation="include">
        </childnode>
        <childnode refid="8800" relation="include">
        </childnode>
        <childnode refid="8801" relation="include">
        </childnode>
      </node>
      <node id="8771">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="8785">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="8783" relation="include">
        </childnode>
        <childnode refid="8779" relation="include">
        </childnode>
        <childnode refid="8786" relation="include">
        </childnode>
      </node>
      <node id="8754">
        <label>cstdlib</label>
      </node>
      <node id="8749">
        <label>cctype</label>
      </node>
      <node id="8772">
        <label>unordered_map</label>
      </node>
      <node id="8751">
        <label>climits</label>
      </node>
      <node id="8799">
        <label>mutex</label>
      </node>
      <node id="8795">
        <label>chrono</label>
      </node>
      <node id="8803">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="8801">
        <label>thread</label>
      </node>
      <node id="8789">
        <label>type_traits</label>
      </node>
      <node id="8765">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="8759">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="8783">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="8761" relation="include">
        </childnode>
        <childnode refid="8762" relation="include">
        </childnode>
        <childnode refid="8763" relation="include">
        </childnode>
        <childnode refid="8764" relation="include">
        </childnode>
        <childnode refid="8784" relation="include">
        </childnode>
      </node>
      <node id="8755">
        <label>cstring</label>
      </node>
      <node id="8774">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="8763">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8804">
        <label>/home/aakash/mlpack/src/mlpack/core/data/scaler_methods/mean_normalization.hpp</label>
        <link refid="mean__normalization_8hpp"/>
        <childnode refid="8805" relation="include">
        </childnode>
      </node>
      <node id="8805">
        <label>/home/aakash/mlpack/src/mlpack/methods/preprocess/scaling_model.hpp</label>
        <link refid="scaling__model_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmlpack_1_1data_1_1MeanNormalization" prot="public">mlpack::data::MeanNormalization</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1data">mlpack::data</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Jeffin Sam</para></simplesect>
MeanNormalization class to scale features.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#ifndef<sp/>MLPACK_CORE_DATA_MEAN_NORMALIZATION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_CORE_DATA_MEAN_NORMALIZATION_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">data<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classmlpack_1_1data_1_1MeanNormalization" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1data_1_1MeanNormalization" kindref="compound">MeanNormalization</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType&gt;</highlight></codeline>
<codeline lineno="55" refid="classmlpack_1_1data_1_1MeanNormalization_1a0b68c1a39a21e56e10f5b9250b056244" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1MeanNormalization_1a0b68c1a39a21e56e10f5b9250b056244" kindref="member">Fit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>input)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>itemMean<sp/>=<sp/>arma::mean(input,<sp/>1);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>itemMin<sp/>=<sp/>arma::min(input,<sp/>1);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>itemMax<sp/>=<sp/>arma::max(input,<sp/>1);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>scale<sp/>=<sp/>itemMax<sp/>-<sp/>itemMin;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handling<sp/>zeros<sp/>in<sp/>scale<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>scale.for_each([](arma::vec::elem_type&amp;<sp/>val)<sp/>{<sp/>val<sp/>=</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(val<sp/>==<sp/>0)<sp/>?<sp/>1<sp/>:<sp/>val;<sp/>});</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType&gt;</highlight></codeline>
<codeline lineno="73" refid="classmlpack_1_1data_1_1MeanNormalization_1a7bc470a1e097f5b0aaf2396691432b3f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1MeanNormalization_1a7bc470a1e097f5b0aaf2396691432b3f" kindref="member">Transform</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>input,<sp/>MatType&amp;<sp/>output)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itemMean.is_empty()<sp/>||<sp/>scale.is_empty())</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Call<sp/>Fit()<sp/>before<sp/>Transform(),<sp/>please&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>refer<sp/>to<sp/>the<sp/>documentation.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>output.copy_size(input);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>(input.each_col()<sp/>-<sp/>itemMean).each_col()<sp/>/<sp/>scale;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatType&gt;</highlight></codeline>
<codeline lineno="91" refid="classmlpack_1_1data_1_1MeanNormalization_1afb0e67c6fbf5a527f63469bbbf07066c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1MeanNormalization_1afb0e67c6fbf5a527f63469bbbf07066c" kindref="member">InverseTransform</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatType&amp;<sp/>input,<sp/>MatType&amp;<sp/>output)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>output.copy_size(input);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>(input.each_col()<sp/>%<sp/>scale).each_col()<sp/>+<sp/>itemMean;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classmlpack_1_1data_1_1MeanNormalization_1a95996a797e721bc9acc0c9a5d697fdcf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec&amp;<sp/><ref refid="classmlpack_1_1data_1_1MeanNormalization_1a95996a797e721bc9acc0c9a5d697fdcf" kindref="member">ItemMean</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itemMean;<sp/>}</highlight></codeline>
<codeline lineno="100" refid="classmlpack_1_1data_1_1MeanNormalization_1ae9ae591f227874f238c38d4cf070c6c8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec&amp;<sp/><ref refid="classmlpack_1_1data_1_1MeanNormalization_1ae9ae591f227874f238c38d4cf070c6c8" kindref="member">ItemMin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itemMin;<sp/>}</highlight></codeline>
<codeline lineno="102" refid="classmlpack_1_1data_1_1MeanNormalization_1a5ed43c216f23cf96c432216d6fc2a1c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec&amp;<sp/><ref refid="classmlpack_1_1data_1_1MeanNormalization_1a5ed43c216f23cf96c432216d6fc2a1c3" kindref="member">ItemMax</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itemMax;<sp/>}</highlight></codeline>
<codeline lineno="104" refid="classmlpack_1_1data_1_1MeanNormalization_1a5adcafebd2c229793e57b7268c90a0fe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec&amp;<sp/><ref refid="classmlpack_1_1data_1_1MeanNormalization_1a5adcafebd2c229793e57b7268c90a0fe" kindref="member">Scale</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scale;<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="107" refid="classmlpack_1_1data_1_1MeanNormalization_1a65cba07328997659bec80b9879b15a51" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1MeanNormalization_1a65cba07328997659bec80b9879b15a51" kindref="member">serialize</ref>(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="comment">/*<sp/>version<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>ar(CEREAL_NVP(itemMin));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>ar(CEREAL_NVP(itemMax));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>ar(CEREAL_NVP(scale));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>ar(CEREAL_NVP(itemMean));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>which<sp/>holds<sp/>mean<sp/>of<sp/>each<sp/>feature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>arma::vec<sp/>itemMean;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>which<sp/>holds<sp/>minimum<sp/>of<sp/>each<sp/>feature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>arma::vec<sp/>itemMin;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>which<sp/>holds<sp/>maximum<sp/>of<sp/>each<sp/>feature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>arma::vec<sp/>itemMax;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Vector<sp/>which<sp/>is<sp/>used<sp/>to<sp/>scale<sp/>up<sp/>each<sp/>feature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>arma::vec<sp/>scale;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>MeanNormalization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/core/data/scaler_methods/mean_normalization.hpp"/>
  </compounddef>
</doxygen>
