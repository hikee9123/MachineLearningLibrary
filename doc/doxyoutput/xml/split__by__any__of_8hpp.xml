<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="split__by__any__of_8hpp" kind="file" language="C++">
    <compoundname>split_by_any_of.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <includes local="no">mlpack/core/boost_backport/boost_backport_string_view.hpp</includes>
    <includes local="no">array</includes>
    <incdepgraph>
      <node id="9775">
        <label>list</label>
      </node>
      <node id="9772">
        <label>atomic</label>
      </node>
      <node id="9762">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="9738">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="9724">
        <label>/home/aakash/mlpack/src/mlpack/core/data/tokenizers/split_by_any_of.hpp</label>
        <link refid="split__by__any__of_8hpp"/>
        <childnode refid="9725" relation="include">
        </childnode>
        <childnode refid="9782" relation="include">
        </childnode>
        <childnode refid="9783" relation="include">
        </childnode>
      </node>
      <node id="9774">
        <label>iomanip</label>
      </node>
      <node id="9782">
        <label>mlpack/core/boost_backport/boost_backport_string_view.hpp</label>
      </node>
      <node id="9747">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="9748" relation="include">
        </childnode>
        <childnode refid="9750" relation="include">
        </childnode>
      </node>
      <node id="9730">
        <label>cstdint</label>
      </node>
      <node id="9739">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="9746">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="9769">
        <label>arma_config.hpp</label>
      </node>
      <node id="9759">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="9726">
        <label>cmath</label>
      </node>
      <node id="9745">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="9734">
        <label>stdexcept</label>
      </node>
      <node id="9754">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="9739" relation="include">
        </childnode>
        <childnode refid="9741" relation="include">
        </childnode>
        <childnode refid="9742" relation="include">
        </childnode>
        <childnode refid="9740" relation="include">
        </childnode>
      </node>
      <node id="9778">
        <label>string</label>
      </node>
      <node id="9766">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="9767" relation="include">
        </childnode>
        <childnode refid="9733" relation="include">
        </childnode>
      </node>
      <node id="9776">
        <label>map</label>
      </node>
      <node id="9728">
        <label>cfloat</label>
      </node>
      <node id="9758">
        <label>boost/variant.hpp</label>
      </node>
      <node id="9780">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="9742">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="9765">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="9766" relation="include">
        </childnode>
        <childnode refid="9742" relation="include">
        </childnode>
        <childnode refid="9749" relation="include">
        </childnode>
        <childnode refid="9767" relation="include">
        </childnode>
      </node>
      <node id="9755">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="9753">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="9739" relation="include">
        </childnode>
        <childnode refid="9741" relation="include">
        </childnode>
        <childnode refid="9742" relation="include">
        </childnode>
        <childnode refid="9740" relation="include">
        </childnode>
      </node>
      <node id="9756">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="9739" relation="include">
        </childnode>
        <childnode refid="9741" relation="include">
        </childnode>
        <childnode refid="9742" relation="include">
        </childnode>
        <childnode refid="9740" relation="include">
        </childnode>
      </node>
      <node id="9744">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="9764">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="9740" relation="include">
        </childnode>
        <childnode refid="9741" relation="include">
        </childnode>
        <childnode refid="9742" relation="include">
        </childnode>
        <childnode refid="9752" relation="include">
        </childnode>
        <childnode refid="9761" relation="include">
        </childnode>
      </node>
      <node id="9768">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="9769" relation="include">
        </childnode>
      </node>
      <node id="9770">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="9725">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="9726" relation="include">
        </childnode>
        <childnode refid="9727" relation="include">
        </childnode>
        <childnode refid="9728" relation="include">
        </childnode>
        <childnode refid="9729" relation="include">
        </childnode>
        <childnode refid="9730" relation="include">
        </childnode>
        <childnode refid="9731" relation="include">
        </childnode>
        <childnode refid="9732" relation="include">
        </childnode>
        <childnode refid="9733" relation="include">
        </childnode>
        <childnode refid="9734" relation="include">
        </childnode>
        <childnode refid="9735" relation="include">
        </childnode>
        <childnode refid="9736" relation="include">
        </childnode>
        <childnode refid="9737" relation="include">
        </childnode>
        <childnode refid="9738" relation="include">
        </childnode>
        <childnode refid="9739" relation="include">
        </childnode>
        <childnode refid="9740" relation="include">
        </childnode>
        <childnode refid="9741" relation="include">
        </childnode>
        <childnode refid="9742" relation="include">
        </childnode>
        <childnode refid="9743" relation="include">
        </childnode>
        <childnode refid="9744" relation="include">
        </childnode>
        <childnode refid="9745" relation="include">
        </childnode>
        <childnode refid="9746" relation="include">
        </childnode>
        <childnode refid="9747" relation="include">
        </childnode>
        <childnode refid="9751" relation="include">
        </childnode>
        <childnode refid="9752" relation="include">
        </childnode>
        <childnode refid="9753" relation="include">
        </childnode>
        <childnode refid="9754" relation="include">
        </childnode>
        <childnode refid="9755" relation="include">
        </childnode>
        <childnode refid="9756" relation="include">
        </childnode>
        <childnode refid="9757" relation="include">
        </childnode>
        <childnode refid="9763" relation="include">
        </childnode>
        <childnode refid="9764" relation="include">
        </childnode>
        <childnode refid="9761" relation="include">
        </childnode>
        <childnode refid="9765" relation="include">
        </childnode>
        <childnode refid="9768" relation="include">
        </childnode>
        <childnode refid="9770" relation="include">
        </childnode>
        <childnode refid="9771" relation="include">
        </childnode>
        <childnode refid="9780" relation="include">
        </childnode>
        <childnode refid="9781" relation="include">
        </childnode>
      </node>
      <node id="9731">
        <label>cstdio</label>
      </node>
      <node id="9735">
        <label>tuple</label>
      </node>
      <node id="9740">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="9757">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="9740" relation="include">
        </childnode>
        <childnode refid="9741" relation="include">
        </childnode>
        <childnode refid="9742" relation="include">
        </childnode>
        <childnode refid="9744" relation="include">
        </childnode>
        <childnode refid="9758" relation="include">
        </childnode>
        <childnode refid="9759" relation="include">
        </childnode>
        <childnode refid="9760" relation="include">
        </childnode>
        <childnode refid="9761" relation="include">
        </childnode>
      </node>
      <node id="9736">
        <label>utility</label>
      </node>
      <node id="9783">
        <label>array</label>
      </node>
      <node id="9760">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="9751">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="9748">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="9749" relation="include">
        </childnode>
      </node>
      <node id="9771">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="9772" relation="include">
        </childnode>
        <childnode refid="9773" relation="include">
        </childnode>
        <childnode refid="9774" relation="include">
        </childnode>
        <childnode refid="9775" relation="include">
        </childnode>
        <childnode refid="9776" relation="include">
        </childnode>
        <childnode refid="9777" relation="include">
        </childnode>
        <childnode refid="9778" relation="include">
        </childnode>
        <childnode refid="9779" relation="include">
        </childnode>
      </node>
      <node id="9749">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="9763">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="9761" relation="include">
        </childnode>
        <childnode refid="9757" relation="include">
        </childnode>
        <childnode refid="9764" relation="include">
        </childnode>
      </node>
      <node id="9732">
        <label>cstdlib</label>
      </node>
      <node id="9727">
        <label>cctype</label>
      </node>
      <node id="9750">
        <label>unordered_map</label>
      </node>
      <node id="9729">
        <label>climits</label>
      </node>
      <node id="9777">
        <label>mutex</label>
      </node>
      <node id="9773">
        <label>chrono</label>
      </node>
      <node id="9781">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="9779">
        <label>thread</label>
      </node>
      <node id="9767">
        <label>type_traits</label>
      </node>
      <node id="9743">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="9737">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="9761">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="9739" relation="include">
        </childnode>
        <childnode refid="9740" relation="include">
        </childnode>
        <childnode refid="9741" relation="include">
        </childnode>
        <childnode refid="9742" relation="include">
        </childnode>
        <childnode refid="9762" relation="include">
        </childnode>
      </node>
      <node id="9733">
        <label>cstring</label>
      </node>
      <node id="9752">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="9741">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmlpack_1_1data_1_1SplitByAnyOf" prot="public">mlpack::data::SplitByAnyOf</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1data">mlpack::data</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Jeffin Sam </para></simplesect>
<simplesect kind="author"><para>Mikhail Lozhnikov</para></simplesect>
Definition of the SplitByAnyOf class.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#ifndef<sp/>MLPACK_CORE_DATA_TOKENIZERS_SPLIT_BY_ANY_OF_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_CORE_DATA_TOKENIZERS_SPLIT_BY_ANY_OF_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mlpack/core/boost_backport/boost_backport_string_view.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">data<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="classmlpack_1_1data_1_1SplitByAnyOf" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1data_1_1SplitByAnyOf" kindref="compound">SplitByAnyOf</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30" refid="classmlpack_1_1data_1_1SplitByAnyOf_1a03f0c19bcdda5c1375b8a758629eff5d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1SplitByAnyOf_1a03f0c19bcdda5c1375b8a758629eff5d" kindref="member">TokenType</ref><sp/>=<sp/>boost::string_view;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classmlpack_1_1data_1_1SplitByAnyOf_1aaa4af3e49d65c9a8506f0cfd34619e8c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1SplitByAnyOf_1aaa4af3e49d65c9a8506f0cfd34619e8c" kindref="member">MaskType</ref><sp/>=<sp/>std::array&lt;bool,<sp/>1<sp/>&lt;&lt;<sp/>CHAR_BIT&gt;;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classmlpack_1_1data_1_1SplitByAnyOf_1acc0147a952dfb8a3dd66d22c0a768f58" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1data_1_1SplitByAnyOf_1acc0147a952dfb8a3dd66d22c0a768f58" kindref="member">SplitByAnyOf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::string_view<sp/>delimiters)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>mask.fill(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>symbol<sp/>:<sp/>delimiters)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(symbol)]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classmlpack_1_1data_1_1SplitByAnyOf_1a1a8b5d91733ed9625908a4edc3246f1d" refkind="member"><highlight class="normal"><sp/><sp/>boost::string_view<sp/><ref refid="classmlpack_1_1data_1_1SplitByAnyOf_1a1a8b5d91733ed9625908a4edc3246f1d" kindref="member">operator()</ref>(boost::string_view&amp;<sp/>str)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="55"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::string_view<sp/>retval;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(retval.empty())</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>pos<sp/>=<sp/>FindFirstDelimiter(str);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>str.npos)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.clear();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>str.substr(0,<sp/>pos);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str.remove_prefix(pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="classmlpack_1_1data_1_1SplitByAnyOf_1ad940364fce91b58ca7f6ef1323219f3b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1SplitByAnyOf_1ad940364fce91b58ca7f6ef1323219f3b" kindref="member">IsTokenEmpty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::string_view<sp/>token)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>token.empty();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classmlpack_1_1data_1_1SplitByAnyOf_1a5742046289049335be15949f0dda89b6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1SplitByAnyOf_1aaa4af3e49d65c9a8506f0cfd34619e8c" kindref="member">MaskType</ref>&amp;<sp/><ref refid="classmlpack_1_1data_1_1SplitByAnyOf_1a5742046289049335be15949f0dda89b6" kindref="member">Mask</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mask;<sp/>}</highlight></codeline>
<codeline lineno="86" refid="classmlpack_1_1data_1_1SplitByAnyOf_1abe5606f9d71e14c63eb45692ffe404ef" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1data_1_1SplitByAnyOf_1aaa4af3e49d65c9a8506f0cfd34619e8c" kindref="member">MaskType</ref>&amp;<sp/><ref refid="classmlpack_1_1data_1_1SplitByAnyOf_1abe5606f9d71e14c63eb45692ffe404ef" kindref="member">Mask</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mask;<sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>FindFirstDelimiter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::string_view<sp/>str)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="97"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>str.size();<sp/>pos++)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask[static_cast&lt;unsigned<sp/>char&gt;(str[pos])])</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str.npos;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1data_1_1SplitByAnyOf_1aaa4af3e49d65c9a8506f0cfd34619e8c" kindref="member">MaskType</ref><sp/>mask;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/core/data/tokenizers/split_by_any_of.hpp"/>
  </compounddef>
</doxygen>
