<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="python_quickstart" kind="page">
    <compoundname>python_quickstart</compoundname>
    <title>mlpack in Python quickstart guide</title>
    <detaileddescription>
<sect1 id="python_quickstart_1python_quickstart_intro">
<title>Introduction</title>
<para>This page describes how you can quickly get started using mlpack from Python and gives a few examples of usage, and pointers to deeper documentation.</para><para>This quickstart guide is also available for <ref refid="cli_quickstart" kindref="compound">the command-line</ref> and <ref refid="julia_quickstart" kindref="compound">Julia</ref>.</para></sect1>
<sect1 id="python_quickstart_1python_quickstart_install">
<title>Installing mlpack</title>
<para>Installing the mlpack bindings for Python is straightforward. It&apos;s easy to use conda or pip to do this:</para><para><programlisting><codeline><highlight class="normal">pip<sp/>install<sp/>mlpack</highlight></codeline>
</programlisting></para><para><programlisting><codeline><highlight class="normal">conda<sp/>install<sp/>-c<sp/>conda-forge<sp/>mlpack</highlight></codeline>
</programlisting></para><para>Otherwise, we can build the Python bindings from scratch, as follows. First we have to install the dependencies (the code below is for Ubuntu), then we can build and install mlpack. You can copy-paste the commands into your shell.</para><para><programlisting><codeline><highlight class="normal">sudo<sp/>apt-get<sp/>install<sp/>libboost-all-dev<sp/>g++<sp/>cmake<sp/>libarmadillo-dev<sp/>python-pip<sp/>wget</highlight></codeline>
<codeline><highlight class="normal">sudo<sp/>pip<sp/>install<sp/>cython<sp/>setuptools<sp/>distutils<sp/>numpy<sp/>pandas</highlight></codeline>
<codeline><highlight class="normal">wget<sp/>https://www.mlpack.org/files/mlpack-3.4.2.tar.gz</highlight></codeline>
<codeline><highlight class="normal">tar<sp/>-xvzpf<sp/>mlpack-3.4.2.tar.gz</highlight></codeline>
<codeline><highlight class="normal">mkdir<sp/>-p<sp/>mlpack-3.4.2/build/<sp/>&amp;&amp;<sp/>cd<sp/>mlpack-3.4.2/build/</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>../<sp/>&amp;&amp;<sp/>make<sp/>-j4<sp/>&amp;&amp;<sp/>sudo<sp/>make<sp/>install</highlight></codeline>
</programlisting></para><para>More information on the build process and details can be found on the <ref refid="build" kindref="compound">Building mlpack From Source</ref> page. You may also need to set the environment variable <computeroutput>LD_LIBRARY_PATH</computeroutput> to include <computeroutput>/usr/local/lib/</computeroutput> on most Linux systems.</para><para><programlisting><codeline><highlight class="normal">export<sp/>LD_LIBRARY_PATH=/usr/local/lib/</highlight></codeline>
</programlisting></para><para>You can also use the mlpack Docker image on Dockerhub, which has all of the Python bindings pre-installed:</para><para><programlisting><codeline><highlight class="normal">docker<sp/>run<sp/>-it<sp/>mlpack/mlpack<sp/>/bin/bash</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="python_quickstart_1python_quickstart_example">
<title>Simple mlpack quickstart example</title>
<para>As a really simple example of how to use mlpack from Python, let&apos;s do some simple classification on a subset of the standard machine learning <computeroutput>covertype</computeroutput> dataset. We&apos;ll first split the dataset into a training set and a testing set, then we&apos;ll train an mlpack random forest on the training data, and finally we&apos;ll print the accuracy of the random forest on the test dataset.</para><para>You can copy-paste this code directly into Python to run it.</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>mlpack</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pandas<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>pd</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Load<sp/>the<sp/>dataset<sp/>from<sp/>an<sp/>online<sp/>URL.<sp/><sp/>Replace<sp/>with<sp/>&apos;covertype.csv.gz&apos;<sp/>if<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>want<sp/>to<sp/>use<sp/>on<sp/>the<sp/>full<sp/>dataset.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">df<sp/>=<sp/>pd.read_csv(</highlight><highlight class="stringliteral">&apos;http://www.mlpack.org/datasets/covertype-small.csv.gz&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Split<sp/>the<sp/>labels.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">labels<sp/>=<sp/>df[</highlight><highlight class="stringliteral">&apos;label&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal">dataset<sp/>=<sp/>df.drop(</highlight><highlight class="stringliteral">&apos;label&apos;</highlight><highlight class="normal">,<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Split<sp/>the<sp/>dataset<sp/>using<sp/>mlpack.<sp/><sp/>The<sp/>output<sp/>comes<sp/>back<sp/>as<sp/>a<sp/>dictionary,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>which<sp/>we&apos;ll<sp/>unpack<sp/>for<sp/>clarity<sp/>of<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">output<sp/>=<sp/>mlpack.preprocess_split(input=dataset,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_labels=labels,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_ratio=0.3)</highlight></codeline>
<codeline><highlight class="normal">training_set<sp/>=<sp/>output[</highlight><highlight class="stringliteral">&apos;training&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal">training_labels<sp/>=<sp/>output[</highlight><highlight class="stringliteral">&apos;training_labels&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal">test_set<sp/>=<sp/>output[</highlight><highlight class="stringliteral">&apos;test&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal">test_labels<sp/>=<sp/>output[</highlight><highlight class="stringliteral">&apos;test_labels&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Train<sp/>a<sp/>random<sp/>forest.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">output<sp/>=<sp/>mlpack.random_forest(training=training_set,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labels=training_labels,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_training_accuracy=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_trees=10,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minimum_leaf_size=3)</highlight></codeline>
<codeline><highlight class="normal">random_forest<sp/>=<sp/>output[</highlight><highlight class="stringliteral">&apos;output_model&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Predict<sp/>the<sp/>labels<sp/>of<sp/>the<sp/>test<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">output<sp/>=<sp/>mlpack.random_forest(input_model=random_forest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test=test_set)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Now<sp/>print<sp/>the<sp/>accuracy.<sp/><sp/>The<sp/>&apos;probabilities&apos;<sp/>output<sp/>could<sp/>also<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>to<sp/>generate<sp/>an<sp/>ROC<sp/>curve.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">correct<sp/>=<sp/>np.sum(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&apos;predictions&apos;</highlight><highlight class="normal">]<sp/>==<sp/>np.reshape(test_labels,<sp/>(test_labels.shape[0],)))</highlight></codeline>
<codeline><highlight class="normal">print(str(correct)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>correct<sp/>out<sp/>of<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(len(test_labels))<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>(&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>str(100<sp/>*<sp/>float(correct)<sp/>/<sp/>float(len(test_labels)))<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;%).&apos;</highlight><highlight class="normal">)</highlight></codeline>
</programlisting></para><para>We can see that we achieve reasonably good accuracy on the test dataset (80%+); if we use the full <computeroutput>covertype.csv.gz</computeroutput>, the accuracy should increase significantly (but training will take longer).</para><para>It&apos;s easy to modify the code above to do more complex things, or to use different mlpack learners, or to interface with other machine learning toolkits.</para></sect1>
<sect1 id="python_quickstart_1python_quickstart_whatelse">
<title>What else does mlpack implement?</title>
<para>The example above has only shown a little bit of the functionality of mlpack. Lots of other commands are available with different functionality. A full list of each of these commands and full documentation can be found on the following page:</para><para><itemizedlist>
<listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/python_documentation.html">Python documentation</ulink></para></listitem></itemizedlist>
</para><para>For more information on what mlpack does, see <ulink url="https://www.mlpack.org/">https://www.mlpack.org/</ulink>. Next, let&apos;s go through another example for providing movie recommendations with mlpack.</para></sect1>
<sect1 id="python_quickstart_1python_quickstart_movierecs">
<title>Using mlpack for movie recommendations</title>
<para>In this example, we&apos;ll train a collaborative filtering model using mlpack&apos;s <computeroutput><ulink url="https://www.mlpack.org/doc/mlpack-git/python_documentation.html#cf">cf()</ulink></computeroutput> method. We&apos;ll train this on the MovieLens dataset from <ulink url="https://grouplens.org/datasets/movielens/,">https://grouplens.org/datasets/movielens/,</ulink> and then we&apos;ll use the model that we train to give recommendations.</para><para>You can copy-paste this code directly into Python to run it.</para><para><programlisting><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>mlpack</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pandas<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>pd</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>First,<sp/>load<sp/>the<sp/>MovieLens<sp/>dataset.<sp/><sp/>This<sp/>is<sp/>taken<sp/>from<sp/>files.grouplens.org/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>but<sp/>reposted<sp/>on<sp/>mlpack.org<sp/>as<sp/>unpacked<sp/>and<sp/>slightly<sp/>preprocessed<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ratings<sp/>=<sp/>pd.read_csv(</highlight><highlight class="stringliteral">&apos;http://www.mlpack.org/datasets/ml-20m/ratings-only.csv.gz&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">movies<sp/>=<sp/>pd.read_csv(</highlight><highlight class="stringliteral">&apos;http://www.mlpack.org/datasets/ml-20m/movies.csv.gz&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Hold<sp/>out<sp/>10%<sp/>of<sp/>the<sp/>dataset<sp/>into<sp/>a<sp/>test<sp/>set<sp/>so<sp/>we<sp/>can<sp/>evaluate<sp/>performance.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">output<sp/>=<sp/>mlpack.preprocess_split(input=ratings,<sp/>test_ratio=0.1,<sp/>verbose=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">ratings_train<sp/>=<sp/>output[</highlight><highlight class="stringliteral">&apos;training&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal">ratings_test<sp/>=<sp/>output[</highlight><highlight class="stringliteral">&apos;test&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Train<sp/>the<sp/>model.<sp/><sp/>Change<sp/>the<sp/>rank<sp/>to<sp/>increase/decrease<sp/>the<sp/>complexity<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>model.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">output<sp/>=<sp/><ref refid="namespacemlpack_1_1cf" kindref="compound">mlpack.cf</ref>(training=ratings_train,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test=ratings_test,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank=10,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbose=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>algorithm=</highlight><highlight class="stringliteral">&apos;RegSVD&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">cf_model<sp/>=<sp/>output[</highlight><highlight class="stringliteral">&apos;output_model&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Now<sp/>query<sp/>the<sp/>5<sp/>top<sp/>movies<sp/>for<sp/>user<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">output<sp/>=<sp/><ref refid="namespacemlpack_1_1cf" kindref="compound">mlpack.cf</ref>(input_model=cf_model,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query=[[1]],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recommendations=10,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbose=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>names<sp/>of<sp/>the<sp/>movies<sp/>for<sp/>user<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">print(</highlight><highlight class="stringliteral">&quot;Recommendations<sp/>for<sp/>user<sp/>1:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(10):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>str(movies.loc[movies[</highlight><highlight class="stringliteral">&apos;movieId&apos;</highlight><highlight class="normal">]<sp/>==</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&apos;output&apos;</highlight><highlight class="normal">][0,<sp/>i]].iloc[0][</highlight><highlight class="stringliteral">&apos;title&apos;</highlight><highlight class="normal">]))</highlight></codeline>
</programlisting></para><para>Here is some example output, showing that user 1 seems to have good taste in movies:</para><para><programlisting><codeline><highlight class="normal">Recommendations<sp/>for<sp/>user<sp/>1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>0:<sp/>Casablanca<sp/>(1942)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1:<sp/>Pan&apos;s<sp/>Labyrinth<sp/>(Laberinto<sp/>del<sp/>fauno,<sp/>El)<sp/>(2006)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>2:<sp/>Godfather,<sp/>The<sp/>(1972)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>3:<sp/>Answer<sp/>This!<sp/>(2010)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>4:<sp/>Life<sp/>Is<sp/>Beautiful<sp/>(La<sp/>Vita<sp/>è<sp/>bella)<sp/>(1997)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>5:<sp/>Adventures<sp/>of<sp/>Tintin,<sp/>The<sp/>(2011)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>6:<sp/>Dark<sp/>Knight,<sp/>The<sp/>(2008)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>7:<sp/>Out<sp/>for<sp/>Justice<sp/>(1991)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>8:<sp/>Dr.<sp/>Strangelove<sp/>or:<sp/>How<sp/>I<sp/>Learned<sp/>to<sp/>Stop<sp/>Worrying<sp/>and<sp/>Love<sp/>the<sp/>Bomb<sp/>(1964)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>9:<sp/>Schindler&apos;s<sp/>List<sp/>(1993)</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="python_quickstart_1python_quickstart_nextsteps">
<title>Next steps with mlpack</title>
<para>Now that you have done some simple work with mlpack, you have seen how it can easily plug into a data science workflow in Python. A great thing to do next would be to look at more documentation for the Python mlpack bindings:</para><para><itemizedlist>
<listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/python_documentation.html">Python mlpack binding documentation</ulink></para></listitem></itemizedlist>
</para><para>Also, mlpack is much more flexible from C++ and allows much greater functionality. So, more complicated tasks are possible if you are willing to write C++ (or perhaps Cython). To get started learning about mlpack in C++, the following resources might be helpful:</para><para><itemizedlist>
<listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/doxygen/tutorials.html">mlpack C++ tutorials</ulink></para></listitem><listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/doxygen/build.html">mlpack build and installation guide</ulink></para></listitem><listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/doxygen/sample.html">Simple sample C++ mlpack programs</ulink></para></listitem><listitem><para><ulink url="https://www.mlpack.org/doc/mlpack-git/doxygen/index.html">mlpack Doxygen documentation homepage</ulink> </para></listitem></itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
