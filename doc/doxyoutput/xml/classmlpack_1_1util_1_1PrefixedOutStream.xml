<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1util_1_1PrefixedOutStream" kind="class" language="C++" prot="public">
    <compoundname>mlpack::util::PrefixedOutStream</compoundname>
    <includes refid="prefixedoutstream_8hpp" local="no">prefixedoutstream.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmlpack_1_1util_1_1PrefixedOutStream_1abb536618767706a6154fb1f159122eb2" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool backtrace</definition>
        <argsstring></argsstring>
        <name>backtrace</name>
        <briefdescription>
<para>If true, on a fatal error, a backtrace will be printed if HAS_BFD_DL is defined. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="123" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1util_1_1PrefixedOutStream_1a2defe63eb7e6955facd67869f63692c8" prot="public" static="no" mutable="no">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; destination</definition>
        <argsstring></argsstring>
        <name>destination</name>
        <briefdescription>
<para>The output stream that all data is to be sent to; example: MLPACK_COUT_STREAM. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="116" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1util_1_1PrefixedOutStream_1afd382e0526bef760552ccae39559116a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ignoreInput</definition>
        <argsstring></argsstring>
        <name>ignoreInput</name>
        <briefdescription>
<para>Discards input, prints nothing if true. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="119" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1util_1_1PrefixedOutStream_1a4be7f76330734411162a25496ab89e97" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool carriageReturned</definition>
        <argsstring></argsstring>
        <name>carriageReturned</name>
        <briefdescription>
<para>If true, the previous call to operator&lt;&lt; encountered a CR, and a prefix will be necessary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="164" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1util_1_1PrefixedOutStream_1a2286119c0d68e96d488b0c38c4f51840" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fatal</definition>
        <argsstring></argsstring>
        <name>fatal</name>
        <briefdescription>
<para>If true, a std::runtime_error exception will be thrown when a CR is encountered. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="168" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1util_1_1PrefixedOutStream_1a78fb15511f687fe7fdb8e3ba9613648b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string prefix</definition>
        <argsstring></argsstring>
        <name>prefix</name>
        <briefdescription>
<para>Contains the prefix we must prepend to each line. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="160" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a700972d87f6b85809b694bc1f747936d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>PrefixedOutStream</definition>
        <argsstring>(std::ostream &amp;destination, const char *prefix, bool ignoreInput=false, bool fatal=false, bool backtrace=true)</argsstring>
        <name>PrefixedOutStream</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoreInput</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fatal</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>backtrace</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set up the <ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>ostream which receives output from this object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>The prefix to prepend to each line. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignoreInput</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the stream will not be printed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fatal</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, a std::runtime_error exception is thrown after printing a newline. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>backtrace</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, attempt to print a backtrace (will only be done if HAS_BFD_DL is defined). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="60" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" bodystart="60" bodyend="73"/>
        <references refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2">PrefixedOutStream::operator&lt;&lt;</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(bool val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write a bool to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="76" column="1"/>
        <referencedby refid="classmlpack_1_1util_1_1PrefixedOutStream_1a700972d87f6b85809b694bc1f747936d" compoundref="prefixedoutstream_8hpp" startline="60" endline="73">PrefixedOutStream::PrefixedOutStream</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a32ccfab2ff69c827167f675e258196d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(short val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>short</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write a short to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1abeffd78f8bc91a764cd0f79368e5df3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(unsigned short val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>unsigned short</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write an unsigned short to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a3caf57a15becc3c7215187b171e72cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(int val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write an int to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a0b8375fac9adc8b60966e90d36f12628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(unsigned int val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>unsigned int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write an unsigned int to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1aec0c7b4a4626ce1ccc2f9d6807ad8873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(long val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write a long to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a87aea94a2111d73f2135b209284ad09c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(unsigned long val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>unsigned long</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write an unsigned long to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1ab5991d0cfe0dfac7c5a0ddfa6718f6e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(float val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write a float to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a6846902e8083855767d9d1d832648ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(double val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write a double to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a2544e470c5774888ac78cf9decaf9cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(long double val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>long double</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write a long double to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a2393eb367323f75e4779c6a00e6aaca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(void *val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write a void pointer to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1afcd1a0321471c0ba68756cc53d4331d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(const char *str)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Write a character array to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1ab52d83d3b935eedc8b519c2a685a4af9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::string &amp;str)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Write a string to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a0efdab0fa7c63ecc9237e62b3710f319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::streambuf *sb)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::streambuf *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
<para>Write a streambuf to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1ad80054a80a360882d40cee6dbc514c45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;(*pf)(std::ostream &amp;))</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;(*)(std::ostream &amp;)</type>
          <declname>pf</declname>
        </param>
        <briefdescription>
<para>Write an ostream manipulator function to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a5dfbb702a279df59b0dbccd6e48a4398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ios &amp;(*pf)(std::ios &amp;))</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ios &amp;(*)(std::ios &amp;)</type>
          <declname>pf</declname>
        </param>
        <briefdescription>
<para>Write an ios manipulator function to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1af1419b2934a872a0eeb744e692565d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ios_base &amp;(*pf)(std::ios_base &amp;))</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ios_base &amp;(*)(std::ios_base &amp;)</type>
          <declname>pf</declname>
        </param>
        <briefdescription>
<para>Write an ios_base manipulator function to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1afee2fee4a49e8b0248cb392e517c6656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmlpack_1_1util_1_1PrefixedOutStream" kindref="compound">PrefixedOutStream</ref> &amp;</type>
        <definition>PrefixedOutStream&amp; operator&lt;&lt;</definition>
        <argsstring>(const T &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Write anything else to the stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="112" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1ab4765d946a6af27a3337ff92e2433c72" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!arma::is_arma_type&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;!arma::is_arma_type&lt;T&gt;::value&gt;::type BaseLogic</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>BaseLogic</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Conducts the base logic required in all the operator &lt;&lt; overloads. </para>        </briefdescription>
        <detaileddescription>
<para>Mostly just a good idea to reduce copy-paste.</para><para>This overload is for non-Armadillo objects, which need special handling during printing.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the data to output. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The The data to be output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1a143260116f20938b1569cf2807be6981" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; arma::is_arma_type&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;arma::is_arma_type&lt;T&gt;::value&gt;::type BaseLogic</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>BaseLogic</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Conducts the base logic required in all the operator &lt;&lt; overloads. </para>        </briefdescription>
        <detaileddescription>
<para>Mostly just a good idea to reduce copy-paste.</para><para>This overload is for Armadillo objects, which need special handling during printing.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the data to output. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The The data to be output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1util_1_1PrefixedOutStream_1ad19055878e012d88a5dd4b6557abcff9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void PrefixIfNeeded</definition>
        <argsstring>()</argsstring>
        <name>PrefixIfNeeded</name>
        <briefdescription>
<para>Output the prefix, but only if we need to and if we are allowed to. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="157" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allows us to output to an ostream with a prefix at the beginning of each line, in the same way we would output to cout or cerr. </para>    </briefdescription>
    <detaileddescription>
<para>The prefix is specified in the constructor (as well as the destination ostream). A newline must be passed to the stream, and then the prefix will be prepended to the next line. For example,</para><para><programlisting><codeline><highlight class="normal">PrefixedOutStream<sp/>outstr(MLPACK_COUT_STREAM,<sp/>&quot;[TEST]<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal">outstr<sp/>&lt;&lt;<sp/>&quot;Hello<sp/>world<sp/>I<sp/>like<sp/>&quot;<sp/>&lt;&lt;<sp/>7.5;</highlight></codeline>
<codeline><highlight class="normal">outstr<sp/>&lt;&lt;<sp/>&quot;...Continue&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">outstr<sp/>&lt;&lt;<sp/>&quot;After<sp/>the<sp/>CR\n&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting></para><para>would give, on MLPACK_COUT_STREAM,</para><para><programlisting><codeline><highlight class="normal">[TEST]<sp/>Hello<sp/>world<sp/>I<sp/>like<sp/>7.5...Continue</highlight></codeline>
<codeline><highlight class="normal">[TEST]<sp/>After<sp/>the<sp/>CR</highlight></codeline>
<codeline><highlight class="normal">[TEST]</highlight></codeline>
</programlisting></para><para>These objects are used for the mlpack::Log levels (DEBUG, INFO, WARN, and FATAL). </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" line="47" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/prefixedoutstream.hpp" bodystart="46" bodyend="169"/>
    <listofallmembers>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1abb536618767706a6154fb1f159122eb2" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>backtrace</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1ab4765d946a6af27a3337ff92e2433c72" prot="private" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>BaseLogic</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a143260116f20938b1569cf2807be6981" prot="private" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>BaseLogic</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a4be7f76330734411162a25496ab89e97" prot="private" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>carriageReturned</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2defe63eb7e6955facd67869f63692c8" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>destination</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2286119c0d68e96d488b0c38c4f51840" prot="private" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>fatal</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1afd382e0526bef760552ccae39559116a" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>ignoreInput</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2e080b843aa4bacfbd35f8152ff5e4c2" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a32ccfab2ff69c827167f675e258196d6" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1abeffd78f8bc91a764cd0f79368e5df3d" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a3caf57a15becc3c7215187b171e72cbb" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a0b8375fac9adc8b60966e90d36f12628" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1aec0c7b4a4626ce1ccc2f9d6807ad8873" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a87aea94a2111d73f2135b209284ad09c" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1ab5991d0cfe0dfac7c5a0ddfa6718f6e6" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a6846902e8083855767d9d1d832648ee8" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2544e470c5774888ac78cf9decaf9cad" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a2393eb367323f75e4779c6a00e6aaca6" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1afcd1a0321471c0ba68756cc53d4331d1" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1ab52d83d3b935eedc8b519c2a685a4af9" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a0efdab0fa7c63ecc9237e62b3710f319" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1ad80054a80a360882d40cee6dbc514c45" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a5dfbb702a279df59b0dbccd6e48a4398" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1af1419b2934a872a0eeb744e692565d28" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1afee2fee4a49e8b0248cb392e517c6656" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a78fb15511f687fe7fdb8e3ba9613648b" prot="private" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>prefix</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1a700972d87f6b85809b694bc1f747936d" prot="public" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>PrefixedOutStream</name></member>
      <member refid="classmlpack_1_1util_1_1PrefixedOutStream_1ad19055878e012d88a5dd4b6557abcff9" prot="private" virt="non-virtual"><scope>mlpack::util::PrefixedOutStream</scope><name>PrefixIfNeeded</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
