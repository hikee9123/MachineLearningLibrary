<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1regression_1_1LogisticRegression" kind="class" language="C++" prot="public">
    <compoundname>mlpack::regression::LogisticRegression</compoundname>
    <includes refid="logistic__regression_8hpp" local="no">logistic_regression.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename MatType</type>
        <defval>arma::mat</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1regression_1_1LogisticRegression_1a3db359547eed8cfd48ca821d95f577af" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double lambda</definition>
        <argsstring></argsstring>
        <name>lambda</name>
        <briefdescription>
<para>L2-regularization penalty parameter. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="248" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1regression_1_1LogisticRegression_1a04cbfbaceba9de22688f818d22083505" prot="private" static="no" mutable="no">
        <type>arma::rowvec</type>
        <definition>arma::rowvec parameters</definition>
        <argsstring></argsstring>
        <name>parameters</name>
        <briefdescription>
<para>Vector of trained parameters (size: dimensionality plus one). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="246" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1a1398e2ef01fc3164b4daeb0f00f3d5c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LogisticRegression</definition>
        <argsstring>(const MatType &amp;predictors, const arma::Row&lt; size_t &gt; &amp;responses, const double lambda=0)</argsstring>
        <name>LogisticRegression</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::Row&lt; size_t &gt; &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct the <ref refid="classmlpack_1_1regression_1_1LogisticRegression" kindref="compound">LogisticRegression</ref> class with the given labeled training data. </para>        </briefdescription>
        <detaileddescription>
<para>This will train the model. Optionally, specify lambda, which is the penalty parameter for L2-regularization. If not specified, it is set to 0, which results in standard (unregularized) logistic regression.</para><para>It is not possible to set a custom optimizer with this constructor. Either use a constructor that does not train and call <ref refid="classmlpack_1_1regression_1_1LogisticRegression_1ab6482ee3c992cd570fc3d1f0f56ce96e" kindref="member">Train()</ref> with a custom optimizer type, or use the constructor that takes an instantiated optimizer. (This unfortunate situation is a language restriction of C++.)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Input training variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Outputs resulting from input training variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>L2-regularization parameter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1a214ab08e854533895ba822cee78db745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LogisticRegression</definition>
        <argsstring>(const MatType &amp;predictors, const arma::Row&lt; size_t &gt; &amp;responses, const arma::rowvec &amp;initialPoint, const double lambda=0)</argsstring>
        <name>LogisticRegression</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::Row&lt; size_t &gt; &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>const arma::rowvec &amp;</type>
          <declname>initialPoint</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct the <ref refid="classmlpack_1_1regression_1_1LogisticRegression" kindref="compound">LogisticRegression</ref> class with the given labeled training data. </para>        </briefdescription>
        <detaileddescription>
<para>This will train the model. Optionally, specify lambda, which is the penalty parameter for L2-regularization. If not specified, it is set to 0, which results in standard (unregularized) logistic regression.</para><para>It is not possible to set a custom optimizer with this constructor. Either use a constructor that does not train and call <ref refid="classmlpack_1_1regression_1_1LogisticRegression_1ab6482ee3c992cd570fc3d1f0f56ce96e" kindref="member">Train()</ref> with a custom optimizer type, or use the constructor that takes an instantiated optimizer. (This unfortunate situation is a language restriction of C++.)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Input training variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Outputs results from input training variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial model to train with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>L2-regularization parameter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1a22f7dc63b9c025bf5bc3347c753d5fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LogisticRegression</definition>
        <argsstring>(const size_t dimensionality=0, const double lambda=0)</argsstring>
        <name>LogisticRegression</name>
        <param>
          <type>const size_t</type>
          <declname>dimensionality</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct the <ref refid="classmlpack_1_1regression_1_1LogisticRegression" kindref="compound">LogisticRegression</ref> class without performing any training. </para>        </briefdescription>
        <detaileddescription>
<para>The dimensionality of the data (which will be used to set the size of the parameters vector) must be specified, and all of the parameters in the model will be set to 0. Note that the dimensionality may be changed later by directly modifying the parameters vector (using <ref refid="classmlpack_1_1regression_1_1LogisticRegression_1addf15f92aee969fb26e6875353e86655" kindref="member">Parameters()</ref>).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dimensionality</parametername>
</parameternamelist>
<parameterdescription>
<para>Dimensionality of the data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>L2-regularization parameter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1a8adc052b5da9db789fe8e1cf365377e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OptimizerType</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>LogisticRegression</definition>
        <argsstring>(const MatType &amp;predictors, const arma::Row&lt; size_t &gt; &amp;responses, OptimizerType &amp;optimizer, const double lambda)</argsstring>
        <name>LogisticRegression</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::Row&lt; size_t &gt; &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>OptimizerType &amp;</type>
          <declname>optimizer</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Construct the <ref refid="classmlpack_1_1regression_1_1LogisticRegression" kindref="compound">LogisticRegression</ref> class with the given labeled training data. </para>        </briefdescription>
        <detaileddescription>
<para>This will train the model. This overload takes an already instantiated optimizer (which holds the <ref refid="classmlpack_1_1regression_1_1LogisticRegressionFunction" kindref="compound">LogisticRegressionFunction</ref> error function, which must also be instantiated), so that the optimizer can be configured before the training is run by this constructor. The update policy of the optimizer can be set through the policy argument. The predictors and responses and initial point are all taken from the error function contained in the optimizer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Input training variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Outputs results from input training variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optimizer</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated optimizer with instantiated error function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>L2-regularization parameter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1a70a9b42571da2eb99254632a19f0e00d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t Classify</definition>
        <argsstring>(const VecType &amp;point, const double decisionBoundary=0.5) const</argsstring>
        <name>Classify</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>decisionBoundary</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
<para>Classify the given point. </para>        </briefdescription>
        <detaileddescription>
<para>The predicted label is returned. Optionally, specify the decision boundary; logistic regression returns a value between 0 and 1. If the value is greater than the decision boundary, the response is taken to be 1; otherwise, it is 0. By default the decision boundary is 0.5.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Point to classify. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decisionBoundary</parametername>
</parameternamelist>
<parameterdescription>
<para>Decision boundary (default 0.5). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Predicted label of point. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="184" column="1"/>
        <referencedby refid="classmlpack_1_1regression_1_1LogisticRegression_1aaf66629b989a326453647f42443c6a0c" compoundref="logistic__regression_8hpp" startline="170" endline="170">LogisticRegression&lt; MatType &gt;::Lambda</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1a1511b2a30dd6df54aa3cb43924e70ba6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Classify</definition>
        <argsstring>(const MatType &amp;dataset, arma::Row&lt; size_t &gt; &amp;labels, const double decisionBoundary=0.5) const</argsstring>
        <name>Classify</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>dataset</declname>
        </param>
        <param>
          <type>arma::Row&lt; size_t &gt; &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>decisionBoundary</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
<para>Classify the given points, returning the predicted labels for each point. </para>        </briefdescription>
        <detaileddescription>
<para>Optionally, specify the decision boundary; logistic regression returns a value between 0 and 1. If the value is greater than the decision boundary, the response is taken to be 1; otherwise, it is 0. By default the decision boundary is 0.5.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataset</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of points to classify. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Predicted labels for each point. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decisionBoundary</parametername>
</parameternamelist>
<parameterdescription>
<para>Decision boundary (default 0.5). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1a9332dbb5281aeb0169400015ac73a4b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Classify</definition>
        <argsstring>(const MatType &amp;dataset, arma::mat &amp;probabilities) const</argsstring>
        <name>Classify</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>dataset</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>probabilities</declname>
        </param>
        <briefdescription>
<para>Classify the given points, returning class probabilities for each point. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataset</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of points to classify. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>probabilities</parametername>
</parameternamelist>
<parameterdescription>
<para>Class probabilities for each point (output). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1a5c33f3a6e99cefc05651dc4284a17af8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double ComputeAccuracy</definition>
        <argsstring>(const MatType &amp;predictors, const arma::Row&lt; size_t &gt; &amp;responses, const double decisionBoundary=0.5) const</argsstring>
        <name>ComputeAccuracy</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::Row&lt; size_t &gt; &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>decisionBoundary</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
<para>Compute the accuracy of the model on the given predictors and responses, optionally using the given decision boundary. </para>        </briefdescription>
        <detaileddescription>
<para>The responses should be either 0 or 1. Logistic regression returns a value between 0 and 1. If the value is greater than the decision boundary, the response is taken to be 1; otherwise, it is 0. By default, the decision boundary is 0.5.</para><para>The accuracy is returned as a percentage, between 0 and 100.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Input predictors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of responses. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decisionBoundary</parametername>
</parameternamelist>
<parameterdescription>
<para>Decision boundary (default 0.5). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Percentage of responses that are predicted correctly. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="225" column="1"/>
        <referencedby refid="classmlpack_1_1regression_1_1LogisticRegression_1aaf66629b989a326453647f42443c6a0c" compoundref="logistic__regression_8hpp" startline="170" endline="170">LogisticRegression&lt; MatType &gt;::Lambda</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1ab62b0b926e4478353d788b9869016b39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double ComputeError</definition>
        <argsstring>(const MatType &amp;predictors, const arma::Row&lt; size_t &gt; &amp;responses) const</argsstring>
        <name>ComputeError</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::Row&lt; size_t &gt; &amp;</type>
          <declname>responses</declname>
        </param>
        <briefdescription>
<para>Compute the error of the model. </para>        </briefdescription>
        <detaileddescription>
<para>This returns the negative objective function of the logistic regression log-likelihood function. For the model to be optimal, the negative log-likelihood function should be minimized.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Input predictors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of responses. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="237" column="1"/>
        <referencedby refid="classmlpack_1_1regression_1_1LogisticRegression_1aaf66629b989a326453647f42443c6a0c" compoundref="logistic__regression_8hpp" startline="170" endline="170">LogisticRegression&lt; MatType &gt;::Lambda</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1aedf1f261c4ef819f2b24abcc8ebae412" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double &amp;</type>
        <definition>const double&amp; Lambda</definition>
        <argsstring>() const</argsstring>
        <name>Lambda</name>
        <briefdescription>
<para>Return the lambda value for L2-regularization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="168" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1aaf66629b989a326453647f42443c6a0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; Lambda</definition>
        <argsstring>()</argsstring>
        <name>Lambda</name>
        <briefdescription>
<para>Modify the lambda value for L2-regularization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="170" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" bodystart="170" bodyend="170"/>
        <references refid="classmlpack_1_1regression_1_1LogisticRegression_1a70a9b42571da2eb99254632a19f0e00d">LogisticRegression&lt; MatType &gt;::Classify</references>
        <references refid="classmlpack_1_1regression_1_1LogisticRegression_1a5c33f3a6e99cefc05651dc4284a17af8">LogisticRegression&lt; MatType &gt;::ComputeAccuracy</references>
        <references refid="classmlpack_1_1regression_1_1LogisticRegression_1ab62b0b926e4478353d788b9869016b39">LogisticRegression&lt; MatType &gt;::ComputeError</references>
        <references refid="classmlpack_1_1regression_1_1LogisticRegression_1a65cba07328997659bec80b9879b15a51">LogisticRegression&lt; MatType &gt;::serialize</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1ae49d6a854112246498e854ed9cfa3b21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::rowvec &amp;</type>
        <definition>const arma::rowvec&amp; Parameters</definition>
        <argsstring>() const</argsstring>
        <name>Parameters</name>
        <briefdescription>
<para>Return the parameters (the b vector). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="163" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1addf15f92aee969fb26e6875353e86655" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>arma::rowvec &amp;</type>
        <definition>arma::rowvec&amp; Parameters</definition>
        <argsstring>()</argsstring>
        <name>Parameters</name>
        <briefdescription>
<para>Modify the parameters (the b vector). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="165" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1a65cba07328997659bec80b9879b15a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>Serialize the model. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="242" column="1"/>
        <referencedby refid="classmlpack_1_1regression_1_1LogisticRegression_1aaf66629b989a326453647f42443c6a0c" compoundref="logistic__regression_8hpp" startline="170" endline="170">LogisticRegression&lt; MatType &gt;::Lambda</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1ab6482ee3c992cd570fc3d1f0f56ce96e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OptimizerType</type>
            <defval>ens::L_BFGS</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>CallbackTypes</declname>
            <defname>CallbackTypes</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Train</definition>
        <argsstring>(const MatType &amp;predictors, const arma::Row&lt; size_t &gt; &amp;responses, CallbackTypes &amp;&amp;... callbacks)</argsstring>
        <name>Train</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::Row&lt; size_t &gt; &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>CallbackTypes &amp;&amp;...</type>
          <declname>callbacks</declname>
        </param>
        <briefdescription>
<para>Train the <ref refid="classmlpack_1_1regression_1_1LogisticRegression" kindref="compound">LogisticRegression</ref> model on the given input data. </para>        </briefdescription>
        <detaileddescription>
<para>By default, the L-BFGS optimization algorithm is used, but others can be specified (such as ens::SGD).</para><para>This will use the existing model parameters as a starting point for the optimization. If this is not what you want, then you should access the parameters vector directly with <ref refid="classmlpack_1_1regression_1_1LogisticRegression_1addf15f92aee969fb26e6875353e86655" kindref="member">Parameters()</ref> and modify it as desired.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OptimizerType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of optimizer to use to train the model. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CallbackTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>Types of Callback Functions. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Input training variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Outputs results from input training variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function for ensmallen optimizer <computeroutput>OptimizerType</computeroutput>. See <ulink url="https://www.ensmallen.org/docs.html#callback-documentation">https://www.ensmallen.org/docs.html#callback-documentation</ulink>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The final objective of the trained model (NaN or Inf on error) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1regression_1_1LogisticRegression_1ad6c8af67806936cd23b73a049b7ac0e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OptimizerType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>CallbackTypes</declname>
            <defname>CallbackTypes</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Train</definition>
        <argsstring>(const MatType &amp;predictors, const arma::Row&lt; size_t &gt; &amp;responses, OptimizerType &amp;optimizer, CallbackTypes &amp;&amp;... callbacks)</argsstring>
        <name>Train</name>
        <param>
          <type>const MatType &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::Row&lt; size_t &gt; &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>OptimizerType &amp;</type>
          <declname>optimizer</declname>
        </param>
        <param>
          <type>CallbackTypes &amp;&amp;...</type>
          <declname>callbacks</declname>
        </param>
        <briefdescription>
<para>Train the <ref refid="classmlpack_1_1regression_1_1LogisticRegression" kindref="compound">LogisticRegression</ref> model with the given instantiated optimizer. </para>        </briefdescription>
        <detaileddescription>
<para>Using this overload allows configuring the instantiated optimizer before training is performed.</para><para>This will use the existing model parameters as a starting point for the optimization. If this is not what you want, then you should access the parameters vector directly with <ref refid="classmlpack_1_1regression_1_1LogisticRegression_1addf15f92aee969fb26e6875353e86655" kindref="member">Parameters()</ref> and modify it as desired.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OptimizerType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of optimizer to use to train the model. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CallbackTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>Types of Callback Functions. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Input training variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Outputs results from input training variables. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optimizer</parametername>
</parameternamelist>
<parameterdescription>
<para>Instantiated optimizer with instantiated error function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbacks</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function for ensmallen optimizer <computeroutput>OptimizerType</computeroutput>. See <ulink url="https://www.ensmallen.org/docs.html#callback-documentation">https://www.ensmallen.org/docs.html#callback-documentation</ulink>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The final objective of the trained model (NaN or Inf on error) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="157" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classmlpack_1_1regression_1_1LogisticRegression" kindref="compound">LogisticRegression</ref> class implements an L2-regularized logistic regression model, and supports training with multiple optimizers and classification. </para>    </briefdescription>
    <detaileddescription>
<para>The class supports different observation types via the MatType template parameter; for instance, logistic regression can be performed on sparse datasets by specifying arma::sp_mat as the MatType parameter.</para><para><ref refid="classmlpack_1_1regression_1_1LogisticRegression" kindref="compound">LogisticRegression</ref> can be used for general classification tasks, but the class is restricted to support only two classes. For multiclass logistic regression, see <ref refid="classmlpack_1_1regression_1_1SoftmaxRegression" kindref="compound">mlpack::regression::SoftmaxRegression</ref>.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MatType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of data matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" line="40" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/logistic_regression/logistic_regression.hpp" bodystart="39" bodyend="249"/>
    <listofallmembers>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1a70a9b42571da2eb99254632a19f0e00d" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>Classify</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1a1511b2a30dd6df54aa3cb43924e70ba6" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>Classify</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1a9332dbb5281aeb0169400015ac73a4b4" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>Classify</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1a5c33f3a6e99cefc05651dc4284a17af8" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>ComputeAccuracy</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1ab62b0b926e4478353d788b9869016b39" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>ComputeError</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1a3db359547eed8cfd48ca821d95f577af" prot="private" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>lambda</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1aedf1f261c4ef819f2b24abcc8ebae412" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>Lambda</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1aaf66629b989a326453647f42443c6a0c" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>Lambda</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1a1398e2ef01fc3164b4daeb0f00f3d5c4" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>LogisticRegression</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1a214ab08e854533895ba822cee78db745" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>LogisticRegression</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1a22f7dc63b9c025bf5bc3347c753d5fc9" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>LogisticRegression</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1a8adc052b5da9db789fe8e1cf365377e6" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>LogisticRegression</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1ae49d6a854112246498e854ed9cfa3b21" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>Parameters</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1addf15f92aee969fb26e6875353e86655" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>Parameters</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1a04cbfbaceba9de22688f818d22083505" prot="private" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>parameters</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1a65cba07328997659bec80b9879b15a51" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1ab6482ee3c992cd570fc3d1f0f56ce96e" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>Train</name></member>
      <member refid="classmlpack_1_1regression_1_1LogisticRegression_1ad6c8af67806936cd23b73a049b7ac0e7" prot="public" virt="non-virtual"><scope>mlpack::regression::LogisticRegression</scope><name>Train</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
