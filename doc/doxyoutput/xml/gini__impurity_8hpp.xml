<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gini__impurity_8hpp" kind="file" language="C++">
    <compoundname>gini_impurity.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <includedby refid="hoeffding__tree_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/hoeffding_tree.hpp</includedby>
    <incdepgraph>
      <node id="50838">
        <label>list</label>
      </node>
      <node id="50835">
        <label>atomic</label>
      </node>
      <node id="50825">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="50801">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="50837">
        <label>iomanip</label>
      </node>
      <node id="50810">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="50811" relation="include">
        </childnode>
        <childnode refid="50813" relation="include">
        </childnode>
      </node>
      <node id="50793">
        <label>cstdint</label>
      </node>
      <node id="50802">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="50809">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="50832">
        <label>arma_config.hpp</label>
      </node>
      <node id="50822">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="50789">
        <label>cmath</label>
      </node>
      <node id="50808">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="50797">
        <label>stdexcept</label>
      </node>
      <node id="50817">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="50802" relation="include">
        </childnode>
        <childnode refid="50804" relation="include">
        </childnode>
        <childnode refid="50805" relation="include">
        </childnode>
        <childnode refid="50803" relation="include">
        </childnode>
      </node>
      <node id="50841">
        <label>string</label>
      </node>
      <node id="50829">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="50830" relation="include">
        </childnode>
        <childnode refid="50796" relation="include">
        </childnode>
      </node>
      <node id="50839">
        <label>map</label>
      </node>
      <node id="50791">
        <label>cfloat</label>
      </node>
      <node id="50821">
        <label>boost/variant.hpp</label>
      </node>
      <node id="50843">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="50805">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="50828">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="50829" relation="include">
        </childnode>
        <childnode refid="50805" relation="include">
        </childnode>
        <childnode refid="50812" relation="include">
        </childnode>
        <childnode refid="50830" relation="include">
        </childnode>
      </node>
      <node id="50818">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="50816">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="50802" relation="include">
        </childnode>
        <childnode refid="50804" relation="include">
        </childnode>
        <childnode refid="50805" relation="include">
        </childnode>
        <childnode refid="50803" relation="include">
        </childnode>
      </node>
      <node id="50819">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="50802" relation="include">
        </childnode>
        <childnode refid="50804" relation="include">
        </childnode>
        <childnode refid="50805" relation="include">
        </childnode>
        <childnode refid="50803" relation="include">
        </childnode>
      </node>
      <node id="50807">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="50827">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="50803" relation="include">
        </childnode>
        <childnode refid="50804" relation="include">
        </childnode>
        <childnode refid="50805" relation="include">
        </childnode>
        <childnode refid="50815" relation="include">
        </childnode>
        <childnode refid="50824" relation="include">
        </childnode>
      </node>
      <node id="50831">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="50832" relation="include">
        </childnode>
      </node>
      <node id="50833">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="50788">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="50789" relation="include">
        </childnode>
        <childnode refid="50790" relation="include">
        </childnode>
        <childnode refid="50791" relation="include">
        </childnode>
        <childnode refid="50792" relation="include">
        </childnode>
        <childnode refid="50793" relation="include">
        </childnode>
        <childnode refid="50794" relation="include">
        </childnode>
        <childnode refid="50795" relation="include">
        </childnode>
        <childnode refid="50796" relation="include">
        </childnode>
        <childnode refid="50797" relation="include">
        </childnode>
        <childnode refid="50798" relation="include">
        </childnode>
        <childnode refid="50799" relation="include">
        </childnode>
        <childnode refid="50800" relation="include">
        </childnode>
        <childnode refid="50801" relation="include">
        </childnode>
        <childnode refid="50802" relation="include">
        </childnode>
        <childnode refid="50803" relation="include">
        </childnode>
        <childnode refid="50804" relation="include">
        </childnode>
        <childnode refid="50805" relation="include">
        </childnode>
        <childnode refid="50806" relation="include">
        </childnode>
        <childnode refid="50807" relation="include">
        </childnode>
        <childnode refid="50808" relation="include">
        </childnode>
        <childnode refid="50809" relation="include">
        </childnode>
        <childnode refid="50810" relation="include">
        </childnode>
        <childnode refid="50814" relation="include">
        </childnode>
        <childnode refid="50815" relation="include">
        </childnode>
        <childnode refid="50816" relation="include">
        </childnode>
        <childnode refid="50817" relation="include">
        </childnode>
        <childnode refid="50818" relation="include">
        </childnode>
        <childnode refid="50819" relation="include">
        </childnode>
        <childnode refid="50820" relation="include">
        </childnode>
        <childnode refid="50826" relation="include">
        </childnode>
        <childnode refid="50827" relation="include">
        </childnode>
        <childnode refid="50824" relation="include">
        </childnode>
        <childnode refid="50828" relation="include">
        </childnode>
        <childnode refid="50831" relation="include">
        </childnode>
        <childnode refid="50833" relation="include">
        </childnode>
        <childnode refid="50834" relation="include">
        </childnode>
        <childnode refid="50843" relation="include">
        </childnode>
        <childnode refid="50844" relation="include">
        </childnode>
      </node>
      <node id="50794">
        <label>cstdio</label>
      </node>
      <node id="50798">
        <label>tuple</label>
      </node>
      <node id="50803">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="50820">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="50803" relation="include">
        </childnode>
        <childnode refid="50804" relation="include">
        </childnode>
        <childnode refid="50805" relation="include">
        </childnode>
        <childnode refid="50807" relation="include">
        </childnode>
        <childnode refid="50821" relation="include">
        </childnode>
        <childnode refid="50822" relation="include">
        </childnode>
        <childnode refid="50823" relation="include">
        </childnode>
        <childnode refid="50824" relation="include">
        </childnode>
      </node>
      <node id="50799">
        <label>utility</label>
      </node>
      <node id="50823">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="50814">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="50811">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="50812" relation="include">
        </childnode>
      </node>
      <node id="50834">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="50835" relation="include">
        </childnode>
        <childnode refid="50836" relation="include">
        </childnode>
        <childnode refid="50837" relation="include">
        </childnode>
        <childnode refid="50838" relation="include">
        </childnode>
        <childnode refid="50839" relation="include">
        </childnode>
        <childnode refid="50840" relation="include">
        </childnode>
        <childnode refid="50841" relation="include">
        </childnode>
        <childnode refid="50842" relation="include">
        </childnode>
      </node>
      <node id="50812">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="50826">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="50824" relation="include">
        </childnode>
        <childnode refid="50820" relation="include">
        </childnode>
        <childnode refid="50827" relation="include">
        </childnode>
      </node>
      <node id="50795">
        <label>cstdlib</label>
      </node>
      <node id="50790">
        <label>cctype</label>
      </node>
      <node id="50813">
        <label>unordered_map</label>
      </node>
      <node id="50792">
        <label>climits</label>
      </node>
      <node id="50787">
        <label>/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/gini_impurity.hpp</label>
        <link refid="gini__impurity_8hpp"/>
        <childnode refid="50788" relation="include">
        </childnode>
      </node>
      <node id="50840">
        <label>mutex</label>
      </node>
      <node id="50836">
        <label>chrono</label>
      </node>
      <node id="50844">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="50842">
        <label>thread</label>
      </node>
      <node id="50830">
        <label>type_traits</label>
      </node>
      <node id="50806">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="50800">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="50824">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="50802" relation="include">
        </childnode>
        <childnode refid="50803" relation="include">
        </childnode>
        <childnode refid="50804" relation="include">
        </childnode>
        <childnode refid="50805" relation="include">
        </childnode>
        <childnode refid="50825" relation="include">
        </childnode>
      </node>
      <node id="50796">
        <label>cstring</label>
      </node>
      <node id="50815">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="50804">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="50846">
        <label>/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/hoeffding_tree.hpp</label>
        <link refid="hoeffding__tree_8hpp"/>
        <childnode refid="50847" relation="include">
        </childnode>
        <childnode refid="50848" relation="include">
        </childnode>
      </node>
      <node id="50848">
        <label>/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/typedef.hpp</label>
        <link refid="methods_2hoeffding__trees_2typedef_8hpp"/>
      </node>
      <node id="50845">
        <label>/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/gini_impurity.hpp</label>
        <link refid="gini__impurity_8hpp"/>
        <childnode refid="50846" relation="include">
        </childnode>
      </node>
      <node id="50847">
        <label>/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/hoeffding_tree_model.hpp</label>
        <link refid="hoeffding__tree__model_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmlpack_1_1tree_1_1GiniImpurity" prot="public">mlpack::tree::GiniImpurity</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1tree">mlpack::tree</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin</para></simplesect>
The GiniImpurity class, which is a fitness function (FitnessFunction) for streaming decision trees.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#ifndef<sp/>MLPACK_METHODS_HOEFFDING_TREES_GINI_INDEX_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_METHODS_HOEFFDING_TREES_GINI_INDEX_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tree<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classmlpack_1_1tree_1_1GiniImpurity" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1tree_1_1GiniImpurity" kindref="compound">GiniImpurity</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24" refid="classmlpack_1_1tree_1_1GiniImpurity_1a578c636308efbd492ea30e62f05f4d63" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1GiniImpurity_1a578c636308efbd492ea30e62f05f4d63" kindref="member">Evaluate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::Mat&lt;size_t&gt;&amp;<sp/>counts)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>sum<sp/>over<sp/>the<sp/>difference<sp/>between<sp/>the<sp/>un-split<sp/>node<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>split<sp/>nodes.<sp/><sp/>First<sp/>we&apos;ll<sp/>calculate<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>each<sp/>split</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>total.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numElem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>arma::vec<sp/>splitCounts(counts.n_cols);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>counts.n_cols;<sp/>++i)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>splitCounts[i]<sp/>=<sp/>arma::accu(counts.col(i));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numElem<sp/>+=<sp/>splitCounts[i];</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Corner<sp/>case:<sp/>if<sp/>there<sp/>are<sp/>no<sp/>elements,<sp/>the<sp/>impurity<sp/>is<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numElem<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>arma::Col&lt;size_t&gt;<sp/>classCounts<sp/>=<sp/>arma::sum(counts,<sp/>1);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>Gini<sp/>impurity<sp/>of<sp/>the<sp/>un-split<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>impurity<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>classCounts.n_elem;<sp/>++i)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>((double)<sp/>classCounts[i]<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>numElem);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impurity<sp/>+=<sp/>f<sp/>*<sp/>(1.0<sp/>-<sp/>f);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>calculate<sp/>the<sp/>impurity<sp/>of<sp/>the<sp/>split<sp/>nodes<sp/>and<sp/>subtract<sp/>them<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overall<sp/>impurity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>counts.n_cols;<sp/>++i)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(splitCounts[i]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>splitImpurity<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>counts.n_rows;<sp/>++j)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>((double)<sp/>counts(j,<sp/>i)<sp/>/<sp/>(double)<sp/>splitCounts[i]);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitImpurity<sp/>+=<sp/>f<sp/>*<sp/>(1.0<sp/>-<sp/>f);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impurity<sp/>-=<sp/>((double)<sp/>splitCounts[i]<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>numElem)<sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitImpurity;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impurity;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classmlpack_1_1tree_1_1GiniImpurity_1a9d801bb1be5db5207213f846f224458f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1tree_1_1GiniImpurity_1a9d801bb1be5db5207213f846f224458f" kindref="member">Range</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numClasses)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>best<sp/>possible<sp/>case<sp/>is<sp/>that<sp/>only<sp/>one<sp/>class<sp/>exists,<sp/>which<sp/>gives<sp/>a<sp/>Gini</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>impurity<sp/>of<sp/>0.<sp/><sp/>The<sp/>worst<sp/>possible<sp/>case<sp/>is<sp/>that<sp/>the<sp/>classes<sp/>are<sp/>evenly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>distributed,<sp/>which<sp/>gives<sp/>n<sp/>*<sp/>(1/n<sp/>*<sp/>(1<sp/>-<sp/>1/n))<sp/>=<sp/>1<sp/>-<sp/>1/n.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0<sp/>-<sp/>(1.0<sp/>/<sp/>double(numClasses));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/methods/hoeffding_trees/gini_impurity.hpp"/>
  </compounddef>
</doxygen>
