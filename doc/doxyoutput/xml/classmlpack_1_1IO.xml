<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1IO" kind="class" language="C++" prot="public">
    <compoundname>mlpack::IO</compoundname>
    <includes refid="io_8hpp" local="no">io.hpp</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classmlpack_1_1IO_1a5164306ed0dd7d34c35310f93fb02563" prot="private" static="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, void(*)(<ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;, const void *, void *)&gt; &gt;</type>
        <definition>typedef std::map&lt;std::string, std::map&lt;std::string, void (*)(util::ParamData&amp;, const void*, void*)&gt; &gt; FunctionMapType</definition>
        <argsstring></argsstring>
        <name>FunctionMapType</name>
        <briefdescription>
<para>Map of functions. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this is not specific to a binding, so we only have one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="283" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" bodystart="283" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1IO_1a3a2fa8f4dfaa2264d433c6892ae24daa" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; char, std::string &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;char, std::string&gt; &gt; aliases</definition>
        <argsstring></argsstring>
        <name>aliases</name>
        <briefdescription>
<para>Map from alias values to names, for each binding name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="277" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1IO_1a9fbcdf361106804abc3267f59864e21e" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex docMutex</definition>
        <argsstring></argsstring>
        <name>docMutex</name>
        <briefdescription>
<para>Ensure only one thread can modify the docs map at a time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="287" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1IO_1adcb6663560b527e40867c3e7cae4bc72" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="structmlpack_1_1util_1_1BindingDetails" kindref="compound">util::BindingDetails</ref> &gt;</type>
        <definition>std::map&lt;std::string, util::BindingDetails&gt; docs</definition>
        <argsstring></argsstring>
        <name>docs</name>
        <briefdescription>
<para>Map of binding details. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="289" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1IO_1a1a6b843f1c06bc4c23630d76510b491e" prot="private" static="no" mutable="no">
        <type>FunctionMapType</type>
        <definition>FunctionMapType functionMap</definition>
        <argsstring></argsstring>
        <name>functionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="284" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1IO_1a0f4192a96789b551cb018d3758d0c153" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex mapMutex</definition>
        <argsstring></argsstring>
        <name>mapMutex</name>
        <briefdescription>
<para>Ensure only one thread can call Add() at a time to modify the map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="275" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1IO_1a8fcad76d2361609e775ad8b94d2237de" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, <ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;std::string, util::ParamData&gt; &gt; parameters</definition>
        <argsstring></argsstring>
        <name>parameters</name>
        <briefdescription>
<para>Map of parameters, for each binding name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="279" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1IO_1a5a812b3a26e70902629a6a21bf9ea461" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1util_1_1Timers" kindref="compound">util::Timers</ref></type>
        <definition>util::Timers timer</definition>
        <argsstring></argsstring>
        <name>timer</name>
        <briefdescription>
<para>Holds the timer objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="292" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmlpack_1_1IO_1a50de43af5bed41f30c071d8cce0e81bc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Timer</definition>
        <argsstring></argsstring>
        <name>Timer</name>
        <briefdescription>
<para>So that <ref refid="classmlpack_1_1Timer_1aa052af5e185f178dcfd540b95d2b1d11" kindref="member">Timer::Start()</ref> and <ref refid="classmlpack_1_1Timer_1ad5249f0e0368bf00dbd1bd6570160950" kindref="member">Timer::Stop()</ref> can access the timer variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="295" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmlpack_1_1IO_1af3a4055c2193c7f6f2cccb7526595f71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AddBindingName</definition>
        <argsstring>(const std::string &amp;bindingName, const std::string &amp;name)</argsstring>
        <name>AddBindingName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bindingName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Add a user-friendly name for a binding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bindingName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the binding to add the user-friendly name for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>User-friendly name. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1IO_1a6840dd958a2382348b999520c68ae320" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AddExample</definition>
        <argsstring>(const std::string &amp;bindingName, const std::function&lt; std::string()&gt; &amp;example)</argsstring>
        <name>AddExample</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bindingName</declname>
        </param>
        <param>
          <type>const std::function&lt; std::string()&gt; &amp;</type>
          <declname>example</declname>
        </param>
        <briefdescription>
<para>Add an example for a binding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bindingName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the binding to add the example for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>example</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that returns the example. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1IO_1abdfdc734325dd9b75088a3bb32286b55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AddFunction</definition>
        <argsstring>(const std::string &amp;type, const std::string &amp;name, void(*func)(util::ParamData &amp;, const void *, void *))</argsstring>
        <name>AddFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;, const void *, void *)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Add a function to the function map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type that this function should be called for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1IO_1a0eb6aa5bde78005330215c17ed064d0f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AddLongDescription</definition>
        <argsstring>(const std::string &amp;bindingName, const std::function&lt; std::string()&gt; &amp;longDescription)</argsstring>
        <name>AddLongDescription</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bindingName</declname>
        </param>
        <param>
          <type>const std::function&lt; std::string()&gt; &amp;</type>
          <declname>longDescription</declname>
        </param>
        <briefdescription>
<para>Add a long description for a binding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bindingName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the binding to add the description for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>longDescription</parametername>
</parameternamelist>
<parameterdescription>
<para>Function that returns the long description. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1IO_1a4530109919250336fd0cb15b92a993f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AddParameter</definition>
        <argsstring>(const std::string &amp;bindingName, util::ParamData &amp;&amp;d)</argsstring>
        <name>AddParameter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bindingName</declname>
        </param>
        <param>
          <type><ref refid="structmlpack_1_1util_1_1ParamData" kindref="compound">util::ParamData</ref> &amp;&amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Adds a parameter to the hierarchy; use the PARAM_*() macros instead of this (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>PARAM_INT()).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bindingName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the binding that this parameter is associated with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Utility structure holding parameter data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1IO_1a0de4c2c634b45c52102590c259e22aef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AddSeeAlso</definition>
        <argsstring>(const std::string &amp;bindingName, const std::string &amp;description, const std::string &amp;link)</argsstring>
        <name>AddSeeAlso</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bindingName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>link</declname>
        </param>
        <briefdescription>
<para>Add a SeeAlso for a binding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bindingName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the binding to add the example for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of the SeeAlso. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link</parametername>
</parameternamelist>
<parameterdescription>
<para>Link of the SeeAlso. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1IO_1ad41d1032071c4eaa56d3b24287eaa7b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AddShortDescription</definition>
        <argsstring>(const std::string &amp;bindingName, const std::string &amp;shortDescription)</argsstring>
        <name>AddShortDescription</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bindingName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>shortDescription</declname>
        </param>
        <briefdescription>
<para>Add a short description for a binding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bindingName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the binding to add the description for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shortDescription</parametername>
</parameternamelist>
<parameterdescription>
<para>Description to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1IO_1aacf8da2c1644e932b3cbd46703a3d889" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> &amp;</type>
        <definition>static IO&amp; GetSingleton</definition>
        <argsstring>()</argsstring>
        <name>GetSingleton</name>
        <briefdescription>
<para>Retrieve the singleton. </para>        </briefdescription>
        <detaileddescription>
<para>As an end user, if you are just using the <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> object, you should not need to use this function<mdash/>the other static functions should be sufficient.</para><para>In this case, the singleton is used to store data for the static methods, as there is no point in defining static methods only to have users call private instance methods.</para><para><simplesect kind="return"><para>The singleton instance for use in the static methods. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1IO_1a0fd9a1c1a63621fed017fd2f40ca8907" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1Timers" kindref="compound">util::Timers</ref> &amp;</type>
        <definition>static util::Timers&amp; GetTimers</definition>
        <argsstring>()</argsstring>
        <name>GetTimers</name>
        <briefdescription>
<para>Retrieve the global Timers object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1IO_1a0a0bb69397ce0d79f68095a9eef90607" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1util_1_1Params" kindref="compound">util::Params</ref></type>
        <definition>static util::Params Parameters</definition>
        <argsstring>(const std::string &amp;bindingName)</argsstring>
        <name>Parameters</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>bindingName</declname>
        </param>
        <briefdescription>
<para>Return a new Params object initialized with all the parameters of the binding <computeroutput>bindingName</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>This is intended to be called at the beginning of the run of a binding. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="253" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1IO_1aa0f040401c8ee59c4cbac0b887b86766" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IO</definition>
        <argsstring>()</argsstring>
        <name>IO</name>
        <briefdescription>
<para>Make the constructor private, to preclude unauthorized instances. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1IO_1ab97f38cc7c806a9ca1ac423f65e9b00c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IO</definition>
        <argsstring>(const IO &amp;other)</argsstring>
        <name>IO</name>
        <param>
          <type>const <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Private copy constructor; we don&apos;t want copies floating around. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1IO_1a137c8f8039ba21a200513a45af990409" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> &amp;</type>
        <definition>IO&amp; operator=</definition>
        <argsstring>(const IO &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Private copy operator; we don&apos;t want copies floating around. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="305" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Parses the command line for parameters and holds user-specified parameters. </para>    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> class is a subsystem by which parameters for machine learning methods can be specified and accessed. In conjunction with the macros PARAM_DOUBLE, PARAM_INT, PARAM_STRING, PARAM_FLAG, and others, this class aims to make user configurability of mlpack methods very easy. There are only three methods in <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> that a user should need: IO::ParseCommandLine(), IO::GetParam(), and IO::HasParam() (in addition to the PARAM_*() macros).</para><sect1 id="classmlpack_1_1IO_1addparam">
<title>Adding parameters to a program</title>
<para><programlisting><codeline><highlight class="normal">$<sp/>./executable<sp/>--bar=5</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>The = is optional; a space can also be used.</para></simplesect>
A parameter is specified by using one of the following macros (this is not a complete list; see core/io/io.hpp):</para><para><itemizedlist>
<listitem><para>PARAM_FLAG(ID, DESC, ALIAS)</para></listitem><listitem><para>PARAM_DOUBLE(ID, DESC, ALIAS, DEF)</para></listitem><listitem><para>PARAM_INT(ID, DESC, ALIAS, DEF)</para></listitem><listitem><para>PARAM_STRING(ID, DESC, ALIAS, DEF)</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ID</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DESC</parametername>
</parameternamelist>
<parameterdescription>
<para>Short description of the parameter (one/two sentences). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ALIAS</parametername>
</parameternamelist>
<parameterdescription>
<para>An alias for the parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DEF</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value of the parameter.</para></parameterdescription>
</parameteritem>
</parameterlist>
The flag (boolean) type automatically defaults to false; it is specified merely as a flag on the command line (no &apos;=true&apos; is required).</para><para>Here is an example of a few parameters being defined; this is for the KNN binding (methods/neighbor_search/knn_main.cpp):</para><para><programlisting><codeline><highlight class="normal">PARAM_STRING_REQ(&quot;reference_file&quot;,<sp/>&quot;File<sp/>containing<sp/>the<sp/>reference<sp/>dataset.&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;r&quot;);</highlight></codeline>
<codeline><highlight class="normal">PARAM_STRING_REQ(&quot;distances_file&quot;,<sp/>&quot;File<sp/>to<sp/>output<sp/>distances<sp/>into.&quot;,<sp/>&quot;d&quot;);</highlight></codeline>
<codeline><highlight class="normal">PARAM_STRING_REQ(&quot;neighbors_file&quot;,<sp/>&quot;File<sp/>to<sp/>output<sp/>neighbors<sp/>into.&quot;,<sp/>&quot;n&quot;);</highlight></codeline>
<codeline><highlight class="normal">PARAM_INT_REQ(&quot;k&quot;,<sp/>&quot;Number<sp/>of<sp/>furthest<sp/>neighbors<sp/>to<sp/>find.&quot;,<sp/>&quot;k&quot;);</highlight></codeline>
<codeline><highlight class="normal">PARAM_STRING(&quot;query_file&quot;,<sp/>&quot;File<sp/>containing<sp/>query<sp/>points<sp/>(optional).&quot;,<sp/>&quot;q&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;&quot;);</highlight></codeline>
<codeline><highlight class="normal">PARAM_INT(&quot;leaf_size&quot;,<sp/>&quot;Leaf<sp/>size<sp/>for<sp/>tree<sp/>building.&quot;,<sp/>&quot;l&quot;,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">PARAM_FLAG(&quot;naive&quot;,<sp/>&quot;If<sp/>true,<sp/>O(n^2)<sp/>naive<sp/>mode<sp/>is<sp/>used<sp/>for<sp/>computation.&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;N&quot;);</highlight></codeline>
<codeline><highlight class="normal">PARAM_FLAG(&quot;single_mode&quot;,<sp/>&quot;If<sp/>true,<sp/>single-tree<sp/>search<sp/>is<sp/>used<sp/>(as<sp/>opposed<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;to<sp/>dual-tree<sp/>search.&quot;,<sp/>&quot;s&quot;);</highlight></codeline>
</programlisting></para><para>More documentation is available on the PARAM_*() macros in the documentation for core/io/io.hpp.</para></sect1>
<sect1 id="classmlpack_1_1IO_1programinfo">
<title>Documenting the program itself</title>
<para>In addition to allowing documentation for each individual parameter and module, the BINDING_NAME() macro provides support for documenting the programName, BINDING_SHORT_DESC() macro provides support for documenting the shortDescription, BINDING_LONG_DESC() macro provides support for documenting the longDescription, the BINDING_EXAMPLE() macro provides support for documenting the example and the BINDING_SEE_ALSO() macro provides support for documenting the seeAlso. There should only be one instance of the BINDING_NAME(), BINDING_SHORT_DESC() and BINDING_LONG_DESC() macros and there can be multiple instance of BINDING_EXAMPLE() and BINDING_SEE_ALSO() macro. Below is an example:</para><para><programlisting><codeline><highlight class="normal">BINDING_NAME(&quot;Maximum<sp/>Variance<sp/>Unfolding&quot;);</highlight></codeline>
<codeline><highlight class="normal">BINDING_SHORT_DESC(&quot;An<sp/>implementation<sp/>of<sp/>Maximum<sp/>Variance<sp/>Unfolding&quot;);</highlight></codeline>
<codeline><highlight class="normal">BINDING_LONG_DESC(<sp/>&quot;This<sp/>program<sp/>performs<sp/>maximum<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>&quot;variance<sp/>unfolding<sp/>on<sp/>the<sp/>given<sp/>dataset,<sp/>writing<sp/>a<sp/>lower-dimensional<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>&quot;unfolded<sp/>dataset<sp/>to<sp/>the<sp/>given<sp/>output<sp/>file.&quot;);</highlight></codeline>
<codeline><highlight class="normal">BINDING_EXAMPLE(&quot;mvu&quot;,<sp/>&quot;input&quot;,<sp/>&quot;dataset&quot;,<sp/>&quot;new_dim&quot;,<sp/>5,<sp/>&quot;output&quot;,<sp/>&quot;output&quot;);</highlight></codeline>
<codeline><highlight class="normal">BINDING_SEE_ALSO(&quot;Perceptron&quot;,<sp/>&quot;#perceptron&quot;);</highlight></codeline>
</programlisting></para><para>This description should be verbose, and explain to a non-expert user what the program does and how to use it. If relevant, paper citations should be included.</para></sect1>
<sect1 id="classmlpack_1_1IO_1parseio">
<title>Parsing the command line with IO</title>
<para>To have <ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> parse the command line at the beginning of code execution, only a call to ParseCommandLine() is necessary:</para><para><programlisting><codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IO::ParseCommandLine(argc,<sp/>argv);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><ref refid="classmlpack_1_1IO" kindref="compound">IO</ref> provides <ndash/>help and <ndash/>info options which give nicely formatted documentation of each option; the documentation is generated from the DESC arguments in the PARAM_*() macros.</para></sect1>
<sect1 id="classmlpack_1_1IO_1getparam">
<title>Getting parameters with IO</title>
<para>When the parameters have been defined, the next important thing is how to access them. For this, the HasParam() and GetParam() methods are used. For instance, to see if the user passed the flag (boolean) &quot;naive&quot;:</para><para><programlisting><codeline><highlight class="normal">if<sp/>(IO::HasParam(&quot;naive&quot;))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Log::Info<sp/>&lt;&lt;<sp/>&quot;Naive<sp/>has<sp/>been<sp/>passed!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>To get the value of a parameter, such as a string, use GetParam:</para><para><programlisting><codeline><highlight class="normal">const<sp/>std::string<sp/>filename<sp/>=<sp/>IO::GetParam&lt;std::string&gt;(&quot;filename&quot;);</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Options should only be defined in files which define <computeroutput>main()</computeroutput> (that is, main bindings). If options are defined elsewhere, they may be spuriously included into other bindings and confuse users. Similarly, if your binding has options which you did not define, it is probably because the option is defined somewhere else and included in your binding.</para></simplesect>
<xrefsect id="bug_1_bug000001"><xreftitle>Bug</xreftitle><xrefdescription><para>The <bold>COUNTER</bold> variable is used in most cases to guarantee a unique global identifier for options declared using the PARAM_*() macros. However, not all compilers have this support<ndash/>most notably, gcc &lt; 4.3. In that case, the <bold>LINE</bold> macro is used as an attempt to get a unique global identifier, but collisions are still possible, and they produce bizarre error messages. See <ulink url="https://github.com/mlpack/mlpack/issues/100">https://github.com/mlpack/mlpack/issues/100</ulink> for more information. </para></xrefdescription></xrefsect></para></sect1>
    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" line="177" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/util/io.hpp" bodystart="176" bodyend="306"/>
    <listofallmembers>
      <member refid="classmlpack_1_1IO_1af3a4055c2193c7f6f2cccb7526595f71" prot="public" virt="non-virtual"><scope>mlpack::IO</scope><name>AddBindingName</name></member>
      <member refid="classmlpack_1_1IO_1a6840dd958a2382348b999520c68ae320" prot="public" virt="non-virtual"><scope>mlpack::IO</scope><name>AddExample</name></member>
      <member refid="classmlpack_1_1IO_1abdfdc734325dd9b75088a3bb32286b55" prot="public" virt="non-virtual"><scope>mlpack::IO</scope><name>AddFunction</name></member>
      <member refid="classmlpack_1_1IO_1a0eb6aa5bde78005330215c17ed064d0f" prot="public" virt="non-virtual"><scope>mlpack::IO</scope><name>AddLongDescription</name></member>
      <member refid="classmlpack_1_1IO_1a4530109919250336fd0cb15b92a993f5" prot="public" virt="non-virtual"><scope>mlpack::IO</scope><name>AddParameter</name></member>
      <member refid="classmlpack_1_1IO_1a0de4c2c634b45c52102590c259e22aef" prot="public" virt="non-virtual"><scope>mlpack::IO</scope><name>AddSeeAlso</name></member>
      <member refid="classmlpack_1_1IO_1ad41d1032071c4eaa56d3b24287eaa7b3" prot="public" virt="non-virtual"><scope>mlpack::IO</scope><name>AddShortDescription</name></member>
      <member refid="classmlpack_1_1IO_1a3a2fa8f4dfaa2264d433c6892ae24daa" prot="private" virt="non-virtual"><scope>mlpack::IO</scope><name>aliases</name></member>
      <member refid="classmlpack_1_1IO_1a9fbcdf361106804abc3267f59864e21e" prot="private" virt="non-virtual"><scope>mlpack::IO</scope><name>docMutex</name></member>
      <member refid="classmlpack_1_1IO_1adcb6663560b527e40867c3e7cae4bc72" prot="private" virt="non-virtual"><scope>mlpack::IO</scope><name>docs</name></member>
      <member refid="classmlpack_1_1IO_1a1a6b843f1c06bc4c23630d76510b491e" prot="private" virt="non-virtual"><scope>mlpack::IO</scope><name>functionMap</name></member>
      <member refid="classmlpack_1_1IO_1a5164306ed0dd7d34c35310f93fb02563" prot="private" virt="non-virtual"><scope>mlpack::IO</scope><name>FunctionMapType</name></member>
      <member refid="classmlpack_1_1IO_1aacf8da2c1644e932b3cbd46703a3d889" prot="public" virt="non-virtual"><scope>mlpack::IO</scope><name>GetSingleton</name></member>
      <member refid="classmlpack_1_1IO_1a0fd9a1c1a63621fed017fd2f40ca8907" prot="public" virt="non-virtual"><scope>mlpack::IO</scope><name>GetTimers</name></member>
      <member refid="classmlpack_1_1IO_1aa0f040401c8ee59c4cbac0b887b86766" prot="private" virt="non-virtual"><scope>mlpack::IO</scope><name>IO</name></member>
      <member refid="classmlpack_1_1IO_1ab97f38cc7c806a9ca1ac423f65e9b00c" prot="private" virt="non-virtual"><scope>mlpack::IO</scope><name>IO</name></member>
      <member refid="classmlpack_1_1IO_1a0f4192a96789b551cb018d3758d0c153" prot="private" virt="non-virtual"><scope>mlpack::IO</scope><name>mapMutex</name></member>
      <member refid="classmlpack_1_1IO_1a137c8f8039ba21a200513a45af990409" prot="private" virt="non-virtual"><scope>mlpack::IO</scope><name>operator=</name></member>
      <member refid="classmlpack_1_1IO_1a0a0bb69397ce0d79f68095a9eef90607" prot="public" virt="non-virtual"><scope>mlpack::IO</scope><name>Parameters</name></member>
      <member refid="classmlpack_1_1IO_1a8fcad76d2361609e775ad8b94d2237de" prot="private" virt="non-virtual"><scope>mlpack::IO</scope><name>parameters</name></member>
      <member refid="classmlpack_1_1IO_1a5a812b3a26e70902629a6a21bf9ea461" prot="private" virt="non-virtual"><scope>mlpack::IO</scope><name>timer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
