<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="eigenvalue__ratio__constraint_8hpp" kind="file" language="C++">
    <compoundname>eigenvalue_ratio_constraint.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <incdepgraph>
      <node id="49899">
        <label>list</label>
      </node>
      <node id="49896">
        <label>atomic</label>
      </node>
      <node id="49886">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="49862">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="49898">
        <label>iomanip</label>
      </node>
      <node id="49871">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="49872" relation="include">
        </childnode>
        <childnode refid="49874" relation="include">
        </childnode>
      </node>
      <node id="49854">
        <label>cstdint</label>
      </node>
      <node id="49863">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="49870">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="49893">
        <label>arma_config.hpp</label>
      </node>
      <node id="49883">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="49850">
        <label>cmath</label>
      </node>
      <node id="49869">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="49858">
        <label>stdexcept</label>
      </node>
      <node id="49878">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="49863" relation="include">
        </childnode>
        <childnode refid="49865" relation="include">
        </childnode>
        <childnode refid="49866" relation="include">
        </childnode>
        <childnode refid="49864" relation="include">
        </childnode>
      </node>
      <node id="49902">
        <label>string</label>
      </node>
      <node id="49890">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="49891" relation="include">
        </childnode>
        <childnode refid="49857" relation="include">
        </childnode>
      </node>
      <node id="49900">
        <label>map</label>
      </node>
      <node id="49852">
        <label>cfloat</label>
      </node>
      <node id="49882">
        <label>boost/variant.hpp</label>
      </node>
      <node id="49904">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="49866">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="49889">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="49890" relation="include">
        </childnode>
        <childnode refid="49866" relation="include">
        </childnode>
        <childnode refid="49873" relation="include">
        </childnode>
        <childnode refid="49891" relation="include">
        </childnode>
      </node>
      <node id="49879">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="49877">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="49863" relation="include">
        </childnode>
        <childnode refid="49865" relation="include">
        </childnode>
        <childnode refid="49866" relation="include">
        </childnode>
        <childnode refid="49864" relation="include">
        </childnode>
      </node>
      <node id="49880">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="49863" relation="include">
        </childnode>
        <childnode refid="49865" relation="include">
        </childnode>
        <childnode refid="49866" relation="include">
        </childnode>
        <childnode refid="49864" relation="include">
        </childnode>
      </node>
      <node id="49868">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="49888">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="49864" relation="include">
        </childnode>
        <childnode refid="49865" relation="include">
        </childnode>
        <childnode refid="49866" relation="include">
        </childnode>
        <childnode refid="49876" relation="include">
        </childnode>
        <childnode refid="49885" relation="include">
        </childnode>
      </node>
      <node id="49892">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="49893" relation="include">
        </childnode>
      </node>
      <node id="49894">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="49849">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="49850" relation="include">
        </childnode>
        <childnode refid="49851" relation="include">
        </childnode>
        <childnode refid="49852" relation="include">
        </childnode>
        <childnode refid="49853" relation="include">
        </childnode>
        <childnode refid="49854" relation="include">
        </childnode>
        <childnode refid="49855" relation="include">
        </childnode>
        <childnode refid="49856" relation="include">
        </childnode>
        <childnode refid="49857" relation="include">
        </childnode>
        <childnode refid="49858" relation="include">
        </childnode>
        <childnode refid="49859" relation="include">
        </childnode>
        <childnode refid="49860" relation="include">
        </childnode>
        <childnode refid="49861" relation="include">
        </childnode>
        <childnode refid="49862" relation="include">
        </childnode>
        <childnode refid="49863" relation="include">
        </childnode>
        <childnode refid="49864" relation="include">
        </childnode>
        <childnode refid="49865" relation="include">
        </childnode>
        <childnode refid="49866" relation="include">
        </childnode>
        <childnode refid="49867" relation="include">
        </childnode>
        <childnode refid="49868" relation="include">
        </childnode>
        <childnode refid="49869" relation="include">
        </childnode>
        <childnode refid="49870" relation="include">
        </childnode>
        <childnode refid="49871" relation="include">
        </childnode>
        <childnode refid="49875" relation="include">
        </childnode>
        <childnode refid="49876" relation="include">
        </childnode>
        <childnode refid="49877" relation="include">
        </childnode>
        <childnode refid="49878" relation="include">
        </childnode>
        <childnode refid="49879" relation="include">
        </childnode>
        <childnode refid="49880" relation="include">
        </childnode>
        <childnode refid="49881" relation="include">
        </childnode>
        <childnode refid="49887" relation="include">
        </childnode>
        <childnode refid="49888" relation="include">
        </childnode>
        <childnode refid="49885" relation="include">
        </childnode>
        <childnode refid="49889" relation="include">
        </childnode>
        <childnode refid="49892" relation="include">
        </childnode>
        <childnode refid="49894" relation="include">
        </childnode>
        <childnode refid="49895" relation="include">
        </childnode>
        <childnode refid="49904" relation="include">
        </childnode>
        <childnode refid="49905" relation="include">
        </childnode>
      </node>
      <node id="49855">
        <label>cstdio</label>
      </node>
      <node id="49859">
        <label>tuple</label>
      </node>
      <node id="49864">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="49881">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="49864" relation="include">
        </childnode>
        <childnode refid="49865" relation="include">
        </childnode>
        <childnode refid="49866" relation="include">
        </childnode>
        <childnode refid="49868" relation="include">
        </childnode>
        <childnode refid="49882" relation="include">
        </childnode>
        <childnode refid="49883" relation="include">
        </childnode>
        <childnode refid="49884" relation="include">
        </childnode>
        <childnode refid="49885" relation="include">
        </childnode>
      </node>
      <node id="49848">
        <label>/home/aakash/mlpack/src/mlpack/methods/gmm/eigenvalue_ratio_constraint.hpp</label>
        <link refid="eigenvalue__ratio__constraint_8hpp"/>
        <childnode refid="49849" relation="include">
        </childnode>
      </node>
      <node id="49860">
        <label>utility</label>
      </node>
      <node id="49884">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="49875">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="49872">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="49873" relation="include">
        </childnode>
      </node>
      <node id="49895">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="49896" relation="include">
        </childnode>
        <childnode refid="49897" relation="include">
        </childnode>
        <childnode refid="49898" relation="include">
        </childnode>
        <childnode refid="49899" relation="include">
        </childnode>
        <childnode refid="49900" relation="include">
        </childnode>
        <childnode refid="49901" relation="include">
        </childnode>
        <childnode refid="49902" relation="include">
        </childnode>
        <childnode refid="49903" relation="include">
        </childnode>
      </node>
      <node id="49873">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="49887">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="49885" relation="include">
        </childnode>
        <childnode refid="49881" relation="include">
        </childnode>
        <childnode refid="49888" relation="include">
        </childnode>
      </node>
      <node id="49856">
        <label>cstdlib</label>
      </node>
      <node id="49851">
        <label>cctype</label>
      </node>
      <node id="49874">
        <label>unordered_map</label>
      </node>
      <node id="49853">
        <label>climits</label>
      </node>
      <node id="49901">
        <label>mutex</label>
      </node>
      <node id="49897">
        <label>chrono</label>
      </node>
      <node id="49905">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="49903">
        <label>thread</label>
      </node>
      <node id="49891">
        <label>type_traits</label>
      </node>
      <node id="49867">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="49861">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="49885">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="49863" relation="include">
        </childnode>
        <childnode refid="49864" relation="include">
        </childnode>
        <childnode refid="49865" relation="include">
        </childnode>
        <childnode refid="49866" relation="include">
        </childnode>
        <childnode refid="49886" relation="include">
        </childnode>
      </node>
      <node id="49857">
        <label>cstring</label>
      </node>
      <node id="49876">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="49865">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmlpack_1_1gmm_1_1EigenvalueRatioConstraint" prot="public">mlpack::gmm::EigenvalueRatioConstraint</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1gmm">mlpack::gmm</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Ryan Curtin</para></simplesect>
Constrain a covariance matrix to have a certain ratio of eigenvalues.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#ifndef<sp/>MLPACK_METHODS_GMM_EIGENVALUE_RATIO_CONSTRAINT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_METHODS_GMM_EIGENVALUE_RATIO_CONSTRAINT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmm<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classmlpack_1_1gmm_1_1EigenvalueRatioConstraint" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1gmm_1_1EigenvalueRatioConstraint" kindref="compound">EigenvalueRatioConstraint</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36" refid="classmlpack_1_1gmm_1_1EigenvalueRatioConstraint_1a134e924e06bc32dab43ca2743652a8ec" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1gmm_1_1EigenvalueRatioConstraint_1a134e924e06bc32dab43ca2743652a8ec" kindref="member">EigenvalueRatioConstraint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec&amp;<sp/>ratios)<sp/>:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>an<sp/>alias<sp/>of<sp/>the<sp/>ratios<sp/>vector.<sp/><sp/>It<sp/>will<sp/>never<sp/>be<sp/>modified<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ratios(const_cast&lt;double*&gt;(ratios.memptr()),<sp/>ratios.n_elem,<sp/>false)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>validity<sp/>of<sp/>ratios.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(ratios[0]<sp/>-<sp/>1.0)<sp/>&gt;<sp/>1e-20)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Log::Fatal<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EigenvalueRatioConstraint::EigenvalueRatioConstraint():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;first<sp/>element<sp/>of<sp/>ratio<sp/>vector<sp/>is<sp/>not<sp/>1.0!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>ratios.n_elem;<sp/>++i)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ratios[i]<sp/>&gt;<sp/>1.0)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log::Fatal<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EigenvalueRatioConstraint::EigenvalueRatioConstraint():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;element<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>of<sp/>ratio<sp/>vector<sp/>is<sp/>greater<sp/>than<sp/>1.0!&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ratios[i]<sp/>&lt;<sp/>0.0)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log::Warn<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EigenvalueRatioConstraint::EigenvalueRatioConstraint():<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;element<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>of<sp/>ratio<sp/>vectors<sp/>is<sp/>negative<sp/>and<sp/>will<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;probably<sp/>cause<sp/>the<sp/>covariance<sp/>to<sp/>be<sp/>non-invertible...&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classmlpack_1_1gmm_1_1EigenvalueRatioConstraint_1adf5c45a082c066d121b5dcb6d35cc038" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1gmm_1_1EigenvalueRatioConstraint_1adf5c45a082c066d121b5dcb6d35cc038" kindref="member">ApplyConstraint</ref>(arma::mat&amp;<sp/>covariance)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="63"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eigendecompose<sp/>the<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>arma::vec<sp/>eigenvalues;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>arma::mat<sp/>eigenvectors;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>covariance<sp/>=<sp/>arma::symmatu(covariance);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arma::eig_sym(eigenvalues,<sp/>eigenvectors,<sp/>covariance))</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Log::Fatal<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;applying<sp/>to<sp/>constraint<sp/>could<sp/>not<sp/>be<sp/>accomplished.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>the<sp/>eigenvalues<sp/>to<sp/>what<sp/>we<sp/>are<sp/>forcing<sp/>them<sp/>to<sp/>be.<sp/><sp/>There</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shouldn&apos;t<sp/>be<sp/>any<sp/>negative<sp/>eigenvalues<sp/>anyway,<sp/>so<sp/>it<sp/>doesn&apos;t<sp/>matter<sp/>if<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>suddenly<sp/>forcing<sp/>them<sp/>to<sp/>be<sp/>positive.<sp/><sp/>If<sp/>the<sp/>first<sp/>eigenvalue<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>negative,<sp/>well,<sp/>there<sp/>are<sp/>going<sp/>to<sp/>be<sp/>some<sp/>problems<sp/>later...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenvalues<sp/>=<sp/>(eigenvalues[0]<sp/>*<sp/>ratios);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reassemble<sp/>the<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>covariance<sp/>=<sp/>eigenvectors<sp/>*<sp/>arma::diagmat(eigenvalues)<sp/>*<sp/>eigenvectors.t();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="classmlpack_1_1gmm_1_1EigenvalueRatioConstraint_1ab2ff0b443a5153febcc462dad4f5c956" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1gmm_1_1EigenvalueRatioConstraint_1ab2ff0b443a5153febcc462dad4f5c956" kindref="member">ApplyConstraint</ref>(arma::vec&amp;<sp/>diagCovariance)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="89"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>matrix<sp/>is<sp/>already<sp/>eigendecomposed<sp/>but<sp/>we<sp/>need<sp/>to<sp/>sort<sp/>the<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>arma::uvec<sp/>eigvalOrder<sp/>=<sp/>arma::sort_index(diagCovariance);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>arma::vec<sp/>eigvals<sp/>=<sp/>diagCovariance(eigvalOrder);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>the<sp/>eigenvalues<sp/>to<sp/>what<sp/>we<sp/>are<sp/>forcing<sp/>them<sp/>to<sp/>be.<sp/><sp/>There</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shouldn&apos;t<sp/>be<sp/>any<sp/>negative<sp/>eigenvalues<sp/>anyway,<sp/>so<sp/>it<sp/>doesn&apos;t<sp/>matter<sp/>if<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>suddenly<sp/>forcing<sp/>them<sp/>to<sp/>be<sp/>positive.<sp/><sp/>If<sp/>the<sp/>first<sp/>eigenvalue<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>negative,<sp/>well,<sp/>there<sp/>are<sp/>going<sp/>to<sp/>be<sp/>some<sp/>problems<sp/>later...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>eigvals<sp/>=<sp/>eigvals[0]<sp/>*<sp/>ratios;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reassemble<sp/>the<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>eigvalOrder.n_elem;<sp/>++i)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>diagCovariance[eigvalOrder[i]]<sp/>=<sp/>eigvals[i];</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archive&gt;</highlight></codeline>
<codeline lineno="107" refid="classmlpack_1_1gmm_1_1EigenvalueRatioConstraint_1a65cba07328997659bec80b9879b15a51" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1gmm_1_1EigenvalueRatioConstraint_1a65cba07328997659bec80b9879b15a51" kindref="member">serialize</ref>(Archive&amp;<sp/>ar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="comment">/*<sp/>version<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Strip<sp/>the<sp/>const<sp/>for<sp/>the<sp/>sake<sp/>of<sp/>loading/saving.<sp/><sp/>This<sp/>is<sp/>the<sp/>only<sp/>time<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>modified<sp/>(other<sp/>than<sp/>the<sp/>constructor).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>ar(CEREAL_NVP(const_cast&lt;arma::vec&amp;&gt;(ratios)));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arma::vec<sp/>ratios;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/methods/gmm/eigenvalue_ratio_constraint.hpp"/>
  </compounddef>
</doxygen>
