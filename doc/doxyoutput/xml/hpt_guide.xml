<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="hpt_guide" kind="page">
    <compoundname>hpt_guide</compoundname>
    <title>Hyper-Parameter Tuning</title>
    <detaileddescription>
<sect1 id="hpt_guide_1hptintro">
<title>Introduction</title>
<para><bold>mlpack</bold> implements a generic hyperparameter tuner that is able to tune both continuous and discrete parameters of various different algorithms. This is an important task<mdash/>the performance of many machine learning algorithms can be highly dependent on the hyperparameters that are chosen for that algorithm. (One example: the choice of <formula id="175">$k$</formula> for a <formula id="175">$k$</formula>-nearest-neighbors classifier.)</para><para>This hyper-parameter tuner is built on the same general concept as the cross-validation classes (see the <ref refid="cv" kindref="compound">cross-validation tutorial</ref>): given some machine learning algorithm, some data, some performance measure, and a set of hyperparameters, attempt to find the hyperparameter set that best optimizes the performance measure on the given data with the given algorithm.</para><para><bold>mlpack&apos;s</bold> implementation of hyperparameter tuning is flexible, and is built in a way that supports many algorithms and many optimizers. At the time of this writing, complex hyperparameter optimization techniques are not available, but the hyperparameter tuner does support these, should they be implemented in the future.</para><para>In this tutorial we will see the usage examples of the hyper-parameter tuning module, and also more details about the <computeroutput><ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref></computeroutput> class.</para></sect1>
<sect1 id="hpt_guide_1hptbasic">
<title>Basic Usage</title>
<para>The interface of the hyper-parameter tuning module is quite similar to the interface of the <ref refid="cv" kindref="compound">cross-validation module</ref>. To construct a <computeroutput><ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref></computeroutput> object you need to specify as template parameters what machine learning algorithm, cross-validation strategy, performance measure, and optimization strategy (<computeroutput>ens::GridSearch</computeroutput> will be used by default) you are going to use. Then, you must pass the same arguments as for the cross-validation classes: the data and labels (or responses) to use are given to the constructor, and the possible hyperparameter values are given to the <computeroutput><ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a4e04da235ec0434d69613c547b20dbea" kindref="member">HyperParameterTuner::Optimize()</ref></computeroutput> method, which returns the best algorithm configuration as a <computeroutput>std::tuple&lt;&gt;</computeroutput>.</para><para>Let&apos;s see some examples.</para><para>Suppose we have the following data to train and validate on. <programlisting><codeline><highlight class="normal">//<sp/>100-point<sp/>5-dimensional<sp/>random<sp/>dataset.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>data<sp/>=<sp/>arma::randu&lt;arma::mat&gt;(5,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Noisy<sp/>responses<sp/>retrieved<sp/>by<sp/>a<sp/>random<sp/>linear<sp/>transformation<sp/>of<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">arma::rowvec<sp/>responses<sp/>=<sp/>arma::randu&lt;arma::rowvec&gt;(5)<sp/>*<sp/>data<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0.1<sp/>*<sp/>arma::randn&lt;arma::rowvec&gt;(100);</highlight></codeline>
</programlisting></para><para>Given the dataset above, we can use the following code to try to find a good <computeroutput>lambda</computeroutput> value for <ref refid="classmlpack_1_1regression_1_1LinearRegression" kindref="compound">LinearRegression</ref>. Here we use <ref refid="classmlpack_1_1cv_1_1SimpleCV" kindref="compound">SimpleCV</ref> instead of k-fold cross-validation to save computation time.</para><para><programlisting><codeline><highlight class="normal">//<sp/>Using<sp/>80%<sp/>of<sp/>data<sp/>for<sp/>training<sp/>and<sp/>remaining<sp/>20%<sp/>for<sp/>assessing<sp/>MSE.</highlight></codeline>
<codeline><highlight class="normal">double<sp/>validationSize<sp/>=<sp/>0.2;</highlight></codeline>
<codeline><highlight class="normal">HyperParameterTuner&lt;LinearRegression,<sp/>MSE,<sp/>SimpleCV&gt;<sp/>hpt(validationSize,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>data,<sp/>responses);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Finding<sp/>a<sp/>good<sp/>value<sp/>for<sp/>lambda<sp/>from<sp/>the<sp/>discrete<sp/>set<sp/>of<sp/>values<sp/>0.0,<sp/>0.001,</highlight></codeline>
<codeline><highlight class="normal">//<sp/>0.01,<sp/>0.1,<sp/>and<sp/>1.0.</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>lambdas{0.0,<sp/>0.001,<sp/>0.01,<sp/>0.1,<sp/>1.0};</highlight></codeline>
<codeline><highlight class="normal">double<sp/>bestLambda;</highlight></codeline>
<codeline><highlight class="normal">std::tie(bestLambda)<sp/>=<sp/>hpt.Optimize(lambdas);</highlight></codeline>
</programlisting></para><para>In this example we have used <computeroutput>ens::GridSearch</computeroutput> (the default optimizer) to find a good value for the <computeroutput>lambda</computeroutput> hyper-parameter. For that we have specified what values should be tried.</para></sect1>
<sect1 id="hpt_guide_1hptfixed">
<title>Fixed Arguments</title>
<para>When some hyper-parameters should not be optimized, you can specify values for them with the <computeroutput><ref refid="namespacemlpack_1_1hpt_1ad773f4d1def8deb412ffbf37bdf289ec" kindref="member">Fixed()</ref></computeroutput> method as in the following example of trying to find good <computeroutput>lambda1</computeroutput> and <computeroutput>lambda2</computeroutput> values for <ref refid="classmlpack_1_1regression_1_1LARS" kindref="compound">LARS</ref> (least-angle regression).</para><para><programlisting><codeline><highlight class="normal">HyperParameterTuner&lt;LARS,<sp/>MSE,<sp/>SimpleCV&gt;<sp/>hpt2(validationSize,<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>responses);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>hyper-parameter<sp/>tuner<sp/>should<sp/>not<sp/>try<sp/>to<sp/>change<sp/>the<sp/>transposeData<sp/>or</highlight></codeline>
<codeline><highlight class="normal">//<sp/>useCholesky<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>transposeData<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>useCholesky<sp/>=<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>We<sp/>wish<sp/>only<sp/>to<sp/>search<sp/>for<sp/>the<sp/>best<sp/>lambda1<sp/>and<sp/>lambda2<sp/>values.</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>lambda1Set{0.0,<sp/>0.001,<sp/>0.01,<sp/>0.1,<sp/>1.0};</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>lambda2Set{0.0,<sp/>0.002,<sp/>0.02,<sp/>0.2,<sp/>2.0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>bestLambda1,<sp/>bestLambda2;</highlight></codeline>
<codeline><highlight class="normal">std::tie(bestLambda1,<sp/>bestLambda2)<sp/>=<sp/>hpt2.Optimize(Fixed(transposeData),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Fixed(useCholesky),<sp/>lambda1Set,<sp/>lambda2Set);</highlight></codeline>
</programlisting></para><para>Note that for the call to <computeroutput>hpt2.Optimize()</computeroutput>, we have used the same order of arguments as they appear in the corresponding <ref refid="classmlpack_1_1regression_1_1LARS" kindref="compound">LARS</ref> constructor:</para><para><programlisting><codeline><highlight class="normal">LARS(const<sp/>arma::mat&amp;<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>const<sp/>arma::rowvec&amp;<sp/>responses,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>transposeData<sp/>=<sp/>true,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>useCholesky<sp/>=<sp/>false,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>lambda1<sp/>=<sp/>0.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>lambda2<sp/>=<sp/>0.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>tolerance<sp/>=<sp/>1e-16);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="hpt_guide_1hptgradient">
<title>Gradient-Based Optimization</title>
<para>In some cases we may wish to optimize a hyperparameter over the space of all possible real values, instead of providing a grid in which to search. Alternately, we may know approximately optimal values from a grid search for real-valued hyperparameters, but wish to further tune those values.</para><para>In this case, we can use a gradient-based optimizer for hyperparameter search. In the following example, we try to optimize the <computeroutput>lambda1</computeroutput> and <computeroutput>lambda2</computeroutput> hyper-parameters for <ref refid="classmlpack_1_1regression_1_1LARS" kindref="compound">LARS</ref> with the <computeroutput>ens::GradientDescent</computeroutput> optimizer.</para><para><programlisting><codeline><highlight class="normal">HyperParameterTuner&lt;LARS,<sp/>MSE,<sp/>SimpleCV,<sp/>GradientDescent&gt;<sp/>hpt3(validationSize,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>data,<sp/>responses);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>GradientDescent<sp/>can<sp/>be<sp/>adjusted<sp/>in<sp/>the<sp/>following<sp/>way.</highlight></codeline>
<codeline><highlight class="normal">hpt3.Optimizer().StepSize()<sp/>=<sp/>0.1;</highlight></codeline>
<codeline><highlight class="normal">hpt3.Optimizer().Tolerance()<sp/>=<sp/>1e-15;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>We<sp/>can<sp/>set<sp/>up<sp/>values<sp/>used<sp/>for<sp/>calculating<sp/>gradients.</highlight></codeline>
<codeline><highlight class="normal">hpt3.RelativeDelta()<sp/>=<sp/>0.01;</highlight></codeline>
<codeline><highlight class="normal">hpt3.MinDelta()<sp/>=<sp/>1e-10;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>initialLambda1<sp/>=<sp/>0.001;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>initialLambda2<sp/>=<sp/>0.002;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>bestGDLambda1,<sp/>bestGDLambda2;</highlight></codeline>
<codeline><highlight class="normal">std::tie(bestGDLambda1,<sp/>bestGDLambda2)<sp/>=<sp/>hpt3.Optimize(Fixed(transposeData),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Fixed(useCholesky),<sp/>initialLambda1,<sp/>initialLambda2);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="hpt_guide_1hpt_class">
<title>The HyperParameterTuner class</title>
<para>The <computeroutput><ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref></computeroutput> class is very similar to the <ref refid="classmlpack_1_1cv_1_1KFoldCV" kindref="compound">KFoldCV</ref> and <ref refid="classmlpack_1_1cv_1_1SimpleCV" kindref="compound">SimpleCV</ref> classes (see the <ref refid="cv" kindref="compound">cross-validation tutorial</ref> for more information on those two classes), but there are a few important differences.</para><para>First, the <computeroutput><ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref></computeroutput> accepts five different hyperparameters; only the first three of these are required:</para><para><itemizedlist>
<listitem><para><computeroutput>MLAlgorithm</computeroutput> This is the algorithm to be used.</para></listitem><listitem><para><computeroutput>Metric</computeroutput> This is the performance measure to be used; see <ref refid="cv_1cvbasic_metrics" kindref="member">Performance measures</ref> for more information.</para></listitem><listitem><para><computeroutput>CVType</computeroutput> This is the type of cross-validation to be used for evaluating the performance measure; this should be <ref refid="classmlpack_1_1cv_1_1KFoldCV" kindref="compound">KFoldCV</ref> or <ref refid="classmlpack_1_1cv_1_1SimpleCV" kindref="compound">SimpleCV</ref>.</para></listitem><listitem><para><computeroutput>OptimizerType</computeroutput> This is the type of optimizer to use; it can be <computeroutput>GridSearch</computeroutput> or a gradient-based optimizer.</para></listitem><listitem><para><computeroutput>MatType</computeroutput> This is the type of data matrix to use. The default is <computeroutput>arma::mat</computeroutput>. This only needs to be changed if you are specifically using sparse data, or if you want to use a numeric type other than <computeroutput>double</computeroutput>.</para></listitem></itemizedlist>
</para><para>The last two template parameters are automatically inferred by the <computeroutput><ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref></computeroutput> and should not need to be manually specified, unless an unconventional data type like <computeroutput>arma::fmat</computeroutput> is being used for data points.</para><para>Typically, <ref refid="classmlpack_1_1cv_1_1SimpleCV" kindref="compound">SimpleCV</ref> is a good choice for <computeroutput>CVType</computeroutput> because it takes so much less time to compute than full <ref refid="classmlpack_1_1cv_1_1KFoldCV" kindref="compound">KFoldCV</ref>; however, the disadvantage is that <ref refid="classmlpack_1_1cv_1_1SimpleCV" kindref="compound">SimpleCV</ref> might give a somewhat more noisy estimate of the performance measure on unseen test data.</para><para>The constructor for the <computeroutput><ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref></computeroutput> is called with exactly the same arguments as the corresponding <computeroutput>CVType</computeroutput> that has been chosen. For more information on that, please see the <ref refid="cv_1cvbasic_api" kindref="member">cross-validation constructor tutorial</ref>. As an example, if we are using <ref refid="classmlpack_1_1cv_1_1SimpleCV" kindref="compound">SimpleCV</ref> and wish to hold out 20% of the dataset as a validation set, we might construct a <computeroutput><ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref></computeroutput> like this:</para><para><programlisting><codeline><highlight class="normal">//<sp/>We<sp/>will<sp/>use<sp/>LinearRegression<sp/>as<sp/>the<sp/>MLAlgorithm,<sp/>and<sp/>MSE<sp/>as<sp/>the<sp/>performance</highlight></codeline>
<codeline><highlight class="normal">//<sp/>measure.<sp/><sp/>Our<sp/>dataset<sp/>is<sp/>&apos;dataset&apos;<sp/>and<sp/>the<sp/>responses<sp/>are<sp/>&apos;responses&apos;.</highlight></codeline>
<codeline><highlight class="normal">HyperParameterTuner&lt;LinearRegression,<sp/>MSE,<sp/>SimpleCV&gt;<sp/>hpt(0.2,<sp/>dataset,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>responses);</highlight></codeline>
</programlisting></para><para>Next, we must set up the hyperparameters to be optimized. If we are doing a grid search with the <computeroutput>ens::GridSearch</computeroutput> optimizer (the default), then we only need to pass a <computeroutput>std::vector</computeroutput> (for non-numeric hyperparameters) or an <computeroutput>arma::vec</computeroutput> (for numeric hyperparameters) containing all of the possible choices that we wish to search over.</para><para>For instance, a set of numeric values might be chosen like this, for the <computeroutput>lambda</computeroutput> parameter (of type <computeroutput>double</computeroutput>):</para><para><programlisting><codeline><highlight class="normal">arma::vec<sp/>lambdaSet<sp/>=<sp/>arma::vec(&quot;0.0<sp/>0.1<sp/>0.5<sp/>1.0&quot;);</highlight></codeline>
</programlisting></para><para>Similarly, a set of non-numeric values might be chosen like this, for the <computeroutput>intercept</computeroutput> parameter:</para><para><programlisting><codeline><highlight class="normal">std::vector&lt;bool&gt;<sp/>interceptSet<sp/>=<sp/>{<sp/>false,<sp/>true<sp/>};</highlight></codeline>
</programlisting></para><para>Once all of these are set up, the <computeroutput><ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner_1a4e04da235ec0434d69613c547b20dbea" kindref="member">HyperParameterTuner::Optimize()</ref></computeroutput> method may be called to find the best set of hyperparameters:</para><para><programlisting><codeline><highlight class="normal">bool<sp/>intercept;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>lambda;</highlight></codeline>
<codeline><highlight class="normal">std::tie(lambda,<sp/>intercept)<sp/>=<sp/>hpt.Optimize(lambdaSet,<sp/>interceptSet);</highlight></codeline>
</programlisting></para><para>Alternately, the <computeroutput><ref refid="namespacemlpack_1_1hpt_1ad773f4d1def8deb412ffbf37bdf289ec" kindref="member">Fixed()</ref></computeroutput> method (detailed in the <ref refid="hpt_guide_1hptfixed" kindref="member">Fixed arguments</ref> section) can be used to fix the values of some parameters.</para><para>For continuous optimizers like <computeroutput>ens::GradientDescent</computeroutput>, a range does not need to be specified but instead only a single value. See the <ref refid="hpt_guide_1hptgradient" kindref="member">Gradient-Based Optimization</ref> section for more details.</para></sect1>
<sect1 id="hpt_guide_1hptfurther">
<title>Further documentation</title>
<para>For more information on the <computeroutput><ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref></computeroutput> class, see the <ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">mlpack::hpt::HyperParameterTuner</ref> class documentation and the <ref refid="cv" kindref="compound">cross-validation tutorial</ref>. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
