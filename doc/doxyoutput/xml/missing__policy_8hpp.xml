<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="missing__policy_8hpp" kind="file" language="C++">
    <compoundname>missing_policy.hpp</compoundname>
    <includes refid="prereqs_8hpp" local="no">mlpack/prereqs.hpp</includes>
    <includes local="no">unordered_map</includes>
    <includes refid="datatype_8hpp" local="no">mlpack/core/data/map_policies/datatype.hpp</includes>
    <includes local="no">limits</includes>
    <includes local="no">set</includes>
    <includedby refid="imputer_8hpp" local="yes">/home/aakash/mlpack/src/mlpack/core/data/imputer.hpp</includedby>
    <incdepgraph>
      <node id="8285">
        <label>list</label>
      </node>
      <node id="8282">
        <label>atomic</label>
      </node>
      <node id="8272">
        <label>cereal/types/memory.hpp</label>
      </node>
      <node id="8248">
        <label>mlpack/core/util/arma_traits.hpp</label>
        <link refid="arma__traits_8hpp"/>
      </node>
      <node id="8284">
        <label>iomanip</label>
      </node>
      <node id="8293">
        <label>limits</label>
      </node>
      <node id="8257">
        <label>mlpack/core/cereal/unordered_map.hpp</label>
        <link refid="unordered__map_8hpp"/>
        <childnode refid="8258" relation="include">
        </childnode>
        <childnode refid="8260" relation="include">
        </childnode>
      </node>
      <node id="8240">
        <label>cstdint</label>
      </node>
      <node id="8249">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="8256">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="8279">
        <label>arma_config.hpp</label>
      </node>
      <node id="8269">
        <label>boost/variant/variant_fwd.hpp</label>
      </node>
      <node id="8236">
        <label>cmath</label>
      </node>
      <node id="8255">
        <label>cereal/types/string.hpp</label>
      </node>
      <node id="8244">
        <label>stdexcept</label>
      </node>
      <node id="8264">
        <label>mlpack/core/cereal/is_saving.hpp</label>
        <link refid="is__saving_8hpp"/>
        <childnode refid="8249" relation="include">
        </childnode>
        <childnode refid="8251" relation="include">
        </childnode>
        <childnode refid="8252" relation="include">
        </childnode>
        <childnode refid="8250" relation="include">
        </childnode>
      </node>
      <node id="8292">
        <label>mlpack/core/data/map_policies/datatype.hpp</label>
        <link refid="datatype_8hpp"/>
        <childnode refid="8235" relation="include">
        </childnode>
      </node>
      <node id="8288">
        <label>string</label>
      </node>
      <node id="8276">
        <label>mlpack/core/util/sfinae_utility.hpp</label>
        <link refid="sfinae__utility_8hpp"/>
        <childnode refid="8277" relation="include">
        </childnode>
        <childnode refid="8243" relation="include">
        </childnode>
      </node>
      <node id="8286">
        <label>map</label>
      </node>
      <node id="8238">
        <label>cfloat</label>
      </node>
      <node id="8268">
        <label>boost/variant.hpp</label>
      </node>
      <node id="8290">
        <label>mlpack/core/util/deprecated.hpp</label>
        <link refid="deprecated_8hpp"/>
      </node>
      <node id="8252">
        <label>cereal/archives/xml.hpp</label>
      </node>
      <node id="8275">
        <label>mlpack/core/data/has_serialize.hpp</label>
        <link refid="has__serialize_8hpp"/>
        <childnode refid="8276" relation="include">
        </childnode>
        <childnode refid="8252" relation="include">
        </childnode>
        <childnode refid="8259" relation="include">
        </childnode>
        <childnode refid="8277" relation="include">
        </childnode>
      </node>
      <node id="8265">
        <label>mlpack/core/arma_extend/serialize_armadillo.hpp</label>
      </node>
      <node id="8263">
        <label>mlpack/core/cereal/is_loading.hpp</label>
        <link refid="is__loading_8hpp"/>
        <childnode refid="8249" relation="include">
        </childnode>
        <childnode refid="8251" relation="include">
        </childnode>
        <childnode refid="8252" relation="include">
        </childnode>
        <childnode refid="8250" relation="include">
        </childnode>
      </node>
      <node id="8266">
        <label>mlpack/core/cereal/array_wrapper.hpp</label>
        <link refid="array__wrapper_8hpp"/>
        <childnode refid="8249" relation="include">
        </childnode>
        <childnode refid="8251" relation="include">
        </childnode>
        <childnode refid="8252" relation="include">
        </childnode>
        <childnode refid="8250" relation="include">
        </childnode>
      </node>
      <node id="8254">
        <label>cereal/types/boost_variant.hpp</label>
      </node>
      <node id="8274">
        <label>pointer_vector_wrapper.hpp</label>
        <link refid="pointer__vector__wrapper_8hpp"/>
        <childnode refid="8250" relation="include">
        </childnode>
        <childnode refid="8251" relation="include">
        </childnode>
        <childnode refid="8252" relation="include">
        </childnode>
        <childnode refid="8262" relation="include">
        </childnode>
        <childnode refid="8271" relation="include">
        </childnode>
      </node>
      <node id="8278">
        <label>mlpack/core/util/arma_config_check.hpp</label>
        <link refid="arma__config__check_8hpp"/>
        <childnode refid="8279" relation="include">
        </childnode>
      </node>
      <node id="8234">
        <label>/home/aakash/mlpack/src/mlpack/core/data/map_policies/missing_policy.hpp</label>
        <link refid="missing__policy_8hpp"/>
        <childnode refid="8235" relation="include">
        </childnode>
        <childnode refid="8260" relation="include">
        </childnode>
        <childnode refid="8292" relation="include">
        </childnode>
        <childnode refid="8293" relation="include">
        </childnode>
        <childnode refid="8294" relation="include">
        </childnode>
      </node>
      <node id="8280">
        <label>mlpack/core/util/log.hpp</label>
      </node>
      <node id="8235">
        <label>mlpack/prereqs.hpp</label>
        <link refid="prereqs_8hpp"/>
        <childnode refid="8236" relation="include">
        </childnode>
        <childnode refid="8237" relation="include">
        </childnode>
        <childnode refid="8238" relation="include">
        </childnode>
        <childnode refid="8239" relation="include">
        </childnode>
        <childnode refid="8240" relation="include">
        </childnode>
        <childnode refid="8241" relation="include">
        </childnode>
        <childnode refid="8242" relation="include">
        </childnode>
        <childnode refid="8243" relation="include">
        </childnode>
        <childnode refid="8244" relation="include">
        </childnode>
        <childnode refid="8245" relation="include">
        </childnode>
        <childnode refid="8246" relation="include">
        </childnode>
        <childnode refid="8247" relation="include">
        </childnode>
        <childnode refid="8248" relation="include">
        </childnode>
        <childnode refid="8249" relation="include">
        </childnode>
        <childnode refid="8250" relation="include">
        </childnode>
        <childnode refid="8251" relation="include">
        </childnode>
        <childnode refid="8252" relation="include">
        </childnode>
        <childnode refid="8253" relation="include">
        </childnode>
        <childnode refid="8254" relation="include">
        </childnode>
        <childnode refid="8255" relation="include">
        </childnode>
        <childnode refid="8256" relation="include">
        </childnode>
        <childnode refid="8257" relation="include">
        </childnode>
        <childnode refid="8261" relation="include">
        </childnode>
        <childnode refid="8262" relation="include">
        </childnode>
        <childnode refid="8263" relation="include">
        </childnode>
        <childnode refid="8264" relation="include">
        </childnode>
        <childnode refid="8265" relation="include">
        </childnode>
        <childnode refid="8266" relation="include">
        </childnode>
        <childnode refid="8267" relation="include">
        </childnode>
        <childnode refid="8273" relation="include">
        </childnode>
        <childnode refid="8274" relation="include">
        </childnode>
        <childnode refid="8271" relation="include">
        </childnode>
        <childnode refid="8275" relation="include">
        </childnode>
        <childnode refid="8278" relation="include">
        </childnode>
        <childnode refid="8280" relation="include">
        </childnode>
        <childnode refid="8281" relation="include">
        </childnode>
        <childnode refid="8290" relation="include">
        </childnode>
        <childnode refid="8291" relation="include">
        </childnode>
      </node>
      <node id="8241">
        <label>cstdio</label>
      </node>
      <node id="8245">
        <label>tuple</label>
      </node>
      <node id="8250">
        <label>cereal/archives/json.hpp</label>
      </node>
      <node id="8267">
        <label>mlpack/core/cereal/pointer_variant_wrapper.hpp</label>
        <link refid="pointer__variant__wrapper_8hpp"/>
        <childnode refid="8250" relation="include">
        </childnode>
        <childnode refid="8251" relation="include">
        </childnode>
        <childnode refid="8252" relation="include">
        </childnode>
        <childnode refid="8254" relation="include">
        </childnode>
        <childnode refid="8268" relation="include">
        </childnode>
        <childnode refid="8269" relation="include">
        </childnode>
        <childnode refid="8270" relation="include">
        </childnode>
        <childnode refid="8271" relation="include">
        </childnode>
      </node>
      <node id="8246">
        <label>utility</label>
      </node>
      <node id="8270">
        <label>boost/variant/static_visitor.hpp</label>
      </node>
      <node id="8261">
        <label>cereal/types/utility.hpp</label>
      </node>
      <node id="8258">
        <label>pair_associative_container.hpp</label>
        <link refid="pair__associative__container_8hpp"/>
        <childnode refid="8259" relation="include">
        </childnode>
      </node>
      <node id="8281">
        <label>mlpack/core/util/timers.hpp</label>
        <link refid="timers_8hpp"/>
        <childnode refid="8282" relation="include">
        </childnode>
        <childnode refid="8283" relation="include">
        </childnode>
        <childnode refid="8284" relation="include">
        </childnode>
        <childnode refid="8285" relation="include">
        </childnode>
        <childnode refid="8286" relation="include">
        </childnode>
        <childnode refid="8287" relation="include">
        </childnode>
        <childnode refid="8288" relation="include">
        </childnode>
        <childnode refid="8289" relation="include">
        </childnode>
      </node>
      <node id="8259">
        <label>cereal/cereal.hpp</label>
      </node>
      <node id="8273">
        <label>mlpack/core/cereal/pointer_vector_variant_wrapper.hpp</label>
        <link refid="pointer__vector__variant__wrapper_8hpp"/>
        <childnode refid="8271" relation="include">
        </childnode>
        <childnode refid="8267" relation="include">
        </childnode>
        <childnode refid="8274" relation="include">
        </childnode>
      </node>
      <node id="8242">
        <label>cstdlib</label>
      </node>
      <node id="8237">
        <label>cctype</label>
      </node>
      <node id="8260">
        <label>unordered_map</label>
      </node>
      <node id="8239">
        <label>climits</label>
      </node>
      <node id="8287">
        <label>mutex</label>
      </node>
      <node id="8283">
        <label>chrono</label>
      </node>
      <node id="8291">
        <label>mlpack/core/util/size_checks.hpp</label>
        <link refid="size__checks_8hpp"/>
      </node>
      <node id="8289">
        <label>thread</label>
      </node>
      <node id="8277">
        <label>type_traits</label>
      </node>
      <node id="8294">
        <label>set</label>
      </node>
      <node id="8253">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="8247">
        <label>mlpack/core/arma_extend/arma_extend.hpp</label>
      </node>
      <node id="8271">
        <label>pointer_wrapper.hpp</label>
        <link refid="pointer__wrapper_8hpp"/>
        <childnode refid="8249" relation="include">
        </childnode>
        <childnode refid="8250" relation="include">
        </childnode>
        <childnode refid="8251" relation="include">
        </childnode>
        <childnode refid="8252" relation="include">
        </childnode>
        <childnode refid="8272" relation="include">
        </childnode>
      </node>
      <node id="8243">
        <label>cstring</label>
      </node>
      <node id="8262">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="8251">
        <label>cereal/archives/portable_binary.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8295">
        <label>/home/aakash/mlpack/src/mlpack/core/data/map_policies/missing_policy.hpp</label>
        <link refid="missing__policy_8hpp"/>
        <childnode refid="8296" relation="include">
        </childnode>
      </node>
      <node id="8296">
        <label>/home/aakash/mlpack/src/mlpack/core/data/imputer.hpp</label>
        <link refid="imputer_8hpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmlpack_1_1data_1_1MissingPolicy" prot="public">mlpack::data::MissingPolicy</innerclass>
    <innernamespace refid="namespacemlpack">mlpack</innernamespace>
    <innernamespace refid="namespacemlpack_1_1data">mlpack::data</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Keon Kim</para></simplesect>
Missing map policy for dataset info.</para><para>mlpack is free software; you may redistribute it and/or modify it under the terms of the 3-clause BSD license. You should have received a copy of the 3-clause BSD license along with mlpack. If not, see <ulink url="http://www.opensource.org/licenses/BSD-3-Clause">http://www.opensource.org/licenses/BSD-3-Clause</ulink> for more information. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="preprocessor">#ifndef<sp/>MLPACK_CORE_DATA_MAP_POLICIES_MISSING_POLICY_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLPACK_CORE_DATA_MAP_POLICIES_MISSING_POLICY_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="prereqs_8hpp" kindref="compound">mlpack/prereqs.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="datatype_8hpp" kindref="compound">mlpack/core/data/map_policies/datatype.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemlpack" kindref="compound">mlpack</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">data<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classmlpack_1_1data_1_1MissingPolicy" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmlpack_1_1data_1_1MissingPolicy" kindref="compound">MissingPolicy</ref></highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>typedef<sp/>of<sp/>MappedType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classmlpack_1_1data_1_1MissingPolicy_1a0265262ad1f0df167b2f48524b20b3e7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1MissingPolicy_1a0265262ad1f0df167b2f48524b20b3e7" kindref="member">MappedType</ref><sp/>=<sp/>double;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classmlpack_1_1data_1_1MissingPolicy_1a90cec8cd33b9f03c43fb3ea28989e129" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classmlpack_1_1data_1_1MissingPolicy_1a90cec8cd33b9f03c43fb3ea28989e129" kindref="member">MissingPolicy</ref>()</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>initialize<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classmlpack_1_1data_1_1MissingPolicy_1a35006875c42df50a4adc4968e817a471" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1MissingPolicy_1a35006875c42df50a4adc4968e817a471" kindref="member">MissingPolicy</ref>(std::set&lt;std::string&gt;<sp/>missingSet)<sp/>:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>missingSet(<ref refid="namespacestd" kindref="compound">std</ref>::move(missingSet))</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>initialize<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classmlpack_1_1data_1_1MissingPolicy_1a6ef7d83a1da0e9f1d02b61f62e852079" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1MissingPolicy_1a6ef7d83a1da0e9f1d02b61f62e852079" kindref="member">NeedsFirstPass</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="63" refid="classmlpack_1_1data_1_1MissingPolicy_1a230e07e59bf0cfdcf5d75cc459c8b759" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1MissingPolicy_1a230e07e59bf0cfdcf5d75cc459c8b759" kindref="member">MapFirstPass</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="comment">/*<sp/>string<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>dim<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MapType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="84" refid="classmlpack_1_1data_1_1MissingPolicy_1a93a368288d49f1902675d2f3ff47227a" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/><ref refid="classmlpack_1_1data_1_1MissingPolicy_1a93a368288d49f1902675d2f3ff47227a" kindref="member">MapString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dimension,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MapType&amp;<sp/>maps,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Datatype&gt;&amp;<sp/></highlight><highlight class="comment">/*<sp/>types<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::numeric_limits&lt;T&gt;::has_quiet_NaN<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>use<sp/>MissingPolicy<sp/>with<sp/>types<sp/>where<sp/>has_quiet_NaN()<sp/>is<sp/>false!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>can<sp/>load<sp/>the<sp/>string<sp/>then<sp/>there<sp/>is<sp/>no<sp/>need<sp/>for<sp/>mapping.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>token;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>token.str(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>t;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>&gt;&gt;<sp/>t;<sp/></highlight><highlight class="comment">//<sp/>Could<sp/>be<sp/>sped<sp/>up<sp/>by<sp/>only<sp/>doing<sp/>this<sp/>if<sp/>we<sp/>need<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmlpack_1_1data_1_1MissingPolicy_1a0265262ad1f0df167b2f48524b20b3e7" kindref="member">MappedType</ref><sp/>value<sp/>=<sp/>std::numeric_limits&lt;MappedType&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>we<sp/>can&apos;t<sp/>use<sp/>that<sp/>for<sp/>the<sp/>map,<sp/>so<sp/>we<sp/>need<sp/>some<sp/>other<sp/>thing<sp/>that<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>represent<sp/>quiet_NaN().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmlpack_1_1data_1_1MissingPolicy_1a0265262ad1f0df167b2f48524b20b3e7" kindref="member">MappedType</ref><sp/>mapValue<sp/>=<sp/>std::nexttoward(</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;MappedType&gt;::max(),<sp/><ref refid="classmlpack_1_1data_1_1MissingPolicy_1a0265262ad1f0df167b2f48524b20b3e7" kindref="member">MappedType</ref>(0));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>extraction<sp/>of<sp/>the<sp/>value<sp/>fails,<sp/>or<sp/>if<sp/>it<sp/>is<sp/>a<sp/>value<sp/>that<sp/>is<sp/>supposed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>mapped,<sp/>then<sp/>do<sp/>mapping.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token.fail()<sp/>||<sp/>!token.eof()<sp/>||</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>missingSet.find(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>!=<sp/>std::end(missingSet))</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Everything<sp/>is<sp/>mapped<sp/>to<sp/>NaN.<sp/><sp/>However<sp/>we<sp/>must<sp/>still<sp/>keep<sp/>track<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>everything<sp/>that<sp/>we<sp/>have<sp/>mapped,<sp/>so<sp/>we<sp/>add<sp/>it<sp/>to<sp/>the<sp/>maps<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maps.count(dimension)<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maps[dimension].first.count(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>string<sp/>does<sp/>not<sp/>exist<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;std::string,<sp/>MappedType&gt;<sp/>PairType;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maps[dimension].first.insert(PairType(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>value));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>right<sp/>mapping<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maps[dimension].second.count(mapValue)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>element<sp/>in<sp/>reverse<sp/>map.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maps[dimension].second.insert(std::make_pair(mapValue,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;()));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maps[dimension].second[mapValue].push_back(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>just<sp/>return<sp/>the<sp/>value<sp/>that<sp/>we<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>missingSet<sp/>and<sp/>maps<sp/>are<sp/>different.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>missingSet<sp/>specifies<sp/>which<sp/>value/string<sp/>should<sp/>be<sp/>mapped<sp/>and<sp/>may<sp/>be<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>superset<sp/>of<sp/>&apos;maps&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>std::set&lt;std::string&gt;<sp/>missingSet;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>class<sp/>MissingPolicy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>mlpack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/aakash/mlpack/src/mlpack/core/data/map_policies/missing_policy.hpp"/>
  </compounddef>
</doxygen>
