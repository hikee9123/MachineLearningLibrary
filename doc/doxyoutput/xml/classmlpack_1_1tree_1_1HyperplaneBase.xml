<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1tree_1_1HyperplaneBase" kind="class" language="C++" prot="public">
    <compoundname>mlpack::tree::HyperplaneBase</compoundname>
    <includes refid="hyperplane_8hpp" local="no">hyperplane.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>BoundT</declname>
        <defname>BoundT</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>ProjVectorT</declname>
        <defname>ProjVectorT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1HyperplaneBase_1adf1b3e4e822c2fdb767e1dd2a70759e1" prot="public" static="no">
        <type>BoundT</type>
        <definition>typedef BoundT BoundType</definition>
        <argsstring></argsstring>
        <name>BoundType</name>
        <briefdescription>
<para>Useful typedef for the bound type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="34" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmlpack_1_1tree_1_1HyperplaneBase_1a9c63f86eb1f2a6154e154f7a7eccf4d7" prot="public" static="no">
        <type>ProjVectorT</type>
        <definition>typedef ProjVectorT ProjVectorType</definition>
        <argsstring></argsstring>
        <name>ProjVectorType</name>
        <briefdescription>
<para>Useful typedef for the projection vector type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="36" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1HyperplaneBase_1a900e42e32428df7ff8f0058d50223b0d" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1tree_1_1HyperplaneBase_1a9c63f86eb1f2a6154e154f7a7eccf4d7" kindref="member">ProjVectorType</ref></type>
        <definition>ProjVectorType projVect</definition>
        <argsstring></argsstring>
        <name>projVect</name>
        <briefdescription>
<para>Projection vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="40" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1tree_1_1HyperplaneBase_1a414b35a0916562712a643bf4aa7904dd" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double splitVal</definition>
        <argsstring></argsstring>
        <name>splitVal</name>
        <briefdescription>
<para>Projection value that determines the decision boundary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="43" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1tree_1_1HyperplaneBase_1a3b06db0c328fd3b847a8843578566d50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HyperplaneBase</definition>
        <argsstring>()</argsstring>
        <name>HyperplaneBase</name>
        <briefdescription>
<para>Empty Constructor. </para>        </briefdescription>
        <detaileddescription>
<para>By default will consider all points to the left. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="49" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1HyperplaneBase_1a112db47156d3656f7782b7d04c26b910" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HyperplaneBase</definition>
        <argsstring>(const ProjVectorType &amp;projVect, double splitVal)</argsstring>
        <name>HyperplaneBase</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1HyperplaneBase_1a9c63f86eb1f2a6154e154f7a7eccf4d7" kindref="member">ProjVectorType</ref> &amp;</type>
          <declname>projVect</declname>
        </param>
        <param>
          <type>double</type>
          <declname>splitVal</declname>
        </param>
        <briefdescription>
<para>Create the hyperplane with the specified projection vector and split value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>projVect</parametername>
</parameternamelist>
<parameterdescription>
<para>Projection vector. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>splitVal</parametername>
</parameternamelist>
<parameterdescription>
<para>Split value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="59" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1HyperplaneBase_1ad4c0f9fc8b46fb486a3d41759ae16c8a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Left</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0) const</argsstring>
        <name>Left</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Determine if the given point is to the left of the hyperplane, this means if the projection over the projection vector is negative or zero. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Point to be analyzed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="86" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="86" bodyend="90"/>
        <references refid="classmlpack_1_1tree_1_1HyperplaneBase_1a3992c37d68bb4c57a67c6f422ad60133" compoundref="hyperplane_8hpp" startline="71" endline="77">HyperplaneBase&lt; BoundT, ProjVectorT &gt;::Project</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1HyperplaneBase_1ab6e7456966188ab912faf392be34d370" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Left</definition>
        <argsstring>(const BoundType &amp;bound) const</argsstring>
        <name>Left</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1HyperplaneBase_1adf1b3e4e822c2fdb767e1dd2a70759e1" kindref="member">BoundType</ref> &amp;</type>
          <declname>bound</declname>
        </param>
        <briefdescription>
<para>Determine if the given bound is to the left of the hyperplane. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bound</parametername>
</parameternamelist>
<parameterdescription>
<para>Bound to be analyzed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="110" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1HyperplaneBase_1a3992c37d68bb4c57a67c6f422ad60133" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Project</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0) const</argsstring>
        <name>Project</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Project the given point on the projection vector and subtract the split value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Point to be projected. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="71" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="71" bodyend="77"/>
        <referencedby refid="classmlpack_1_1tree_1_1HyperplaneBase_1ad4c0f9fc8b46fb486a3d41759ae16c8a" compoundref="hyperplane_8hpp" startline="86" endline="90">HyperplaneBase&lt; BoundT, ProjVectorT &gt;::Left</referencedby>
        <referencedby refid="classmlpack_1_1tree_1_1HyperplaneBase_1a10fdc3f4229c624f8f63f1398a14714c" compoundref="hyperplane_8hpp" startline="99" endline="103">HyperplaneBase&lt; BoundT, ProjVectorT &gt;::Right</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1HyperplaneBase_1a10fdc3f4229c624f8f63f1398a14714c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VecType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool Right</definition>
        <argsstring>(const VecType &amp;point, typename std::enable_if_t&lt; IsVector&lt; VecType &gt;::value &gt; *=0) const</argsstring>
        <name>Right</name>
        <param>
          <type>const VecType &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>typename <ref refid="namespacestd_1a93e9cb7fadbcfaa2afb5b94058b8e34c" kindref="member">std::enable_if_t</ref>&lt; <ref refid="structIsVector" kindref="compound">IsVector</ref>&lt; VecType &gt;::value &gt; *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Determine if the given point is to the right of the hyperplane, this means if the projection over the projection vector is positive. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>Point to be analyzed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="99" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="99" bodyend="103"/>
        <references refid="classmlpack_1_1tree_1_1HyperplaneBase_1a3992c37d68bb4c57a67c6f422ad60133" compoundref="hyperplane_8hpp" startline="71" endline="77">HyperplaneBase&lt; BoundT, ProjVectorT &gt;::Project</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1HyperplaneBase_1a809077e433dcb5315d930cf02048f6e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Right</definition>
        <argsstring>(const BoundType &amp;bound) const</argsstring>
        <name>Right</name>
        <param>
          <type>const <ref refid="classmlpack_1_1tree_1_1HyperplaneBase_1adf1b3e4e822c2fdb767e1dd2a70759e1" kindref="member">BoundType</ref> &amp;</type>
          <declname>bound</declname>
        </param>
        <briefdescription>
<para>Determine if the given bound is to the right of the hyperplane. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bound</parametername>
</parameternamelist>
<parameterdescription>
<para>Bound to be analyzed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="122" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="122" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1tree_1_1HyperplaneBase_1a65cba07328997659bec80b9879b15a51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Archive</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void serialize</definition>
        <argsstring>(Archive &amp;ar, const uint32_t)</argsstring>
        <name>serialize</name>
        <param>
          <type>Archive &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>Serialization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="133" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="133" bodyend="137"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classmlpack_1_1tree_1_1HyperplaneBase" kindref="compound">HyperplaneBase</ref> defines a splitting hyperplane based on a projection vector and projection value. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BoundT</parametername>
</parameternamelist>
<parameterdescription>
<para>The bound type considered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ProjVectorT</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of projection vector (<ref refid="classmlpack_1_1tree_1_1AxisParallelProjVector" kindref="compound">AxisParallelProjVector</ref>, <ref refid="classmlpack_1_1tree_1_1ProjVector" kindref="compound">ProjVector</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" line="31" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/tree/space_split/hyperplane.hpp" bodystart="30" bodyend="138"/>
    <listofallmembers>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1adf1b3e4e822c2fdb767e1dd2a70759e1" prot="public" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>BoundType</name></member>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1a3b06db0c328fd3b847a8843578566d50" prot="public" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>HyperplaneBase</name></member>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1a112db47156d3656f7782b7d04c26b910" prot="public" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>HyperplaneBase</name></member>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1ad4c0f9fc8b46fb486a3d41759ae16c8a" prot="public" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>Left</name></member>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1ab6e7456966188ab912faf392be34d370" prot="public" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>Left</name></member>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1a3992c37d68bb4c57a67c6f422ad60133" prot="public" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>Project</name></member>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1a900e42e32428df7ff8f0058d50223b0d" prot="private" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>projVect</name></member>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1a9c63f86eb1f2a6154e154f7a7eccf4d7" prot="public" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>ProjVectorType</name></member>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1a10fdc3f4229c624f8f63f1398a14714c" prot="public" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>Right</name></member>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1a809077e433dcb5315d930cf02048f6e9" prot="public" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>Right</name></member>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1a65cba07328997659bec80b9879b15a51" prot="public" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>serialize</name></member>
      <member refid="classmlpack_1_1tree_1_1HyperplaneBase_1a414b35a0916562712a643bf4aa7904dd" prot="private" virt="non-virtual"><scope>mlpack::tree::HyperplaneBase</scope><name>splitVal</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
