<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1hmm_1_1HMMRegression" kind="class" language="C++" prot="public">
    <compoundname>mlpack::hmm::HMMRegression</compoundname>
    <basecompoundref refid="classmlpack_1_1hmm_1_1HMM" prot="public" virt="non-virtual">HMM&lt; distribution::RegressionDistribution &gt;</basecompoundref>
    <includes refid="hmm__regression_8hpp" local="no">hmm_regression.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a9a4d1ee17c46d307ed09f2e769d77421" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HMMRegression</definition>
        <argsstring>(const size_t states, const distribution::RegressionDistribution emissions, const double tolerance=1e-5)</argsstring>
        <name>HMMRegression</name>
        <param>
          <type>const size_t</type>
          <declname>states</declname>
        </param>
        <param>
          <type>const distribution::RegressionDistribution</type>
          <declname>emissions</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tolerance</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>Create the Hidden Markov Model Regression with the given number of hidden states and the given default regression emission. </para>        </briefdescription>
        <detaileddescription>
<para>The dimensionality of the observations is taken from the emissions variable, so it is important that the given default emission distribution is set with the correct dimensionality. Alternately, set the dimensionality with <ref refid="classmlpack_1_1hmm_1_1HMM_1a787adc650f11b9430f6bd0b937bbe6b0" kindref="member">Dimensionality()</ref>. Optionally, the tolerance for convergence of the Baum-Welch algorithm can be set.</para><para>By default, the transition matrix and initial probability vector are set to contain equal probability for each state.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>states</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of states. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emissions</parametername>
</parameternamelist>
<parameterdescription>
<para>Default distribution for emissions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for convergence of training algorithm (Baum-Welch). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="89" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a6322913bf387a716d9f4a7deeb14e969" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>HMMRegression</definition>
        <argsstring>(const arma::vec &amp;initial, const arma::mat &amp;transition, const std::vector&lt; distribution::RegressionDistribution &gt; &amp;emission, const double tolerance=1e-5)</argsstring>
        <name>HMMRegression</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>initial</declname>
        </param>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>transition</declname>
        </param>
        <param>
          <type>const std::vector&lt; distribution::RegressionDistribution &gt; &amp;</type>
          <declname>emission</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>tolerance</declname>
          <defval>1e-5</defval>
        </param>
        <briefdescription>
<para>Create the Hidden Markov Model Regression with the given initial probability vector, the given transition matrix, and the given regression emission distributions. </para>        </briefdescription>
        <detaileddescription>
<para>The dimensionality of the observations of the HMMR are taken from the given emission distributions. Alternately, the dimensionality can be set with <ref refid="classmlpack_1_1hmm_1_1HMM_1a787adc650f11b9430f6bd0b937bbe6b0" kindref="member">Dimensionality()</ref>.</para><para>The initial state probability vector should have length equal to the number of states, and each entry represents the probability of being in the given state at time T = 0 (the beginning of a sequence).</para><para>The transition matrix should be such that T(i, j) is the probability of transition to state i from state j. The columns of the matrix should sum to 1.</para><para>Optionally, the tolerance for convergence of the Baum-Welch algorithm can be set.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial state probabilities. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transition</parametername>
</parameternamelist>
<parameterdescription>
<para>Transition matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emission</parametername>
</parameternamelist>
<parameterdescription>
<para>Emission distributions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>Tolerance for convergence of training algorithm (Baum-Welch). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="119" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" bodystart="119" bodyend="125"/>
        <references refid="classmlpack_1_1hmm_1_1HMMRegression_1a58cd0299f6951072a3ae4a10cf698853">HMMRegression::Estimate</references>
        <references refid="classmlpack_1_1hmm_1_1HMMRegression_1a4fabd58fdb7df6bcf221302569e0c05c">HMMRegression::Filter</references>
        <references refid="classmlpack_1_1hmm_1_1HMMRegression_1a5e7c4dbe9cfacdf2746e92cd20aa2a66">HMMRegression::LogLikelihood</references>
        <references refid="classmlpack_1_1hmm_1_1HMMRegression_1a039bc421248d00ffae03def696c0cfbd">HMMRegression::Predict</references>
        <references refid="classmlpack_1_1hmm_1_1HMMRegression_1a5840753ea7eec9a4fd241704de54fa9d">HMMRegression::Smooth</references>
        <references refid="classmlpack_1_1hmm_1_1HMMRegression_1ac4492ef2dc3b4ec02d4ce6ddb3a4171e">HMMRegression::Train</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a58cd0299f6951072a3ae4a10cf698853" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Estimate</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::vec &amp;responses, arma::mat &amp;stateProb, arma::mat &amp;forwardProb, arma::mat &amp;backwardProb, arma::vec &amp;scales) const</argsstring>
        <name>Estimate</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>stateProb</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>forwardProb</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>backwardProb</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>scales</declname>
        </param>
        <briefdescription>
<para>Estimate the probabilities of each hidden state at each time step for each given data observation, using the Forward-Backward algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>Each matrix which is returned has columns equal to the number of data observations, and rows equal to the number of hidden states in the model. The log-likelihood of the most probable sequence is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of predictor sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of response sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateProb</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix in which the probabilities of each state at each time interval will be stored. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forwardProb</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix in which the forward probabilities of each state at each time interval will be stored. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>backwardProb</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix in which the backward probabilities of each state at each time interval will be stored. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scales</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector in which the scaling factors at each time interval will be stored. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Log-likelihood of most likely state sequence. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="201" column="1"/>
        <referencedby refid="classmlpack_1_1hmm_1_1HMMRegression_1a6322913bf387a716d9f4a7deeb14e969" compoundref="hmm__regression_8hpp" startline="119" endline="125">HMMRegression::HMMRegression</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a18a07e75d4611abb098bc01d3932bf20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Estimate</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::vec &amp;responses, arma::mat &amp;stateProb) const</argsstring>
        <name>Estimate</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>stateProb</declname>
        </param>
        <briefdescription>
<para>Estimate the probabilities of each hidden state at each time step of each given data observation, using the Forward-Backward algorithm. </para>        </briefdescription>
        <detaileddescription>
<para>The returned matrix of state probabilities has columns equal to the number of data observations, and rows equal to the number of hidden states in the model. The log-likelihood of the most probable sequence is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of predictor sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of response sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateProb</parametername>
</parameternamelist>
<parameterdescription>
<para>Probabilities of each state at each time interval. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Log-likelihood of most likely state sequence. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a4fabd58fdb7df6bcf221302569e0c05c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Filter</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::vec &amp;responses, arma::vec &amp;filterSeq, size_t ahead=0) const</argsstring>
        <name>Filter</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>filterSeq</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ahead</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>HMMR filtering. </para>        </briefdescription>
        <detaileddescription>
<para>Computes the k-step-ahead expected response at each time conditioned only on prior observations. That is E{ Y[t+k] | Y[0], ..., Y[t] }. The returned matrix has columns equal to the number of observations. Note that the expectation may not be meaningful for discrete emissions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of predictor sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of response sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ahead</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of steps ahead (k) for expectations. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filterSeq</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector in which the expected emission sequence will be stored. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="261" column="1"/>
        <referencedby refid="classmlpack_1_1hmm_1_1HMMRegression_1a6322913bf387a716d9f4a7deeb14e969" compoundref="hmm__regression_8hpp" startline="119" endline="125">HMMRegression::HMMRegression</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a5e7c4dbe9cfacdf2746e92cd20aa2a66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double LogLikelihood</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::vec &amp;responses) const</argsstring>
        <name>LogLikelihood</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>responses</declname>
        </param>
        <briefdescription>
<para>Compute the log-likelihood of the given predictors and responses. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of predictor sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of response sequences. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Log-likelihood of the given sequence. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="246" column="1"/>
        <referencedby refid="classmlpack_1_1hmm_1_1HMMRegression_1a6322913bf387a716d9f4a7deeb14e969" compoundref="hmm__regression_8hpp" startline="119" endline="125">HMMRegression::HMMRegression</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a039bc421248d00ffae03def696c0cfbd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Predict</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::vec &amp;responses, arma::Row&lt; size_t &gt; &amp;stateSeq) const</argsstring>
        <name>Predict</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>arma::Row&lt; size_t &gt; &amp;</type>
          <declname>stateSeq</declname>
        </param>
        <briefdescription>
<para>Compute the most probable hidden state sequence for the given predictors and responses, using the Viterbi algorithm, returning the log-likelihood of the most likely state sequence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of predictor sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of response sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateSeq</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector in which the most probable state sequence will be stored. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Log-likelihood of most probable state sequence. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="235" column="1"/>
        <referencedby refid="classmlpack_1_1hmm_1_1HMMRegression_1a6322913bf387a716d9f4a7deeb14e969" compoundref="hmm__regression_8hpp" startline="119" endline="125">HMMRegression::HMMRegression</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a5840753ea7eec9a4fd241704de54fa9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Smooth</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::vec &amp;responses, arma::vec &amp;smoothSeq) const</argsstring>
        <name>Smooth</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>smoothSeq</declname>
        </param>
        <briefdescription>
<para><ref refid="classmlpack_1_1hmm_1_1HMM" kindref="compound">HMM</ref> smoothing. </para>        </briefdescription>
        <detaileddescription>
<para>Computes expected emission at each time conditioned on all observations. That is E{ Y[t] | Y[0], ..., Y[T] }. The returned matrix has columns equal to the number of observations. Note that the expectation may not be meaningful for discrete emissions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of predictor sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of response sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>smoothSeq</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector in which the expected emission sequence will be stored. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="278" column="1"/>
        <referencedby refid="classmlpack_1_1hmm_1_1HMMRegression_1a6322913bf387a716d9f4a7deeb14e969" compoundref="hmm__regression_8hpp" startline="119" endline="125">HMMRegression::HMMRegression</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1ac4492ef2dc3b4ec02d4ce6ddb3a4171e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Train</definition>
        <argsstring>(const std::vector&lt; arma::mat &gt; &amp;predictors, const std::vector&lt; arma::vec &gt; &amp;responses)</argsstring>
        <name>Train</name>
        <param>
          <type>const std::vector&lt; arma::mat &gt; &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const std::vector&lt; arma::vec &gt; &amp;</type>
          <declname>responses</declname>
        </param>
        <briefdescription>
<para>Train the model using the Baum-Welch algorithm, with only the given predictors and responses. </para>        </briefdescription>
        <detaileddescription>
<para>Instead of giving a guess transition and emission here, do that in the constructor. Each matrix in the vector of predictors corresponds to an individual data sequence, and likewise for each vec in the vector of responses. The number of rows in each matrix of predictors plus one should be equal to the dimensionality of the <ref refid="classmlpack_1_1hmm_1_1HMM" kindref="compound">HMM</ref> (which is set in the constructor).</para><para>It is preferable to use the other overload of <ref refid="classmlpack_1_1hmm_1_1HMMRegression_1ac4492ef2dc3b4ec02d4ce6ddb3a4171e" kindref="member">Train()</ref>, with labeled data. That will produce much better results. However, if labeled data is unavailable, this will work. In addition, it is possible to use <ref refid="classmlpack_1_1hmm_1_1HMMRegression_1ac4492ef2dc3b4ec02d4ce6ddb3a4171e" kindref="member">Train()</ref> with labeled data first, and then continue to train the model using this overload of <ref refid="classmlpack_1_1hmm_1_1HMMRegression_1ac4492ef2dc3b4ec02d4ce6ddb3a4171e" kindref="member">Train()</ref> with unlabeled data.</para><para>The tolerance of the Baum-Welch algorithm can be set either in the constructor or with the <ref refid="classmlpack_1_1hmm_1_1HMM_1a3d9fac84af16250f5a3689692e8f2173" kindref="member">Tolerance()</ref> method. When the change in log-likelihood of the model between iterations is less than the tolerance, the Baum-Welch algorithm terminates.</para><para><simplesect kind="note"><para><ref refid="classmlpack_1_1hmm_1_1HMMRegression_1ac4492ef2dc3b4ec02d4ce6ddb3a4171e" kindref="member">Train()</ref> can be called multiple times with different sequences; each time it is called, it uses the current parameters of the <ref refid="classmlpack_1_1hmm_1_1HMM" kindref="compound">HMM</ref> as a starting point for training.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of predictor sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of response sequences. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="157" column="1"/>
        <referencedby refid="classmlpack_1_1hmm_1_1HMMRegression_1a6322913bf387a716d9f4a7deeb14e969" compoundref="hmm__regression_8hpp" startline="119" endline="125">HMMRegression::HMMRegression</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a9d049da300ddcf8b1c38a1e63c93bf2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Train</definition>
        <argsstring>(const std::vector&lt; arma::mat &gt; &amp;predictors, const std::vector&lt; arma::vec &gt; &amp;responses, const std::vector&lt; arma::Row&lt; size_t &gt; &gt; &amp;stateSeq)</argsstring>
        <name>Train</name>
        <param>
          <type>const std::vector&lt; arma::mat &gt; &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const std::vector&lt; arma::vec &gt; &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>const std::vector&lt; arma::Row&lt; size_t &gt; &gt; &amp;</type>
          <declname>stateSeq</declname>
        </param>
        <briefdescription>
<para>Train the model using the given labeled observations; the transition and regression emissions are directly estimated. </para>        </briefdescription>
        <detaileddescription>
<para>Each matrix in the vector of predictors corresponds to an individual data sequence, and likewise for each vec in the vector of responses. The number of rows in each matrix of predictors plus one should be equal to the dimensionality of the <ref refid="classmlpack_1_1hmm_1_1HMM" kindref="compound">HMM</ref> (which is set in the constructor).</para><para><simplesect kind="note"><para><ref refid="classmlpack_1_1hmm_1_1HMMRegression_1ac4492ef2dc3b4ec02d4ce6ddb3a4171e" kindref="member">Train()</ref> can be called multiple times with different sequences; each time it is called, it uses the current parameters of the HMMR as a starting point for training.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of predictor sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of response sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateSeq</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of state sequences, corresponding to each observation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="178" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1ac2ed3d13de1ac440ceb369c31747c7d8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Backward</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::vec &amp;responses, const arma::vec &amp;scales, arma::mat &amp;backwardProb) const</argsstring>
        <name>Backward</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>scales</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>backwardProb</declname>
        </param>
        <briefdescription>
<para>The Backward algorithm (part of the Forward-Backward algorithm). </para>        </briefdescription>
        <detaileddescription>
<para>Computes backward probabilities for each state for each observation in the given data sequence, using the scaling factors found (presumably) by Forward(). The returned matrix has rows equal to the number of hidden states and columns equal to the number of observations.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of predictor sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of response sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scales</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of scaling factors. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>backwardProb</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix in which backward probabilities will be saved. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a7bb3a665fb61f8ae5c7d9cfd6c5a583e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Forward</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::vec &amp;responses, arma::vec &amp;scales, arma::mat &amp;forwardProb) const</argsstring>
        <name>Forward</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>scales</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>forwardProb</declname>
        </param>
        <briefdescription>
<para>The Forward algorithm (part of the Forward-Backward algorithm). </para>        </briefdescription>
        <detaileddescription>
<para>Computes forward probabilities for each state for each observation in the given data sequence. The returned matrix has rows equal to the number of hidden states and columns equal to the number of observations.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predictors</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of predictor sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>responses</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of response sequences. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scales</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector in which scaling factors will be saved. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>forwardProb</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix in which forward probabilities will be saved. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a05c9a665bc4dc59664975faee1bd224d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackData</definition>
        <argsstring>(const std::vector&lt; arma::mat &gt; &amp;predictors, const std::vector&lt; arma::vec &gt; &amp;responses, std::vector&lt; arma::mat &gt; &amp;dataSeq) const</argsstring>
        <name>StackData</name>
        <param>
          <type>const std::vector&lt; arma::mat &gt; &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const std::vector&lt; arma::vec &gt; &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>std::vector&lt; arma::mat &gt; &amp;</type>
          <declname>dataSeq</declname>
        </param>
        <briefdescription>
<para>Utility functions to facilitate the use of the <ref refid="classmlpack_1_1hmm_1_1HMM" kindref="compound">HMM</ref> class for HMMR. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hmm_1_1HMMRegression_1a178da0ffb586e29f7be625d2b3dc5a02" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StackData</definition>
        <argsstring>(const arma::mat &amp;predictors, const arma::vec &amp;responses, arma::mat &amp;dataSeq) const</argsstring>
        <name>StackData</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>predictors</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>responses</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>dataSeq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="290" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class that represents a Hidden Markov Model Regression (HMMR). </para>    </briefdescription>
    <detaileddescription>
<para>HMMR is an extension of Hidden Markov Models to regression analysis. The method is described in (Fridman, 1993) <ulink url="https://www.ima.umn.edu/preprints/January1994/1195.pdf">https://www.ima.umn.edu/preprints/January1994/1195.pdf</ulink> An HMMR is a linear regression model whose coefficients are determined by a finite-state Markov chain. The error terms are conditionally independently normally distributed with zero mean and state-dependent variance. Let Q_t be a finite-state Markov chain, X_t a vector of predictors and Y_t a response. The HMMR is <formula id="152">$ Y_t = X_t \beta_{Q_t} + \sigma_{Q_t} \epsilon_t $</formula></para><para>This HMMR class supports training (supervised and unsupervised), prediction of state sequences via the Viterbi algorithm, estimation of state probabilities, filtering and smoothing of responses, and calculation of the log-likelihood of a given sequence.</para><para>Usage of the HMMR class generally involves either training an HMMR or loading an already-known HMMR and using to filter a sequence. Example code for supervised training of an HMMR is given below.</para><para><programlisting><codeline><highlight class="normal">//<sp/>Each<sp/>column<sp/>is<sp/>a<sp/>vector<sp/>of<sp/>predictors<sp/>for<sp/>a<sp/>single<sp/>observation.</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>predictors(5,<sp/>100,<sp/>arma::fill::randn);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Responses<sp/>for<sp/>each<sp/>observation</highlight></codeline>
<codeline><highlight class="normal">arma::vec<sp/>responses(100,<sp/>arma::fill::randn);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Create<sp/>an<sp/>untrained<sp/>HMMR<sp/>with<sp/>3<sp/>hidden<sp/>states</highlight></codeline>
<codeline><highlight class="normal">RegressionDistribution<sp/>rd(predictors,<sp/>responses);</highlight></codeline>
<codeline><highlight class="normal">arma::mat<sp/>transition(&quot;0.5<sp/>0.5;&quot;<sp/>&quot;0.5<sp/>0.5;&quot;);</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;RegressionDistribution&gt;<sp/>emissions(2,rd);</highlight></codeline>
<codeline><highlight class="normal">HMMRegression<sp/>hmmr(&quot;0.9<sp/>0.1&quot;,<sp/>transition,<sp/>emissions);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Train<sp/>the<sp/>HMM<sp/>(supply<sp/>a<sp/>state<sp/>sequence<sp/>to<sp/>perform<sp/>supervised<sp/>training)</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;arma::mat&gt;<sp/>predictorsSeq(1,<sp/>predictors);</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;<sp/>arma::vec&gt;<sp/>responsesSeq(1,<sp/>responses);</highlight></codeline>
<codeline><highlight class="normal">hmmr.Train(predictorsSeq,<sp/>responsesSeq);</highlight></codeline>
<codeline><highlight class="normal">hmm.Train(observations,<sp/>states);</highlight></codeline>
</programlisting></para><para>Once initialized, the HMMR can evaluate the probability of a certain sequence (with <ref refid="classmlpack_1_1hmm_1_1HMMRegression_1a5e7c4dbe9cfacdf2746e92cd20aa2a66" kindref="member">LogLikelihood()</ref>), predict the most likely sequence of hidden states (with <ref refid="classmlpack_1_1hmm_1_1HMMRegression_1a039bc421248d00ffae03def696c0cfbd" kindref="member">Predict()</ref>), estimate the probabilities of each state for a sequence of observations (with <ref refid="classmlpack_1_1hmm_1_1HMMRegression_1a58cd0299f6951072a3ae4a10cf698853" kindref="member">Estimate()</ref>), or perform filtering or smoothing of observations. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="861">
        <label>HMM&lt; distribution::RegressionDistribution &gt;</label>
        <link refid="classmlpack_1_1hmm_1_1HMM"/>
        <childnode refid="862" relation="template-instance">
          <edgelabel>&lt; distribution::RegressionDistribution &gt;</edgelabel>
        </childnode>
      </node>
      <node id="860">
        <label>HMMRegression</label>
        <link refid="classmlpack_1_1hmm_1_1HMMRegression"/>
        <childnode refid="861" relation="public-inheritance">
        </childnode>
      </node>
      <node id="862">
        <label>HMM&lt; Distribution &gt;</label>
        <link refid="classmlpack_1_1hmm_1_1HMM"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="864">
        <label>HMM&lt; distribution::RegressionDistribution &gt;</label>
        <link refid="classmlpack_1_1hmm_1_1HMM"/>
        <childnode refid="865" relation="template-instance">
          <edgelabel>&lt; distribution::RegressionDistribution &gt;</edgelabel>
        </childnode>
      </node>
      <node id="863">
        <label>HMMRegression</label>
        <link refid="classmlpack_1_1hmm_1_1HMMRegression"/>
        <childnode refid="864" relation="public-inheritance">
        </childnode>
      </node>
      <node id="865">
        <label>HMM&lt; Distribution &gt;</label>
        <link refid="classmlpack_1_1hmm_1_1HMM"/>
      </node>
    </collaborationgraph>
    <location file="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" line="70" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/hmm/hmm_regression.hpp" bodystart="69" bodyend="326"/>
    <listofallmembers>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1ac2ed3d13de1ac440ceb369c31747c7d8" prot="private" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Backward</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1af0853e02f080f2c0eac23e18edafd67d" prot="protected" virt="non-virtual" ambiguityscope="HMM&lt; distribution::RegressionDistribution &gt;::"><scope>mlpack::hmm::HMMRegression</scope><name>Backward</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a78eda6bfb9e9462afa0fc85e32abe1af" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Dimensionality</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a787adc650f11b9430f6bd0b937bbe6b0" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Dimensionality</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1aa9f403ff2a03db91a1614d9e32c21783" prot="protected" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>emission</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1ae0939befd9369e7605f50a8f5489cebd" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Emission</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1ace6dae9e34d19c372294bef69e317f27" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Emission</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a2d90005d72558c5bcf7ce5f708e838da" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>EmissionLogLikelihood</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1aec5e2b525c29a039a482a5c4e9833a77" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>EmissionLogScaleFactor</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a58cd0299f6951072a3ae4a10cf698853" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Estimate</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a18a07e75d4611abb098bc01d3932bf20" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Estimate</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a73a4437336c8af18d51958a6abdd588d" prot="public" virt="non-virtual" ambiguityscope="HMM&lt; distribution::RegressionDistribution &gt;::"><scope>mlpack::hmm::HMMRegression</scope><name>Estimate</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1aba5d63e40a43faa5a2999bd47bed6c9f" prot="public" virt="non-virtual" ambiguityscope="HMM&lt; distribution::RegressionDistribution &gt;::"><scope>mlpack::hmm::HMMRegression</scope><name>Estimate</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a4fabd58fdb7df6bcf221302569e0c05c" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Filter</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1ab197c1fe906f9f2c81d7c0c8f1bb430a" prot="public" virt="non-virtual" ambiguityscope="HMM&lt; distribution::RegressionDistribution &gt;::"><scope>mlpack::hmm::HMMRegression</scope><name>Filter</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a7bb3a665fb61f8ae5c7d9cfd6c5a583e" prot="private" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Forward</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a1ec1e2d6393bbb69840a184ac35ac2ba" prot="protected" virt="non-virtual" ambiguityscope="HMM&lt; distribution::RegressionDistribution &gt;::"><scope>mlpack::hmm::HMMRegression</scope><name>Forward</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a945acce7d1f14e9e85352e67810ad028" prot="protected" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>ForwardAtT0</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1ae75539834ab1cc313fac3cef5c411efe" prot="protected" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>ForwardAtTn</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1aaada1e3c4a467d13ded6cfbb0d332898" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Generate</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a20f7ef2bfbbbfe4b01733e1e0104e17b" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>HMM</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1ac173a0c0e119519329525a892f8848e7" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>HMM</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a9a4d1ee17c46d307ed09f2e769d77421" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>HMMRegression</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a6322913bf387a716d9f4a7deeb14e969" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>HMMRegression</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a4c983e4a77757824d9ca4e1ada75dcf5" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Initial</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1ad0b8d2c553f50a26456393e194358df8" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Initial</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1ac604f3bed03d700b41501b6ed8b5b759" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>load</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1af1f16adb7b69040e9bc7711ca1fa1fe8" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>LogEstimate</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a5e7c4dbe9cfacdf2746e92cd20aa2a66" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>LogLikelihood</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1aa8f3f0b515cc08f9476e435bb2d13210" prot="public" virt="non-virtual" ambiguityscope="HMM&lt; distribution::RegressionDistribution &gt;::"><scope>mlpack::hmm::HMMRegression</scope><name>LogLikelihood</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a7c59285838016d2f540e6aad3f1d37f5" prot="public" virt="non-virtual" ambiguityscope="HMM&lt; distribution::RegressionDistribution &gt;::"><scope>mlpack::hmm::HMMRegression</scope><name>LogLikelihood</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a51246be9ab15d6af29cf3e60ed1c57c5" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>LogScaleFactor</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a46e0ed8f87152b5819d73057a19524fd" prot="protected" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>logTransition</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a039bc421248d00ffae03def696c0cfbd" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Predict</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a3b7ef0aafafd5d5a4300c07b110807a4" prot="public" virt="non-virtual" ambiguityscope="HMM&lt; distribution::RegressionDistribution &gt;::"><scope>mlpack::hmm::HMMRegression</scope><name>Predict</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1ad17c3ded534d1294e5fac2d2e16da3ba" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>save</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a5840753ea7eec9a4fd241704de54fa9d" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Smooth</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a0139a3d883c28d6f45e15097c08bbf41" prot="public" virt="non-virtual" ambiguityscope="HMM&lt; distribution::RegressionDistribution &gt;::"><scope>mlpack::hmm::HMMRegression</scope><name>Smooth</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a05c9a665bc4dc59664975faee1bd224d" prot="private" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>StackData</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a178da0ffb586e29f7be625d2b3dc5a02" prot="private" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>StackData</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a7b5af5c1a84c507cbaa7f999ea5a4fda" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Tolerance</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a3d9fac84af16250f5a3689692e8f2173" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Tolerance</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1ac4492ef2dc3b4ec02d4ce6ddb3a4171e" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Train</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMMRegression_1a9d049da300ddcf8b1c38a1e63c93bf2e" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Train</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a0b3a1148721ee3e77bad0b987ca3973d" prot="public" virt="non-virtual" ambiguityscope="HMM&lt; distribution::RegressionDistribution &gt;::"><scope>mlpack::hmm::HMMRegression</scope><name>Train</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a2cacf650f3d30e9da07be7a0aa2ded81" prot="public" virt="non-virtual" ambiguityscope="HMM&lt; distribution::RegressionDistribution &gt;::"><scope>mlpack::hmm::HMMRegression</scope><name>Train</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a103b830306d8c8d66a753f63e84ba5de" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Transition</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a08c5d391f5ea34e09497663673c5a16a" prot="public" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>Transition</name></member>
      <member refid="classmlpack_1_1hmm_1_1HMM_1a8ccc277a880972d6b9f7738f9cea5457" prot="protected" virt="non-virtual"><scope>mlpack::hmm::HMMRegression</scope><name>transitionProxy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
