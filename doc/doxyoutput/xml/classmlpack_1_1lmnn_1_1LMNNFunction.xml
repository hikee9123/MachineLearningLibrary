<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1lmnn_1_1LMNNFunction" kind="class" language="C++" prot="public">
    <compoundname>mlpack::lmnn::LMNNFunction</compoundname>
    <includes refid="lmnn__function_8hpp" local="no">lmnn_function.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename MetricType</type>
        <defval><ref refid="namespacemlpack_1_1metric_1a42614a1b47a4de6037e67742b94dd24d" kindref="member">metric::SquaredEuclideanDistance</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a2834d98e494a46299d586ea8ecbe09ab" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1lmnn_1_1Constraints" kindref="compound">Constraints</ref>&lt; MetricType &gt;</type>
        <definition>Constraints&lt;MetricType&gt; constraint</definition>
        <argsstring></argsstring>
        <name>constraint</name>
        <briefdescription>
<para><ref refid="classmlpack_1_1lmnn_1_1Constraints" kindref="compound">Constraints</ref> Object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="218" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ac9ea7e1cbaa17f9793c6ff48e2fe07ed" prot="private" static="no" mutable="no">
        <type>arma::mat</type>
        <definition>arma::mat dataset</definition>
        <argsstring></argsstring>
        <name>dataset</name>
        <briefdescription>
<para>data. This will be an alias until <ref refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a2697cc8b37d7bca7c055228382a9b208" kindref="member">Shuffle()</ref> is called. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="194" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ab780fb35313191135a04c2f4068de08a" prot="private" static="no" mutable="no">
        <type>arma::mat</type>
        <definition>arma::mat distance</definition>
        <argsstring></argsstring>
        <name>distance</name>
        <briefdescription>
<para>Cache distance. Used to avoid repetive calculation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="206" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ac5fc6384a4f40170388b2b94cd7e58b4" prot="private" static="no" mutable="no">
        <type>arma::cube</type>
        <definition>arma::cube evalOld</definition>
        <argsstring></argsstring>
        <name>evalOld</name>
        <briefdescription>
<para>Hold previous eval values for each datapoint. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="224" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ae5a83489083055e1cd699c16c64556d6" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool impBounds</definition>
        <argsstring></argsstring>
        <name>impBounds</name>
        <briefdescription>
<para>Flag for controlling use of bounds over impostors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="238" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a0d90657f96d7ab2660c37d96fa71c3b6" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; size_t &gt;</type>
        <definition>arma::Mat&lt;size_t&gt; impostors</definition>
        <argsstring></argsstring>
        <name>impostors</name>
        <briefdescription>
<para>Initial impostors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="204" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a146cdce9a82b3555d1d83744c74ee3f2" prot="private" static="no" mutable="no">
        <type>arma::mat</type>
        <definition>arma::mat initialPoint</definition>
        <argsstring></argsstring>
        <name>initialPoint</name>
        <briefdescription>
<para>Initial parameter point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="198" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a5e82034717bd8738680b6efc7165182d" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t iteration</definition>
        <argsstring></argsstring>
        <name>iteration</name>
        <briefdescription>
<para>Keep iterations count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="214" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a9389e4770ba454a2e14f870491495cb2" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t k</definition>
        <argsstring></argsstring>
        <name>k</name>
        <briefdescription>
<para>Number of target neighbors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="208" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ab894228d057b6613f600ba0d6ee7e68a" prot="private" static="no" mutable="no">
        <type>arma::Row&lt; size_t &gt;</type>
        <definition>arma::Row&lt;size_t&gt; labels</definition>
        <argsstring></argsstring>
        <name>labels</name>
        <briefdescription>
<para>labels. This will be an alias until <ref refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a2697cc8b37d7bca7c055228382a9b208" kindref="member">Shuffle()</ref> is called. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="196" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a072542fdd42647d7dea853c29981387a" prot="private" static="no" mutable="no">
        <type>arma::vec</type>
        <definition>arma::vec lastTransformationIndices</definition>
        <argsstring></argsstring>
        <name>lastTransformationIndices</name>
        <briefdescription>
<para>Holds points to transformation matrix mapping. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="234" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ad395a0046c51b1ec3da31c9e266087db" prot="private" static="no" mutable="no">
        <type>arma::mat</type>
        <definition>arma::mat maxImpNorm</definition>
        <argsstring></argsstring>
        <name>maxImpNorm</name>
        <briefdescription>
<para>Hold previous maximum norm of impostor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="226" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ad069c71a7bc99c59bce1c3f859e5d22b" prot="private" static="no" mutable="no">
        <type>MetricType</type>
        <definition>MetricType metric</definition>
        <argsstring></argsstring>
        <name>metric</name>
        <briefdescription>
<para>The instantiated metric. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="210" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1adf6f8b458c8ee34d157530f275ab5aba" prot="private" static="no" mutable="no">
        <type>arma::vec</type>
        <definition>arma::vec norm</definition>
        <argsstring></argsstring>
        <name>norm</name>
        <briefdescription>
<para>Holds the norm of each data point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="222" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1adcf3b2a628cd086ca5fd4747f0f73ddf" prot="private" static="no" mutable="no">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; oldTransformationCounts</definition>
        <argsstring></argsstring>
        <name>oldTransformationCounts</name>
        <briefdescription>
<para>Holds number of points which are using each transformation matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="232" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1abd309ae5bcc883bec72935877fb5fd98" prot="private" static="no" mutable="no">
        <type>std::vector&lt; arma::mat &gt;</type>
        <definition>std::vector&lt;arma::mat&gt; oldTransformationMatrices</definition>
        <argsstring></argsstring>
        <name>oldTransformationMatrices</name>
        <briefdescription>
<para>Holds previous transformation matrices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="230" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a313cd4bf2132a9c1df3ef66f3d4796f6" prot="private" static="no" mutable="no">
        <type>arma::mat</type>
        <definition>arma::mat pCij</definition>
        <argsstring></argsstring>
        <name>pCij</name>
        <briefdescription>
<para>Holds pre-calculated cij. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="220" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a6e5c35831250f1862988430168f75f37" prot="private" static="no" mutable="no">
        <type>arma::uvec</type>
        <definition>arma::uvec points</definition>
        <argsstring></argsstring>
        <name>points</name>
        <briefdescription>
<para>Used for storing points to re-calculate impostors for. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="236" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1aa1e1a65ba5db157ef93b416260dda43d" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t range</definition>
        <argsstring></argsstring>
        <name>range</name>
        <briefdescription>
<para>Range after which impostors need to be recalculated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="216" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a8e8f340682893ac20981cfbfb76372b8" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double regularization</definition>
        <argsstring></argsstring>
        <name>regularization</name>
        <briefdescription>
<para>Regularization value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="212" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a9df0f9d8836cc412c0503d7320292b1e" prot="private" static="no" mutable="no">
        <type>arma::Mat&lt; size_t &gt;</type>
        <definition>arma::Mat&lt;size_t&gt; targetNeighbors</definition>
        <argsstring></argsstring>
        <name>targetNeighbors</name>
        <briefdescription>
<para>Store target neighbors of data points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="202" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a12823d23a1602a46d3f3b5534ed12929" prot="private" static="no" mutable="no">
        <type>arma::mat</type>
        <definition>arma::mat transformationOld</definition>
        <argsstring></argsstring>
        <name>transformationOld</name>
        <briefdescription>
<para>Holds previous transformation matrix. Used for L-BFGS like optimizer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="228" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1lmnn_1_1LMNNFunction_1af1742894fce1f441507badcf65606aba" prot="private" static="no" mutable="no">
        <type>arma::mat</type>
        <definition>arma::mat transformedDataset</definition>
        <argsstring></argsstring>
        <name>transformedDataset</name>
        <briefdescription>
<para>Store transformed dataset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="200" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ad5d0ec2e3f5998fce48a99a212437c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LMNNFunction</definition>
        <argsstring>(const arma::mat &amp;dataset, const arma::Row&lt; size_t &gt; &amp;labels, size_t k, double regularization, size_t range, MetricType metric=MetricType())</argsstring>
        <name>LMNNFunction</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>dataset</declname>
        </param>
        <param>
          <type>const arma::Row&lt; size_t &gt; &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>double</type>
          <declname>regularization</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>range</declname>
        </param>
        <param>
          <type>MetricType</type>
          <declname>metric</declname>
          <defval>MetricType()</defval>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="classmlpack_1_1lmnn_1_1LMNNFunction" kindref="compound">LMNNFunction</ref> class. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dataset</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dataset. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>Input dataset labels. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of target neighbors to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regularization</parametername>
</parameternamelist>
<parameterdescription>
<para>Regularization value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Range after which impostors need to be recalculated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metric</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of metric used for computation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1aff320b9a86b77a150e630c01d5888273" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::mat &amp;</type>
        <definition>const arma::mat&amp; Dataset</definition>
        <argsstring>() const</argsstring>
        <name>Dataset</name>
        <briefdescription>
<para>Return the dataset passed into the constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="175" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a984a5518a600950a14782757aea93b59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Evaluate</definition>
        <argsstring>(const arma::mat &amp;transformation)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>transformation</declname>
        </param>
        <briefdescription>
<para>Evaluate the <ref refid="classmlpack_1_1lmnn_1_1LMNN" kindref="compound">LMNN</ref> function for the given transformation matrix. </para>        </briefdescription>
        <detaileddescription>
<para>This is the non-separable implementation, where the objective function is not decomposed into the sum of several objective functions.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation</parametername>
</parameternamelist>
<parameterdescription>
<para>Transformation matrix of Mahalanobis distance. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a3ec40724bffda10e022fdaf072fae3ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Evaluate</definition>
        <argsstring>(const arma::mat &amp;transformation, const size_t begin, const size_t batchSize=1)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>transformation</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>batchSize</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Evaluate the <ref refid="classmlpack_1_1lmnn_1_1LMNN" kindref="compound">LMNN</ref> objective function for the given transformation matrix on the given batch size from a given inital point of the dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This is the separable implementation, where the objective function is decomposed into the sum of many objective functions, and here, only one of those constituent objective functions is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation</parametername>
</parameternamelist>
<parameterdescription>
<para>Transformation matrix of Mahalanobis distance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the initial point to use for objective function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points to use for objective function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a18208d5789919b6d12eaaffe007b7dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GradType</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double EvaluateWithGradient</definition>
        <argsstring>(const arma::mat &amp;transformation, GradType &amp;gradient)</argsstring>
        <name>EvaluateWithGradient</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>transformation</declname>
        </param>
        <param>
          <type>GradType &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Evaluate the <ref refid="classmlpack_1_1lmnn_1_1LMNN" kindref="compound">LMNN</ref> objective function together with gradient for the given transformation matrix. </para>        </briefdescription>
        <detaileddescription>
<para>This is the non-separable implementation, where the objective function is not decomposed into the sum of several objective functions.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GradType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the gradient out-param. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation</parametername>
</parameternamelist>
<parameterdescription>
<para>Transformation matrix of Mahalanobis distance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to store the calculated gradient in. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a71970d9b9013a39efd08c1054c077557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GradType</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double EvaluateWithGradient</definition>
        <argsstring>(const arma::mat &amp;transformation, const size_t begin, GradType &amp;gradient, const size_t batchSize=1)</argsstring>
        <name>EvaluateWithGradient</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>transformation</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>GradType &amp;</type>
          <declname>gradient</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>batchSize</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Evaluate the <ref refid="classmlpack_1_1lmnn_1_1LMNN" kindref="compound">LMNN</ref> objective function together with gradient for the given transformation matrix on the given batch size, from a given initial point of the dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This is the separable implementation, where the objective function is decomposed into the sum of many objective functions, and here, only one of those constituent objective functions is returned. The type of the gradient parameter is a template argument to allow the computation of a sparse gradient.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GradType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the gradient out-param. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation</parametername>
</parameternamelist>
<parameterdescription>
<para>Transformation matrix of Mahalanobis distance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the initial point to use for objective function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to store the calculated gradient in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points to use for objective function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ac3e9aa612cb56d0d93f3259f4a8122bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const arma::mat &amp;</type>
        <definition>const arma::mat&amp; GetInitialPoint</definition>
        <argsstring>() const</argsstring>
        <name>GetInitialPoint</name>
        <briefdescription>
<para>Return the initial point for the optimization. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="166" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a8ab4bb24874b8bd6fee743b169f1d059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GradType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gradient</definition>
        <argsstring>(const arma::mat &amp;transformation, GradType &amp;gradient)</argsstring>
        <name>Gradient</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>transformation</declname>
        </param>
        <param>
          <type>GradType &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Evaluate the gradient of the <ref refid="classmlpack_1_1lmnn_1_1LMNN" kindref="compound">LMNN</ref> function for the given transformation matrix. </para>        </briefdescription>
        <detaileddescription>
<para>This is the non-separable implementation, where the objective function is not decomposed into the sum of several objective functions.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GradType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the gradient out-param. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation</parametername>
</parameternamelist>
<parameterdescription>
<para>Transformation matrix of Mahalanobis distance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to store the calculated gradient in. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ac15fcb34b662aa35bb6fb4a089ae1de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename GradType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Gradient</definition>
        <argsstring>(const arma::mat &amp;transformation, const size_t begin, GradType &amp;gradient, const size_t batchSize=1)</argsstring>
        <name>Gradient</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>transformation</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>GradType &amp;</type>
          <declname>gradient</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>batchSize</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Evaluate the gradient of the <ref refid="classmlpack_1_1lmnn_1_1LMNN" kindref="compound">LMNN</ref> function for the given transformation matrix on the given batch size, from a given initial point of the dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This is the separable implementation, where the objective function is decomposed into the sum of many objective functions, and here, only one of those constituent objective functions is returned. The type of the gradient parameter is a template argument to allow the computation of a sparse gradient.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>GradType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the gradient out-param. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transformation</parametername>
</parameternamelist>
<parameterdescription>
<para>Transformation matrix of Mahalanobis distance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the initial point to use for objective function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to store the calculated gradient in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of points to use for objective function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ab749ea30c4c3d750ef3a619f32dc3e75" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const size_t &amp;</type>
        <definition>const size_t&amp; K</definition>
        <argsstring>() const</argsstring>
        <name>K</name>
        <briefdescription>
<para>Access the value of k. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="183" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1af80ea69c69c6463691509f509f3bff05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t &amp;</type>
        <definition>size_t&amp; K</definition>
        <argsstring>()</argsstring>
        <name>K</name>
        <briefdescription>
<para>Modify the value of k. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="185" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a1fa76af34a6e3ea927b307f0c318ee4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t NumFunctions</definition>
        <argsstring>() const</argsstring>
        <name>NumFunctions</name>
        <briefdescription>
<para>Get the number of functions the objective function can be decomposed into. </para>        </briefdescription>
        <detaileddescription>
<para>This is just the number of points in the dataset. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="172" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a8a26c8724520d749b483fe8dcfe7416b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const size_t &amp;</type>
        <definition>const size_t&amp; Range</definition>
        <argsstring>() const</argsstring>
        <name>Range</name>
        <briefdescription>
<para>Access the value of range. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="188" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ab2cebd1b43cb779465e7323255112bb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t &amp;</type>
        <definition>size_t&amp; Range</definition>
        <argsstring>()</argsstring>
        <name>Range</name>
        <briefdescription>
<para>Modify the value of k. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="190" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1ad3a3c8f810d08e2e922b3c30e29b7f11" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const double &amp;</type>
        <definition>const double&amp; Regularization</definition>
        <argsstring>() const</argsstring>
        <name>Regularization</name>
        <briefdescription>
<para>Access the regularization value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="178" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a9c741ac26a2c0ee8bb0fbe52534dd544" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; Regularization</definition>
        <argsstring>()</argsstring>
        <name>Regularization</name>
        <briefdescription>
<para>Modify the regularization value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="180" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a2697cc8b37d7bca7c055228382a9b208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Shuffle</definition>
        <argsstring>()</argsstring>
        <name>Shuffle</name>
        <briefdescription>
<para>Shuffle the points in the dataset. </para>        </briefdescription>
        <detaileddescription>
<para>This may be used by optimizers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="70" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a34e63a562bf0ab88dc56dcd88694ef2c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Precalculate</definition>
        <argsstring>()</argsstring>
        <name>Precalculate</name>
        <briefdescription>
<para>Precalculate the gradient part due to target neighbors and stores the result as a matrix. </para>        </briefdescription>
        <detaileddescription>
<para>Used for L-BFGS like optimizers which does not uses batches. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a1a05ecac37194c3337755c675f867134" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void TransDiff</definition>
        <argsstring>(std::map&lt; size_t, double &gt; &amp;transformationDiffs, const arma::mat &amp;transformation, const size_t begin, const size_t batchSize)</argsstring>
        <name>TransDiff</name>
        <param>
          <type>std::map&lt; size_t, double &gt; &amp;</type>
          <declname>transformationDiffs</declname>
        </param>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>transformation</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>batchSize</declname>
        </param>
        <briefdescription>
<para>Calculate norm of change in transformation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1lmnn_1_1LMNNFunction_1a186903d68ca531a5c7a6ab668c155ca4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void UpdateCache</definition>
        <argsstring>(const arma::mat &amp;transformation, const size_t begin, const size_t batchSize)</argsstring>
        <name>UpdateCache</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>transformation</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>batchSize</declname>
        </param>
        <briefdescription>
<para>Update cache transformation matrices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="246" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The Large Margin Nearest Neighbors function. </para>    </briefdescription>
    <detaileddescription>
<para>The actual function is</para><para><formula id="164">$ \epsilon(M) = \sum_{ij}\eta_{ij}|| L x_i - L x_j ||^2 + c\sum_{ijl}\eta_{ij}(1-y_{il})[1 + || L x_i - L x_j ||^2 - || L x_i - L x_l ||^2)]_{+} $</formula></para><para>where x_n represents a point and A is the current scaling matrix.</para><para>This class is more flexible than the original paper, allowing an arbitrary metric function to be used in place of || A x_i - A x_j ||^2, meaning that the squared Euclidean distance is not the only allowed metric for <ref refid="classmlpack_1_1lmnn_1_1LMNN" kindref="compound">LMNN</ref>. However, that is probably the best way to use this class.</para><para>In addition to the standard <ref refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a984a5518a600950a14782757aea93b59" kindref="member">Evaluate()</ref> and <ref refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a8ab4bb24874b8bd6fee743b169f1d059" kindref="member">Gradient()</ref> functions which mlpack optimizers use, overloads of <ref refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a984a5518a600950a14782757aea93b59" kindref="member">Evaluate()</ref> and <ref refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a8ab4bb24874b8bd6fee743b169f1d059" kindref="member">Gradient()</ref> are given which only operate on one point in the dataset. This is useful for optimizers like stochastic gradient descent (see ens::SGD). </para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" line="47" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/lmnn/lmnn_function.hpp" bodystart="46" bodyend="254"/>
    <listofallmembers>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a2834d98e494a46299d586ea8ecbe09ab" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>constraint</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ac9ea7e1cbaa17f9793c6ff48e2fe07ed" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>dataset</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1aff320b9a86b77a150e630c01d5888273" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>Dataset</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ab780fb35313191135a04c2f4068de08a" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>distance</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ac5fc6384a4f40170388b2b94cd7e58b4" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>evalOld</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a984a5518a600950a14782757aea93b59" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a3ec40724bffda10e022fdaf072fae3ac" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a18208d5789919b6d12eaaffe007b7dcf" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>EvaluateWithGradient</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a71970d9b9013a39efd08c1054c077557" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>EvaluateWithGradient</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ac3e9aa612cb56d0d93f3259f4a8122bb" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>GetInitialPoint</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a8ab4bb24874b8bd6fee743b169f1d059" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>Gradient</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ac15fcb34b662aa35bb6fb4a089ae1de4" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>Gradient</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ae5a83489083055e1cd699c16c64556d6" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>impBounds</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a0d90657f96d7ab2660c37d96fa71c3b6" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>impostors</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a146cdce9a82b3555d1d83744c74ee3f2" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>initialPoint</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a5e82034717bd8738680b6efc7165182d" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>iteration</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ab749ea30c4c3d750ef3a619f32dc3e75" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>K</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1af80ea69c69c6463691509f509f3bff05" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>K</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a9389e4770ba454a2e14f870491495cb2" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>k</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ab894228d057b6613f600ba0d6ee7e68a" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>labels</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a072542fdd42647d7dea853c29981387a" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>lastTransformationIndices</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ad5d0ec2e3f5998fce48a99a212437c7b" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>LMNNFunction</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ad395a0046c51b1ec3da31c9e266087db" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>maxImpNorm</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ad069c71a7bc99c59bce1c3f859e5d22b" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>metric</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1adf6f8b458c8ee34d157530f275ab5aba" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>norm</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a1fa76af34a6e3ea927b307f0c318ee4b" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>NumFunctions</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1adcf3b2a628cd086ca5fd4747f0f73ddf" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>oldTransformationCounts</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1abd309ae5bcc883bec72935877fb5fd98" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>oldTransformationMatrices</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a313cd4bf2132a9c1df3ef66f3d4796f6" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>pCij</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a6e5c35831250f1862988430168f75f37" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>points</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a34e63a562bf0ab88dc56dcd88694ef2c" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>Precalculate</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a8a26c8724520d749b483fe8dcfe7416b" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>Range</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ab2cebd1b43cb779465e7323255112bb4" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>Range</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1aa1e1a65ba5db157ef93b416260dda43d" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>range</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1ad3a3c8f810d08e2e922b3c30e29b7f11" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>Regularization</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a9c741ac26a2c0ee8bb0fbe52534dd544" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>Regularization</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a8e8f340682893ac20981cfbfb76372b8" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>regularization</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a2697cc8b37d7bca7c055228382a9b208" prot="public" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>Shuffle</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a9df0f9d8836cc412c0503d7320292b1e" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>targetNeighbors</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a1a05ecac37194c3337755c675f867134" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>TransDiff</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a12823d23a1602a46d3f3b5534ed12929" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>transformationOld</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1af1742894fce1f441507badcf65606aba" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>transformedDataset</name></member>
      <member refid="classmlpack_1_1lmnn_1_1LMNNFunction_1a186903d68ca531a5c7a6ab668c155ca4" prot="private" virt="non-virtual"><scope>mlpack::lmnn::LMNNFunction</scope><name>UpdateCache</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
