<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1kde_1_1KernelNormalizer" kind="class" language="C++" prot="public">
    <compoundname>mlpack::kde::KernelNormalizer</compoundname>
    <includes refid="kde__model_8hpp" local="no">kde_model.hpp</includes>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1kde_1_1KernelNormalizer_1ada604a5f03ec2fe77cd1fc3aa5fbab2d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>HAS_MEM_FUNC</definition>
        <argsstring>(Normalizer, HasNormalizer)</argsstring>
        <name>HAS_MEM_FUNC</name>
        <param>
          <type>Normalizer</type>
        </param>
        <param>
          <type>HasNormalizer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/kde/kde_model.hpp" line="38" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmlpack_1_1kde_1_1KernelNormalizer_1a717e03847e745cbb17dbd6bef4430a51" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KernelType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void ApplyNormalizer</definition>
        <argsstring>(KernelType &amp;, const size_t, arma::vec &amp;, const typename std::enable_if&lt; !HasNormalizer&lt; KernelType, double(KernelType::*)(size_t)&gt;::value &gt;::type *=0)</argsstring>
        <name>ApplyNormalizer</name>
        <param>
          <type>KernelType &amp;</type>
        </param>
        <param>
          <type>const size_t</type>
        </param>
        <param>
          <type>arma::vec &amp;</type>
        </param>
        <param>
          <type>const typename std::enable_if&lt; !HasNormalizer&lt; KernelType, double(KernelType::*)(size_t)&gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Normalization not needed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/kde/kde_model.hpp" line="43" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/kde/kde_model.hpp" bodystart="43" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1kde_1_1KernelNormalizer_1ab3f3e0c4ab1a1242d78d1162890ae3a1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KernelType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void ApplyNormalizer</definition>
        <argsstring>(KernelType &amp;kernel, const size_t dimension, arma::vec &amp;estimations, const typename std::enable_if&lt; HasNormalizer&lt; KernelType, double(KernelType::*)(size_t)&gt;::value &gt;::type *=0)</argsstring>
        <name>ApplyNormalizer</name>
        <param>
          <type>KernelType &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>dimension</declname>
        </param>
        <param>
          <type>arma::vec &amp;</type>
          <declname>estimations</declname>
        </param>
        <param>
          <type>const typename std::enable_if&lt; HasNormalizer&lt; KernelType, double(KernelType::*)(size_t)&gt;::value &gt;::type *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Normalize kernels that have normalizer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/methods/kde/kde_model.hpp" line="54" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/kde/kde_model.hpp" bodystart="54" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classmlpack_1_1kde_1_1KernelNormalizer" kindref="compound">KernelNormalizer</ref> holds a set of methods to normalize estimations applying in each case the appropiate kernel normalizer function. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/methods/kde/kde_model.hpp" line="35" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/methods/kde/kde_model.hpp" bodystart="34" bodyend="64"/>
    <listofallmembers>
      <member refid="classmlpack_1_1kde_1_1KernelNormalizer_1a717e03847e745cbb17dbd6bef4430a51" prot="public" virt="non-virtual"><scope>mlpack::kde::KernelNormalizer</scope><name>ApplyNormalizer</name></member>
      <member refid="classmlpack_1_1kde_1_1KernelNormalizer_1ab3f3e0c4ab1a1242d78d1162890ae3a1" prot="public" virt="non-virtual"><scope>mlpack::kde::KernelNormalizer</scope><name>ApplyNormalizer</name></member>
      <member refid="classmlpack_1_1kde_1_1KernelNormalizer_1ada604a5f03ec2fe77cd1fc3aa5fbab2d" prot="private" virt="non-virtual"><scope>mlpack::kde::KernelNormalizer</scope><name>HAS_MEM_FUNC</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
