<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classmlpack_1_1hpt_1_1CVFunction" kind="class" language="C++" prot="public">
    <compoundname>mlpack::hpt::CVFunction</compoundname>
    <includes refid="cv__function_8hpp" local="no">cv_function.hpp</includes>
    <innerclass refid="structmlpack_1_1hpt_1_1CVFunction_1_1UseBoundArg" prot="private">mlpack::hpt::CVFunction::UseBoundArg</innerclass>
    <templateparamlist>
      <param>
        <type>typename CVType</type>
      </param>
      <param>
        <type>typename MLAlgorithm</type>
      </param>
      <param>
        <type>size_t</type>
        <declname>TotalArgs</declname>
        <defname>TotalArgs</defname>
      </param>
      <param>
        <type>typename...</type>
        <declname>BoundArgs</declname>
        <defname>BoundArgs</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classmlpack_1_1hpt_1_1CVFunction_1a1c4ba62bd3627ef3d0d6653d549829c7" prot="private" static="no">
        <type>std::tuple&lt; BoundArgs... &gt;</type>
        <definition>using BoundArgsTupleType =  std::tuple&lt;BoundArgs...&gt;</definition>
        <argsstring></argsstring>
        <name>BoundArgsTupleType</name>
        <briefdescription>
<para>The type of tuples of BoundArgs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="91" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1CVFunction_1a62128e2ee85ae43dcbfbffcd0c015260" prot="private" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t BoundArgsAmount</definition>
        <argsstring></argsstring>
        <name>BoundArgsAmount</name>
        <initializer>=
      std::tuple_size&lt;BoundArgsTupleType&gt;::value</initializer>
        <briefdescription>
<para>The amount of bound arguments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="94" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1CVFunction_1a402c70071c3b723abda0da2695067ab2" prot="private" static="no" mutable="no">
        <type>MLAlgorithm</type>
        <definition>MLAlgorithm bestModel</definition>
        <argsstring></argsstring>
        <name>bestModel</name>
        <briefdescription>
<para>The best model so far. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="120" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1CVFunction_1a9b0cf37d7f1f7d9e46a4aeafcc3f907f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double bestObjective</definition>
        <argsstring></argsstring>
        <name>bestObjective</name>
        <briefdescription>
<para>The best objective so far. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="117" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1CVFunction_1abb6c0218332e25c18aa86efc21036909" prot="private" static="no" mutable="no">
        <type>BoundArgsTupleType</type>
        <definition>BoundArgsTupleType boundArgs</definition>
        <argsstring></argsstring>
        <name>boundArgs</name>
        <briefdescription>
<para>The bound arguments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="114" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1CVFunction_1af5533e82325e000cbd64c95fb2f293d7" prot="private" static="no" mutable="no">
        <type>CVType &amp;</type>
        <definition>CVType&amp; cv</definition>
        <argsstring></argsstring>
        <name>cv</name>
        <briefdescription>
<para>A reference to the cross-validation object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="108" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1CVFunction_1abe6544bf5c883438f244fd499fd08861" prot="private" static="no" mutable="no">
        <type><ref refid="classmlpack_1_1data_1_1DatasetMapper" kindref="compound">data::DatasetMapper</ref>&lt; <ref refid="classmlpack_1_1data_1_1IncrementPolicy" kindref="compound">data::IncrementPolicy</ref>, double &gt;</type>
        <definition>data::DatasetMapper&lt;data::IncrementPolicy, double&gt; datasetInfo</definition>
        <argsstring></argsstring>
        <name>datasetInfo</name>
        <briefdescription>
<para>Information on each argument to be optimized. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="111" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1CVFunction_1ad5c9c5c10dce1b4ba9983bc2c06ea85f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double minDelta</definition>
        <argsstring></argsstring>
        <name>minDelta</name>
        <briefdescription>
<para>Minimum absolute increase of arguments for calculation of gradient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="126" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmlpack_1_1hpt_1_1CVFunction_1a12ec7d15fd4c4d70ba17ea500b9c4049" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double relativeDelta</definition>
        <argsstring></argsstring>
        <name>relativeDelta</name>
        <briefdescription>
<para>Relative increase of arguments for calculation of gradient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="123" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1CVFunction_1a50a025d8898076d3acaca4e20e73c710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CVFunction</definition>
        <argsstring>(CVType &amp;cv, data::DatasetMapper&lt; data::IncrementPolicy, double &gt; &amp;datasetInfo, const double relativeDelta, const double minDelta, const BoundArgs &amp;... args)</argsstring>
        <name>CVFunction</name>
        <param>
          <type>CVType &amp;</type>
          <declname>cv</declname>
        </param>
        <param>
          <type><ref refid="classmlpack_1_1data_1_1DatasetMapper" kindref="compound">data::DatasetMapper</ref>&lt; <ref refid="classmlpack_1_1data_1_1IncrementPolicy" kindref="compound">data::IncrementPolicy</ref>, double &gt; &amp;</type>
          <declname>datasetInfo</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>relativeDelta</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>minDelta</declname>
        </param>
        <param>
          <type>const BoundArgs &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Initialize a <ref refid="classmlpack_1_1hpt_1_1CVFunction" kindref="compound">CVFunction</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cv</parametername>
</parameternamelist>
<parameterdescription>
<para>A cross-validation object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>datasetInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Information on each parameter (categorical/numeric). Contains mappings from optimizer-passed size_t indices to double values that should be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>relativeDelta</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative increase of arguments for calculation of partial derivatives (by the definition). The exact increase for some particular argument is equal to the absolute value of the argument multiplied by the relative increase (see also the documentation for the minDelta parameter). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minDelta</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum increase of arguments for calculation of partial derivatives (by the definition). This value is going to be used when it is greater than the increase calculated with the rules described in the documentation for the relativeDelta parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments that should be passed into the Evaluate method of the CVType object but are not going to be passed into the Evaluate method of this object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1CVFunction_1a0c2bf016556a87be5f6f9e86f6b37dd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>MLAlgorithm &amp;</type>
        <definition>MLAlgorithm&amp; BestModel</definition>
        <argsstring>()</argsstring>
        <name>BestModel</name>
        <briefdescription>
<para>Access and modify the best model so far. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="87" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" bodystart="87" bodyend="87"/>
        <references refid="classmlpack_1_1hpt_1_1CVFunction_1a1ca0efaedbc2e7e7542c89901cdcf2ee">CVFunction&lt; CVType, MLAlgorithm, TotalArgs, BoundArgs &gt;::Evaluate</references>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1CVFunction_1a1ca0efaedbc2e7e7542c89901cdcf2ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Evaluate</definition>
        <argsstring>(const arma::mat &amp;parameters)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Run cross-validation with the bound and passed parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments (rather than the bound arguments) that should be passed into the Evaluate method of the CVType object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="74" column="1"/>
        <referencedby refid="classmlpack_1_1hpt_1_1CVFunction_1a0c2bf016556a87be5f6f9e86f6b37dd9" compoundref="cv__function_8hpp" startline="87" endline="87">CVFunction&lt; CVType, MLAlgorithm, TotalArgs, BoundArgs &gt;::BestModel</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1CVFunction_1aaf078432f3f27bda4dd66a2ad0e76886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gradient</definition>
        <argsstring>(const arma::mat &amp;parameters, arma::mat &amp;gradient)</argsstring>
        <name>Gradient</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>arma::mat &amp;</type>
          <declname>gradient</declname>
        </param>
        <briefdescription>
<para>Evaluate numerically the gradient of the <ref refid="classmlpack_1_1hpt_1_1CVFunction" kindref="compound">CVFunction</ref> with the given parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments (rather than the bound arguments) that should be passed into the Evaluate method of the CVType object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gradient</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to output the gradient into. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="84" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1CVFunction_1ab9d07023b1df17ecd4cc09e8bc48ae85" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>BoundArgIndex</declname>
            <defname>BoundArgIndex</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>ParamIndex</declname>
            <defname>ParamIndex</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Evaluate</definition>
        <argsstring>(const arma::mat &amp;parameters, const Args &amp;... args)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Collect all arguments and run cross-validation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1CVFunction_1acc489f36277c9f70bb9046ba2d0de0ee" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>BoundArgIndex</declname>
            <defname>BoundArgIndex</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>ParamIndex</declname>
            <defname>ParamIndex</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;BoundArgIndex + ParamIndex == TotalArgs&gt;::type</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double Evaluate</definition>
        <argsstring>(const arma::mat &amp;parameters, const Args &amp;... args)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Run cross-validation with the collected arguments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1CVFunction_1a3ebc657e8eb2f5e29cc70615537e910f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>BoundArgIndex</declname>
            <defname>BoundArgIndex</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>ParamIndex</declname>
            <defname>ParamIndex</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;               UseBoundArg&lt;BoundArgIndex, ParamIndex&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double PutNextArg</definition>
        <argsstring>(const arma::mat &amp;parameters, const Args &amp;... args)</argsstring>
        <name>PutNextArg</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Put the bound argument (at the BoundArgIndex position) as the next one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmlpack_1_1hpt_1_1CVFunction_1aa3d0bc47acc09d86a8957f407d2cee32" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>BoundArgIndex</declname>
            <defname>BoundArgIndex</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>ParamIndex</declname>
            <defname>ParamIndex</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;               !UseBoundArg&lt;BoundArgIndex, ParamIndex&gt;::value&gt;::type</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double PutNextArg</definition>
        <argsstring>(const arma::mat &amp;parameters, const Args &amp;... args)</argsstring>
        <name>PutNextArg</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Put the element (at the ParamIndex position) of the parameters as the next one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="169" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This wrapper serves for adapting the interface of the cross-validation classes to the one that can be utilized by the mlpack optimizers. </para>    </briefdescription>
    <detaileddescription>
<para>This class is not supposed to be used directly by users. To tune hyper-parameters see <ref refid="classmlpack_1_1hpt_1_1HyperParameterTuner" kindref="compound">HyperParameterTuner</ref>.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CVType</parametername>
</parameternamelist>
<parameterdescription>
<para>A cross-validation strategy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MLAlgorithm</parametername>
</parameternamelist>
<parameterdescription>
<para>The machine learning algorithm used in cross-validation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TotalArgs</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of arguments that are supposed to be passed to the Evaluate method of a CVType object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BoundArgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Types of arguments (wrapped into the BoundArg struct) that should be passed into the Evaluate method of a CVType object but are not going to be passed into the Evaluate method of a <ref refid="classmlpack_1_1hpt_1_1CVFunction" kindref="compound">CVFunction</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" line="40" column="1" bodyfile="/home/aakash/mlpack/src/mlpack/core/hpt/cv_function.hpp" bodystart="39" bodyend="170"/>
    <listofallmembers>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1a402c70071c3b723abda0da2695067ab2" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>bestModel</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1a0c2bf016556a87be5f6f9e86f6b37dd9" prot="public" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>BestModel</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1a9b0cf37d7f1f7d9e46a4aeafcc3f907f" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>bestObjective</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1abb6c0218332e25c18aa86efc21036909" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>boundArgs</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1a62128e2ee85ae43dcbfbffcd0c015260" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>BoundArgsAmount</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1a1c4ba62bd3627ef3d0d6653d549829c7" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>BoundArgsTupleType</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1af5533e82325e000cbd64c95fb2f293d7" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>cv</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1a50a025d8898076d3acaca4e20e73c710" prot="public" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>CVFunction</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1abe6544bf5c883438f244fd499fd08861" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>datasetInfo</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1a1ca0efaedbc2e7e7542c89901cdcf2ee" prot="public" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1ab9d07023b1df17ecd4cc09e8bc48ae85" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1acc489f36277c9f70bb9046ba2d0de0ee" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>Evaluate</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1aaf078432f3f27bda4dd66a2ad0e76886" prot="public" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>Gradient</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1ad5c9c5c10dce1b4ba9983bc2c06ea85f" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>minDelta</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1a3ebc657e8eb2f5e29cc70615537e910f" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>PutNextArg</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1aa3d0bc47acc09d86a8957f407d2cee32" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>PutNextArg</name></member>
      <member refid="classmlpack_1_1hpt_1_1CVFunction_1a12ec7d15fd4c4d70ba17ea500b9c4049" prot="private" virt="non-virtual"><scope>mlpack::hpt::CVFunction</scope><name>relativeDelta</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
