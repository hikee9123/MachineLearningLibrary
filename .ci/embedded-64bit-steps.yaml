steps:
# Checkout repository
- checkout: self
  clean: true
  fetchDepth: 1

# Set python version
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.7'

# Install build dependencies
- script: |
    git clone --depth 1 https://github.com/mlpack/jenkins-conf.git conf

    sudo apt-get update

    sudo apt-get install -y --allow-unauthenticated g++ xz-utils g++-aarch64-linux-gnu gcc-aarch64-linux-gnu gfortran-aarch64-linux-gnu

    if [ "$(binding)" == "python" ]; then
      export PYBIN=$(which python)
      $PYBIN -m pip install --upgrade pip
      $PYBIN -m pip install --upgrade --ignore-installed setuptools cython pandas
    fi

    if [ "a$(julia.version)" != "a" ]; then
      wget https://julialang-s3.julialang.org/bin/linux/x64/1.3/julia-1.3.0-linux-x86_64.tar.gz
      sudo tar -C /opt/ -xvpf julia-1.3.0-linux-x86_64.tar.gz
    fi

    echo "Download and build boost as a static lbrary"
        wget --no-check-certificate \
        "https://dl.bintray.com/boostorg/release/1.75.0/source/boost_1_75_0.tar.gz" && \
        tar xvzf boost_1_75_0.tar.gz && \
        rm -f boost_1_75_0.tar.gz && \

    echo "Download and build OpenBLAS as a static library"
    wget --no-check-certificate \
      "https://github.com/xianyi/OpenBLAS/archive/v0.3.13.tar.gz" && \
       tar xvzf v0.3.13.tar.gz && \
       rm -f v0.3.13.tar.gz && \
       cd OpenBLAS-0.3.13 && \
       make TARGET=ARMV8 BINARY=64 HOSTCC=gcc CC=aarch64-linux-gnu-gcc FC=aarch64-linux-gnu-gfortran NO_SHARED=1 &&\
       cd ../ &&\
     
    # Install armadillo.
    curl https://data.kurg.org/armadillo-8.400.0.tar.xz | tar -xvJ

    # Install cereal.
    wget https://github.com/USCiLab/cereal/archive/v1.3.0.tar.gz
    tar -xvzpf v1.3.0.tar.gz # Unpack into cereal-1.3.0/.
    ls -la
    pwd
  displayName: 'Install Build Dependencies'

# Configure mlpack (CMake)
- script: |
    unset BOOST_ROOT
    mkdir build && cd build
    if [ "$(binding)" == "go" ]; then
      export GOPATH=$PWD/src/mlpack/bindings/go
      go get -u -t gonum.org/v1/gonum/...
    fi
    cmake $(CMakeArgs) -DPYTHON_EXECUTABLE=`which python` ..
  displayName: 'CMake'

# Build mlpack
- script: cd build && make
  condition: eq(variables['CMakeArgs'], '-DDEBUG=ON -DPROFILE=OFF -DBUILD_PYTHON_BINDINGS=OFF -DBUILD_JULIA_BINDINGS=OFF -DBUILD_GO_BINDINGS=OFF -DBUILD_R_BINDINGS=OFF')
  displayName: 'Build'

# Build mlpack
- script: cd build && make -j2
  condition: ne(variables['CMakeArgs'], '-DDEBUG=ON -DPROFILE=OFF -DBUILD_PYTHON_BINDINGS=OFF -DBUILD_JULIA_BINDINGS=OFF -DBUILD_GO_BINDINGS=OFF -DBUILD_R_BINDINGS=OFF')
  displayName: 'Build'

# Run tests via ctest.
- script: cd build && CTEST_OUTPUT_ON_FAILURE=1 ctest -T Test .
  displayName: 'Run tests via ctest'

# Publish test results to Azure Pipelines
- task: PublishTestResults@2
  inputs:
    testResultsFormat: cTest
    testResultsFiles: build/Testing/*/Test.xml
    failTaskOnFailedTests: true
  displayName: 'Publish tests'

# Publish build artifacts to Azure Pipelines
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'build/Testing/'
    artifactName: 'Tests'
  displayName: 'Publish artifacts test results'
